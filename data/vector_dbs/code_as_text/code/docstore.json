{"docstore/metadata": {"all_interval_source_code": {"doc_hash": "7601a8fda453aed592c66aad7fc52058eb0e6b39dc5d4be32ff52bedeb0beeea"}, "assign_source_code": {"doc_hash": "29a5cf8d3beff90b2bc2da48f02e771bfa5395c77ee3e5f7f125067a28d1e921"}, "aust_color_source_code": {"doc_hash": "c3f779eb9c58f0538045b4b15f6d00b8de5a3c773fbc1ee3df922e405bd74c7a"}, "bibd_source_code": {"doc_hash": "43f589e95a34396e90a6bdcf35ea6436643a6f0c622caafb1dc23203c0097d0f"}, "bus_scheduling_csplib_source_code": {"doc_hash": "b0e6dd350573cacdc96257931a6d0348f12ff78bbb9544c0ccc65570cc11ec03"}, "car_source_code": {"doc_hash": "14b722147e5df4f323e74192245104fe433442fbe887be641ef0eef98e327938"}, "carpet_cutting_source_code": {"doc_hash": "8d36c1a666bb86c80144d5bf9d3aed8418c8c07ec891c6657bfd62ab35dbb9a5"}, "cell_block_source_code": {"doc_hash": "adecb6c505bf9b277ae629e30b66d69f662759fc3fca2fddf57b7d63ebbfca47"}, "clique_source_code": {"doc_hash": "c76ed86cde7ed8ed6e9843d16a54b33a7b2379387e1f70637181f1897b0ca13c"}, "cluster_source_code": {"doc_hash": "8c814cefa84f8793d86da299e689b23a33e44cc26bfc06ef5d76d95f8a1af618"}, "compatible_assignment_source_code": {"doc_hash": "7ac4269af6c77df3c3d16adc0ddc281c544e441bcec246f32f7c3df10cb0fcc2"}, "constrained_connected_source_code": {"doc_hash": "b90c813be17e3df06f90ffba05aba6ab06c04815dfad57f2d339ba59f208063f"}, "crazy_sets_source_code": {"doc_hash": "14b54e865f7a0614cd1488064c1d40fce2765d0d256f2f133ba51971264e950a"}, "crossfigure_source_code": {"doc_hash": "f2da92112a9b16208ac61a4465030f676fbacc22b5ecbef8e4227705a5f3744b"}, "curriculum_source_code": {"doc_hash": "5e841e2a3bcfb8cf890f8470317528ff34fed9848749bf96c1cfb196f6054baa"}, "diamond_free_degree_sequence_source_code": {"doc_hash": "f3cb233cf5e41924fbdecfa663359348cdb62fcaf0819a2c5461dd7aeb24e3d1"}, "doublechannel_source_code": {"doc_hash": "307f44467fb9924817f173ce9c4e7e4812b10ee72ac9a85fac7bbbe6b25ff355"}, "fractions_source_code": {"doc_hash": "173531be3ef421b94d3c68d93055626ad9ef60aa3d535e8ed26257dab53541d4"}, "golfers_source_code": {"doc_hash": "e32cfca461e8a31c08874e82635bb47d9319d02eb4a1ba3d0ad2528bd89b1d0a"}, "golomb_source_code": {"doc_hash": "75a05ee42b734058df1d2ca42580e8d74a8554e13f680a5c8a9afc88ba162904"}, "graph_source_code": {"doc_hash": "038218f0cf89fbca4c8051f230611d84a8ec1bbf696033cc77cf8055807d006c"}, "itemset_mining_source_code": {"doc_hash": "2b919d1462a9c9214e219216be873ebdf988e3135f05f78e69f9893db3106543"}, "jobshop_source_code": {"doc_hash": "49d4c5940900db9ef5691b03fb7b95d86083559490a0bad096d1d6226d447fe2"}, "K4xP2Graceful_source_code": {"doc_hash": "a6d414e210ce10761b3b42e30c84933de5e453250ecbaed9ccb310b1432f6d55"}, "killer_sudoku_source_code": {"doc_hash": "562f08abbb19981f6a0a6c5c49a6edb4ec0d5c7825f23abe4de132fc0a8333ec"}, "knapsack_source_code": {"doc_hash": "75f39de76978e5752937bff9c1844a6ed2c59ca0475e9fbd974cfa8e16ff3c9a"}, "langford_source_code": {"doc_hash": "81d5988aff39861b507e50b9888384b4dd1c822a40ca55685a9cdd9f6967a03b"}, "loan_source_code": {"doc_hash": "f3203238cc34dfe46a5bdc7a44b65e734bb3904ec7b33b8698358f752d0a3ab3"}, "ltsp_source_code": {"doc_hash": "c7945a1de1d604f492c9ac4b9165ce6f2c464c1ce9df7cfb1b463e105137b823"}, "magic_hexagon_source_code": {"doc_hash": "3f7c1b1c7fa9dfa3ee9d2dc86e7d0ca860d023bf2c1863b1cb0a30d3db2b9809"}, "magic_sequence_source_code": {"doc_hash": "67d2087970c950f9ad26dc7b75cd5f9b7621aa937b6ae9d585af9fb0dd65464e"}, "maximum_density_still_life_source_code": {"doc_hash": "81607e3861cfe5e5db8e73f6f5845cda8d05719d94e1572fc893d08dcce214df"}, "mip_source_code": {"doc_hash": "e098273574aa9bed2fc442ccbcf4d18d638b4405c46e5a635b99695be910349d"}, "missing_solution_source_code": {"doc_hash": "70e29f014c1f20a91929596d91b6af9c551dea84cf807ca079141299115bd357"}, "nonogram_create_automaton2_source_code": {"doc_hash": "f42faca01a6169fd22dc8008b2669c76de8a94536e348c1ca0d9bfcdf1840835"}, "nurses_source_code": {"doc_hash": "4900e80664116808cee8036d0ab53265b288dbee32044c7ef4974592db0a4712"}, "opd_source_code": {"doc_hash": "648eefbdd7bdf0dbd679f4af1752acc088e6b73307b389ecf00fb9c1370fb9c7"}, "partition_source_code": {"doc_hash": "08e8baf6a3956aa6b576d91e40c4ef8ab1744d5defb6e1997bc9711e098ecf6a"}, "photo_source_code": {"doc_hash": "efd2641bcc05fc4fed4e6f0c29fdeeb43a717686a2727cef9912467207cbb71b"}, "project_scheduling_source_code": {"doc_hash": "073e39212ae689e1c9175b25335c25b8e2a463260ef0f0b4cd8f3069e6161b0e"}, "QuasigroupCompletion_source_code": {"doc_hash": "e1c074fd7d40ab1b44e05e930d65354902e5ed374380b7b5eb27838caaa2168e"}, "QuasiGroupExistence_source_code": {"doc_hash": "ca4f5e342d1eda3b773cc53c945ec90d3008551875dc97ab49f37722860f79a5"}, "queens_source_code": {"doc_hash": "6f7f057e3d599f482057d719434b4e136632116215b3a4245ea007b603f09d41"}, "rcpsp_source_code": {"doc_hash": "e5fbea234c17ae6597ce02a77cbffa5c2349cff0f1525e795292b7688c11fef8"}, "rehearsal_source_code": {"doc_hash": "005a565b47acbfad50a30bd064f69003a7b968e4e1b31a92b006de50d2633036"}, "restart_source_code": {"doc_hash": "89fca2e6c8282c5f0d13ace64f033aa1499708766cd977cd43503c829a267444"}, "RosteringProblem_source_code": {"doc_hash": "1f461c5c63e7d2b469c6414a6c2193bdf324a1d413b595e0f009d6ea251c59c2"}, "sb_source_code": {"doc_hash": "ce1e57bc7ffaa8a0af07d35e6d122f3d3a5dec06401a48643602c1834b1dc9bd"}, "schur_source_code": {"doc_hash": "325213b7ddb225dedddd2846c2b540e6822e28616fdc539f502a43ced34126a5"}, "setselect_source_code": {"doc_hash": "1adc251cc17df5660eae9d4df6835b8b2faadc91d9ed094df50e31537c7ef2f8"}, "shipping_source_code": {"doc_hash": "4a8f1433be5af41589f5717747fe31ab7dd3f094386a29dea4e5f1dc3668e55c"}, "simple-prod-planning_source_code": {"doc_hash": "804bd3f72741f05877fd83bbfa8fe08108f68ac608b1d2b882989c8fe79bb19b"}, "sonet_problem_source_code": {"doc_hash": "b7908df377c79ed1cfa7d13149a83fe81e8d45417c31f002e7df60d483e22624"}, "square_pack_source_code": {"doc_hash": "85d9c41098be8262f601d20cdb90f89e9fb2da10b9eb0c1d145e815791fbc226"}, "stableroommates_source_code": {"doc_hash": "3b9743b570ba350f58ac180d575e2677dec18a030d90a7f41faf02e67dfdd00d"}, "steiner_source_code": {"doc_hash": "cc7e3556c078e28df07456bbc81467c3675eac3e5fd39d37a5ca686094a21ac5"}, "stoch_fjsp_source_code": {"doc_hash": "b42e73c32c804de23a7881a45ff27a159700fc4415c9d60ac8529e5a45e30d7b"}, "submultisetsum_source_code": {"doc_hash": "807400f286bd0f7604f9bacbf1458b91439aaa2b7fde34d70fe394ea5473af37"}, "table_seating_source_code": {"doc_hash": "114c6501313c967de72375894437d6804bdcbb217106b989832d26a0a86ac14b"}, "teamselect_source_code": {"doc_hash": "0344da45c0aef8eb4a2224e68de764dcad0b5a1450a64b4ccb1185fe7b49e233"}, "template_design_source_code": {"doc_hash": "56757b07193da56b9df0c5913c8e4d41075cc864474a10efd70dfd7552fc12b1"}, "toomany_source_code": {"doc_hash": "99acb6a14c34efacea1dfb7dacd14bb6a838930d9feda2272d782000db7342ef"}, "traffic_lights_table_source_code": {"doc_hash": "7b83689817efed9749e7da0c9ad4ba54e6d687a359d7e81c17de086dde16cd55"}, "TTPPV_source_code": {"doc_hash": "d47668f248004f17fc9ab60a5da660f54e11511cec24c2059d891c51dfe4c662"}, "vessel-loading_source_code": {"doc_hash": "71c6099e3aec895b01bbca1c147f98e4783398c1335414b5dd0eee9566af1140"}, "warehouses_source_code": {"doc_hash": "754981337e840300547cefb89eabdb0854507f3f94f7eec7e5c463bf85b54553"}, "water_buckets1_source_code": {"doc_hash": "18bf6089dcd60bd566f2bc1f7fcf36a1633f63cca71993fb1e7e927d2439eb04"}, "66aff7a9-f2e5-42ce-aa23-685b29ecaedd": {"doc_hash": "7601a8fda453aed592c66aad7fc52058eb0e6b39dc5d4be32ff52bedeb0beeea", "ref_doc_id": "all_interval_source_code"}, "178ecb07-932d-4fbc-a3a4-fb5a068adfd3": {"doc_hash": "a84766fcba102e189dcfeb1eed2359761167d19818b8d930ea0f31697dfb969a", "ref_doc_id": "assign_source_code"}, "b48d9dcd-ea3c-433d-bdb8-7d63c5bef39d": {"doc_hash": "56da5b136224d0e3ec469a7b3915c53a9ca0cc877bdff948955deda9d1f80974", "ref_doc_id": "aust_color_source_code"}, "4d4693d1-2c6a-44b6-96a6-db6dd8c668a0": {"doc_hash": "95de7f54c6420ea9b13eb9c8aa5826aa838a42a9c67b335a42b00ed1f3456ec2", "ref_doc_id": "bibd_source_code"}, "7771dd13-7b68-4fc1-8799-eed880aed5b1": {"doc_hash": "414a2c1b218f6ba8ce58d6cc1b4ca10cf02330cfaa1b0cddb9296dbeefb33b68", "ref_doc_id": "bus_scheduling_csplib_source_code"}, "f1b03222-c342-4816-b47a-2d2566387a5e": {"doc_hash": "c83a10a10f3168c86b92b75014d27913581fc9aadad887e4496b2aacaa7735cd", "ref_doc_id": "car_source_code"}, "c2c9e5ca-2a2c-4f7a-86f6-5a80c9220406": {"doc_hash": "8d36c1a666bb86c80144d5bf9d3aed8418c8c07ec891c6657bfd62ab35dbb9a5", "ref_doc_id": "carpet_cutting_source_code"}, "92a200cf-b30f-4bd7-8ee0-7e975f2b8325": {"doc_hash": "3c52503edf6de938e3c715300b77e624831e5154d2bba3cb94295179cfbb92a1", "ref_doc_id": "cell_block_source_code"}, "1e07b61c-ac30-47fc-95c9-f16c54f8f17d": {"doc_hash": "bfc330a294d2d240263ede0dc65f8dbce5b074118570e9cad3ea2761e2652499", "ref_doc_id": "clique_source_code"}, "242d4532-0503-4833-b0e6-96df2776873a": {"doc_hash": "148adcaafc13a5059156a8244515f74c8cd8fa3d738648fbc93f90eb48501790", "ref_doc_id": "cluster_source_code"}, "bc9ee4a7-afab-47ec-b1de-660a32cb800d": {"doc_hash": "007740b58baa8209501512eb497701094d0035ccdd46f7db778a75f5c13ee603", "ref_doc_id": "compatible_assignment_source_code"}, "bb15f4c1-6f19-4752-941d-ec4b668cd045": {"doc_hash": "b27d0fcdb2183fb6883f10f24bc8fed693395a63bdf8f07085c6f62a5e34412d", "ref_doc_id": "constrained_connected_source_code"}, "2500f50d-0ebe-4825-9313-90e62cf640a2": {"doc_hash": "5a8137e9a36f02f80e93181f1d38d9c8b60c3ce7b13a15be9bd8618a7b11f530", "ref_doc_id": "crazy_sets_source_code"}, "7dec99f3-9d68-44a0-935d-f07516176a20": {"doc_hash": "f2da92112a9b16208ac61a4465030f676fbacc22b5ecbef8e4227705a5f3744b", "ref_doc_id": "crossfigure_source_code"}, "aad75ded-c6cc-4bc6-83dd-ba9061273cec": {"doc_hash": "a9c21ea741c6b925c683e846b15892fa93628aaf3471492649365d2173fcb791", "ref_doc_id": "curriculum_source_code"}, "917952e9-24d8-47f3-8471-c608d40c088c": {"doc_hash": "534fa2782098c19c950ce814579ffb81afdeeff431d1f982901af5ee8a18f69c", "ref_doc_id": "diamond_free_degree_sequence_source_code"}, "a510b5a8-679f-4e0d-b954-f6ee4c0d2193": {"doc_hash": "3b7109b14f646918a98efad7cb5d4a933e7da23db56b586dd9c4410633a3332f", "ref_doc_id": "doublechannel_source_code"}, "3e88bd90-5fd4-4913-9c38-9e43f42187ed": {"doc_hash": "173531be3ef421b94d3c68d93055626ad9ef60aa3d535e8ed26257dab53541d4", "ref_doc_id": "fractions_source_code"}, "8673ae3a-8b69-4087-8851-d117e28bba7a": {"doc_hash": "e32cfca461e8a31c08874e82635bb47d9319d02eb4a1ba3d0ad2528bd89b1d0a", "ref_doc_id": "golfers_source_code"}, "cd7e037a-7e2e-4517-8dbf-cde92b359f38": {"doc_hash": "de4bcac162f3fab170587313bb0cd89e8cbab4f71fb2478fb6728d86de1f4a41", "ref_doc_id": "golomb_source_code"}, "c3950b3d-f146-49ed-ab1f-e1c9f2feaef2": {"doc_hash": "5c540a7e00bc343e1ce7babd7cd6d2c312cdfd4f39e3ad1be4b139b293fe7283", "ref_doc_id": "graph_source_code"}, "487e1222-884a-4f19-8abb-8613b69a6a6e": {"doc_hash": "b5d7ec927b3f0077d1f6ca0163dc2401fdcfd20860bcd0865eef2430a22280eb", "ref_doc_id": "itemset_mining_source_code"}, "f2eaf832-34f0-4fcb-9b40-d06720c4812c": {"doc_hash": "e35427c9856006654b10152d7025dbc0d458fac0d645b4ab2e5ce0ca4a23dbb1", "ref_doc_id": "jobshop_source_code"}, "9157072c-085a-4cee-9c71-efcbc889ec20": {"doc_hash": "a6d414e210ce10761b3b42e30c84933de5e453250ecbaed9ccb310b1432f6d55", "ref_doc_id": "K4xP2Graceful_source_code"}, "1c7c0732-ec64-458b-b19d-7f574a85d29d": {"doc_hash": "562f08abbb19981f6a0a6c5c49a6edb4ec0d5c7825f23abe4de132fc0a8333ec", "ref_doc_id": "killer_sudoku_source_code"}, "a94e1664-7127-4dc7-938c-be821ee65104": {"doc_hash": "75f39de76978e5752937bff9c1844a6ed2c59ca0475e9fbd974cfa8e16ff3c9a", "ref_doc_id": "knapsack_source_code"}, "8e649d36-e2d7-4939-be73-945bc0f0bab9": {"doc_hash": "b773e1233f076c21ce2b942fb0a1f3dd99384bff82ba0b3e17b28ef7ab7a3111", "ref_doc_id": "langford_source_code"}, "12f8241a-c416-47ed-bf1f-38b16e67e831": {"doc_hash": "688f9813125f78481784ff1613cc52ee6b768f3cd14e49b9763280f66a72f00d", "ref_doc_id": "loan_source_code"}, "cec3eedd-6f41-42a0-9f3d-bf0cd0846859": {"doc_hash": "dca1d7af2eaadba6b5c1f38ab905b038076ed7ce7d8d7e568fa5ccd45788c17c", "ref_doc_id": "ltsp_source_code"}, "01db9572-246a-4f4e-9687-f3c253840d7e": {"doc_hash": "3f7c1b1c7fa9dfa3ee9d2dc86e7d0ca860d023bf2c1863b1cb0a30d3db2b9809", "ref_doc_id": "magic_hexagon_source_code"}, "09670331-95d7-417f-a216-cf244b1b9488": {"doc_hash": "67d2087970c950f9ad26dc7b75cd5f9b7621aa937b6ae9d585af9fb0dd65464e", "ref_doc_id": "magic_sequence_source_code"}, "6db0bc1f-8c7d-4fd6-af0b-aed0973d82ee": {"doc_hash": "0847d05a00289d929da83e0b0dc024eacd948bbf71c9049f7264e67ee4b7d3d8", "ref_doc_id": "maximum_density_still_life_source_code"}, "03bcdb29-cf91-46a4-8a53-b20a5f22e609": {"doc_hash": "fec5fe7abb61211fdca61a81c9a94a893a7415f52f177cb47adde22ad9da258a", "ref_doc_id": "mip_source_code"}, "dcba139a-7122-4479-9f37-9d9465c77561": {"doc_hash": "a760dbdc1a6034adaf75d1b944340da455c7f4194d9c409d6bb9892db6155f76", "ref_doc_id": "missing_solution_source_code"}, "c1e242a9-8d26-4aa8-9431-b2c2ec732195": {"doc_hash": "f42faca01a6169fd22dc8008b2669c76de8a94536e348c1ca0d9bfcdf1840835", "ref_doc_id": "nonogram_create_automaton2_source_code"}, "33eb3af5-9788-468f-83a9-d74f407c6abb": {"doc_hash": "c6e453db1a17fd88761cf38da1aa5fa1013773026063188b17e240c98f3fdcd6", "ref_doc_id": "nurses_source_code"}, "a7caf877-db55-480f-873b-938aa2675b40": {"doc_hash": "648eefbdd7bdf0dbd679f4af1752acc088e6b73307b389ecf00fb9c1370fb9c7", "ref_doc_id": "opd_source_code"}, "5116abfa-f3b4-425f-98f4-8ba1f9d5f949": {"doc_hash": "08e8baf6a3956aa6b576d91e40c4ef8ab1744d5defb6e1997bc9711e098ecf6a", "ref_doc_id": "partition_source_code"}, "ca231dbd-ea13-4d81-9833-8a863e170f01": {"doc_hash": "be724d9f01d2d7cd1d5225ef13e02e5b44062963c9141262fa68233fd78a1f1c", "ref_doc_id": "photo_source_code"}, "b38d3324-aed3-4b19-ba0e-aced0a8c871f": {"doc_hash": "f340d032b98d594500d5455d71693d1771ca503837a5cba4908e3546a89c4564", "ref_doc_id": "project_scheduling_source_code"}, "95e4da60-62b6-4787-a388-357d5d08d9fb": {"doc_hash": "e1c074fd7d40ab1b44e05e930d65354902e5ed374380b7b5eb27838caaa2168e", "ref_doc_id": "QuasigroupCompletion_source_code"}, "a077ce57-dc89-4ca9-a596-1dd14a79ddf8": {"doc_hash": "ca4f5e342d1eda3b773cc53c945ec90d3008551875dc97ab49f37722860f79a5", "ref_doc_id": "QuasiGroupExistence_source_code"}, "b28df122-49bc-43df-a6f7-6748e5476514": {"doc_hash": "0f42d7616bbf93b10e625fcaa6638637fdb0692d43bae8d602b924bb70c3a4a2", "ref_doc_id": "queens_source_code"}, "27942944-8024-4099-b5bc-f6ea82d86d10": {"doc_hash": "7733193677d97f35ffc90c9576fe68f1fd0b33cc83f8ff5b5c3be9659b2264c0", "ref_doc_id": "rcpsp_source_code"}, "60c03920-08a8-4d93-93ee-b4f230d8d48a": {"doc_hash": "69b62a3e76a61a1750d8ac6ae9d69d5b94f25a5a438d5aa095a7c249cb83f36a", "ref_doc_id": "rehearsal_source_code"}, "71ae3813-94f1-454f-8561-3a2b3ae035dd": {"doc_hash": "bb016a1217fd88e39cb51d050789ea505f8da50e08fd4615c38a4f2132a3e153", "ref_doc_id": "restart_source_code"}, "77c00cff-aa60-4ab9-a6c4-d11ff86ca0cd": {"doc_hash": "b941c17b6d3ac8c0349e3c13f1e86b048913a43a7e0bbdd56a4ed18a1e2725f6", "ref_doc_id": "RosteringProblem_source_code"}, "298ec0e6-3e4c-47b7-b6a0-ac6c14405b06": {"doc_hash": "17e119d11aca5b36143d66570e222849533da960e1aaa822c80c988ced8f8823", "ref_doc_id": "sb_source_code"}, "c21d8227-5a8b-40cd-9923-bc323f9c8c1c": {"doc_hash": "9ec48b792874c901124020d573de84984995100f0ca9452a199fa0d6da2b68ef", "ref_doc_id": "schur_source_code"}, "f7c98854-50f0-49c9-9aa9-a2fd418eacce": {"doc_hash": "3cb883f89855edbee2cf6c895be187ea272e307411b2443a1a12eb64360a3019", "ref_doc_id": "setselect_source_code"}, "7c6d07e4-7946-4a58-8618-910d36422f41": {"doc_hash": "4a8f1433be5af41589f5717747fe31ab7dd3f094386a29dea4e5f1dc3668e55c", "ref_doc_id": "shipping_source_code"}, "6a64b4fd-32f6-4f4e-a97c-293d944d9659": {"doc_hash": "804bd3f72741f05877fd83bbfa8fe08108f68ac608b1d2b882989c8fe79bb19b", "ref_doc_id": "simple-prod-planning_source_code"}, "32035836-6fc4-4e9c-82ce-d2cea9de1d6a": {"doc_hash": "d49f820208930e21f0d0fff462648ccd7d1e2dad280791025f896cef295fa237", "ref_doc_id": "sonet_problem_source_code"}, "00f4c044-144d-43c0-b718-4b8760a02089": {"doc_hash": "2b6bc3f93f94d4c36d57bd979c058af35348fb3e71af3d678ce9cc41fae57f9d", "ref_doc_id": "square_pack_source_code"}, "9b20ca51-dad0-4954-ad1c-cea7984bf072": {"doc_hash": "3adb063f0c56104a62be89bed821c1e253789138c79f661ff67f8f676db4df35", "ref_doc_id": "stableroommates_source_code"}, "305433ba-5ad0-45b3-a0c4-576547215506": {"doc_hash": "6ffe6459e4e5ebd39a6851c92cbbf4ddfb0a0a5b8b1cd2a6596988f3945ff7dd", "ref_doc_id": "steiner_source_code"}, "206733f8-4aa8-42bc-bdf4-73cad608bac0": {"doc_hash": "49a0d7cd6591584933714b33011d391e5cf6036424712c2d6ff7b3d03f59ff10", "ref_doc_id": "stoch_fjsp_source_code"}, "302ff925-7fa2-4216-adc6-f1f92f1660bc": {"doc_hash": "807400f286bd0f7604f9bacbf1458b91439aaa2b7fde34d70fe394ea5473af37", "ref_doc_id": "submultisetsum_source_code"}, "aa44f403-8c30-4b25-924b-491b35a8ccfb": {"doc_hash": "f731b27b8fda9b98e74db7fe61d40b0b8462e24005e9588877ba6a92c45fec97", "ref_doc_id": "table_seating_source_code"}, "62546787-81e8-48ae-9c79-650072d44dfc": {"doc_hash": "67e92f9625714687bf4ea66e553cc17492932583be53f58cd19443ee7bc99fb0", "ref_doc_id": "teamselect_source_code"}, "47a1a6aa-86a2-4fd2-8cfb-495242483049": {"doc_hash": "e6fbd02a48830dc5d762842c41cd5becd959b8c86840b8816bf9c7c701635489", "ref_doc_id": "template_design_source_code"}, "9105bdad-23f8-420d-a91d-0b24fcea91c7": {"doc_hash": "f04b9d8afe2dd5e7b33ba64239c385fd1c27f225c87e60ccd60c08ae562bbeb2", "ref_doc_id": "toomany_source_code"}, "08f78060-8466-4db7-98b6-e3e526919fde": {"doc_hash": "7c020ac50c956b2c48ec40297b4f35bdaf6bb0e5788da6f38582622a8fb7278a", "ref_doc_id": "traffic_lights_table_source_code"}, "bb5e0173-ab3a-4aaa-9c5f-96196d05ae2b": {"doc_hash": "8f68b501a2199fb2999da113347a3368d97adc30bec922ed638ec6591ec6c74d", "ref_doc_id": "TTPPV_source_code"}, "60c5488e-8bd2-4210-a347-6dbec76ab209": {"doc_hash": "35da41cdd0f73e1333badf9e1b60b5865efbc46675089b0b24fad8d7e5ab0ea3", "ref_doc_id": "vessel-loading_source_code"}, "b44b9b6a-b601-4a03-88cd-2d2c72f7fc92": {"doc_hash": "0b8ec87b4b07d65fd3f7428babadede673748dac452faedaf104333e0415beb9", "ref_doc_id": "warehouses_source_code"}, "37d97e92-ae7c-4e20-9fe0-e917480e0fe4": {"doc_hash": "18bf6089dcd60bd566f2bc1f7fcf36a1633f63cca71993fb1e7e927d2439eb04", "ref_doc_id": "water_buckets1_source_code"}}, "docstore/data": {"66aff7a9-f2e5-42ce-aa23-685b29ecaedd": {"__data__": {"id_": "66aff7a9-f2e5-42ce-aa23-685b29ecaedd", "embedding": null, "metadata": {"model_name": "all_interval"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "all_interval_source_code", "node_type": "4", "metadata": {"model_name": "all_interval"}, "hash": "7601a8fda453aed592c66aad7fc52058eb0e6b39dc5d4be32ff52bedeb0beeea", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\n%\n% All interval problem in MiniZinc\n%\n% \"\"\"\n% Given the twelve standard pitch-classes (c, c%, d, ...), represented by\n% numbers 0,1,...,11, find a series in which each pitch-class occurs exactly\n% once and in which the musical intervals between neighbouring notes cover\n% the full set of intervals from the minor second (1 semitone) to the major\n% seventh (11 semitones). That is, for each of the intervals, there is a\n% pair of neigbhouring pitch-classes in the series, between which this\n% interval appears. The problem of finding such a series can be easily\n% formulated as an instance of a more general arithmetic problem on Z_n,\n% the set of integer residues modulo n. Given n in N, find a vector\n% s = (s_1, ..., s_n), such that (i) s is a permutation of\n% Z_n = {0,1,...,n-1}; and (ii) the interval vector\n% v = (|s_2-s_1|, |s_3-s_2|, ... |s_n-s_{n-1}|) is a permutation of\n% Z_n-{0} = {1,2,...,n-1}. A vector v satisfying these conditions is\n% called an all-interval series of size n; the problem of finding such\n% a series is the all-interval series problem of size n. We may also be\n% interested in finding all possible series of a given size.\n\ninclude \"globals.mzn\";\n\nint: n = 12;\n% array[1..n] of var 1..n: x;\narray[1..n] of var 1..n: x;\narray[1..n-1] of var 1..n-1: diffs;\nint: sum_distinct = ((n+1)*n) div 2;\n\n% max_regret seems to be quite good....\nsolve :: int_search(x, max_regret, indomain_split, complete) satisfy;\n\nconstraint      \n  all_different(diffs) :: domain\n  /\\  \n  all_different(x) :: domain\n  /\\ \n  forall(k in 1..n-1) (\n      diffs[k] = abs(x[k+1] - x[k])\n  )\n  /\\ % symmetry breaking\n  x[1] < x[n-1]\n  /\\\n  diffs[1] < diffs[2]\n;\n\n\noutput [\n       show(x) ++ \",\" % , \" \", show(sum_distinct), \" diffs: \", show(diffs)\n]\n\n\nModel 2 : \n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n%    all_different(series) /\\\n\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i != j)  (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n;\n\noutput\n[  show(series)\n];\n\n\nModel 3 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   %  C1: Each pitch class occurs exactly once\n   forall(i, j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i!=j) (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput\n[ show(series)\n];\n\n\nModel 4 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[differ] of var differ: differences;\n\nsolve satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 1..n-2) (\n       differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in differ where i != j) (\n       differences[i] != differences[j]\n   )\n;\n\noutput [\n  show(series)\n];\n\n\nModel 5 : \n\n\ninclude \"globals.mzn\";\n\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_median, complete) satisfy;\n\nconstraint\n  % C1: Each pitch class occurs exactly once\n  % GCAD: Exploitation of alldifferent() global constraint\n  all_different(series)\n  /\\\n\n  % C2: Differences between neighbouring notes are all different\n  % GCAD: Exploitation of alldifferent() global constraint\n  % alldifferent(all (i in classes: i <> n-1) abs(series[i+1] - series[i]));\n  all_different( \n         [ abs(series[i+1] - series[i]) | i in classes where i != n-1]\n  )\n  \n;\n\noutput [\n  show(series)\n];\n\n\nModel 6 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\n% solve satisfy;\nsolve :: int_search(series, occurrence, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n      differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in 0..n-2 where i != j) (\n      differences[i] != differences[j]\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\noutput [\n  show(series)\n];\n\n\nModel 7 : \n\n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\nsolve ::int_search(series, first_fail, indomain_max, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(series)\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n          differences[i] = abs(series[i+1] - series[i])\n   )\n   /\\\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(differences)\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput [\n   \"series: \" ++ show(series) ++ \"\\n\" ++\n   \"differences: \" ++ show(differences) \n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 6726, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "178ecb07-932d-4fbc-a3a4-fb5a068adfd3": {"__data__": {"id_": "178ecb07-932d-4fbc-a3a4-fb5a068adfd3", "embedding": null, "metadata": {"model_name": "assign"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "assign_source_code", "node_type": "4", "metadata": {"model_name": "assign"}, "hash": "29a5cf8d3beff90b2bc2da48f02e771bfa5395c77ee3e5f7f125067a28d1e921", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\nint: n;\nset of int: WORK = 1..n;\nint: m;\nset of int: TASK = 1..m;\narray[WORK,TASK] of int: profit;\narray[WORK] of var TASK: x;\n% new\narray[WORK] of var int: px =\n     [ profit[w,x[w]] | w in WORK ];\nvar int: obj = sum(w in WORK)(px[w]);\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(x);\n\nann: varselect;\nann: valselect;\n\nsolve :: int_search(px, varselect, valselect, complete)\n      maximize obj;\n\noutput [\"obj = \\(obj); x = \\(x);\\n\"];\n\n\nvarselect = largest;\nvalselect = indomain_min;\n\n\nModel 2 : \n\n\nint: n;\nset of int: DOM = 1..n;\nint: m;\nset of int: COD = 1..m;\narray[DOM,COD] of int: profit;\n\narray[DOM] of var COD: task;\narray[COD] of var DOM: worker;\n\ninclude \"inverse.mzn\";\nconstraint inverse(task,worker);\n\n\nsolve maximize sum(w in COD)\n            (profit[w,task[w]]);\n\noutput [show(task)];\n\n\n\nModel 3 : \n\nint: n;\nset of int: DOM = 1..n;\nint: m;\nset of int: COD = 1..m;\narray[DOM,COD] of int: profit;\n\narray[COD] of var DOM: worker;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(worker);\n\n\nsolve maximize sum(t in COD)\n            (profit[worker[t],t]);\n\noutput [show(worker)];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b48d9dcd-ea3c-433d-bdb8-7d63c5bef39d": {"__data__": {"id_": "b48d9dcd-ea3c-433d-bdb8-7d63c5bef39d", "embedding": null, "metadata": {"model_name": "aust_color"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aust_color_source_code", "node_type": "4", "metadata": {"model_name": "aust_color"}, "hash": "c3f779eb9c58f0538045b4b15f6d00b8de5a3c773fbc1ee3df922e405bd74c7a", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% Colouring Australia using 4 colors \nint: nc = 4;\n\nvar 1..nc: wa;    var 1..nc: nt;     \nvar 1..nc: sa;    var 1..nc: q;     \nvar 1..nc: nsw;   var 1..nc: v;\nvar 1..nc: t;\n\nconstraint wa != nt;\nconstraint wa != sa;\nconstraint nt != sa;\nconstraint nt != q;\nconstraint sa != q;\nconstraint sa != nsw;\nconstraint sa != v;\nconstraint q != nsw;\nconstraint nsw != v;\n\nsolve satisfy;\n\noutput [\"wa=\\(wa)\",  \n   \" nt=\\(nt)\", \n   \" sa=\\(sa)\\n\",\n \"q=\\(q)\", \n \" nsw=\\(nsw)\", \n \" v=\\(v)\\n\",\n \"t=\\(t)\\n\"];\n\n\n Model 2 :\n\n % Colouring Australia using nc colors \nint: nc;\n\nvar 1..nc: wa;    var 1..nc: nt;     \nvar 1..nc: sa;    var 1..nc: q;     \nvar 1..nc: nsw;   var 1..nc: v;\nvar 1..nc: t;\n\nconstraint wa != nt;\nconstraint wa != sa;\nconstraint nt != sa;\nconstraint nt != q;\nconstraint sa != q;\nconstraint sa != nsw;\nconstraint sa != v;\nconstraint q != nsw;\nconstraint nsw != v;\n\nsolve satisfy;\n\noutput [\"wa=\\(wa)\",  \n   \" nt=\\(nt)\", \n   \" sa=\\(sa)\\n\",\n \"q=\\(q)\", \n \" nsw=\\(nsw)\", \n \" v=\\(v)\\n\",\n \"t=\\(t)\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1006, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d4693d1-2c6a-44b6-96a6-db6dd8c668a0": {"__data__": {"id_": "4d4693d1-2c6a-44b6-96a6-db6dd8c668a0", "embedding": null, "metadata": {"model_name": "bibd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bibd_source_code", "node_type": "4", "metadata": {"model_name": "bibd"}, "hash": "43f589e95a34396e90a6bdcf35ea6436643a6f0c622caafb1dc23203c0097d0f", "class_name": "RelatedNodeInfo"}}, "text": "% bibd.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Tue Oct 23 11:28:06 EST 2007\n%\n% Balanced incomplete block designs.  See the following:\n% http://mathworld.wolfram.com/BlockDesign.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob028/spec.html\n%\n%\n%\n% A BIBD (v, b, r, k, lambda) problem is to find a binary matrix of v rows\n% of b columns such that each row sums to r, each column sums to k, and\n% the dot product beween any pair of distinct rows is lambda.\n\ninclude \"lex_lesseq.mzn\";\n\nint: v;\nint: k;\nint: lambda;\n\nint: b = (lambda * v * (v - 1)) div (k * (k - 1));\nint: r = (lambda * (v - 1)) div (k - 1);\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\narray [rows, cols] of var bool: m;\n\n    % Every row must sum to r.\n    %\nconstraint forall (i in rows) (sum (j in cols) (bool2int(m[i, j])) = r);\n\n    % Every column must sum to k.\n    %\nconstraint forall (j in cols) (sum (i in rows) (bool2int(m[i, j])) = k);\n\n    % The dot product of every pair of distinct rows must be lambda.\n    %\nconstraint\n    forall (i_a, i_b in rows where i_a < i_b) (\n        sum (j in cols) (bool2int(m[i_a, j] /\\ m[i_b, j])) = lambda\n    );\n\n    % Break row symmetry in the incidence matrix.\n    %\nconstraint forall(i in rows diff {max(rows)})(\n        lex_lesseq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    );\n\n    % Break column symmetry in the incidence matrix.\n    %\nconstraint forall(j in cols diff {max(cols)})(\n        lex_lesseq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    );\n\nsolve :: bool_search([m[i, j] | i in rows, j in cols],\n    input_order, indomain_min, complete)\n    satisfy;\n\noutput  [\"bibd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r),\n        \", k = \", show(k), \", lambda = \", show(lambda), \")\\n\\n\"] ++\n        [ ( if j > b then \"\\n\" else show(bool2int(m[i, j])) endif )\n        | i in rows, j in 1..(b + 1)\n        ];\n\n%----------------------------------------------------------------------------%\n%----------------------------------------------------------------------------%", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2060, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7771dd13-7b68-4fc1-8799-eed880aed5b1": {"__data__": {"id_": "7771dd13-7b68-4fc1-8799-eed880aed5b1", "embedding": null, "metadata": {"model_name": "bus_scheduling_csplib"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bus_scheduling_csplib_source_code", "node_type": "4", "metadata": {"model_name": "bus_scheduling_csplib"}, "hash": "b0e6dd350573cacdc96257931a6d0348f12ff78bbb9544c0ccc65570cc11ec03", "class_name": "RelatedNodeInfo"}}, "text": "%\n% Bus driver scheduling problem (prob022 in CSPLib) in MiniZinc.\n%\n% Specification\n% Bus driver scheduling can be formulated as a set paritioning problem.\n% We propose 12 set partitioning problems derived from small bus driver\n% scheduling problems. These consist of a given set of tasks (pieces of\n% work) to cover and a large set of possible shifts, where each shift\n% covers a subset of the tasks and has an associated cost. We must select\n% a subset of possible shifts that covers each piece of work once and\n% only once: this is called a partition. Further,\n%\n% In the driver scheduling (unlike air crew scheduling) the main aim is\n% to reduce the number of shifts used in the solution partition and the\n% total cost of the partition is secondary. To simplify the problem we have\n% made the cost of each shift the same. This means that the goal is to\n% minimise the number of shifts.\n%\n% The problems come from four different bus companies:\n% Reading (r1 to r5a),\n% CentreWest Ealing area (c1, c1a, c2),\n% the former London Transport (t1 and t2).\n%\n% The problems have differing regulations and features (e.g. urban and\n% short distance rural bus schedules can have very different features). Note\n% that r1 and r1a are the same problem, but have different numbers of\n% generated shifts. Similarly with the problems: c1, c1a and r5, r5a.\n%\n% Problems are presented in the same format as the set partitioning\n% examples in ORLIB. The first line gives the number of rows (pieces of work),\n% columns (shifts) and the minimum number of columns need for a partition.\n% Then each line after that corresponds to one column. It starts with\n% the cost (which is always 1 in our case) then the number of rows it\n% covers, followed by the rows it covers.\n% \"\"\"\n\n\ninclude \"globals.mzn\"; \nint: num_work;\nint: num_shifts;\nint: min_num_shifts;\narray[1..num_shifts] of set of int: shifts;\n\narray[1..num_shifts] of var 0..1: x;\nvar 0..num_shifts: tot_shifts;\n\n% solve minimize tot_shifts;\nsolve :: int_search(\n        x ++ [tot_shifts], \n        first_fail, \n        indomain_min, \n        complete) \n    minimize tot_shifts;\n    % satisfy;\n\nconstraint\n   tot_shifts = sum(x)\n   /\\\n   forall(j in 0..num_work-1) (\n       sum(i in 1..num_shifts) (x[i]*bool2int(j in shifts[i])) = 1\n   )\n   /\\\n   tot_shifts >= min_num_shifts\n\n   % /\\ % for solve satisfy (t1)\n   % tot_shifts = 7\n;\n\n\noutput [\n  \"tot_shifts: \" ++ show(tot_shifts) ++ \"\\n\" ++ \n  \"x: \" ++ show(x) ++ \"\\n\"\n] ++ \n[\n  if fix(x[i]) = 1 then show(shifts[i]) else \"\" endif\n  | i in 1..num_shifts\n] ++ \n[\"\\n\"] ++\n[\n  if fix(x[i]) = 1 then show(i) ++ \" \" else \"\" endif\n  | i in 1..num_shifts\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2647, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1b03222-c342-4816-b47a-2d2566387a5e": {"__data__": {"id_": "f1b03222-c342-4816-b47a-2d2566387a5e", "embedding": null, "metadata": {"model_name": "car"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "car_source_code", "node_type": "4", "metadata": {"model_name": "car"}, "hash": "14b722147e5df4f323e74192245104fe433442fbe887be641ef0eef98e327938", "class_name": "RelatedNodeInfo"}}, "text": "%\n% Car sequencing in MiniZinc.\n% include \"globals.mzn\";\n\nint: numclasses;\nint: numoptions;\nint: numcars;\nset of int: Classes = 1..numclasses;\nset of int: Options = 1..numoptions;\nset of int: Slots = 1..numcars;\n\narray[Classes] of int: numberPerClass;\n\narray[Classes,Options] of int: optionsRequired;\narray[Options] of int: windowSize;\narray[Options] of int: optMax;\n\narray[Options] of int: optionNumberPerClass = [sum(j in Classes) (numberPerClass[j] * optionsRequired[j,i]) | i in Options];\n\n% decision variables\n\narray[Slots] of var Classes: slot;\narray[Options, Slots] of var 0..1: setup;\n\n\nvar int: z = sum(s in Classes) (s*slot[s]);\n\n% solve minimize z;\nsolve :: int_search(slot, input_order, indomain_min, complete)\n  satisfy;\n\nconstraint\n  forall(c in Classes ) (\n    sum(s in Slots ) (bool2int(slot[s] = c)) = numberPerClass[c]\n  )\n  /\\\n  forall(o in Options, s in 1..numcars - windowSize[o] + 1) (\n    sum(j in s..s + windowSize[o]- 1) (setup[o,j]) <= optMax[o]\n  )\n  /\\\n  forall(o in Options, s in Slots ) (\n    setup[o,s] = optionsRequired[slot[s],o]\n  )\n  /\\\n  forall(o in Options, i in 1..optionNumberPerClass[o]) (\n    sum(s in 1..(numcars - i * windowSize[o])) (setup[o,s]) >=\n           (optionNumberPerClass[o] - i * optMax[o])\n  )\n;\n\n% for solve satisfy\n% constraint z = 82;\n\n\noutput [\n \"z: \" ++ show(z) ++ \"\\n\" ++\n \"slot: \" ++ show(slot) ++ \"\\n\"\n] ++\n[\n  if j = 1 then \"\\n\" else \" \" endif ++ \n    show(setup[i,j])\n  | i in Options, j in Slots\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2c9e5ca-2a2c-4f7a-86f6-5a80c9220406": {"__data__": {"id_": "c2c9e5ca-2a2c-4f7a-86f6-5a80c9220406", "embedding": null, "metadata": {"model_name": "carpet_cutting"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "carpet_cutting_source_code", "node_type": "4", "metadata": {"model_name": "carpet_cutting"}, "hash": "8d36c1a666bb86c80144d5bf9d3aed8418c8c07ec891c6657bfd62ab35dbb9a5", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\nint: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\narray[ROOM] of var ROT: rot;\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\nconstraint forall(i in ROOM)(shape[i,rot[i]] != {});\n\nconstraint forall(i in ROOM)(forall(r in ROFF)\n  (r in shape[i,rot[i]] -> \n  (x[i] + d[r,1] + d[r,3] <= l /\\\n   y[i] + d[r,2] + d[r,4] <= h)));\n\nconstraint forall(i,j in ROOM where i < j)\n  (forall(r1,r2 in ROFF)\n (r1 in shape[i,rot[i]] /\\ \n  r2 in shape[j,rot[j]] -> \n(x[i] + d[r1,1] + d[r1,3] <= x[j] + d[r2,1]\n                   \\/\n x[j] + d[r2,1] + d[r2,3] <= x[i] + d[r1,1]\n                   \\/\n y[i] + d[r1,2] + d[r1,4] <= y[j] + d[r2,2]\n                   \\/\ny[j] + d[r2,2] + d[r2,4] <= y[i] + d[r1,2])\n   ));\n\noutput [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nrot = \\(rot);\\n\"];\n\n\n\nModel 2 :\n\n\nint: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\n\nset of int: DIM = 1..2;\narray[ROFF,DIM] of int: rect_size = \n     array2d(ROFF,DIM, [ d[r,i] | r in ROFF, i in 3..4]);\narray[ROFF,DIM] of int: rect_offset = \n     array2d(ROFF,DIM, [ d[r,i] | r in ROFF, i in 1..2]);\narray[int] of set of ROFF: shapes = [ {1,3,4}, {2,5,6}, {1}, {7} ];\nset of int: SHAPE = index_set(shapes);\n%array[int] of set of RECT: s = sort([shapes[i,j] | i in 1..n, j in 1..4]);\n\narray[ROOM] of var SHAPE: kind;\narray[ROOM,DIM] of var int: coords =\n      array2d(ROOM,DIM, [ if j = 1 then x[i] else y[i] endif\n                         | i in ROOM, j in 1..2 ]);\n\n\n\ninclude \"geost.mzn\";\n\nconstraint geost_bb(2,\n                    rect_size,\n                    rect_offset,\n                    shapes,\n                    coords,\n                    kind,\n                    [0,0],\n                    [l,h]);\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\nconstraint forall(i in ROOM)\n                 (exists(r in ROT where shape[i,r] != {})\n                        (shapes[kind[i]] = shape[i,r]));\n\n\noutput [\"rect_size = \\(rect_size);\\nrect_offset = \\(rect_offset);\\n\"] ++\n       [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nkind = \\(kind);\\n\"];\n\n\n\nModel 3 : \n\n\nint: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\n\nset of int: SHAPE = 1..4;\narray[ROOM] of var SHAPE: kind;\n\nconstraint geost_bb(2,\n       [| 3,4 | 4,3 | 1,1 | 1,2 | 1,1 | 2,1 | 4,3 |],\n       [| 0,0 | 0,1 | 1,4 | 3,1 | 4,2 | 1,0 | 0,0 |],\n       [ {1,3,4}, {2,5,6}, {1}, {7} ],\n       [| x[1], y[1] | x[2],y[2] | x[3],y[3] |],\n       kind,\n       [ 0,0 ],\n       [ l, h]);\n\nconstraint kind[1] in {1,2};\nconstraint kind[2] in {1,2};\nconstraint kind[3] in {3,4}; \ninclude \"geost.mzn\";\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\noutput [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nkind = \\(kind);\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92a200cf-b30f-4bd7-8ee0-7e975f2b8325": {"__data__": {"id_": "92a200cf-b30f-4bd7-8ee0-7e975f2b8325", "embedding": null, "metadata": {"model_name": "cell_block"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cell_block_source_code", "node_type": "4", "metadata": {"model_name": "cell_block"}, "hash": "adecb6c505bf9b277ae629e30b66d69f662759fc3fca2fddf57b7d63ebbfca47", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: k;\nset of int: PRISONER = 1..k;\nint: n;\nset of int: ROW = 1..n;\nint: m;\nset of int: COL = 1..m;\nset of PRISONER: danger;\nset of PRISONER: female;\nset of PRISONER: male = PRISONER diff female;\narray[ROW,COL] of int: cost;\n\n\narray[PRISONER] of var ROW: r;\narray[PRISONER] of var COL: c;\n\n%constraint forall(p1, p2 in PRISONER where p1 < p2)\n%                 (abs(r[p1] - r[p2]) + abs(c[p1] - c[p2]) > 0); \ninclude \"alldifferent.mzn\";\nconstraint alldifferent([r[p] * m + c[p] | p in PRISONER]);\n\nconstraint forall(p in PRISONER, d in danger where p != d)\n                 ( abs(r[p] - r[d]) + abs(c[p] - c[d]) > 1 );\n\nconstraint forall(p in female)(r[p] <= (n + 1) div 2);\nconstraint forall(p in male)(r[p] >= n div 2 + 1);\n\nvar int: totalcost = sum(p in PRISONER)(cost[r[p],c[p]]);  \nsolve minimize totalcost;\n \noutput [\"cost = \\(totalcost)\\n\"] ++\n       [ \"Prisoner \\(p) \" ++ if p in female then \"(F)\" else \"(M)\" endif ++ \n         \" in [\\(r[p]),\\(c[p])].\\n\"\n       | p in PRISONER ];\n\n\n\nModel 2 : \n\nint: k;\nset of int: PRISONER = 1..k;\nint: n;\nset of int: ROW = 1..n;\nint: m;\nset of int: COL = 1..m;\nset of PRISONER: danger;\nset of PRISONER: female;\nset of PRISONER: male = PRISONER diff female;\narray[ROW,COL] of int: cost;\n\n\narray[PRISONER] of var ROW: r;\narray[PRISONER] of var COL: c;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent([r[p] * m + c[p] | p in PRISONER]);\n\nfunction var int: \n     manhattan(var int:x1, var int:y1,\n               var int:x2, var int:y2) =\n     abs(x2 - x1) + abs(y2 - y1);\n\nconstraint forall(p in PRISONER, d in danger where p != d) \n                 (manhattan(r[p],c[p],r[d],c[d]) > 1);\n\nconstraint forall(p in female)(r[p] <= (n + 1) div 2);\nconstraint forall(p in male)(r[p] >= n div 2 + 1);\n\nvar int: totalcost = sum(p in PRISONER)(cost[r[p],c[p]]);  \nsolve minimize totalcost;\n \noutput [\"cost = \\(totalcost)\\n\"] ++\n       [ \"Prisoner \\(p) \" ++ if p in female then \"(F)\" else \"(M)\" endif ++ \n         \" in [\\(r[p]),\\(c[p])].\\n\"\n       | p in PRISONER ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2015, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e07b61c-ac30-47fc-95c9-f16c54f8f17d": {"__data__": {"id_": "1e07b61c-ac30-47fc-95c9-f16c54f8f17d", "embedding": null, "metadata": {"model_name": "clique"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "clique_source_code", "node_type": "4", "metadata": {"model_name": "clique"}, "hash": "c76ed86cde7ed8ed6e9843d16a54b33a7b2379387e1f70637181f1897b0ca13c", "class_name": "RelatedNodeInfo"}}, "text": "% Maximum Clique Problem\n\nint: n = 5;\narray[1..n, 1..n] of int: adj =\n    [| 0, 1, 0, 1, 0\n     | 1, 0, 1, 0, 0\n     | 0, 1, 0, 1, 1\n     | 1, 0, 1, 0, 1\n     | 0, 0, 1, 1, 0 |];\n\n% --- naive model ---\n\n% decision variables: which vertices are in the clique?\narray[1..n] of var bool: c;\nvar int: size;\n\n% how many vertices have we selected?\nconstraint size = sum(c);\n\n% we can only pick one of any non-adjacent pair of vertices\nconstraint forall (i, j in 1..n where i < j /\\ 0 == adj[i,j]) (bool2int(c[i]) + bool2int(c[j]) <= 1);\n\nsolve maximize size;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 551, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "242d4532-0503-4833-b0e6-96df2776873a": {"__data__": {"id_": "242d4532-0503-4833-b0e6-96df2776873a", "embedding": null, "metadata": {"model_name": "cluster"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cluster_source_code", "node_type": "4", "metadata": {"model_name": "cluster"}, "hash": "8c814cefa84f8793d86da299e689b23a33e44cc26bfc06ef5d76d95f8a1af618", "class_name": "RelatedNodeInfo"}}, "text": "int: n; % points to be clustered\nset of int: POINT = 1..n;\narray[POINT,POINT] of int: dist; % distance between two points\nint: maxdist = max([ dist[i,j] | i,j in POINT]);\n\n\nint: k; % number of clusters\nset of int: CLUSTER = 1..k;\n\nint: maxdiam;\n\narray[POINT] of var CLUSTER: x;\n\nconstraint forall(i,j in POINT where i < j /\\ x[i] = x[j])\n                 (dist[i,j] <= maxdiam);\n\nconstraint forall(i in 1..k-1)\n                 (  min([ j | j in POINT where x[j] = i])\n                  < min([ j | j in POINT where x[j] = i+1]));\n\nvar 0..maxdist: obj = min( i,j in POINT where i < j )\n                         ( dist[i,j] + maxdist * (x[i] != x[j]) );\n\ninclude \"value_precede_chain.mzn\";\nconstraint value_precede_chain([ i | i in 1..k ],x);\n\nsolve maximize obj;\n\noutput [\"obj = \\(obj); x = \\(x)\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 800, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc9ee4a7-afab-47ec-b1de-660a32cb800d": {"__data__": {"id_": "bc9ee4a7-afab-47ec-b1de-660a32cb800d", "embedding": null, "metadata": {"model_name": "compatible_assignment"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "compatible_assignment_source_code", "node_type": "4", "metadata": {"model_name": "compatible_assignment"}, "hash": "7ac4269af6c77df3c3d16adc0ddc281c544e441bcec246f32f7c3df10cb0fcc2", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: n;\nset of int: W = 1..n;\nint: m;\nset of int: T = 1..2*m;\narray[W,T] of int: profit;\narray[W,W] of bool: compatible;\n\narray[W] of var T: task;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(task);\nconstraint forall(w1, w2 in W)\n                 (task[w1] != m /\\ task[w2] = task[w1] + 1 ->\n                   compatible[w1,w2]);\n\nsolve maximize sum(w in W)(profit[w,task[w]]);\n\noutput [ \"task = \\(task)\\n\" ] ;\n\n\nModel 2 : \n\n\nint: n;\nset of int: W = 1..n;\nint: m;\nset of int: T = 1..2*m;\narray[W,T] of int: profit;\narray[W,W] of bool: compatible;\n\narray[W] of var T: task;\narray[T] of var opt W: worker;\n\nconstraint inverse(task,worker);\nconstraint forall(t in T where t mod m != 0)\n                 (compatible[worker[t],worker[t+1]]);\n           \n\nsolve maximize sum(w in W)(profit[w,task[w]]);\n\noutput [ if fix(occurs(worker[t])) then show(worker[t]) else \" \" endif ++ \" \"\n       | t in T ] \n       ++ [ show(task), \"\\n\" ]\n       ;\n\npredicate inverse(array[int] of var opt int: f, array[int] of var opt int: g) = \n          forall(i in index_set(f), j in index_set(g))\n                (occurs(f[i]) /\\ occurs(g[j]) ->\n                 (deopt(f[i]) = j <-> deopt(g[j]) = i));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb15f4c1-6f19-4752-941d-ec4b668cd045": {"__data__": {"id_": "bb15f4c1-6f19-4752-941d-ec4b668cd045", "embedding": null, "metadata": {"model_name": "constrained_connected"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "constrained_connected_source_code", "node_type": "4", "metadata": {"model_name": "constrained_connected"}, "hash": "b90c813be17e3df06f90ffba05aba6ab06c04815dfad57f2d339ba59f208063f", "class_name": "RelatedNodeInfo"}}, "text": "% constrained clustering \n% Pick a maximal subset of edges so that no two nodes\n% given by the pairs (first[i],second[i]) \n% are connected.\n\nint: n;\nset of int: NODE = 1..n;\nint: m;\nset of int: EDGE = 1..m;\narray[EDGE] of NODE: pre;\narray[EDGE] of NODE: suc;\nint: d;\nset of int: DPAIR = 1..d;\narray[DPAIR] of NODE: first;\narray[DPAIR] of NODE: second;\n\nvar set of EDGE: selected;\n% a representative for each cluster\narray[NODE] of var NODE: rep;\n\n%constraint forall(e in selected)\n%                 (rep[pre[e]] = rep[suc[e]]);\nconstraint forall(e in EDGE)\n                 (e in selected -> rep[pre[e]] = rep[suc[e]]);\n\nconstraint forall(d in DPAIR)\n                 (rep[first[d]] != rep[second[d]]);\n\nsolve maximize card(selected);\n\noutput [ \"(\" ++ show(pre[e]) ++ \",\" ++ show(suc[e]) ++ \")\\n\"\n       | e in fix(selected) ]\n       ++ [show(rep),\"\\n\"]\n       ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2500f50d-0ebe-4825-9313-90e62cf640a2": {"__data__": {"id_": "2500f50d-0ebe-4825-9313-90e62cf640a2", "embedding": null, "metadata": {"model_name": "crazy_sets"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crazy_sets_source_code", "node_type": "4", "metadata": {"model_name": "crazy_sets"}, "hash": "14b54e865f7a0614cd1488064c1d40fce2765d0d256f2f133ba51971264e950a", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: n; % maximum value\nset of int: NUMBER = 1..n;\nint: c; % cardinality of sets\nint: m; % number of sets\n\n\narray[1..m] of var set of NUMBER: s;\n\nconstraint forall(i,j,k in 1..m where i < j /\\ j < k)\n     ( s[i] intersect s[j] intersect s[k] = {} );\n\n\narray[1..m,1..c] of var NUMBER: x;\nconstraint forall(i in 1..m, j in 1..c-1)\n      ( x[i,j] < x[i,j+1] );\n\n\nconstraint forall(i in 1..m-1, j in 1..c)\n      ( x[i,j] < x[i+1,j] );\n\nconstraint forall(i in 1..m, o in NUMBER)\n      (o in s[i] \n       -> exists(j in 1..c)(x[i,j] = o));\nconstraint forall(i in 1..m, j in 1..c)(x[i,j] in s[i]);\n\nsolve satisfy;\n\noutput [show(s)];\n\nn = 10;\nc = 4;\nm = 4;\n\n\n\nModel 2 : \n\n\nint: n; % maximum value\nset of int: NUMBER = 1..n;\nint: c; % cardinality of sets\nint: m; % number of sets\n\n\narray[1..m,1..c] of var NUMBER: x;\nconstraint forall(i in 1..m, j in 1..c-1)\n      ( x[i,j] < x[i,j+1] );\n\n\nconstraint forall(i in 1..m-1, j in 1..c)\n      ( x[i,j] < x[i+1,j] );\n\ninclude \"global_cardinality_low_up.mzn\";\nconstraint global_cardinality_low_up( [ x[i,j] | i in 1..m, j in 1..c ],\n                              [ i | i in 1..n ],\n                              [ 0 | i in 1..n ],\n                              [ 2 | i in 1..n ]);\n\n\nsolve satisfy;\n\n   output [ if j = 1 then \"{\" else \"\" endif ++\n   show(x[i,j])\n   ++ if j = c then \"}\" else \", \" endif\n   ++ if j = c /\\ i < m then \", \" else \"\" endif\n   | i in 1..m, j in 1..c ];\n   \n\nn = 10;\nc = 4;\nm = 4;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dec99f3-9d68-44a0-935d-f07516176a20": {"__data__": {"id_": "7dec99f3-9d68-44a0-935d-f07516176a20", "embedding": null, "metadata": {"model_name": "crossfigure"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crossfigure_source_code", "node_type": "4", "metadata": {"model_name": "crossfigure"}, "hash": "f2da92112a9b16208ac61a4465030f676fbacc22b5ecbef8e4227705a5f3744b", "class_name": "RelatedNodeInfo"}}, "text": "% Crossfigure problem in MiniZinc.\n% \"\"\"\n% Crossfigures are the numerical equivalent of crosswords. You have a grid and some\n% clues with numerical answers to place on this grid. Clues come in several different\n% forms (for example: Across 1. 25 across times two, 2. five dozen, 5. a square number,\n% 10. prime, 14. 29 across times 21 down ...).\n% \"\"\"\n\n\nint: n = 9;\narray[1..n, 1..n] of var 0..9: M;\n\nset of int: D = 0..9999; % the max length of the numbers in this problem is 4\nvar D: A1;\nvar D: A4;\nvar D: A7;\nvar D: A8;\nvar D: A9;\nvar D: A10;\nvar D: A11;\nvar D: A13;\nvar D: A15;\nvar D: A17;\nvar D: A20;\nvar D: A23;\nvar D: A24;\nvar D: A25;\nvar D: A27;\nvar D: A28;\nvar D: A29;\nvar D: A30;\n\nvar D: D1;\nvar D: D2;\nvar D: D3;\nvar D: D4;\nvar D: D5;\nvar D: D6;\nvar D: D10;\nvar D: D12;\nvar D: D14;\nvar D: D16;\nvar D: D17;\nvar D: D18;\nvar D: D19;\nvar D: D20;\nvar D: D21;\nvar D: D22;\nvar D: D26;\nvar D: D28;\n\n\n%\n% across(Matrix, Across, Len, Row, Col)\n%\tConstrains 'Across' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding across.\n%\npredicate across(array[int, int] of var D: Matrix, var D: Across, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Across)\n   /\\\n   forall(i in 0..Len-1) (\n\n       Matrix[Row,Col+i] = tmp[i+1]\n   )\n;\n\n%\n% down(Matrix, Down, Len, Row, Col):\n%\tConstrains 'Down' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding down.\n%\npredicate down(array[int,int] of var D: Matrix, var D: Down, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Down)\n   /\\\n   forall(i in 0..Len-1) (\n      Matrix[Row+i,Col] = tmp[i+1]\n   )\n;\n\n\n%\n% converts a number <-> array\n%\npredicate toNum10(array[int] of var D: a, var D: n) =\n          let { int: len = length(a) }\n          in\n          n = sum(i in 1..len) (\n            ceil(pow(10.0, int2float(len-i))) * a[i]\n          )\n          /\\ forall(i in 1..len) (a[i] >= 0)\n;\n\n\n%\n% x is a square\n% \npredicate square(var D: x) =\n   exists(y in D) (\n      y*y = x\n   )\n;\n\n\n%\n% very simple primality test\n%\npredicate is_prime(var int: x) =\n   forall(i in 2..ceil(sqrt(9999.0))) ( \n        (i < x) -> (x mod i > 0)\n   )\n;\n\n\nsolve :: int_search(\n         [M[i,j] | i,j in 1..n] ++\n         [A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n         D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28],\n         occurrence,\n         indomain_min,\n         complete\n         ) \n     satisfy;\n\n\nconstraint\n\n   % Set up the constraints between the matrix elements and the\n   % clue numbers.\n   across(M, A1, 4, 1, 1)  /\\ \n   across(M, A4, 4, 1, 6)  /\\ \n   across(M, A7, 2, 2, 1)  /\\ \n   across(M, A8, 3, 2, 4)  /\\ \n   across(M, A9, 2, 2, 8)  /\\ \n   across(M, A10, 2, 3, 3) /\\ \n   across(M, A11, 2, 3, 6) /\\ \n   across(M, A13, 4, 4, 1) /\\ \n   across(M, A15, 4, 4, 6) /\\ \n   across(M, A17, 4, 6, 1) /\\ \n   across(M, A20, 4, 6, 6) /\\ \n   across(M, A23, 2, 7, 3) /\\ \n   across(M, A24, 2, 7, 6) /\\ \n   across(M, A25, 2, 8, 1) /\\ \n   across(M, A27, 3, 8, 4) /\\ \n   across(M, A28, 2, 8, 8) /\\ \n   across(M, A29, 4, 9, 1) /\\ \n   across(M, A30, 4, 9, 6) /\\ \n\n   down(M, D1, 4, 1, 1)  /\\ \n   down(M, D2, 2, 1, 2)  /\\ \n   down(M, D3, 4, 1, 4)  /\\ \n   down(M, D4, 4, 1, 6)  /\\ \n   down(M, D5, 2, 1, 8)  /\\ \n   down(M, D6, 4, 1, 9)  /\\ \n   down(M, D10, 2, 3, 3) /\\ \n   down(M, D12, 2, 3, 7) /\\ \n   down(M, D14, 3, 4, 2) /\\ \n   down(M, D16, 3, 4, 8) /\\ \n   down(M, D17, 4, 6, 1) /\\ \n   down(M, D18, 2, 6, 3) /\\ \n   down(M, D19, 4, 6, 4) /\\ \n   down(M, D20, 4, 6, 6) /\\ \n   down(M, D21, 2, 6, 7) /\\ \n   down(M, D22, 4, 6, 9) /\\ \n   down(M, D26, 2, 8, 2) /\\ \n   down(M, D28, 2, 8, 8) /\\ \n\n\n   % Set up the clue constraints.\n%  Across\n%  1 27 across times two\n%  4 4 down plus seventy-one\n%  7 18 down plus four\n%  8 6 down divided by sixteen\n%  9 2 down minus eighteen\n% 10 Dozen in six gross\n% 11 5 down minus seventy\n% 13 26 down times 23 across\n% 15 6 down minus 350\n% 17 25 across times 23 across\n% 20 A square number\n% 23 A prime number\n% 24 A square number\n% 25 20 across divided by seventeen\n% 27 6 down divided by four\n% 28 Four dozen\n% 29 Seven gross\n% 30 22 down plus 450 \n\n   A1 = 2 * A27         /\\ \n   A4 = D4 + 71         /\\ \n   A7 = D18 + 4         /\\ \n   A8 = D6 div 16       /\\ \n   A9 = D2 - 18         /\\ \n   A10 = 6 * 144 div 12 /\\ \n   A11 = D5 - 70        /\\ \n   A13 = D26 * A23      /\\ \n   A15 = D6 - 350       /\\ \n   A17 = A25 * A23      /\\ \n   square(A20)          /\\ \n   is_prime(A23)        /\\\n   square(A24)          /\\ \n   A25 = A20 div 17     /\\ \n   A27 = D6 div 4       /\\ \n   A28 = 4 * 12         /\\ \n   A29 = 7 * 144        /\\ \n   A30 = D22 + 450      /\\ \n\n   % Down\n   %\n   %  1 1 across plus twenty-seven\n   %  2 Five dozen\n   %  3 30 across plus 888\n   %  4 Two times 17 across\n   %  5 29 across divided by twelve\n   %  6 28 across times 23 across\n   % 10 10 across plus four\n   % 12 Three times 24 across\n   % 14 13 across divided by sixteen\n   % 16 28 down times fifteen\n   % 17 13 across minus 399\n   % 18 29 across divided by eighteen\n   % 19 22 down minus ninety-four\n   % 20 20 across minus nine\n   % 21 25 across minus fifty-two\n   % 22 20 down times six\n   % 26 Five times 24 across\n   % 28 21 down plus twenty-seven \n\n   D1 = A1 + 27     /\\ \n   D2 = 5 * 12      /\\ \n   D3 = A30 + 888   /\\ \n   D4 = 2 * A17     /\\ \n   D5 = A29 div 12  /\\ \n   D6 = A28 * A23   /\\ \n   D10 = A10 + 4    /\\ \n   D12 = A24 * 3    /\\ \n   D14 = A13 div 16 /\\ \n   D16 = 15 * D28   /\\ \n   D17 = A13 - 399  /\\ \n   D18 = A29 div 18 /\\ \n   D19 = D22 - 94   /\\ \n   D20 = A20 - 9    /\\ \n   D21 = A25 - 52   /\\ \n   D22 = 6 * D20    /\\ \n   D26 = 5 * A24    /\\ \n   D28 = D21 + 27\n\n\n   % Fix the blackboxes\n   /\\\n   M[1,5] = 0 /\\\n   M[2,3] = 0 /\\\n   M[2,7] = 0 /\\\n   M[3,2] = 0 /\\\n   M[3,5] = 0 /\\\n   M[3,8] = 0 /\\\n   M[4,5] = 0 /\\\n   M[5,1] = 0 /\\\n   M[5,3] = 0 /\\\n   M[5,4] = 0 /\\\n   M[5,5] = 0 /\\\n   M[5,6] = 0 /\\\n   M[5,7] = 0 /\\\n   M[5,9] = 0 /\\\n   M[6,5] = 0 /\\\n   M[7,2] = 0 /\\\n   M[7,5] = 0 /\\\n   M[7,8] = 0 /\\\n   M[8,3] = 0 /\\\n   M[8,7] = 0 /\\\n   M[9,5] = 0\n;\n\n\noutput [\n show([A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n       D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28]), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(M[i,j])\n  | i,j  in 1..n\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 6458, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aad75ded-c6cc-4bc6-83dd-ba9061273cec": {"__data__": {"id_": "aad75ded-c6cc-4bc6-83dd-ba9061273cec", "embedding": null, "metadata": {"model_name": "curriculum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "curriculum_source_code", "node_type": "4", "metadata": {"model_name": "curriculum"}, "hash": "5e841e2a3bcfb8cf890f8470317528ff34fed9848749bf96c1cfb196f6054baa", "class_name": "RelatedNodeInfo"}}, "text": "% The balanced academic curriculum problem:\n%\n% A curriculum is a set of courses with prerequisites.\n% Each course must be assigned within a set number of periods.\n% A course cannot be scheduled before its prerequisites.\n% Each course confers a number of academic credits (it's \"load\").\n% Students have lower and upper bounds on the number of credits they can study for in a given period.\n% Students have lower and upper bounds on the number of courses they can study for in a given period.\n% The goal is to assign a period to every course satisfying these criteria, minimising the load for all periods.\n\ninclude \"globals.mzn\";\n\nint: n_courses;\nint: n_periods;\nint: load_per_period_lb;\nint: load_per_period_ub;\nint: courses_per_period_lb;\nint: courses_per_period_ub;\narray [1..n_courses] of int: course_load;\nint: max_course_load = sum(c in courses)(course_load[c]);\n\nset of int: courses = 1..n_courses;\nset of int: periods = 1..n_periods;\n\n% period course is assigned to\narray [courses] of var periods: course_period;\n% whether period i has course j assigned\narray [periods, courses] of var 0..1: x;\n% total load for each period\narray [periods] of var load_per_period_lb..load_per_period_ub: load;\n% optimisation target\nvar load_per_period_lb..load_per_period_ub: objective;\n\nconstraint forall(p in periods) (\n    forall(c in courses) (x[p,c] = bool2int(course_period[c] = p)) /\\\n    sum(i in courses) (x[p,i]) >= courses_per_period_lb /\\\n    sum(i in courses) (x[p,i]) <= courses_per_period_ub /\\\n    load[p] = sum(c in courses) (x[p,c] * course_load[c]) /\\\n    load[p] >= load_per_period_lb /\\\n    load[p] <= objective\n);\n\n% prerequisite(a, b) means \"course a has prerequisite course b\".\n\npredicate prerequisite(courses: a, courses: b) =\n    course_period[b] < course_period[a];\n\n% add some redundant linear constraints\n\nconstraint forall(p in 0..n_periods-1) (\n    let {\n\t\tvar 0..max_course_load: l = sum(c in courses) (bool2int(course_period[c] > p) * course_load[c])\n\t} in \n        l >= (n_periods-p) * load_per_period_lb /\\\n        l <= (n_periods-p) * objective\n    );\n\nsolve :: seq_search([\n      int_search([x[i,j] | i in periods, j in courses], input_order, indomain_max, complete),\n      int_search([objective], input_order, indomain_min, complete)\n    ]) minimize objective;\n\noutput \n    [show(c) ++ \"-\" ++ show(course_period[c]) ++ \"\\t\" | c in courses ] ++ [\"\\n\"] ++\n    [\"objective = \", show(objective)];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "917952e9-24d8-47f3-8471-c608d40c088c": {"__data__": {"id_": "917952e9-24d8-47f3-8471-c608d40c088c", "embedding": null, "metadata": {"model_name": "diamond_free_degree_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "diamond_free_degree_sequence_source_code", "node_type": "4", "metadata": {"model_name": "diamond_free_degree_sequence"}, "hash": "f3cb233cf5e41924fbdecfa663359348cdb62fcaf0819a2c5461dd7aeb24e3d1", "class_name": "RelatedNodeInfo"}}, "text": "%\n% Diamond-free Degree Sequence (CSPLib #50) in MiniZinc.\n%\n% Given a simple undirected graph G=(V,E), where V is the set of vertices and E the set of\n% undirected edges, the edge {u,v} is in E if and only if vertex u is adjacent to vertex v\u2208G.\n% The graph is simple in that there are no loop edges, i.e. we have no edges of the form {v,v}.\n% Each vertex v\u2208V has a degree dv i.e. the number of edges incident on that vertex. Consequently\n% a graph has a degree sequence d1,\u2026,dn, where di>=di+1. A diamond is a set of four vertices\n% in V such that there are at least five edges between those vertices. Conversely, a graph is\n% diamond-free if it has no diamond as an induced subgraph, i.e. for every set of four vertices\n% the number of edges between those vertices is at most four.\n%\n% In our problem we have additional properties required of the degree sequences of the graphs,\n% in particular that the degree of each vertex is greater than zero (i.e. isolated vertices\n% are disallowed), the degree of each vertex is modulo 3, and the sum of the degrees is\n% modulo 12 (i.e. |E| is modulo 6).\n%\n% The problem is then for a given value of n, produce all unique degree sequences d1,\u2026,dn such\n% that\n%\n%  * di\u2265di+1\n%  * each degree di>0 and di is modulo 3\n%  * the sum of the degrees is modulo 12\n%  * there exists a simple diamond-free graph with that degree sequence\n\n\ninclude \"globals.mzn\"; \n\nint: n = 11;\n\n% decision variables\narray[1..n,1..n] of var 0..1: x;\narray[1..n] of var 1..n: degrees;\n\n\n% solve satisfy;\nsolve :: int_search(degrees, first_fail, indomain_split, complete) satisfy;\n\nconstraint\n  forall(i,j,k,l in 1..n where i < j /\\ j < k /\\ k < l) (\n     x[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4\n  )\n  /\\\n  forall(i in 1..n) (\n     degrees[i] = sum([x[i,j] | j in 1..n])\n     /\\ degrees[i] mod 3 = 0\n     % no loops\n     /\\ x[i,i] = 0\n  ) \n  /\\ % undirected graph\n  forall(i,j in 1..n) (\n    x[i,j] = x[j,i]\n  )\n  /\\ sum(degrees) mod 12 = 0\n\n  % symmetry breaking\n  /\\ decreasing(degrees)\n  /\\ lex2(x)\n;\n\noutput \n[ \"degrees: \", show(degrees), \"\\n\"]\n% ++\n% [\n%   if j = 1 then \"\\n\" else \" \" endif ++\n%     show(x[i,j])\n%   | i,j in 1..n\n% ]\n;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2171, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a510b5a8-679f-4e0d-b954-f6ee4c0d2193": {"__data__": {"id_": "a510b5a8-679f-4e0d-b954-f6ee4c0d2193", "embedding": null, "metadata": {"model_name": "doublechannel"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "doublechannel_source_code", "node_type": "4", "metadata": {"model_name": "doublechannel"}, "hash": "307f44467fb9924817f173ce9c4e7e4812b10ee72ac9a85fac7bbbe6b25ff355", "class_name": "RelatedNodeInfo"}}, "text": "% scheduling ships entering and leaving a port through k channels\nset of int: TYPE = 1..3;\nint: entering = 1;\nint: leaving  = 2;\nint: dummy = 3;\n\nint: nC; % number of channels\nset of int: CHANNEL = 1..nC;\narray[CHANNEL] of int: len;    % length in 100m units\n\nint: nS; % number of ships\nset of int: SHIP = 1..nS; % ships ENTER then LEAVE\nset of int: SHIPE = 1..nS+nC; % ships ENTER then LEAVE then nC dummy ships\n\narray[SHIP] of int: speed;   % time in minutes to traverse 100m\narray[SHIP] of int: desired; % desired time to start to enter/leave \narray[SHIP] of entering..leaving: dirn;   % entering or leaving\n\nint: leeway;  % leeway between 2 ships in 100m units\nint: maxt;    % maximum time\nset of int: TIME = 0..maxt;\n\narray[SHIPE] of var TYPE: kind = dirn ++ [ dummy | i in 1..nC];\narray[SHIPE] of var TIME:    start; % when ships enter the channel \narray[SHIPE] of var TIME:     end; % when ships leave the channel \narray[SHIPE] of var CHANNEL: channel; % which channel a ship is assigned to\n\narray[SHIP] of var SHIPE:   next;  % the next ship in the same channel (or a dummy)\n\n% dummy ships\nconstraint forall(s in nS + 1 .. nS + nC)(start[s] = maxt /\\ end[s] = maxt);\nconstraint forall(s in nS + 1 .. nS + nC)(channel[s] = s - nS);\n\n% relationships between start and ends\nconstraint forall(s in SHIP)(end[s] = start[s] + len[channel[s]]*speed[s]);\n\n\n% the next ship are all different\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(next);\n\n% no clashes in channel\nconstraint forall(s in SHIP)(if kind[s] + kind[next[s]] = entering+leaving then\n                                end[s] <= start[next[s]]\n                             else\n                                start[s] + speed[s]*leeway <= start[next[s]] /\\\n                                end[s] + speed[s]*leeway <= end[next[s]]\n                             endif);\n\n% next ship is in same channel\nconstraint forall(s in SHIP)(channel[next[s]] = channel[s]);\n\nsolve minimize sum(s in SHIP)(abs(start[s] - desired[s]));\n\noutput [ \"start = \",show(start),\n         \";\\nend = \", show(end),\n         \";\\nchannel = \", show(channel),\n         \";\\nnext = \", show(next),\n         \";\\n\" ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2149, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e88bd90-5fd4-4913-9c38-9e43f42187ed": {"__data__": {"id_": "3e88bd90-5fd4-4913-9c38-9e43f42187ed", "embedding": null, "metadata": {"model_name": "fractions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fractions_source_code", "node_type": "4", "metadata": {"model_name": "fractions"}, "hash": "173531be3ef421b94d3c68d93055626ad9ef60aa3d535e8ed26257dab53541d4", "class_name": "RelatedNodeInfo"}}, "text": "%\n% Fractions problem in MiniZinc.\n%\n% Prolog benchmark problem (BProlog)\n% \"\"\"\n% Find distinct non-zero digits such that the following equation holds:\n%        A        D        G\n%     ------  + ----- + ------  = 1\n%       B*C      E*F      H*I\n\ninclude \"globals.mzn\"; \n\nvar 1..9: A;\nvar 1..9: B;\nvar 1..9: C;\nvar 1..9: D;\nvar 1..9: E;\nvar 1..9: F;\nvar 1..9: G;\nvar 1..9: H;\nvar 1..9: I;\narray[1..9] of var 1..9: Vars=[A,B,C,D,E,F,G,H,I];\n\nvar 1..81: D1;\nvar 1..81: D2;\nvar 1..81: D3;\n\n\n\n% solve satisfy;\nsolve :: int_search(Vars ++ [D1,D2,D3], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   all_different(Vars) /\\\n   D1 = 10*B+C /\\\n   D2 = 10*E+F /\\\n   D3 = 10*H+I /\\\n   A*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3 /\\\n   % break the symmetry\n   A*D2 >= D*D1 /\\\n   D*D3 >= G*D2 /\\\n   %redundant constraints\n   3*A >= D1 /\\\n   3*G <= D2\n\n;\n\noutput [\n  show(Vars), \"\\n\"\n]\n;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 881, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8673ae3a-8b69-4087-8851-d117e28bba7a": {"__data__": {"id_": "8673ae3a-8b69-4087-8851-d117e28bba7a", "embedding": null, "metadata": {"model_name": "golfers"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golfers_source_code", "node_type": "4", "metadata": {"model_name": "golfers"}, "hash": "e32cfca461e8a31c08874e82635bb47d9319d02eb4a1ba3d0ad2528bd89b1d0a", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\n% The social golfers problem\n% A club has a number of golfers that play rounds in groups (the number of\n% golfers is a multiple of the number of groups).  Each round, a golfer\n% plays with a group of different people, such that the same pair of golfers\n% never play together twice.\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\nset of int: places = 1..n_golfers;\n\narray [rounds, places] of var golfers: round_place_golfer;\narray [golfers, golfers] of var 0..n_rounds: golfer_golfer_round;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (p in places) (round_place_golfer[r, p])\n    );\n\n    % Break some symmetry by strictly ordering each group in each round.\n    %\nconstraint\n    forall (r in rounds, p in places) (\n        if p mod n_per_group != 0\n        then round_place_golfer[r, p] < round_place_golfer[r, p + 1]\n        else true\n        endif\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (r in rounds, g in 0..(n_groups - 1), i, j in 1..n_per_group\n            where i < j) (\n        golfer_golfer_round[\n            round_place_golfer[r, n_per_group * g + i],\n            round_place_golfer[r, n_per_group * g + j]\n        ] = r\n    );\n\nsolve\n    :: int_search([round_place_golfer[r, p] | r in rounds, p in places],\n        first_fail, indomain_min, complete)\n    satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if p = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif ) ++\n    ( if p mod n_per_group = 1 then \"   \" else \" \" endif ) ++\n    show_int(2, round_place_golfer[r, p]) | r in rounds, p in places\n];\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups, group] of var golfers: round_group_i_golfer;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (g in groups, i in group) (round_group_i_golfer[r, g, i])\n    );\n\n    % We also break some symmetry\n    % here by strictly ordering each group.\n    %\nconstraint\n    forall (r in rounds, g in groups, i in group where i < n_per_group) (\n        round_group_i_golfer[r, g, i] < round_group_i_golfer[r, g, i + 1]\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups, i, j in group where i < j) (\n            bool2int(\n                round_group_i_golfer[r, g, i] = a\n            /\\  round_group_i_golfer[r, g, j] = b\n            )\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if g = 1 /\\ i = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif) ++\n    ( if i = 1 then \"   \" else \" \" endif) ++\n    show_int(2, round_group_i_golfer[r, g, i]) \n    |  r in rounds, g in groups, i in group\n];\n\n\nModel 3 : \n\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups] of var set of golfers: round_group_golfers;\n\n    % Each group has to have the right size.\n    %\nconstraint\n    forall (r in rounds, g in groups) (\n        card(round_group_golfers[r, g]) = n_per_group\n    );\n\n    % Each group in each round has to be disjoint.\n    %\nconstraint\n    forall (r in rounds) (\n        all_disjoint (g in groups) (round_group_golfers[r, g])\n    );\n\n    % Symmetry breaking.\n    %\n% constraint\n%     forall (r in rounds, g in groups where g < n_groups) (\n%         round_group_golfers[r, g] < round_group_golfers[r, g + 1]\n%     );\n\n    % Each pair may play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups) (\n            bool2int({a, b} subset round_group_golfers[r, g])\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [    ( if   g = 1\n              then \"\\nround \" ++ show(r) ++ \":   \"\n              else \"   \"\n              endif\n            ) ++\n            show(round_group_golfers[r, g])\n       |    r in rounds, g in groups\n       ];\n\n\nModel 4 :\n\n\nint: weeks = 4;\nint: groups = 3;\nint: groupSize = 3;\nint: golfers = groups * groupSize;\n\nset of int: Golfer = 1..golfers;\nset of int: Week = 1..weeks;\nset of int: Group = 1..groups;\n\n% Search space: The set of all possible group assignments to all \n% players in each of the weeks\narray[Golfer, Week] of var Group: assign;\n\n% solve satisfy;\n% solve :: int_search([assign[i,j] | i in Golfer, j in Week ], \"first_fail\", \"indomain\", \"complete\") satisfy;\nsolve :: int_search([assign[i,j] | i in Golfer, j in Week ], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each group has exactly groupSize players\n   forall (gr in Group, w in Week)( % c1\n     sum (g in Golfer) (bool2int(assign[g,w] = gr)) = groupSize\n   )\n   /\\\n   % C2: Each pair of players only meets at most once\n   forall (g1, g2 in Golfer, w1, w2 in Week  where g1 != g2 /\\ w1 != w2) (\n     (bool2int(assign[g1,w1] = assign[g2,w1]) + bool2int(assign[g1,w2] = assign[g2,w2])) <= 1\n   )\n  /\\\n  % SBSA: Symmetry-breaking by selective assignment\n  % On the first week, the first groupSize golfers play in group 1, the \n  % second groupSize golfers play in group 2, etc. On the second week, \n  % golfer 1 plays in group 1, golfer 2 plays in group 2, etc.\n  forall(g in Golfer) (\n    assign[g,1]=((g-1) div groupSize) + 1 % \n  )\n  /\\\n  forall(g in Golfer where g <= groupSize)(\n    assign[g,2]=g\n  )\n\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n  show(assign[i,j])\n  | i in Golfer, j in Week\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 6751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd7e037a-7e2e-4517-8dbf-cde92b359f38": {"__data__": {"id_": "cd7e037a-7e2e-4517-8dbf-cde92b359f38", "embedding": null, "metadata": {"model_name": "golomb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golomb_source_code", "node_type": "4", "metadata": {"model_name": "golomb"}, "hash": "75a05ee42b734058df1d2ca42580e8d74a8554e13f680a5c8a9afc88ba162904", "class_name": "RelatedNodeInfo"}}, "text": "% Golomb rulers\n% From csplib:\n% A Golomb ruler may be defined as a set of m integers 0 = a_1 < a_2 <\n% ... < a_m such that the m(m-1)/2 differences a_j - a_i, 1 <= i < j\n% <= m are distinct. Such a ruler is said to contain m marks and is of\n% length a_m. The objective is to find optimal (minimum length) or\n% near optimal rulers.\n%\n% This is the \"ternary constraints and an alldifferent\" model\n\ninclude \"globals.mzn\";\n\nint: m;\nint: n = m*m;\n\narray[1..m] of var 0..n: mark;\n\narray[1..(m*(m-1)) div 2] of var 0..n: differences =\n    [ mark[j] - mark[i] | i in 1..m, j in i+1..m];\n\nconstraint mark[1] = 0;\n\nconstraint forall ( i in 1..m-1 ) ( mark[i] < mark[i+1] );\n\nconstraint alldifferent(differences);\n\n    % Symmetry breaking\nconstraint differences[1] < differences[(m*(m-1)) div 2];\n\nsolve :: int_search(mark, input_order, indomain, complete)\n    minimize mark[m];\n\noutput [show(mark)];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3950b3d-f146-49ed-ab1f-e1c9f2feaef2": {"__data__": {"id_": "c3950b3d-f146-49ed-ab1f-e1c9f2feaef2", "embedding": null, "metadata": {"model_name": "graph"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "graph_source_code", "node_type": "4", "metadata": {"model_name": "graph"}, "hash": "038218f0cf89fbca4c8051f230611d84a8ec1bbf696033cc77cf8055807d006c", "class_name": "RelatedNodeInfo"}}, "text": "% a strange graph numbering problem\nvar 1..8: a;\nvar 1..8: b;\nvar 1..8: c;\nvar 1..8: d;\nvar 1..8: e;\nvar 1..8: f;\nvar 1..8: g;\nvar 1..8: h;\n\n% Each number is used exactly once\nconstraint a != b;\nconstraint a != c;\nconstraint a != d;\nconstraint a != e;\nconstraint a != f;\nconstraint a != g;\nconstraint a != h;\nconstraint b != c;\nconstraint b != d;\nconstraint b != e;\nconstraint b != f;\nconstraint b != g;\nconstraint b != h;\nconstraint c != d;\nconstraint c != e;\nconstraint c != f;\nconstraint c != g;\nconstraint c != h;\nconstraint d != e;\nconstraint d != f;\nconstraint d != g;\nconstraint d != h;\nconstraint e != f;\nconstraint e != g;\nconstraint e != h;\nconstraint f != g;\nconstraint f != h;\nconstraint g != h;\n\n% Adjacent vertices differ by at most two\nconstraint abs(a - b) >= 2;\nconstraint abs(a - c) >= 2;\nconstraint abs(a - d) >= 2;\nconstraint abs(b - c) >= 2;\nconstraint abs(b - e) >= 2;\nconstraint abs(b - f) >= 2;\nconstraint abs(c - d) >= 2;\nconstraint abs(c - e) >= 2;\nconstraint abs(c - f) >= 2;\nconstraint abs(c - g) >= 2;\nconstraint abs(d - f) >= 2;\nconstraint abs(d - g) >= 2;\nconstraint abs(e - f) >= 2;\nconstraint abs(e - h) >= 2;\nconstraint abs(f - g) >= 2;\nconstraint abs(f - h) >= 2;\nconstraint abs(g - h) >= 2;\n\nsolve satisfy;\n\noutput [\"  \\(b)-\\(e)\\n\",\n        \" /|*|\\\\\\n\",\n        \"\\(a)-\\(c)-\\(f)-\\(h)\\n\",\n        \" \\\\|*|/\\n\",\n        \"  \\(d)-\\(g)\\n\"] ++\n       [\"\\na = \\(a); b = \\(b); c = \\(c); d = \\(d);\",\n        \" e = \\(e); f = \\(f); g = \\(g); h = \\(h);\\n\"]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "487e1222-884a-4f19-8abb-8613b69a6a6e": {"__data__": {"id_": "487e1222-884a-4f19-8abb-8613b69a6a6e", "embedding": null, "metadata": {"model_name": "itemset_mining"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "itemset_mining_source_code", "node_type": "4", "metadata": {"model_name": "itemset_mining"}, "hash": "2b919d1462a9c9214e219216be873ebdf988e3135f05f78e69f9893db3106543", "class_name": "RelatedNodeInfo"}}, "text": "int : NrI ; \nint : NrT ; \nint : Freq ;\narray [ 1..NrT ] of set of 1..NrI : TDB;\nvar set of 1..NrI : Items ;\nconstraint card ( cover ( Items ,TDB ) ) >= Freq ;\nsolve satisfy ; \n\nfunction var set of int : cover (\n         var set of int : Items ,\n         array [ int ] of var set of int : D) = \n         let {\n                          var set of index_set (D): Trans ;\n                          constraint forall ( t in index_set (D) )\n                          ( t in Trans <-> Items subset D[ t ] );\n         } in Trans;\n\narray[1.. NrI] of int: itemprice;\nint: minUtility;\n\nconstraint sum(i in Items)(itemprice[i]) >= minUtility;\n\nNrI = 6;\nint: bread = 1;\nint: butter = 2;\nint: cheese = 3;\nint: cocoa = 4;\nint: milk = 5;\nint: vegemite = 6;\narray[1..NrI] of string: name = [\"bread\",\"butter\",\"cheese\",\"cocoa\",\"milk\",\"vegemite\"];\nitemprice = [1,2,1,2,1,1];\n\nNrT = 7;\nTDB = [ { butter, cheese, milk, vegemite },\n        { butter, cocoa, milk, vegemite },\n\t{ bread, cocoa, cheese, milk },\n\t{ bread, butter, cheese, vegemite }, \n\t{ bread, cheese, milk, vegemite },\n\t{ bread, butter, cheese, cocoa, milk },\n\t{ bread, cheese, milk }];\n\nFreq = 4;\nminUtility = 3;\n\noutput [ name[i] ++ \" \" | i in fix(Items) ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2eaf832-34f0-4fcb-9b40-d06720c4812c": {"__data__": {"id_": "f2eaf832-34f0-4fcb-9b40-d06720c4812c", "embedding": null, "metadata": {"model_name": "jobshop"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "jobshop_source_code", "node_type": "4", "metadata": {"model_name": "jobshop"}, "hash": "49d4c5940900db9ef5691b03fb7b95d86083559490a0bad096d1d6226d447fe2", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\n% only one task on any machine at one time\n%constraint forall(ma in MACH)\n%                 (forall(j1,j2 in JOB where j1 < j2)\n%                       (forall(t1,t2 in TASK where mc[j1,t1] = ma /\\ mc[j2,t2] = ma)\n%                              (nonoverlap(s[j1,t1],d[j1,t1],s[j2,t2],d[j2,t2]))));\n\nconstraint forall(j1, j2 in JOB, t1, t2 in TASK \n       where j1 < j2 /\\ mc[j1,t1] = mc[j2,t2])\n      (nonoverlap(s[j1,t1],d[j1,t1],\n                  s[j2,t2],d[j2,t2]));\n\npredicate nonoverlap(var int:s1, var int:d1,\n                     var int:s2, var int:d2)=\n          s1 + d1 <= s2 \\/ s2 + d2 <= s1;\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve :: int_search([s[j,t] | j in JOB, t in TASK], input_order, indomain_min, complete)\n      minimize makespan;\n\noutput [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK]; \n\n\n\nModel 2 : \n\n\n\nint: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\ninclude \"disjunctive.mzn\";\n\nconstraint forall(ma in MACH)\n                 ( let { array[int] of var int: ss = [ s[j,t] | j in JOB, t in TASK where mc[j,t] = ma ];\n                         array[int] of int:     dd = [ d[j,t] | j in JOB, t in TASK where mc[j,t] = ma ]; } in\n                   disjunctive(ss,dd));\n\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve  \n   %:: int_search([s[j,t]|j in JOB,t in TASK],input_order,indomain_min,complete)\n   %:: int_search([s[j,t]|j in JOB,t in TASK],smallest, indomain_min, complete)\n   %:: int_search([s[j,t]|j in JOB,t in TASK],dom_w_deg, indomain_min, complete)\n         minimize makespan;\n\noutput [ \"makespan = \", show(makespan), \"\\n\"] ++\n       [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK]; \n\n\n\nModel 3 : \n\n\nint: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\ninclude \"disjunctive.mzn\";\n\nconstraint forall(ma in MACH)\n                 ( let { array[int] of var int: ss = [ s[j,t] | j in JOB, t in TASK where mc[j,t] = ma ];\n                         array[int] of int:     dd = [ d[j,t] | j in JOB, t in TASK where mc[j,t] = ma ]; } in\n                   disjunctive(ss,dd));\n\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve  \n%      ::\n%      seq_search([ int_search([s[i,j]| i in JOB, j in TASK],\n%                             smallest, indomain_min, complete),\n%                  int_search([makespan], input_order, indomain_min, complete)])\n%      seq_search([ int_search([makespan], input_order, indomain_min, complete),\n%                   int_search([s[i,j]| i in JOB, j in TASK],\n%                             smallest, indomain_min, complete)])\n         minimize makespan;\n\noutput [ \"makespan = \", show(makespan), \"\\n\"] ++\n       [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9157072c-085a-4cee-9c71-efcbc889ec20": {"__data__": {"id_": "9157072c-085a-4cee-9c71-efcbc889ec20", "embedding": null, "metadata": {"model_name": "K4xP2Graceful"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "K4xP2Graceful_source_code", "node_type": "4", "metadata": {"model_name": "K4xP2Graceful"}, "hash": "a6d414e210ce10761b3b42e30c84933de5e453250ecbaed9ccb310b1432f6d55", "class_name": "RelatedNodeInfo"}}, "text": "% K4P2 Graceful Graph in MiniZinc.\n\ninclude \"globals.mzn\"; \n\nint: m = 16;\nint: n = 8;\narray[1..n] of var 0..m: nodes;\narray[1..m, 1..2] of var 1..n: graph;\narray[1..m] of var 1..m: edges;\n\n\n\nsolve :: int_search(nodes, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..m) (\n    abs(nodes[graph[i,1]] - nodes[graph[i,2]]) = edges[i]  \n  )\n  /\\\n  all_different(edges) \n  /\\ \n  all_different(nodes)\n;\n\ngraph =\narray2d(1..m, 1..2,\n[1, 2,\n1, 3,\n1, 4,\n2, 3,\n2, 4,\n3, 4,\n\n5, 6,\n5, 7,\n5, 8,\n6, 7,\n6, 8,\n7, 8,\n\n1, 5,\n2, 6,\n3, 7,\n4, 8]);\n\noutput\n[\n  \"nodes: \" ++ show(nodes) ++ \"\\n\" ++\n  \"edges: \" ++ show(edges) ++ \"\\n\"\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c7c0732-ec64-458b-b19d-7f574a85d29d": {"__data__": {"id_": "1c7c0732-ec64-458b-b19d-7f574a85d29d", "embedding": null, "metadata": {"model_name": "killer_sudoku"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "killer_sudoku_source_code", "node_type": "4", "metadata": {"model_name": "killer_sudoku"}, "hash": "562f08abbb19981f6a0a6c5c49a6edb4ec0d5c7825f23abe4de132fc0a8333ec", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n%\n% Killer Sudoku in MiniZinc.\n\n%   Killer sudoku (also killer su doku, sumdoku, sum doku, addoku, or\n%   samunamupure) is a puzzle that combines elements of sudoku and kakuro.\n%   Despite the name, the simpler killer sudokus can be easier to solve\n%   than regular sudokus, depending on the solver's skill at mental arithmetic;\n%   the hardest ones, however, can take hours to crack.\n \n%   The objective is to fill the grid with numbers from 1 to 9 in a way that\n%   the following conditions are met:\n \n%     * Each row, column, and nonet contains each number exactly once.\n%     * The sum of all numbers in a cage must match the small number printed\n%       in its corner.\n%     * No number appears more than once in a cage. (This is the standard rule\n%       for killer sudokus, and implies that no cage can include more\n%       than 9 cells.)\n \n%   In 'Killer X', an additional rule is that each of the long diagonals\n%   contains each number once.\n%   \"\"\"\n \n\nint: num_p = 29; % number of segments\nint: num_hints = 4;  % number of hints per segments (that's max number of hints)\nint: max_val = 100;\narray[1..num_p, 1..2*num_hints+1] of 0..max_val: P =\n  array2d(1..num_p, 1..2*num_hints+1, [\n    1,1,  1,2, 0,0, 0,0,   3,\n    1,3,  1,4, 1,5, 0,0,  15,\n    1,6,  2,5, 2,6, 3,5,  22,\n    1,7,  2,7, 0,0, 0,0,   4,\n    1,8,  2,8, 0,0, 0,0,  16,\n    1,9,  2,9, 3,9, 4,9,  15,\n    2,1,  2,2, 3,1, 3,2,  25,\n    2,3,  2,4, 0,0, 0,0,  17,\n    3,3,  3,4, 4,4, 0,0,   9,\n    3,6,  4,6, 5,6, 0,0,   8,\n    3,7,  3,8, 4,7, 0,0,  20,\n    4,1,  5,1, 0,0, 0,0,   6,\n    4,2,  4,3, 0,0, 0,0,  14,\n    4,5,  5,5, 6,5, 0,0,  17,\n    4,8,  5,7, 5,8, 0,0,  17,\n    5,2,  5,3, 6,2, 0,0,  13,\n    5,4,  6,4, 7,4, 0,0,  20,\n    5,9,  6,9, 0,0, 0,0,  12,\n    6,1,  7,1, 8,1, 9,1,  27,\n    6,3,  7,2, 7,3, 0,0,   6,\n    6,6,  7,6, 7,7, 0,0,  20,\n    6,7,  6,8, 0,0, 0,0,   6,\n    7,5,  8,4, 8,5, 9,4,  10,\n    7,8,  7,9, 8,8, 8,9,  14,\n    8,2,  9,2, 0,0, 0,0,   8,\n    8,3,  9,3, 0,0, 0,0,  16,\n    8,6,  8,7, 0,0, 0,0,  15,\n    9,5,  9,6, 9,7, 0,0,  13,\n    9,8,  9,9, 0,0, 0,0,  17\n   ]);\n\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n \n  forall(i in 1..n) (\n        all_different([x[i,j] | j in 1..n]) /\\\n        all_different([x[j,i] | j in 1..n])\n  )\n  /\\\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n  /\\ % calculate the hints\n  forall(p in 1..num_p) (\n     sum(i in 1..num_hints where P[p,2*(i-1)+1] > 0) (x[  P[p, 2*(i-1)+1], P[p,2*(i-1)+2]  ]) = P[p, 2*num_hints+1]\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];\n\n\nModel 2 :\n\n\ninclude \"globals.mzn\"; \nint: n = 9;\narray[1..n, 1..n] of var 1..9: x;\n\nint: num_segments = 29; % number of segments\n\narray[1..n, 1..n] of int: segments =\narray2d(1..n, 1..n,\n[\n  1, 1, 2, 2, 2, 3, 4, 5, 6, % 1\n  7, 7, 8, 8, 3, 3, 4, 5, 6, % 2\n  7, 7, 9, 9, 3,10,11,11, 6, % 3\n 13,14,14, 9,15,10,11,12, 6, % 4\n 13,16,16,17,15,10,12,12,18, % 5\n 19,16,20,17,15,21,22,22,18, % 6\n 19,20,20,17,23,21,21,24,24, % 7\n 19,25,26,23,23,27,27,24,24, % 8\n 19,25,26,23,28,28,28,29,29, % 9\n]);\n\narray[1..num_segments] of int: segment_sums =\n[\n   3, % 1\n  15, % 2\n  22, % 3\n   4, % 4\n  16, % 5\n  15, % 6\n  25, % 7\n  17, % 8\n   9, % 9\n   8, % 10\n  20, % 11\n  17, % 12\n   6, % 13\n  14, % 14\n  17, % 15\n  13, % 16\n  20, % 17\n  12, % 18\n  27, % 19\n   6, % 20\n  20, % 21\n   6, % 22\n  10, % 23\n  14, % 24\n   8, % 25\n  16, % 26\n  15, % 27\n  13, % 28\n  17  % 29\n];\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\n% Standard Sudoku constraints\nconstraint\n  % rows and columns\n  forall(i in 1..n) (\n     all_different([x[i,j] | j in 1..n]) /\\\n     all_different([x[j,i] | j in 1..n])\n  )\n  /\\ % blocks\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n;\n\n% Handle the segments\nconstraint\n  forall(p in 1..num_segments) (\n    segment_sums[p] = sum([x[i,j] | i,j in 1..n where segments[i,j] = p])\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a94e1664-7127-4dc7-938c-be821ee65104": {"__data__": {"id_": "a94e1664-7127-4dc7-938c-be821ee65104", "embedding": null, "metadata": {"model_name": "knapsack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "knapsack_source_code", "node_type": "4", "metadata": {"model_name": "knapsack"}, "hash": "75f39de76978e5752937bff9c1844a6ed2c59ca0475e9fbd974cfa8e16ff3c9a", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\nint: n; % number of objects\nset of int: OBJ = 1..n;\nint: capacity;\narray[OBJ] of int: profit;\narray[OBJ] of int: size;\n\narray[OBJ] of var int: x; % how many of each object\n\nconstraint forall(i in OBJ)(x[i] >= 0);\nconstraint sum(i in OBJ)(size[i] * x[i]) <= capacity;\nsolve maximize sum(i in OBJ)(profit[i] * x[i]);\n\noutput [\"x = \", show(x), \"\\n\"];\n\n\nModel 2 : \n\n\nint: n;    set of int: OBJ = 1..n;\narray[OBJ] of int: size;\narray[OBJ] of int: value;\nint: limit;\narray[OBJ] of var int: x;\nconstraint forall(i in OBJ)(x[i] >= 0);\nconstraint sum(i in OBJ)(size[i]*x[i])<= limit;\nsolve maximize sum(i in OBJ)(value[i]*x[i]);\nn = 4;\nsize = [5,8,9,12];\nvalue = [3,5,7,8];\nlimit = 29;\n\n\n\nModel 3 : \n\n\nint: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\narray[1..n] of var 0..1: x; \n\nconstraint sum(i in 1..n)(size[i] * x[i]) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * x[i]);\n\noutput [\"x = \", show(x), \"\\n\"];\n\n\n\nModel 4 : \n\n\nint: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\narray[1..n] of var bool: x; \n\nconstraint sum(i in 1..n)(size[i] * bool2int(x[i])) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * bool2int(x[i]));\n\noutput [\"x = \", show(x), \"\\n\"];\n\n\n\nModel 5 : \n\n\n\nint: n; % number of objects\nset of int: OBJ = 1..n;\nint: capacity;\narray[OBJ] of int: profit;\narray[OBJ] of int: size;\n\nvar set of OBJ: x; \n\n\nconstraint sum(i in x)(size[i]) <= capacity;\n\nsolve maximize sum(i in x)(profit[i]);\n\n\noutput [\"x = \", show(x), \"\\n\"];\n\n\n\nModel 6 : \n\n\nint: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\nvar set of 1..n: x;\n\nconstraint sum(i in 1..n)(size[i] * bool2int(i in x)) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * bool2int(i in x));\n\noutput [\"x = \", show(x), \"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e649d36-e2d7-4939-be73-945bc0f0bab9": {"__data__": {"id_": "8e649d36-e2d7-4939-be73-945bc0f0bab9", "embedding": null, "metadata": {"model_name": "langford"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "langford_source_code", "node_type": "4", "metadata": {"model_name": "langford"}, "hash": "81d5988aff39861b507e50b9888384b4dd1c822a40ca55685a9cdd9f6967a03b", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\n% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\narray[DIG,COPY] of var POS: x;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent([x[d,c] | d in DIG, c in COPY]);\n\nconstraint forall(d in DIG, c in 1..m-1)\n                 (x[d,c+1] = x[d,c] + d + 1);\n\nsolve satisfy;\n\noutput [show(x),\"\\n\"]\n       ++ [ if fix(x[d,c]) = p then show(d) ++ \" \" else \"\" endif\n          | p in POS, d in DIG, c in COPY ]\n       ;\n\n\n\nModel 2 : \n\n\n% Langford's number problem in MiniZinc.\n%\n% Arrange 2 sets of positive integers 1..k to a sequence,\n% such that, following the first occurence of an integer i,\n% each subsequent occurrence of i, appears i+1 indices later\n% than the last.\n% For example, for k=4, a solution would be 41312432\n\ninclude \"globals.mzn\";\n\nint: k;\nset of int: positionDomain = 1..2*k;\n\narray[positionDomain] of var positionDomain: position;\n% better presentation:\narray[positionDomain] of var 1..k: solution;\n\nsolve :: int_search(position, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..k) (\n     position[i+k] = position[i] + i+1 /\\\n     % hakank: added this\n     solution[position[i]] = i /\\ \n     solution[position[k+i]] = i\n  )\n  /\\   \n  all_different(position)\n  /\\ % symmetry breaking\n  solution[1] < solution[2*k]\n;\n\n\noutput [\n  show(solution), \"\\n\"\n\n];\n\n%\n% data\n%\nk = 4;\n% k = 7;\n% k = 8;\n% k = 10;\n% k = 20;\n\n\n\nModel 3 : \n\n\n% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\narray[DIG,COPY] of var POS: x;\n\n\nset of int: DIGCOPY = 1..l;\narray[POS] of var DIGCOPY: y;\n\ninclude \"inverse.mzn\";\nconstraint inverse([x[d,c] | d in DIG, c in COPY], y);\n\n%include \"alldifferent.mzn\";\n%constraint alldifferent([x[d,c] | d in DIG, c in COPY]);\n\nconstraint forall(d in DIG, c in 1..m-1)\n      (x[d,c+1] = x[d,c] + d + 1);\n\n%constraint forall(d in DIG, c in 1..m-1, p in POS)\n%                 (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1);\n\nsolve \n      %:: int_search(y, input_order, indomain_min, complete) \n      %:: int_search([x[d,c] | d in DIG, c in COPY], input_order, indomain_min, complete) \n      satisfy;\n\noutput [show(x),\"\\n\"]\n       ++ [ show((y[p] - 1) div m + 1) ++ \" \"\n          | p in POS ]\n       ;\n\n\nModel 4 :\n\n\n% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\n\nset of int: DIGCOPY = 1..l;\narray[POS] of var DIGCOPY: y;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(y);\n\nconstraint forall(d in DIG, c in 1..m-1, p in POS)\n                 (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1);\n\nsolve satisfy;\n\noutput [ show((y[p] - 1) div m + 1) ++ \" \"\n          | p in POS ]\n       ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12f8241a-c416-47ed-bf1f-38b16e67e831": {"__data__": {"id_": "12f8241a-c416-47ed-bf1f-38b16e67e831", "embedding": null, "metadata": {"model_name": "loan"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "loan_source_code", "node_type": "4", "metadata": {"model_name": "loan"}, "hash": "f3203238cc34dfe46a5bdc7a44b65e734bb3904ec7b33b8698358f752d0a3ab3", "class_name": "RelatedNodeInfo"}}, "text": "% variables\nvar float: R;        % quarterly repayment\nvar float: P;        % principal initially borrowed\nvar 0.0 .. 10.0: I;  % interest rate\n\n% intermediate variables\nvar float: B1; % balance after one quarter\nvar float: B2; % balance after two quarters\nvar float: B3; % balance after three quarters\nvar float: B4; % balance owing at end\n\nconstraint B1 = P * (1.0 + I) - R;\nconstraint B2 = B1 * (1.0 + I) - R;\nconstraint B3 = B2 * (1.0 + I) - R; \nconstraint B4 = B3 * (1.0 + I) - R;\n\nsolve satisfy;\n\noutput [\n \"Borrowing \", show_float(0, 2, P), \" at \", show(I*100.0), \n \"% interest, and repaying \", show_float(0, 2, R), \n  \"\\nper quarter for 1 year leaves \", show_float(0, 2, B4), \" owing\\n\"\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 697, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cec3eedd-6f41-42a0-9f3d-bf0cd0846859": {"__data__": {"id_": "cec3eedd-6f41-42a0-9f3d-bf0cd0846859", "embedding": null, "metadata": {"model_name": "ltsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ltsp_source_code", "node_type": "4", "metadata": {"model_name": "ltsp"}, "hash": "c7945a1de1d604f492c9ac4b9165ce6f2c464c1ce9df7cfb1b463e105137b823", "class_name": "RelatedNodeInfo"}}, "text": "int: n; % number of cities\nset of int: CITY = 1..n;\nset of int: POS = 1..n;\narray[CITY] of int: coord; % coordinate of city \nint: m; % number of precedences\nset of int: PREC = 1..m;\narray[PREC] of CITY: left;\narray[PREC] of CITY: right;\n\narray[CITY] of var POS: order;\narray[POS] of var CITY: city;\n\ninclude \"inverse.mzn\";\nconstraint inverse(order,city);\n\nconstraint forall(i in PREC)(order[left[i]] < order[right[i]]);\n\nsolve minimize sum(i in 1..n-1)(abs(coord[city[i]] - coord[city[i+1]]));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 493, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01db9572-246a-4f4e-9687-f3c253840d7e": {"__data__": {"id_": "01db9572-246a-4f4e-9687-f3c253840d7e", "embedding": null, "metadata": {"model_name": "magic_hexagon"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_hexagon_source_code", "node_type": "4", "metadata": {"model_name": "magic_hexagon"}, "hash": "3f7c1b1c7fa9dfa3ee9d2dc86e7d0ca860d023bf2c1863b1cb0a30d3db2b9809", "class_name": "RelatedNodeInfo"}}, "text": "% Magic Hexagon in MiniZinc.\n\ninclude \"globals.mzn\"; \n\nset of int: N = 1..19;\nvar N: a;\nvar N: b;\nvar N: c;\nvar N: d;\nvar N: e;\nvar N: f;\nvar N: g;\nvar N: h;\nvar N: i;\nvar N: j;\nvar N: k;\nvar N: l;\nvar N: m;\nvar N: n;\nvar N: o;\nvar N: p;\nvar N: q;\nvar N: r;\nvar N: s;\n\narray[N] of var N: LD = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s];\n\nsolve satisfy;\n\nconstraint\n  all_different(LD) /\\\n\n  a + b + c =  38 /\\\n  d + e + f + g =  38 /\\\n  h + i + j + k + l =  38 /\\ \n  m + n + o + p =  38 /\\ \n  q + r + s =  38 /\\ \n  a + d + h =  38 /\\ \n  b + e + i + m =  38 /\\ \n  c + f + j + n + q =  38 /\\ \n  g + k + o + r =  38 /\\ \n  l + p + s =  38 /\\ \n  c + g + l =  38 /\\ \n  b + f + k + p =  38 /\\ \n  a + e + j + o + s =  38 /\\ \n  d + i + n + r =  38 /\\ \n  h + m + q =  38 /\\ \n\n  a < c /\\\n  a < h /\\\n  a < l /\\\n  a < q /\\\n  a < s /\\\n  c < h\n;\n\noutput\n[\n  show(LD)\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 869, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09670331-95d7-417f-a216-cf244b1b9488": {"__data__": {"id_": "09670331-95d7-417f-a216-cf244b1b9488", "embedding": null, "metadata": {"model_name": "magic_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_sequence_source_code", "node_type": "4", "metadata": {"model_name": "magic_sequence"}, "hash": "67d2087970c950f9ad26dc7b75cd5f9b7621aa937b6ae9d585af9fb0dd65464e", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% Magic sequence in MiniZinc.\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n  forall(i in 0..n-1) (\n    s[i] = sum(j in 0..n-1) (bool2int(s[j] = i))\n  )\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\nModel 2 : \n\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n        forall(i in 0..n-1) (\n                s[i] = sum(j in 0..n-1) (bool2int(s[j]=i))\n        )\n        /\\ \n        sum(i in 0..n-1) (s[i])=n \n        /\\\n        sum(i in 0..n-1) (s[i]*i) =n\n;\n\n\noutput [\n       show(s), \"\\n\",\n];\n\n\n\nModel 3 :\n\n\ninclude \"globals.mzn\";\n\nint: n =  10;\narray[0..n-1] of var 0..n-1: s;\narray[0..n-1] of int: value = array1d(0..n-1, [i | i in 0..n-1]); % helper for distribute\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   distribute(s, value, s)         /\\ \n   sum(i in 0..n-1) (s[i])   = n   /\\\n   sum(i in 0..n-1) (s[i]*i) = n\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\nModel 4 :\n\n\ninclude \"globals.mzn\";\n\nint: n =  100;\narray[0..n-1] of var 0..n-1: s;\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   global_cardinality(s,array1d(0..n-1, set2array(index_set(s))), s) :: domain\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\nModel 5 : \n\n\n% Magic squares in MiniZinc\n\ninclude \"globals.mzn\";\n\nint: n = 3;\n\nint: total = ( n * (n*n + 1)) div 2;\narray[1..n,1..n] of var 1..n*n: magic;\n\n\n% solve satisfy;\nsolve :: int_search(\n        [magic[i,j] | i in 1..n, j in 1..n], \n        first_fail,\n        indomain_min,\n        complete) \n    satisfy;\n\n\nconstraint\n\n        all_different([magic[i,j] | i in 1..n, j in 1..n]) :: domain\n        /\\\n        forall(k in 1..n) (\n           sum(i in 1..n) (magic[k,i]) = total % :: domain\n           /\\\n           sum(i in 1..n) (magic[i,k]) = total %:: domain\n        )\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,i]) = total  %:: domain\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,n-i+1]) = total %:: domain\n;\n\n% symmetry breaking\n% Activating all these constraints we get the\n% \"standard\" way of counting the number of solutions:\n%    1, 0, 1, 880, 275305224\n% i.e. this sequence: http://oeis.org/A006052\n%\n% Without the constraints the number of solutions are:\n%  N  #solutions\n%  -------------\n%  1     1\n%  2     0\n%  3     8\n%  4  7040\n%  5  many... \n%\n% constraint\n%    magic[1,1] < magic[1,n]\n%    /\\ magic[1,n] < magic[n,1]\n%    /\\ magic[1,1] < magic[n,n]\n% ;\n\n\noutput [\n  \"Total: \" ++ show(total) ++ \"\\n\"\n] ++\n[\n    %   show(magic)\n  if j = 1 then \"\\n\" else \"\" endif ++\n    if fix(magic[i,j]) < 10 then \" \" else \"\" endif ++\n    show(magic[i,j]) ++ \" \"\n  | i,j in 1..n\n] \n++ \n[\"\\n\"];\n\n\nModel 6 : \n\n\n% Magic square integer programming version in MiniZinc.\n% In recreational mathematics, a magic square of order n is an\n% arrangement of n^2 numbers, usually distinct integers, in a square,\n% such that n numbers in all rows, all columns, and both diagonals sum\n% to the same constant. A normal magic square contains the integers\n% from 1 to n^2.\n\n\n% square order\nint: n = 3; \n\n% integers to be placed\nset of 1..n*n: N = 1..n*n;\n\n% x[i,j,k] = 1 means that cell (i,j) contains integer k\narray[1..n, 1..n, N] of var 0..1: x;\n\narray[1..n, 1..n] of var 1..n*n: square;\n\nvar int: s; % the magic sum\n\nsolve :: int_search(\n        [x[i,j,k] | i,j in 1..n, k in N] ++ \n        [square[i,j] | i,j in 1..n] ++\n        [s],\n        first_fail,\n        indomain_min, \n        complete % \"credit(640, bbs(5))\" % \"complete\"\n      ) \n    satisfy;\n\nconstraint \n  s >= 0 \n  /\\\n  s <= n*n*n\n  /\\\n  % each cell must be assigned exactly one integer\n  forall(i in 1..n, j in 1..n) (\n     sum(k in N) (x[i,j,k]) = 1\n  )\n  /\\\n  % each integer must be assigned exactly to one cell\n  forall(k in N) (\n     sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1\n  )\n\n  /\\\n  % the sum in each row must be the magic sum \n  forall(i in 1..n) (\n     sum(j in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in each column must be the magic sum\n  forall(j in 1..n) (\n     sum(i in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in the diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,i,k]) = s\n\n  /\\\n  % the sum in the co-diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s\n\n  /\\\n  % for output\n  forall(i,j in 1..n) ( square[i,j] = sum(k in N) (k * x[i,j,k]))\n;\n\n\noutput [ \n   \"\\ns: \", show(s)\n] ++\n[\n  if  j = 1 then \"\\n\" else \" \" endif ++\n    show(square[i,j]) \n  | i,j in 1..n\n\n] ++ [\"\\n\"];\n\n% printf \"\\n\";\n% printf \"Magic sum is %d\\n\", s;\n% printf \"\\n\";\n% for{i in 1..n}\n% {  printf{j in 1..n} \"%3d\", sum{k in N} k * x[i,j,k];\n%    printf \"\\n\";\n% }\n% printf \"\\n\";", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6db0bc1f-8c7d-4fd6-af0b-aed0973d82ee": {"__data__": {"id_": "6db0bc1f-8c7d-4fd6-af0b-aed0973d82ee", "embedding": null, "metadata": {"model_name": "maximum_density_still_life"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "maximum_density_still_life_source_code", "node_type": "4", "metadata": {"model_name": "maximum_density_still_life"}, "hash": "81607e3861cfe5e5db8e73f6f5845cda8d05719d94e1572fc893d08dcce214df", "class_name": "RelatedNodeInfo"}}, "text": "% Maximum density still life in MiniZinc.\n\n% include \"globals.mzn\"; \nint: size = 7; % to change\n\nset of int: objFunctionBoardCoord      = 2..size+1;\nset of int: checkConstraintsBoardCoord = 1..size+2;\nset of int: augmentedBoardCoord        = 0..size+3;\n\n% Search space: The set of all possible assignments of 0s (dead) and 1s (live) \n% to the cells of the board section. However, to be able to easily express \n% constraints on \"boundary\" cells, we take as search space the set of 0/1 \n% boards of size n+4 by n+4: the actual stable pattern appears in the sub-board \n% defined by ignoring the first/last two rows/columns.\narray[augmentedBoardCoord,augmentedBoardCoord] of var 0..1: grid;\n\nvar int: z = sum(r in objFunctionBoardCoord, c in objFunctionBoardCoord) (grid[r,c]);\n\n% Objective function: Maximize the number of live cells in the sub-board defined \n% by ignoring the first/last two/ rows/columns.\n\n\n% solve maximize z;\nsolve :: int_search(\n        [grid[i,j] | i,j in augmentedBoardCoord], \n        smallest, \n        indomain_max, \n        complete) \n    maximize z;\n\nconstraint\n\n  % C1: Cells in the first/last two rows/columns are all 0 (dead)\n  forall(x in augmentedBoardCoord) (\n    grid[0,x] = 0 /\\\n    grid[1,x] = 0 /\\\n    grid[size+2,x] = 0 /\\  \n    grid[size+3,x] = 0 /\\\n    grid[x,0] == 0 /\\       \n    grid[x,1] == 0 /\\\n    grid[x,size+2] = 0 /\\  \n    grid[x,size+3] = 0 \n  )\n  /\\\n  forall(r in checkConstraintsBoardCoord,c in checkConstraintsBoardCoord) (\n    % C2: Each cell of the board (except those of the first/last row/column) \n    %     that has exactly three live neighbors is alive. \n    %     Together with constraint C1, this implies that cells in the\n    %     second/last-but-one row/column cannot have three live neighbors.\n    (\n      ( ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + \n          grid[r,c-1] + grid[r,c+1] + \n          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1]\n          ) = 3 \n       ) -> (grid[r,c] = 1)\n    )\n    /\\    \n\n    % C3: Each live cell must have 2 or 3 live neighbors (cells of the first/last \n    % row/column may be ignored by this constraint)\n    (\n       (grid[r,c] = 1) -> \n                      (\n                        2 <= \n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          )\n                        /\\\n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          ) <= 3\n                      )\n    )\n  )\n  \n  /\\\n  % SBSO: Symmetry-breaking by selective ordering\n  % The assignment is forced to respect an ordering on the values that occur in corner entries\n  % of the board. In particular:  \n  % - if the NW-corner cell is dead, the SE-corner cell\n  % must be dead too \n  % - if the NE-corner cell is dead, the SW-corner cell must be dead too\n  % \n  grid[2,2] >= grid[size+1,size+1] /\\\n  grid[2,size+1] >= grid[size+1,2]\n;\n\n\noutput [\n  if j = 0 then \"\\n\" else \" \" endif ++\n    show(grid[i,j])\n  | i,j in augmentedBoardCoord\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03bcdb29-cf91-46a4-8a53-b20a5f22e609": {"__data__": {"id_": "03bcdb29-cf91-46a4-8a53-b20a5f22e609", "embedding": null, "metadata": {"model_name": "mip"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "mip_source_code", "node_type": "4", "metadata": {"model_name": "mip"}, "hash": "e098273574aa9bed2fc442ccbcf4d18d638b4405c46e5a635b99695be910349d", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\nvar float: B;\nvar float: C;\nvar float: D;\n\nconstraint 2.0*B + 2.0*C + 1.0*D <= 30.0;\nconstraint 1.0*B + 2.0*C + 3.0*D <= 25.0;\nconstraint 2.0*B + 1.0*C + 1.0*D <= 20.0;\nsolve maximize 3.0*B + 1.0*C + 3.0*D;\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0\n\n\n\nModel 2 : \n\n\nvar float: B;\nvar float: C;\nvar float: D;\n\n\nsolve maximize 1.0*B - 1.0*C + 1.0*D;\nconstraint 2.0*B - 1.0*C + 2.0*D <=  4.0;\nconstraint 2.0*B - 3.0*C + 1.0*D <= -5.0;\nconstraint -1.0*B + 1.0*C - 2.0*D <= -1.0;\n\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0\n\n\n\nModel 3 :\n\n\nvar int: B;\nvar int: C;\nvar int: D;\n\nconstraint 2.0*B + 2.0*C + 1.0*D <= 30.0;\nconstraint 1.5*B + 2.0*C + 3.0*D <= 25.0;\nconstraint 2.0*B + 1.0*C + 1.0*D <= 20.0;\nsolve maximize 3.0*B + 1.0*C + 3.0*D;\n\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0\n\n\n\nModel 4 :\n\n\nsolve maximize 21*x + 11*y;\n\nvar int: x;\nvar int: y;\nconstraint 7*x + 4*y <= 13;\nconstraint x >= 0 /\\ y >= 0; \n\n\n\nModel 5 : \n\n\nsolve maximize 8*x + 5*y;\n\nvar int: x;\nvar int: y;\nconstraint x + y <= 6;\nconstraint 9*x + 5*y <= 45;\nconstraint x >= 0 /\\ y >= 0;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcba139a-7122-4479-9f37-9d9465c77561": {"__data__": {"id_": "dcba139a-7122-4479-9f37-9d9465c77561", "embedding": null, "metadata": {"model_name": "missing_solution"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "missing_solution_source_code", "node_type": "4", "metadata": {"model_name": "missing_solution"}, "hash": "70e29f014c1f20a91929596d91b6af9c551dea84cf807ca079141299115bd357", "class_name": "RelatedNodeInfo"}}, "text": "% Missing Solutions\nint: n; % no of people\nset of int: PERSON = 1..n;\nint: male = 1; int: female = 2;\nset of int: GENDER = male..female;\narray[PERSON] of GENDER: gender;\narray[PERSON] of int: age;\n\narray[1..n] of var PERSON: order;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(order);\n\n% males and females alternate\nconstraint forall(i in 1..n)\n                 (i mod 2 = 0 <-> gender[order[i]] = female);\n\n% age does not grow bu more than 10\nconstraint forall(i in 1..n-1)\n                 (age[order[i+1]] - age[order[i]] <= 10);\n\nsolve satisfy;\n\noutput [ show(order), \"\\n\"] ++\n       [\"[\"] ++ [ show(age[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                | i in 1..n ] ++\n       [\"[\"] ++ [ show(gender[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                 | i in 1..n ];\n\n\n%n = 6;\n%gender = [male,male,male,female,female,female];\n%age = [13, 25, 34, 40, 16, 13];\n\nn = 5;\ngender = [male,male,female,female,female];\nage = [13,25,34,40,16];\n\n%order = [4,2,3,1,5];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1000, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1e242a9-8d26-4aa8-9431-b2c2ec732195": {"__data__": {"id_": "c1e242a9-8d26-4aa8-9431-b2c2ec732195", "embedding": null, "metadata": {"model_name": "nonogram_create_automaton2"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nonogram_create_automaton2_source_code", "node_type": "4", "metadata": {"model_name": "nonogram_create_automaton2"}, "hash": "f42faca01a6169fd22dc8008b2669c76de8a94536e348c1ca0d9bfcdf1840835", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% Nonoram solver using regular and is written in all-MiniZinc.\n\ninclude \"globals.mzn\"; \n\nint: rows;\nint: row_rule_len;\narray[1..rows, 1..row_rule_len] of int: row_rules;\nint: cols;\nint: col_rule_len;\narray[1..cols, 1..col_rule_len] of int: col_rules;\n\n\narray[1..rows, 1..cols] of var 1..2: x;\n\nsolve :: int_search(\n     [x[i,j] | j in 1..cols, i in 1..rows], \n     first_fail, \n     indomain_min, \n     complete) \nsatisfy;\n\n%\n% The approach is rather simple:\n%  - zero_positions is a set of the positions in the state table where the \n%    state 0 should be, which also correspond to the state of the pattern \"0\"\n%  - when this have been identified everything else comes to rest\n%\n% On the other hand, the calculation of the states is hairy, very hairy.\n%\npredicate make_automaton(array[int] of var int: x, array[int] of int: pattern) =\n    let {\n        int: n = length(pattern),\n        % fix for \"zero clues\"\n        int: len = max(length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern),1),\n        int: leading_zeros = sum(i in 1..n) (bool2int(pattern[i] = 0)),\n        set of int: zero_positions = {sum(j in 1..i) (pattern[j]+1) -leading_zeros | i in 1..n where pattern[i] > 0},\n       array[1..2*len] of 0..len*2: states = \n     if (length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern)) = 0 then \n       [1,1]  % fix for \"zero clues\"\n     else \n    [1, 2] ++\n    [\n       if i div 2 in zero_positions then\n           if i mod 2 = 0 then\n            0\n           else\n            (i div 2) + 1\n           endif\n       elseif (i-1) div 2 in zero_positions then\n           if i mod 2 = 0 then\n            (i div 2)+1\n           else\n            (i div 2)+2\n           endif\n       else\n         if not( (((i-1) div 2) - 1) in zero_positions) then\n            if i mod 2 = 0 then\n               (i div 2) + 1\n            else \n              if (i div 2) + 1 in zero_positions then\n                  (i div 2) + 2\n              else \n                  0\n              endif\n            endif\n          else\n             if i mod 2 = 0 then\n                 (i div 2) + 1\n             else \n                if not((i div 2) + 1 in zero_positions) then\n                   0\n                else \n                   (i div 2) + 2 \n                endif\n             endif\n          endif\n       endif\n    | i in 3..2*(len-1)]\n    ++\n    [len, 0]\n    endif\n    } \n    in\n    regular(\n       x,\n       len, \n       2, \n       array2d(1..len, 1..2, states),\n       1, \n       {len}) % :: domain\n;\n\nconstraint\n\n      forall(j in 1..cols) (\n        make_automaton([x[i,j] | i in 1..rows], [col_rules[j,k] | k in 1..col_rule_len])\n      )\n      /\\\n      forall(i in 1..rows) (\n        make_automaton([x[i,j] | j in 1..cols], [row_rules[i,k] | k in 1..row_rule_len])\n      )\n\n;\n\noutput \n[\n  if j = 1 then \"\\n\" else \"\" endif ++\n     if fix(x[i,j]) = 1 then \" \" else \"#\" endif\n    \n  | i in 1..rows, j in 1..cols\n] \n++ \n[\n  \"\\n\"\n];\n\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\nint: X;\nint: Y;\n\nint: maxlen;\n\narray [1..Y,1..maxlen] of int: rows;\n\narray [1..X,1..maxlen] of int: cols;\n\narray[1..2, 1..2, 1..2] of 0..1: nonmul = \n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 1, 1,\n         1, 0, 0, 1]\n    );\n\narray[1..2, 1..2, 1..2] of 0..1: nonadd =\n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 0, 1,\n         1, 0, 0, 1]\n    );\n\n% variables\n%\narray[1..Y, 1..X] of var 1..2: A;\n\n% All variables in a region must be different\n% Ordering to ensure each variable is handled exactly once\npredicate nonogram_row(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: row) =\n    nonogram([A[row, v] | v in 1..X], cons);\n\npredicate nonogram_col(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: col) = \n    nonogram([A[v,col] | v in 1..Y], cons);\n\npredicate nonogram(array[int] of var 1..2: A, array [int] of int: cons) = \n    let {\n          int: n = if cons[1] = 0 then 0 else max(index_set(cons)) endif,\n          array [1..n + 1, 1..2] of int: consarr =\n              if cons[1] = 0 then [|1, 0|] \n              else array2d(1..n + 1, 1..2,\n                [1, 2] ++\n                [    i * nonmul[cons[i - 1] + 1, cons[i] + 1, s] + \n                     nonadd[cons[i - 1] + 1, cons[i] + 1, s] \n                     | i in 2..n, s in 1..2 \n                ] ++ \n                [n+1,0]\n              )\n              endif\n     } in (\n         regular(A, n + 1, 2, consarr, 1, {n + 1})\n     );\n\nconstraint forall(i in 1..Y) (\n    nonogram_row(A, [rows[i, j] | j in 1..maxlen where rows[i, j] >= 0], i)\n);\n\nconstraint forall(i in 1..X) (\n    nonogram_col(A, [cols[i, j] | j in 1..maxlen where cols[i, j] >= 0], i)\n);\n\nsolve :: int_search(array1d(1..X*Y,A),input_order,indomain_max,complete) satisfy;\n\noutput [\n    if fix(A[r, c]) = 1 then \" \" else \".\" endif ++ \n    if c = Y then \"\\n\" else \" \" endif\n    | r in 1..X, c in 1..Y\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4924, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33eb3af5-9788-468f-83a9-d74f407c6abb": {"__data__": {"id_": "33eb3af5-9788-468f-83a9-d74f407c6abb", "embedding": null, "metadata": {"model_name": "nurses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nurses_source_code", "node_type": "4", "metadata": {"model_name": "nurses"}, "hash": "4900e80664116808cee8036d0ab53265b288dbee32044c7ef4974592db0a4712", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\nint: k; % number of nurses\nset of int: NURSE = 1..k;\nint: m; % number of days\nset of int: DAY = 1..m;\nset of int: SHIFT = 1..3;\nint: day = 1; int: night = 2; int: dayoff = 3;\narray[SHIFT] of string: code = [\"d\", \"n\", \"-\"];\nint: o; % number on day shift\nint: l; % lower bound for nightshift\nint: u; % upper bound for nightshift\n\n\narray[NURSE,DAY] of var SHIFT: x;\n\nconstraint forall(n in NURSE, d in 1..m-2)\n                 ( x[n,d] = night /\\ x[n,d+1] = night \n                   -> x[n,d+2] = dayoff);\n\nconstraint forall(n in NURSE, d in 1..m-1)\n                 (x[n,d] = night -> x[n,d+1] != day);\n\ninclude \"global_cardinality_low_up.mzn\";\nconstraint forall(d in DAY)\n                 (global_cardinality_low_up([x[n,d] | n in NURSE ],                                               [ day, night ], [ o, l ], [o, u])); \n\nsolve satisfy;\n\noutput [ code[fix(x[n,d])] \n         ++ if d = m then \"\\n\" else \" \" endif\n       | n in NURSE, d in DAY];\n\n\n\nModel 2 :\n\n\nint: k; % number of nurses\nset of int: NURSE = 1..k;\nint: m; % number of days\nset of int: DAY = 1..m;\nset of int: SHIFT = 1..3;\nint: day = 1; int: night = 2; int: dayoff = 3;\narray[SHIFT] of string: code = [\"d\", \"n\", \"-\"];\nint: o; % number on day shift\nint: l; % lower bound for nightshift\nint: u; % upper bound for nightshift\n\n\narray[NURSE,DAY] of var SHIFT: x;\n\nconstraint forall(n in NURSE, d in 1..m-2)\n                 ( x[n,d] = night /\\ x[n,d+1] = night \n                   -> x[n,d+2] = dayoff);\n\nconstraint forall(n in NURSE, d in 1..m-1)\n                 (x[n,d] = night -> x[n,d+1] != day);\n\nconstraint forall(d in DAY)\n                 (let {var int: on = sum(n in NURSE)\n                                        (bool2int(x[n,d]=night))        \n                      } in l <= on /\\ on <= u);\n\nsolve satisfy;\n\noutput [ code[fix(x[n,d])] \n         ++ if d = m then \"\\n\" else \" \" endif\n       | n in NURSE, d in DAY];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1901, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7caf877-db55-480f-873b-938aa2675b40": {"__data__": {"id_": "a7caf877-db55-480f-873b-938aa2675b40", "embedding": null, "metadata": {"model_name": "opd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "opd_source_code", "node_type": "4", "metadata": {"model_name": "opd"}, "hash": "648eefbdd7bdf0dbd679f4af1752acc088e6b73307b389ecf00fb9c1370fb9c7", "class_name": "RelatedNodeInfo"}}, "text": "%% Design of Collateralised Debt Obligations Squared (CDO^2) Transactions\n% An OPD (v, b, r) problem is to find a binary matrix of v rows\n% and b columns such that each row sums to r, and\n% the dot product beween any pair of distinct rows is minimal.\n\n%Requires MiniZinc >= 2.0.2 for the symmetry_breaking_constraint predicate\n\ninclude \"lex_greatereq.mzn\";\n\n%instance data\nint: v;\nint: b;\nint: r;\n\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\n\n%computing a lower bound for lambda\nint: rv = r*v;\nint: rvmodb = rv mod b;\nint: floorrv = rv div b;\nint: ceilrv = rv div b + bool2int(rv mod b != 0);\nint: num = (ceilrv*ceilrv*rvmodb+floorrv*floorrv*(b-rvmodb)-rv);\nint: denom = v*(v-1);\nint: lb_lambda = num div denom + bool2int( num mod denom !=0);\n\n% This line is there for debugging purposes, it can be safely removed\nint: tmp = trace(\"Computed lower bound for lambda: \"++show(lb_lambda)++\"\\n\",lb_lambda);\n\n\n% lambda is called objective for the MiniZinc Challenge\nvar lb_lambda..b: objective;\n\n\narray [rows, cols] of var 0..1: m;\n\n\n% Every row must sum to r.\nconstraint forall (i in rows) (sum (j in cols) (m[i, j]) = r);\n\n% The dot product of every pair of distinct rows must be at most lambda for an OPD and a PD, and equal to lambda for a BIBD\nconstraint forall (i_a, i_b in rows where i_a < i_b) (\n    sum (j in cols) (m[i_a, j] * m[i_b, j]) <= objective\n);\n\n\n% Break row symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(i in rows diff {max(rows)})(\n        lex_greatereq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    )\n);\n% Break column symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(j in cols diff {max(cols)})(\n        lex_greatereq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    )\n);\n\n\nsolve \n    :: seq_search([int_search([m[i, j] | i in rows, j in cols], input_order, indomain_max, complete),\n       \t\t   int_search([objective], input_order,indomain_min,complete)])\n    minimize objective; \n\n\n% Disabled the full solution. Printing only the objective value, lower bound, and parameters.\noutput  [\"opd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r), \"). Found lambda = \", show(objective),\"\\tlb: \", show(lb_lambda)]\n%       ++[\"\\n\\n\"] ++ \n%\t[ ( if j > b then \"\\n\" else \n%\t        if fix(m[i,j])=1 then \"*\" else \" \" endif\n%\t    endif )\n%       | i in rows, j in 1..(b + 1) ]\n;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2382, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5116abfa-f3b4-425f-98f4-8ba1f9d5f949": {"__data__": {"id_": "5116abfa-f3b4-425f-98f4-8ba1f9d5f949", "embedding": null, "metadata": {"model_name": "partition"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "partition_source_code", "node_type": "4", "metadata": {"model_name": "partition"}, "hash": "08e8baf6a3956aa6b576d91e40c4ef8ab1744d5defb6e1997bc9711e098ecf6a", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n% Partitioning problem\n% Partition 2*n numbers into two groups, each of size n, such that\n% their sums are equal and the sums of their squares are equal.\n\ninclude \"globals.mzn\";\n\n% Instance\n\nn = 32;\n\n% Model\n\nint: n;\n\narray[1..n] of var 1..2*n: x;\narray[1..n] of var 1..2*n: y;\n\nconstraint true\n    %   Break symmetries by ordering numbers in each group\n    /\\  forall (i in 2..n) (x[i-1] < x[i] /\\ y[i-1] < y[i])\n    %   Break symmetries by ordering the groups\n    /\\  x[1] < y[1]\n    \n    %   Partition the numbers\n    /\\  (alldifferent(x++y)) :: bounds\n    \n    %   The sums are equal\n    /\\  sum (x) = 2*n*(2*n+1) div 4\n    /\\  sum (y) = 2*n*(2*n+1) div 4\n    \n    %   The sums of the squares are equal\n    /\\  let {\n            array[1..n] of var 1..4*n*n: sx,\n            array[1..n] of var 1..4*n*n: sy\n        } in\n        forall (i in 1..n) (sx[i]=x[i]*x[i] /\\ sy[i] = y[i]*y[i])\n    /\\  sum (sx) = 2*n*(2*n+1)*(4*n+1) div 12\n    /\\  sum (sy) = 2*n*(2*n+1)*(4*n+1) div 12\n;\n\nsolve ::int_search(x++y,first_fail,indomain_min,complete) satisfy;\n\noutput\n    [\"x = \",show(x),\"\\n\",\"y = \",show(y),\"\\n\",\n     \"sum = \",show(2*n*(2*n+1) div 4),\"\\n\",\n     \"sum of squares = \", show(2*n*(2*n+1)*(4*n+1) div 12), \"\\n\"\n     ];\n\n\n\nModel 2 :\n\n\n\n%\n% Set partition problem in Minizinc.\n%\n%  This is a partition problem.\n%  Given the set S = {1, 2, ..., n},\n%  it consists in finding two sets A and B such that:\n%  <ul>\n%  <li>A U B = S,</li>\n%  <li>|A| = |B|,</li>\n%  <li>sum(A) = sum(B),</li>\n%  <li>sum_squares(A) = sum_squares(B).</li>\n%  </ul>\n \n%\ninclude \"globals.mzn\";\n \nint: n = 16;\nset of 1..n: S = 1..n;\nint: num_sets = 2;\narray[1..num_sets] of var set of S: a;\narray[1..num_sets] of var 0..n*n: sums;\narray[1..num_sets] of var 0..n*n*n*n: sum_squared;\n \n \n%\n% set_sum\n% sums the elements in the set s\n%\npredicate set_sum(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i)\n;\n \npredicate set_sum_squared(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i*i)\n;\n \n \nsolve :: set_search(a, first_fail, indomain_min, complete) satisfy;\n% solve maximize sums[1];\n \nconstraint\n  assert(n mod 4 == 0, \"n must be a multiple of 4\")\n;\n \nconstraint\n   % use all the elements in S and it should be disjoint sets\n   partition_set(a, S)\n   /\\\n   forall(i in 1..num_sets) (  \n     a[i] `set_sum` sums[i]\n     /\\ a[i] `set_sum_squared` sum_squared[i]\n   )\n   /\\\n   forall(i in 2..num_sets) (\n     card(a[i]) > 0 /\\ % this is needed by eclipse\n     card(a[i]) = card(a[i-1]) /\\\n     sums[i] = sums[i-1]\n     /\\ sum_squared[i] = sum_squared[i-1]\n   )\n \n  % symmetry breaking\n  /\\ 1 in a[1]\n \n;\n \noutput [\n   \"a: \" ++ show(a) ++ \"\\n\" ++\n   \"sums: \" ++ show(sums) ++ \"\\n\" ++\n   \"sum_squared: \" ++ show(sum_squared) ++ \"\\n\"\n];\n \n% For model seeker\n% output [\n%    show(set2array(fix(a[i]))) ++ \",\"\n%   | i in 1..num_sets\n% ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca231dbd-ea13-4d81-9833-8a863e170f01": {"__data__": {"id_": "ca231dbd-ea13-4d81-9833-8a863e170f01", "embedding": null, "metadata": {"model_name": "photo"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "photo_source_code", "node_type": "4", "metadata": {"model_name": "photo"}, "hash": "efd2641bcc05fc4fed4e6f0c29fdeeb43a717686a2727cef9912467207cbb71b", "class_name": "RelatedNodeInfo"}}, "text": "int:n ;\nset of int: PERSON = 1..n;\nset of int: POS = 1..n;\narray[PERSON,PERSON] of int: friend;\n\n%array[PERSON] of var POS: x;\narray[POS] of var PERSON: y;\n\n%include \"inverse.mzn\";\n%constraint inverse(x,y);\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(y);\n\n%constraint alldifferent(x);\n\n%y[i] = sum(j in 1..n)(bool2int(x[j] = i) * j);\n\nsolve maximize sum(i in 1..n-1)(friend[y[i],y[i+1]]);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 397, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b38d3324-aed3-4b19-ba0e-aced0a8c871f": {"__data__": {"id_": "b38d3324-aed3-4b19-ba0e-aced0a8c871f", "embedding": null, "metadata": {"model_name": "project_scheduling"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "project_scheduling_source_code", "node_type": "4", "metadata": {"model_name": "project_scheduling"}, "hash": "073e39212ae689e1c9175b25335c25b8e2a463260ef0f0b4cd8f3069e6161b0e", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: n = 8; % no of tasks max\nset of int: TASK = 1..n;\nint: foundations = 1; int: interior_walls =2; int: exterior_walls = 3;\nint: chimney = 4; int: roof = 5; int: doors = 6;\nint: tiles = 7; int: windows = 8;\narray[TASK] of int: duration =\n  [7,4,3,3,2,2,3,3];\nint: p = 8; % number of precedences\nset of int: PREC = 1..p;\narray[PREC,1..2] of TASK: pre = \n  [| foundations, interior_walls \n   | foundations, exterior_walls\n   | foundations, chimney\n   | exterior_walls, roof\n   | exterior_walls, windows\n   | interior_walls, doors\n   | chimney, tiles\n   | roof, tiles |];\n\n\nint: t = sum(duration);\narray[TASK] of var 0..t: start;\n\nconstraint forall(i in PREC)\n                 (start[pre[i,1]] + duration[pre[i,1]] <= start[pre[i,2]]);\n\nvar int: makespan = max(t in TASK)(start[t] + duration[t]);\n\nsolve minimize makespan;\n\noutput [show(makespan),\" = \", show(start)];\n\n\n\nModel 2 :\n\n\nint: n = 8; % no of tasks max\nset of int: TASK = 1..n;\nint: foundations = 1; int: interior_walls =2; int: exterior_walls = 3;\nint: chimney = 4; int: roof = 5; int: doors = 6;\nint: tiles = 7; int: windows = 8;\narray[TASK] of int: duration =\n  [7,4,3,3,2,2,3,3];\nint: p = 8; % number of precedences\nset of int: PREC = 1..p;\narray[PREC,1..2] of TASK: pre = \n  [| foundations, interior_walls \n   | foundations, exterior_walls\n   | foundations, chimney\n   | exterior_walls, roof\n   | exterior_walls, windows\n   | interior_walls, doors\n   | chimney, tiles\n   | roof, tiles |];\n\n\nint: t = sum(duration);\narray[TASK] of var 0..t: start;\n\npredicate precedes(var int:s1, var int:d1, var int:s2)=\n          s1 + d1 <= s2; \n\nconstraint forall(i in PREC)\n                 (precedes(start[pre[i,1]],duration[pre[i,1]],start[pre[i,2]]));\n\npredicate nonoverlap(var int:s1, var int:d1,\n                     var int:s2, var int:d2)=\n          s1 + d1 <= s2 \\/ s2 + d2 <= s1;\n\nset of TASK: CARPENTRY = { interior_walls, exterior_walls, roof };\nconstraint forall(t1, t2 in CARPENTRY where t1 < t2)\n      (nonoverlap(start[t1],duration[t1],start[t2],duration[t2]));\n\nvar int: makespan = max(t in TASK)(start[t] + duration[t]);\n\nsolve minimize makespan;\n\noutput [show(makespan),\" = \", show(start)];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95e4da60-62b6-4787-a388-357d5d08d9fb": {"__data__": {"id_": "95e4da60-62b6-4787-a388-357d5d08d9fb", "embedding": null, "metadata": {"model_name": "QuasigroupCompletion"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasigroupCompletion_source_code", "node_type": "4", "metadata": {"model_name": "QuasigroupCompletion"}, "hash": "e1c074fd7d40ab1b44e05e930d65354902e5ed374380b7b5eb27838caaa2168e", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% Quasigroup with Holes (aka Latin Square Completion)\n\ninclude \"alldifferent.mzn\";\n\nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n\narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N] of var PuzzleRange: puzzle;\n\n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j] = start[i,j] else true endif );\n\n% All different in rows\nconstraint forall (i in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | j in PuzzleRange ] ) );\n\n% All different in columns.\nconstraint forall (j in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | i in PuzzleRange ] ) );\n\nsolve satisfy;\n\noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n \narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N, 1..N] of var 0..1: puzzle;\n \n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j, start[i,j]] = 1 else true endif );\n \n% All different in rows\nconstraint forall (i,k in PuzzleRange) (\n        sum(j in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% All different in columns\nconstraint forall (j,k in PuzzleRange) (\n        sum(i in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% Each cell must have a number assigned\nconstraint forall (i,j in PuzzleRange) (\n        sum(k in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\nsolve satisfy;\n \noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a077ce57-dc89-4ca9-a596-1dd14a79ddf8": {"__data__": {"id_": "a077ce57-dc89-4ca9-a596-1dd14a79ddf8", "embedding": null, "metadata": {"model_name": "QuasiGroupExistence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasiGroupExistence_source_code", "node_type": "4", "metadata": {"model_name": "QuasiGroupExistence"}, "hash": "ca4f5e342d1eda3b773cc53c945ec90d3008551875dc97ab49f37722860f79a5", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\n% Quasigroup problem in MiniZinc.\n% The quasiGroup existence problem\n% An m order quasigroup  is an mxm multiplication table of integers 1..m,\n% where each element occurrs exactly once in each row and column and certain\n% multiplication axioms hold (in this case, we want axiom 7 to hold).\n%\n% QG7.m problems are order m quasigroups for which (b*a)*b = a*(b*a).\n\n\ninclude \"globals.mzn\";\n \nint: n;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n% solve satisfy;\n \nconstraint\n      \n     % assign the \"reflected\" quasigroup to qGColumns to access its columns\n     %  forall row,col : nDomain .\n     %    quasiGroupColumns[col,row] = quasiGroup[row,col],\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % all values in the diagonals\n     forall( i in nDomain ) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n \n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row, col] | row in nDomain])\n     )\n     /\\\n \n     % this strange constraint\n     % corresponds to:\n     % quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i], j] \n     forall(i,j in nDomain) (\n              quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i],j]\n     )\n     /\\\n     % some implied? constraint\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n \n \n%\n% data\n%\nn = 5;\n\n\n\nModel 2 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 9; % solutions for n=5, n=9...\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 3 : \n\n\ninclude \"globals.mzn\";\n \nint: n = 4;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n \nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n \n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (i != j) ->\n         (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n \n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n \n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput\n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\n\nModel 4 :\n\ninclude \"globals.mzn\";\n \nint: n;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n \nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n \n     % Idempotency\n     % forall i : nDomain .\n     %     (quasiGroup[i,i] = i),\n \n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     % allDifferent(qgDiagonal) %,\n \n     % anti-Abelian\n     % forall i : nDomain .\n     %   forall j : nDomain .\n     %     (i != j) =>\n     %     (quasiGroup[i,j] != quasiGroup[j,i]),\n \n     % if (i*i)=j then (j*j) = i\n     % forall i : nDomain .\n     %  forall j : nDomain .\n     %    (quasiGroup[i,i]=j) => (quasiGroup[j,j]=i),\n \n \n     % Symmetry-breaking constraints   \n     % forall i : nDomain .\n     %      quasiGroup[i,n-1] + 2 >= i\n \n;\n \noutput\n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n \n \n \n \n%\n% data\n%\nn = 4; % 4 works\n\n\nModel 5 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 7;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 6 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 5;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 7 :\n\n\n\ninclude \"globals.mzn\";\n \nint: n = 7;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 10965, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b28df122-49bc-43df-a6f7-6748e5476514": {"__data__": {"id_": "b28df122-49bc-43df-a6f7-6748e5476514", "embedding": null, "metadata": {"model_name": "queens"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "queens_source_code", "node_type": "4", "metadata": {"model_name": "queens"}, "hash": "6f7f057e3d599f482057d719434b4e136632116215b3a4245ea007b603f09d41", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% n queens problem in MiniZinc.\n\ninclude \"globals.mzn\";\n\nint: n;\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail, \n        indomain_min, \n        complete) \n    satisfy;\n\n% solve satisfy;\n\nconstraint all_different(queens);\n\nconstraint\n    forall(i, j in 1..n where i < j) (\n         queens[i] != queens[j] /\\\n         queens[i] + i != queens[j] + j /\\\n         queens[i] - i != queens[j] - j\n    ) \n ;\n\noutput [\n  show(queens) ++ \"\\n\"\n\n];\n\n% data\nn = 8;\n\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\n\nint: n;\n\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail,\n        indomain_median,\n        complete\n       )\n     satisfy;\n\n% solve satisfy;\nconstraint all_different(queens); %  :: domain;\nconstraint all_different([queens[i]+i | i in 1..n]) :: domain;\nconstraint all_different([queens[i]-i | i in 1..n]) :: domain;\n\noutput \n[\n  \"queens: \" ++ show(queens)\n] ++ \n% [\n%   if j = 1 then \"\\n\" else \"\" endif ++\n%      if fix(queens[i]) = j then          \n%         show_int(2,j)\n%      else\n%         \"__\"\n%      endif\n%   | i in 1..n, j in 1..n\n% ] ++\n[\"\\n\"]\n;\n\n% data\nn = 8;\n\n\nModel 3 :\n\n\n\nint: n;                                 % The number of queens.\n\narray [1..n] of var 1..n: q;\n\ninclude \"alldifferent.mzn\";\n\nconstraint alldifferent(q);\nconstraint alldifferent(i in 1..n)(q[i] + i);\nconstraint alldifferent(i in 1..n)(q[i] - i);\n\n\nsolve \n%      :: int_search(q, input_order, indomain_min, complete) \n%      :: int_search(q, first_fail, indomain_min, complete) \n%      :: int_search(q, smallest, indomain_min, complete)\n%      :: int_search(q, largest, indomain_min, complete)\n%      :: int_search(q, input_order, indomain_max, complete) \n%      :: int_search(q, first_fail, indomain_max, complete) \n%      :: int_search(q, smallest, indomain_max, complete)\n%      :: int_search(q, largest, indomain_max, complete)\n%      :: int_search(q, input_order, indomain_median, complete) \n%      :: int_search(q, first_fail, indomain_median, complete) \n%      :: int_search(q, smallest, indomain_median, complete)\n%      :: int_search(q, largest, indomain_median, complete)\n%      :: int_search(q, input_order, indomain_random, complete) \n%      :: int_search(q, first_fail, indomain_random, complete) \n%      :: int_search(q, smallest, indomain_random, complete)\n%      :: int_search(q, largest, indomain_random, complete)\n      satisfy;\n\n%output\t\n%%\t[\tif fix(q[i]) = j then \"Q \" else \". \" endif ++\n%\t \tif j = n then \"\\n\" else \"\" endif\n%\t|\ti, j in 1..n\n%\t];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27942944-8024-4099-b5bc-f6ea82d86d10": {"__data__": {"id_": "27942944-8024-4099-b5bc-f6ea82d86d10", "embedding": null, "metadata": {"model_name": "rcpsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rcpsp_source_code", "node_type": "4", "metadata": {"model_name": "rcpsp"}, "hash": "e5fbea234c17ae6597ce02a77cbffa5c2349cff0f1525e795292b7688c11fef8", "class_name": "RelatedNodeInfo"}}, "text": "int: n; % number of tasks\nset of int: TASK = 1..n;\narray[TASK] of int: d; % duration\n\nint: m; % number of resources\nset of int: RESOURCE = 1..m;\narray[RESOURCE] of int: L; % resource limit\narray[RESOURCE,TASK] of int: res; % usage\n\nint: l; % number of precedences\nset of int: PREC = 1..l;\narray[PREC,1..2] of TASK: pre; % predecessor/successor pairs\n\nint: maxt; % maximum time\nset of int: TIME = 0..maxt;\n\narray[TASK] of var TIME: s; % start time\n\nconstraint forall(p in PREC)(s[pre[p,1]]+d[pre[p,1]] <= s[pre[p,2]]);\n\ninclude \"cumulative.mzn\";\nconstraint forall(r in RESOURCE)\n                 (cumulative(s,d,[res[r,t]|t in TASK],L[r]));\n%constraint forall(r in RESOURCE) \n%                 ( let { array[int] of var int: ss = \n%                              [ s[t] | t in TASK where res[r,t] > 0 ];\n%                         array[int] of var int: dd = \n%                              [ d[t] | t in TASK where res[r,t] > 0 ];\n%                         array[int] of var int: rr = \n%                              [ res[r,t] | t in TASK where res[r,t] > 0 ]; } in\n%                   cumulative(ss,dd,rr,L[r]));\n\nsolve minimize max(t in TASK)(s[t] + d[t]);\n\noutput [show(s)];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60c03920-08a8-4d93-93ee-b4f230d8d48a": {"__data__": {"id_": "60c03920-08a8-4d93-93ee-b4f230d8d48a", "embedding": null, "metadata": {"model_name": "rehearsal"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rehearsal_source_code", "node_type": "4", "metadata": {"model_name": "rehearsal"}, "hash": "005a565b47acbfad50a30bd064f69003a7b968e4e1b31a92b006de50d2633036", "class_name": "RelatedNodeInfo"}}, "text": "%\n% Scheduling a Rehearsal in MiniZinc.\n% A concert is to consist of nine pieces of music of different durations\n% each involving a different combination of the five members of the orchestra.\n% Players can arrive at rehearsals immediately before the first piece in which\n% they are involved and depart immediately after the last piece in which\n% they are involved. The problem is to devise an order in which the pieces\n% can be rehearsed so as to minimize the total time that players are waiting\n% to play, i.e. the total time when players are present but not currently\n% playing. In the table below, 1 means that the player is required for\n% the corresponding piece, 0 otherwise. The duration (i.e. rehearsal time)\n% is in some unspecified time units.\n%\n%    Piece       1    2   3    4    5  6    7   8    9\n%    Player 1    1    1   0    1    0  1    1   0    1\n%    Player 2    1    1   0    1    1  1    0   1    0\n%    Player 3    1    1   0    0    0  0    1   1    0\n%    Player 4    1    0   0    0    1  1    0   0    1\n%    Player 5    0    0   1    0    1  1    1   1    0\n%    Duration    2    4   1    3    3  2    5   7    6\n%\n% For example, if the nine pieces were rehearsed in numerical order as\n% given above, then the total waiting time would be:\n%       Player 1: 1+3+7=11\n%       Player 2: 1+5=6\n%       Player 3: 1+3+3+2=9\n%       Player 4: 4+1+3+5+7=20\n%       Player 5: 3\n% giving a total of 49 units. The optimal sequence, as we shall see,\n% is much better than this.\n%\n% ...\n%\n% The minimum waiting time for the rehearsal problem is 17 time units, and\n% an optimal sequence is 3, 8, 2, 7, 1, 6, 5, 4, 9.\n%\n% \"\"\"\n\n\ninclude \"globals.mzn\"; \n\n\nint: num_pieces;\nint: num_players;\narray[1..num_pieces] of int: duration;\narray[1..num_players, 1..num_pieces] of 0..1: rehearsal;\n\n\n%\n% Decision variables\n%\narray[1..num_pieces] of var 1..num_pieces: rehearsal_order;\narray[1..num_players] of var 0..sum(duration): waiting_time; % waiting time for players\narray[1..num_players] of var 1..num_pieces: p_from; % first rehearsal\narray[1..num_players] of var 1..num_pieces: p_to;   % last rehearsal\nvar 0..sum(duration): total_waiting_time = sum(waiting_time); % objective\n\nsolve :: int_search(\n         rehearsal_order % ++ waiting_time% ++ p_from ++ p_to ++ [total_waiting_time]\n         , \n         first_fail, % occurrence, % max_regret, % first_fail, \n         indomain_max, % indomain_max, \n         complete) \n     minimize total_waiting_time;\n     % satisfy;\n\n% solve :: labelling_ff minimize total_waiting_time;\n\nconstraint\n  all_different(rehearsal_order) :: domain\n  /\\\n\n  % This solution is my own without glancing at Smith's models...\n  forall(p in 1..num_players) (\n     % This versions is much faster than using exists (see below)\n     % fix the range from..to, i.e. don't count all that start with 0 \n     % or ends with 0.\n     % This means that we collect the rehearsals with many 0 at the ends\n     %\n     p_from[p] < p_to[p]\n     /\\\n     % skipping rehearsal at start (don't come yet)\n     forall(i in 1..num_pieces) (\n        i < p_from[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\\n     % skipping rehearsal at end (go home after last rehearsal)\n     forall(i in 1..num_pieces) (\n        i > p_to[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\ % and now: count the waiting time for from..to\n     waiting_time[p] = \n         sum(i in 1..num_pieces) (\n              duration[rehearsal_order[i]] * bool2int(\n                                             i >= p_from[p] /\\ i <= p_to[p] \n                                             /\\\n                                             rehearsal[p,rehearsal_order[i]] = 0\n                                )\n     ) \n\n%      % alternative solution with exists. \n%      %  More elegant (= declarative) in my book but slower.\n%      exists(from, to in 1..num_pieces) ( \n%         % skipping rehearsal at start (don't come yet)\n%         forall(i in 1..from-1) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\\n%         % skipping rehearsal at end (go home after last rehearsal)\n%         forall(i in to+1..num_pieces) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\ % and now: count the waiting time for from..to\n%         waiting_time[p] = \n%             sum(i in from..to) (\n%                  duration[rehearsal_order[i]]*\n%                                  bool2int(\n%                                       rehearsal[p,rehearsal_order[i]] = 0\n%                                   )\n%          ) \n%      )\n\n\n  )\n\n  /\\ % symmetry breaking\n  rehearsal_order[1] < rehearsal_order[num_pieces]\n\n  % for all solutions\n  % /\\ total_waiting_time = 17\n;\n\n\n%\n% data\n%\n%\n% num_pieces = 9;\n% num_players = 5;\n% duration = [2, 4, 1, 3, 3, 2, 5, 7, 6];\n% rehearsal = array2d(1..num_players, 1..num_pieces, \n%     [\n%      1,1,0,1,0,1,1,0,1,\n%      1,1,0,1,1,1,0,1,0,\n%      1,1,0,0,0,0,1,1,0,\n%      1,0,0,0,1,1,0,0,1,\n%      0,0,1,0,1,1,1,1,0\n%   ]);\n\n%\n% This is the problem from the Choco v 2.1 example \n% num_pieces = 5;\n% num_players = 3;\n% duration = [4,6,3,5,7];\n% rehearsal =  array2d(1..num_players, 1..num_pieces, \n%         [\n%         1,1,0,1,0,\n%         0,1,1,0,1,\n%         1,1,0,1,1   \n%   ]);\n\n\noutput[\n  \"order: \" , show(rehearsal_order), \"\\n\",\n  \"waiting_time: \", show(waiting_time), \"\\n\",\n  \"total_waiting_time: \" , show(total_waiting_time), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(rehearsal[p, rehearsal_order[j]]) ++ \" \"\n  | p in 1..num_players, j in 1..num_pieces, \n] ++ \n[\"\\n\"]\n;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71ae3813-94f1-454f-8561-3a2b3ae035dd": {"__data__": {"id_": "71ae3813-94f1-454f-8561-3a2b3ae035dd", "embedding": null, "metadata": {"model_name": "restart"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "restart_source_code", "node_type": "4", "metadata": {"model_name": "restart"}, "hash": "89fca2e6c8282c5f0d13ace64f033aa1499708766cd977cd43503c829a267444", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 : \n\n\narray[1..10] of var 1..10:x;\n\nconstraint forall(i,j in 1..10 where i < j)\n                 (x[i] != x[j]);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_min, complete)\n      satisfy;\n\n\nModel 2 :\n\n\narray[1..10] of var 1..10:x;\n\nconstraint forall(i,j in 1..10 where i < j)\n                 (x[i] != x[j]);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_max, complete)\n      satisfy;\n\n\nModel 3 : \n\n\narray[1..10] of var 1..10:x;\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(x);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_min, complete)\n      satisfy;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77c00cff-aa60-4ab9-a6c4-d11ff86ca0cd": {"__data__": {"id_": "77c00cff-aa60-4ab9-a6c4-d11ff86ca0cd", "embedding": null, "metadata": {"model_name": "RosteringProblem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "RosteringProblem_source_code", "node_type": "4", "metadata": {"model_name": "RosteringProblem"}, "hash": "1f461c5c63e7d2b469c6414a6c2193bdf324a1d413b595e0f009d6ea251c59c2", "class_name": "RelatedNodeInfo"}}, "text": "include \"all_equal.mzn\";\ninclude \"global_cardinality.mzn\";\n\n% load parameters\ninclude \"parameters.dzn\";\n\nint: daysPerWeek = 7;\n\n% the number of weeks\nint: numberOfWeeks;\n\nint: numberOfDays = numberOfWeeks * daysPerWeek;\n\n% the minimum number of days in a row with the same shift\nint: s_min;\n\n% the maximum number of days in a row with the same shift\nint: s_max; \n\n% 3 shifts: early = 1, late = 2 and night shift = 3 + day off (rest day) = 0\nint: numberOfShifts = 3;\n\n% the shift requirement matrix, including at M_{i,j} the needed employees for day i and shift j\narray[1..daysPerWeek, 1..numberOfShifts+1] of int: shiftRequirements;\n\n\n% the variables X \narray[1..numberOfWeeks * daysPerWeek] of var 0..numberOfShifts: plan1d;\narray[1..numberOfWeeks,1..daysPerWeek] of var 0..numberOfShifts: plan2d;\narray[1..daysPerWeek,1..numberOfWeeks] of var 0..numberOfShifts: plan2dT;\n\n% helper arrays\narray[1..s_min,1..s_min] of var 0..numberOfShifts: s_min_arrays;\narray[1..s_max,1..s_max] of var 0..numberOfShifts: s_max_arrays;\n\n% convert the 2D plan into 1D\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan1d[(week-1) * daysPerWeek + day]\n           );  \n\n% transpose the 2D plan\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan2dT[day, week]\n           );\n\n% C_equalDays: constrains that weekend days (Saturday and Sunday) always have the same shift\nconstraint forall(week in 1..numberOfWeeks) (\n               plan2d[week, daysPerWeek - 1] == plan2d[week, daysPerWeek]\n           );                        \n\n                                                                                                                                \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_min, j in 1..s_min) (\n                 s_min_arrays[i, j] == plan1d[((numberOfDays - s_min - 1 + i + j) mod numberOfDays) + 1]\n           );                                            \n                                            \n% C_shiftRepetitions:for every shift type a minimum number of consecutive assignments to this shift is given\nconstraint forall(day in 1..numberOfDays - s_min) (\n               plan1d[day] != plan1d[day+1] -> all_equal(plan1d[day+1..day+s_min])\n           );     \n% the constraints over the array bounds           \nconstraint forall(d in 1..s_min) (\n               plan1d[d + numberOfDays - s_min] != plan1d[((d + numberOfDays - s_min) mod numberOfDays) +1] -> all_equal(s_min_arrays[d,1..s_min])\n           );                     \n\n           \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_max, j in 1..s_max) (\n                 s_max_arrays[i, j] == plan1d[((numberOfDays - s_max - 2 + i + j) mod numberOfDays) + 1]\n           );                      \n                                            \n% C_shiftRepetitions:for every shift type a maximum number of consecutive assignments to this shift is given           \nconstraint forall(day in 1..numberOfWeeks * daysPerWeek - s_max) (\n               (all_equal(plan1d[day..day+s_max])) -> (plan1d[day] != plan1d[day + s_max])\n           );               \n% the constraints over the array bounds             \nconstraint forall(d in 1..s_max) (\n               (all_equal(s_max_arrays[d, 1..s_max])) -> (plan1d[d + numberOfDays - s_max] != plan1d[d])\n           );                     \n\n                               \n                                                                                                   \n% C_restDays: at least 2 days must be rest days every 2 weeks.\nconstraint forall(day in 1..(numberOfWeeks - 2) * daysPerWeek) (\n               count(j in plan1d[day..day + daysPerWeek * 2])(j=0) >= 2                   \n           );            \nconstraint forall(i in 1..2 * daysPerWeek-1) (\n               count(j in plan1d[numberOfWeeks * daysPerWeek-i .. numberOfWeeks * daysPerWeek] ++ plan1d[1..2*daysPerWeek-i])(j=0) >= 2    \n           );         \n                                            \n% C_shiftOrder: restricts the order of shifts. There is a forward rotating principle. This means, that after an early shift there can only follow a shift with the same or a higher value, or a rest shift.\nconstraint forall(day in 2..numberOfWeeks * daysPerWeek - 1) (\n               plan1d[day] <= plan1d[day + 1] \\/ plan1d[day+1] == 0\n           );         \nconstraint plan1d[1] >= plan1d[numberOfDays] \\/ plan1d[1] == 0;\n                      \n% C_shiftRequirements: for every weekday for each shift the number of required staff is provided (e.g. usually less staff is required on the weekend) \nconstraint forall(day in 1..daysPerWeek) (\n              (global_cardinality(row(plan2dT,day),[0,1,2,3],row(shiftRequirements,day)))   \n           );    \n           \n% solve the problem           \nsolve :: int_search(plan1d, input_order, indomain_min, complete)\n      satisfy;           \n      \n% print the problem      \noutput [ show(row(plan2d,j)) ++ \"\\n\" | j in 1..numberOfWeeks ] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5048, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "298ec0e6-3e4c-47b7-b6a0-ac6c14405b06": {"__data__": {"id_": "298ec0e6-3e4c-47b7-b6a0-ac6c14405b06", "embedding": null, "metadata": {"model_name": "sb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sb_source_code", "node_type": "4", "metadata": {"model_name": "sb"}, "hash": "ce1e57bc7ffaa8a0af07d35e6d122f3d3a5dec06401a48643602c1834b1dc9bd", "class_name": "RelatedNodeInfo"}}, "text": "% Solitaire Battleships is a puzzle where\n% we are given a partially filled in board and the number\n% of ships in each row and column and have to fill it with ships\n \n% \"Improved\" version does not introduce reified set_in\n\nint: width;   % height of board (usually 10)\nint: height;  % width of board (usually 10)\nint: maxship; % maximal length of ship (usually 4)\n\n\nset of int: ROWS = 1..width;\nset of int: COLS = 1..height;\nset of int: XROWS = 0..width+1;    % extended rows\nset of int: XCOLS = 0..height+1;   % extended cols\n\n%% ship types enumerated type\nset of int: SHIPS = 1..maxship;  % different ship types\nint: submarine = 1;\nint: destroyer = 2;\nint: cruiser = 3;\nint: battleship = 4;\n\n\n%% the PIECES enumerated type!\nset of int: PIECES = 1..7;\nint: w = 1; % water\nint: c = 2; % circle (submarine)\nint: l = 3; % left end of ship\nint: r = 4; % right end of ship\nint: t = 5; % top of ship\nint: b = 6; % bottom of ship\nint: m = 7; % middle of ship\narray[PIECES] of string: code = [\".\",\"c\",\"l\",\"r\",\"t\",\"b\",\"m\"];\n\narray[ROWS,COLS] of 0..7: hint; % the initial board configuration\narray[ROWS] of int: rowsum;     % sums for each row\narray[COLS] of int: colsum;     % sums for each col\narray[SHIPS] of int: ship; % the number of each type of ship (usually [4,3,2,1]).\n\n\n\n% variables \narray[XROWS,XCOLS] of var PIECES: board;  % the board\n \narray[XROWS,XCOLS] of var 0..1: fill;     % which pieces are ships\n\narray[PIECES] of var 0..width*height: npiece; % number of pieces of each type\n\n\n% model\n\n% ensure hints are respected\nconstraint forall(i in ROWS, j in COLS)(\n\t\t\t   if hint[i,j] != 0 then\n\t\t\t   \t\tboard[i,j] == hint[i,j]\n\t\t\t   else true endif\n\t       ); \n\n% make extended rows and cols empty\nconstraint forall(i in XROWS)(board[i,0] == w /\\ board[i,width+1] == w);\nconstraint forall(j in COLS)(board[0,j] == w /\\ board[height+1,j] == w);\n\n% ensure that the fill array matches the board\nconstraint forall(i in XROWS, j in XCOLS)(\n\t\t\t   fill[i,j] = bool2int(board[i,j] != w)\n\t       ); \n\n% spacing constraints: gaps betwen ships\nconstraint forall(i in ROWS, j in COLS)(\n\t   (board[i,j] == w \\/ board[i+1,j+1] == w)\n\t/\\ (board[i,j] == w \\/ board[i+1,j-1] == w)   % diagonal constraints\n            /\\ (board[i,j] in {c,l,r,t} -> board[i-1,j] == w)\n            /\\ (board[i,j] in {c,l,r,b} -> board[i+1,j] == w)\n            /\\ (board[i,j] in {c,l,t,b} -> board[i,j-1] == w)\n            /\\ (board[i,j] in {c,r,t,b} -> board[i,j+1] == w)\n           );\n               \t\t\t                       \n% ship shape constraints\nconstraint forall(i in ROWS, j in COLS)(\n               %% a left piece needs a right piece or middle to the right\n\t\t\t   (board[i,j] == l -> (board[i,j+1] == r \\/ board[i,j+1] == m))\n\t\t\t/\\ (board[i,j] == r -> (board[i,j-1] == l \\/ board[i,j-1] == m))\n\t\t\t/\\ (board[i,j] == t -> (board[i+1,j] == b \\/ board[i+1,j] == m))\n\t\t\t/\\ (board[i,j] == b -> (board[i-1,j] == t \\/ board[i-1,j] == m))\n\t\t\t   %% a middle piece has to have two opposite sides filled\n\t\t\t/\\ (board[i,j] == m -> (   fill[i-1,j] == fill[i+1,j]\n\t\t\t                        /\\ fill[i,j-1] == fill[i,j+1]\n\t\t\t                        /\\ fill[i-1,j] + fill[i,j-1] == 1))\n\t\t   );\n\t\t   \n% sum up pieces\nconstraint forall(p in PIECES)(\n\t\t\t   sum(i in ROWS, j in COLS)(bool2int(board[i,j] == p)) == npiece[p]\n\t\t   );\n\n% piece sum constraints\nconstraint npiece[c] == ship[submarine]; % submarines\nconstraint npiece[l] == npiece[r]; % left right (probably redundant)\nconstraint npiece[t] == npiece[b]; % top bottom\nconstraint npiece[l] + npiece[t] == sum(s in destroyer..maxship)(ship[s]); \n                                   % no of ends\nconstraint npiece[m] == sum(s in cruiser..maxship)(ship[s] * (s - 2)); \n                                   % no of middles \t\t   \n\t\t    \n% count number of bigger ships\n% at least for standard battleships you can probably simply\n% enforce this constraint for s in destroyer..destroyer\t\t\n% and still be guaranteed a correct solution    \nconstraint forall(s in destroyer..maxship)(\n\t           sum(i in ROWS,j in COLS)(bool2int(\n\t\t\t       if j + s - 1 <= width then\n\t\t\t          board[i,j] == l /\\ board[i,j+s-1] == r     % ship length s lr\n\t\t\t       /\\ forall(k in j+1..j+s-2)(board[i,k] == m)\n\t\t\t       else false endif\n\t\t\t    \\/\n\t\t\t       if i + s - 1 <= height then\n\t\t\t          board[i,j] == t /\\ board[i+s-1,j] == b     % ship length s tb\n\t\t\t       /\\ forall(k in i+1..i+s-2)(board[k,j] == m)\n\t\t\t       else false endif\n\t\t       )) = ship[s]\n\t\t   );\t\t    \n\t\t    \t\t    \n\n% row sums respected\nconstraint forall(i in ROWS)(\n               sum(j in COLS)(fill[i,j]) == rowsum[i]\n           );\n           \n% column sums respected           \nconstraint forall(j in COLS)(\n               sum(i in ROWS)(fill[i,j]) == colsum[j]\n           );           \n\n\nsolve :: int_search([ fill[i,j] | i in ROWS, j in COLS], \n      \t\t  input_order, indomain_min, complete)\n      satisfy;\n\noutput [ code[fix(board[i,j])] ++ \n\t\t if j == width then \" \" ++ show(rowsum[i]) ++ \"\\n\"\n\t\t else \"\" endif\n\t   | i in ROWS, j in COLS ]  ++\n\t   [ show(colsum[j]) | j in COLS ] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c21d8227-5a8b-40cd-9923-bc323f9c8c1c": {"__data__": {"id_": "c21d8227-5a8b-40cd-9923-bc323f9c8c1c", "embedding": null, "metadata": {"model_name": "schur"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "schur_source_code", "node_type": "4", "metadata": {"model_name": "schur"}, "hash": "325213b7ddb225dedddd2846c2b540e6822e28616fdc539f502a43ced34126a5", "class_name": "RelatedNodeInfo"}}, "text": "%% schurs numbers\n%%\n%% determine if n balls labelled 1..n\n%% can be placed in c boxes with no box containing a triple {x,y,z} where x+y=z\n \n\nint: n; %% number of balls\nint: c; %% number of boxes\n\narray[1..n] of var 1..c: box;\n\nconstraint forall(i in 1..n-1, j in i+1 .. n - i)(\n\t   \t    box[i] != box[j] \\/ \n\t\t    box[i] != box[i+j] \\/ \n\t\t    box[j] != box[i+j]);\n\nsolve satisfy;\n\noutput [\"n = \", show(n), \";\\nc = \", show(c), \";\\nbox = \",show(box),\";\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7c98854-50f0-49c9-9aa9-a2fd418eacce": {"__data__": {"id_": "f7c98854-50f0-49c9-9aa9-a2fd418eacce", "embedding": null, "metadata": {"model_name": "setselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "setselect_source_code", "node_type": "4", "metadata": {"model_name": "setselect"}, "hash": "1adc251cc17df5660eae9d4df6835b8b2faadc91d9ed094df50e31537c7ef2f8", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\n% setselect\nint: n; % number of elements\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\nvar set of 1..n: x;\n\nconstraint forall(i in 1..k)(card(x intersect s[i]) <= 1);\n\nsolve maximize sum(i in x)(i);\n\noutput [\"x = \", show(x), \";\\n\"];\n\n\n\nModel 2 : \n\n\n\n% setselect revised\nint: n; % number of elements\nint: u; % cardinality of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\nvar set of 1..n: x;\n\nconstraint forall(i in 1..k)(card(x intersect s[i]) <= 1);\nconstraint card(x) = u;\n\nsolve maximize sum(i in x)(i);\n\noutput [\"x = \", show(x), \";\\n\"];\n\n\n\nModel 3 : \n\n\n\n% setselect revised\nint: n; % number of elements\nint: u; % cardinality of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\narray[1..u] of var 1..n: x;\n%constraint forall(i in 1..u-1)(x[i] < x[i+1]);\nconstraint forall(i,j in 1..u where i < j)(x[i] != x[j]);\n\nconstraint forall(i in 1..k)(sum(j in 1..u)(x[j] in s[i]) <= 1);\n\nsolve maximize sum(x);\n\noutput [\"x = \", show(x), \";\\n\"];\n\n\n\nModel 4 : \n\n\n\n% setselect revised\nint: n; % number of elements\nint: u; % cardinality bound of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\narray[1..u] of var 0..n: x;\nconstraint forall(i in 1..u-1)(x[i] >= (x[i] != 0) + x[i+1]);\n\nconstraint forall(i in 1..k)(sum(j in 1..u)(x[j] in s[i]) <= 1);\n\nsolve maximize sum(x);\n\noutput [\"x = \", show(x), \";\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c6d07e4-7946-4a58-8618-910d36422f41": {"__data__": {"id_": "7c6d07e4-7946-4a58-8618-910d36422f41", "embedding": null, "metadata": {"model_name": "shipping"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "shipping_source_code", "node_type": "4", "metadata": {"model_name": "shipping"}, "hash": "4a8f1433be5af41589f5717747fe31ab7dd3f094386a29dea4e5f1dc3668e55c", "class_name": "RelatedNodeInfo"}}, "text": "int: W; % number of Warehousse\nset of int: WARE = 1..W;\nint: F; % number of Factories\nset of int: FACT = 1..F;\n\narray[WARE] of int: demand;\narray[FACT] of int: production;\n\narray[FACT,WARE] of int: cost;\n\narray[FACT,WARE] of var int: ship;\n\n%int: m = max(demand);\n%array[FACT,WARE] of var 0..m: ship;\nconstraint forall(f in FACT, w in WARE)(ship[f,w] >= 0);\n\nconstraint forall(w in WARE)\n                 (sum(f in FACT)(ship[f,w]) >= demand[w]);\n\nconstraint forall(f in FACT)\n                 (sum(w in WARE)(ship[f,w]) <= production[f]);\n\nsolve minimize sum(f in FACT, w in WARE)\n                  (cost[f,w]*ship[f,w]);\n\n\noutput [ show_int(2,ship[f,w]) ++\n         if w == W then \"\\n\" else \" \" endif\n       | f in FACT, w in WARE ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a64b4fd-32f6-4f4e-a97c-293d944d9659": {"__data__": {"id_": "6a64b4fd-32f6-4f4e-a97c-293d944d9659", "embedding": null, "metadata": {"model_name": "simple-prod-planning"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "simple-prod-planning_source_code", "node_type": "4", "metadata": {"model_name": "simple-prod-planning"}, "hash": "804bd3f72741f05877fd83bbfa8fe08108f68ac608b1d2b882989c8fe79bb19b", "class_name": "RelatedNodeInfo"}}, "text": "% Number of different products\nint: nproducts; \nset of int: Products = 1..nproducts;  \n\n%profit per unit for each product\narray[Products] of int: profit;\narray[Products] of string: pname; \n\n%Number of resources\nint: nresources; \nset of int: Resources = 1..nresources; \n\n%amount of each resource available\narray[Resources] of int: capacity; \narray[Resources] of string: rname;\n\n%units of each resource required to produce 1 unit of product\narray[Products, Resources] of int: consumption; \nconstraint assert(forall (r in Resources, p in Products) \n           (consumption[p,r] >= 0), \"Error: negative consumption\");\n\n% bound on number of Products\nint: mproducts = max (p in Products) \n                     (min (r in Resources where consumption[p,r] > 0) \n                          (capacity[r] div consumption[p,r]));\n\n% Variables: how much should we make of each product\narray[Products] of var 0..mproducts: produce;\narray[Resources] of var 0..max(capacity): used;\n\n% Production cannot use more than the available Resources:\nconstraint forall (r in Resources) (     \n      used[r] = sum (p in Products)(consumption[p, r] * produce[p]) \n      /\\ used[r] <= capacity[r]\n);    \n\n% Maximize profit\nsolve maximize sum (p in Products) (profit[p]*produce[p]);\n\noutput [ show(pname[p]) ++ \" = \" ++ show(produce[p]) ++ \";\\n\" |\n         p in Products ] ++\n       [ show(rname[r]) ++ \" = \" ++ show(used[r]) ++ \";\\n\" |\n         r in Resources ];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32035836-6fc4-4e9c-82ce-d2cea9de1d6a": {"__data__": {"id_": "32035836-6fc4-4e9c-82ce-d2cea9de1d6a", "embedding": null, "metadata": {"model_name": "sonet_problem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sonet_problem_source_code", "node_type": "4", "metadata": {"model_name": "sonet_problem"}, "hash": "b7908df377c79ed1cfa7d13149a83fe81e8d45417c31f002e7df60d483e22624", "class_name": "RelatedNodeInfo"}}, "text": "% The SONET problem is a network design problem: set up a network between\n% n nodes, where only certain nodes require a connection.\n% Nodes are connected by putting them on a ring, where all nodes\n% on a ring can communicate. Putting a node on a ring requires a so-called\n% ADM, and each ring has a capacity of nodes, i.e. ADMs. There is a certain\n% amount of rings, r, that is available. The objective is to set up a network\n% by using a minimal amount of ADMs.\n%\n%\n% About the problem model\n%\n% The problem model has the amount of rings ('r'), amount of nodes('n'),\n% the 'demand' (which nodes require communication) and node-capacity of each\n% ring ('capacity_nodes') as parameters.\n% The assignement of nodes to rings is modelled by a 2-dimensional matrix 'rings',\n% indexed by the amnount of rings and nodes. The matrix-domain is boolean:\n% If the node in column j is assigned to the ring in row i, then rings[i,j] = 1\n% and 0 otherwise. So all the '1's in the matrix 'rings' stand for an ADM.\n% Hence the objective is to minimise the sum over all columns and rows of matrix\n% 'rings'.\n% \"\"\"\n\nint: r;  % upper bound for amount of rings\nint: n;  % amount of clients\n\n\n% original comment: \n% we have double entries here because of the symmetric structure!\narray[1..n, 1..n] of 0..1: demand;\narray[1..r] of 1..n: capacity_nodes;\n\narray[1..r, 1..n] of var 0..1: rings;\nvar int: z =  sum(ring in 1..r, client in 1..n) (rings[ring, client]);\n\nsolve minimize z;\n% solve satisfy;\n\n\nconstraint\n%   z <= 7 % for solve satisfy\n%   /\\\n\n   % original comment:\n   % if there is a demand between 2 nodes, then there has to exist \n   % a ring, on which they are both installed\n   forall(client1,client2 in 1..n where client1 < client2) (\n      (demand[client1,client2] = 1) ->\n           exists(ring in 1..r) (\n                 rings[ring,client1] + rings[ring, client2] >= 2\n           )\n   )   \n   /\\\n   % original comment:\n   % capacity of each ring must not be exceeded     \n   forall(ring in 1..r) (\n        sum(client in 1..n) (\n              rings[ring, client]\n              ) <= capacity_nodes[ring] \n   )\n;\n\n\n%\n% data\n% (sonet_problem1nu.param)\n%\nr = 4;\nn = 5;\n\ndemand =\narray2d(1..n, 1..n,\n        [0,1,0,1,0,\n         1,0,1,0,0,\n         0,1,0,0,1,\n         1,0,0,0,0,\n         0,0,1,0,0])\n;\n\ncapacity_nodes = [3,2,2,1];\n\n\noutput \n[\n  \"z: \", show(z)\n] ++\n[\n  if client = 1 then \"\\n\" else \" \" endif ++\n    show(rings[ring, client])\n  | ring in 1..r, client in 1..n\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00f4c044-144d-43c0-b718-4b8760a02089": {"__data__": {"id_": "00f4c044-144d-43c0-b718-4b8760a02089", "embedding": null, "metadata": {"model_name": "square_pack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "square_pack_source_code", "node_type": "4", "metadata": {"model_name": "square_pack"}, "hash": "85d9c41098be8262f601d20cdb90f89e9fb2da10b9eb0c1d145e815791fbc226", "class_name": "RelatedNodeInfo"}}, "text": "int: n; % number of squares\nset of int: SQUARE = 1..n;\nint: maxl = sum(i in SQUARE)(i);\nint: mina = sum(i in SQUARE)(i*i);\n\nvar n..maxl: height;\nvar n..maxl: width;\nvar mina .. n*maxl: area = height * width;\n\narray[SQUARE] of var 0..maxl: x;\narray[SQUARE] of var 0..maxl: y;\n\n% squares fit in the rectangle\nconstraint forall(s in SQUARE)(x[s] + s <= width);\nconstraint forall(s in SQUARE)(y[s] + s <= height);\n\n% non overlap\nconstraint forall(s1, s2 in SQUARE where s1 < s2)\n                 (x[s1] + s1 <= x[s2] \\/\n                  x[s2] + s2 <= x[s1] \\/  \n                  y[s1] + s1 <= y[s2] \\/ \n                  y[s2] + s2 <= y[s1]);\narray[SQUARE] of int: size = [ i | i in SQUARE ];\n\n% non overlap with global diffn\ninclude \"diffn.mzn\";\n%constraint diffn(x,y,size,size);\n\n% redundant cumulative constraints\ninclude \"cumulative.mzn\";\n%constraint cumulative(x,size,size,height);\n%constraint cumulative(y,size,size,width);\n\n% variables ordered in reverse size x[n], y[n], x[n-1], y[n-1], ..., x[1], y[1]\n%array[1..2*n] of var 0..maxl: vs = [ if i mod 2 = 0 then x[n+1 - i div 2] \n%                                     else y[n+1 - i div 2] endif | i in 2..2*n+1 ];\n\nsolve :: seq_search([\n         int_search([area,height,width], input_order, indomain_min, complete) \n         %,int_search(vs, input_order, indomain_min, complete)\n         ])\n      minimize area;\n\noutput [\"area = \",show(area), \"\\n\"] ++\n[\"height = \",show(height), \"\\n\"] ++\n[\"width = \",show(width), \"\\n\"] ++\n[\"x = \", show(x), \"\\n\"] ++\n[\"y = \", show(y), \"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b20ca51-dad0-4954-ad1c-cea7984bf072": {"__data__": {"id_": "9b20ca51-dad0-4954-ad1c-cea7984bf072", "embedding": null, "metadata": {"model_name": "stableroommates"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stableroommates_source_code", "node_type": "4", "metadata": {"model_name": "stableroommates"}, "hash": "3b9743b570ba350f58ac180d575e2677dec18a030d90a7f41faf02e67dfdd00d", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\n\n% Taken from the paper by Patrick Prosser at CPAIOR 2014\nint: n; % number of agents\nset of int: AGENT = 1..n;\nset of int: AGENT0 = 0..n;    % zero indicates no agent\narray[AGENT,1..n-1] of AGENT0: pref; % preference order for each agent\n     % the preference order is padded by zeros\narray[AGENT] of int: npref = [ sum(j in 1..n-1)(bool2int(pref[i,j] > 0))\n                             | i in AGENT ];\nconstraint forall(i in AGENT)\n                 (assert(forall(j in 1..n-1)\n                               (pref[i,j] != i /\\ \n                                (pref[i,j] = 0 <-> j > npref[i])) /\\\n                         forall(j1, j2 in 1..npref[i] where j1 < j2)\n                               (pref[i,j1] != pref[i,j2]),\n                         \"Agent \" ++ show(i) ++ \"has erroneous preferences\"));\n%% ranking information: rank = 0 means not ranked\narray[AGENT,AGENT] of 0..n-1: rank = \n     array2d(AGENT,AGENT, [ max([bool2int(pref[i1,j] = i2) * j | j in 1..n-1])\n                          | i1, i2 in AGENT ]);\n\narray[AGENT] of var 1..n: a;\n%% constraint (1)\nconstraint forall(i in AGENT)(a[i] <= npref[i] + 1);\n%% constraint (2)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref[i,p] } in \n                   a[i] > rank[i,j] -> a[j] < rank[j,i]\n                 );\n%% constraint (3)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref[i,p] } in \n                   a[i] = rank[i,j] -> a[j] = rank[j,i]\n                 );\n\nsolve satisfy;\n\noutput  [ if i < fix(pref[i,a[i]]) then \"(\" ++ show(i) ++ \",\" ++ show(pref[i,a[i]]) ++ \")\\n\"\n          else \"\" endif\n        | i in AGENT ]\n       ++ [show(rank),\"\\n\"] \n %      ++ [show(npref),\"\\n\"] \n %      ++ [show(a),\"\\n\"]\n        ;\n       \n\n\nModel 2 :\n\n\n\n% Taken from the paper by Patrick Prosser at CPAIOR 2014\nint: n; % number of agents\nset of int: AGENT = 1..n;\n\narray[AGENT] of int: npref; % number of preferences of each agent\narray[AGENT] of int: cum_npref = [ sum(j in 1..i-1)(npref[j]) | i in AGENT];\narray[1..sum(npref)] of int: preferences;  % all preferences in one list\n\nfunction AGENT: pref(AGENT: i, 1..n-1: j) = \n         assert(j in 1..npref[i], \"Called pref(\" ++ show(i) ++ \",\" ++ show(j) ++ \") too large preference\\n\",\n         preferences[cum_npref[i] + j]);\n\nconstraint forall(i in AGENT)\n                 (assert(forall(j in 1..npref[i])\n                               (pref(i,j) != i) /\\\n                         forall(j1, j2 in 1..npref[i] where j1 < j2)\n                               (pref(i,j1) != pref(i,j2)),\n                         \"Agent \" ++ show(i) ++ \"has erroneous preferences\"));\n\n\n%% ranking information: rank = 0 means not ranked but shoulnt occur!\nfunction 0..n-1: rank(AGENT: i1, AGENT: i2) = \n                 max([bool2int(pref(i1,j) = i2) * j | j in 1..npref[i1]]); \n\narray[AGENT] of var 1..n: a;\n%% constraint (1)\nconstraint forall(i in AGENT)(a[i] <= npref[i] + 1);\n%% constraint (2)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref(i,p) } in \n                   a[i] > rank(i,j) -> a[j] < rank(j,i)\n                 );\n%% constraint (3)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref(i,p) } in \n                   a[i] = rank(i,j) -> a[j] = rank(j,i)\n                 );\n\nsolve satisfy;\n\n   output  [ if fix(a[i]) < npref[i] /\\ i < pref(i,fix(a[i]))\n             then \"(\" ++ show(i) ++ \",\" ++ show(pref(i,fix(a[i]))) ++ \")\\n\"\n             else \"\" endif\n           | i in AGENT ]\n %      ++ [show(rank),\"\\n\"] \n       ++\n       [show(npref),\"\\n\"] \n       ++ [show(a),\"\\n\"]\n        ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "305433ba-5ad0-45b3-a0c4-576547215506": {"__data__": {"id_": "305433ba-5ad0-45b3-a0c4-576547215506", "embedding": null, "metadata": {"model_name": "steiner"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "steiner_source_code", "node_type": "4", "metadata": {"model_name": "steiner"}, "hash": "cc7e3556c078e28df07456bbc81467c3675eac3e5fd39d37a5ca686094a21ac5", "class_name": "RelatedNodeInfo"}}, "text": "% The ternary Steiner problem of order n is to find n(n-1)/6 sets of elements in {1,2,...,n}\n% such that each set contains three elements and any two sets have at most one element in common.\n% For example, the following shows a solution for size n=7:\n%\n%      {1,2,3}, {1,4,5}, {1,6,7}, {2,4,6}, {2,5,7}, {3,4,7}, {3,5,6}\n\ninclude \"globals.mzn\";\n\nint: N = 7; \nint: NB = N *(N-1) div 6;\narray[1..NB] of var set of 1..N: Sets;\n\n% solve satisfy;\nsolve::set_search(Sets, first_fail, indomain_min, complete) satisfy;\n\n\n\nconstraint\n   forall(i in index_set(Sets)) (\n      card(Sets[i]) = 3\n   )\n   /\\ \n   forall(i,j in index_set(Sets) where i < j) (\n      card( Sets[i] intersect Sets[j]) <= 1\n   )\n   /\\ % symmetry breaking\n   decreasing(Sets)\n\n;\n\noutput [\n       \"N: \", show(N), \" NB: \", show(NB), \"\\n\",\n       \"Sets: \", show(Sets)\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 830, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "206733f8-4aa8-42bc-bdf4-73cad608bac0": {"__data__": {"id_": "206733f8-4aa8-42bc-bdf4-73cad608bac0", "embedding": null, "metadata": {"model_name": "stoch_fjsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stoch_fjsp_source_code", "node_type": "4", "metadata": {"model_name": "stoch_fjsp"}, "hash": "b42e73c32c804de23a7881a45ff27a159700fc4415c9d60ac8529e5a45e30d7b", "class_name": "RelatedNodeInfo"}}, "text": "% Stochastic General Assignment Problem \n% First stage:\n%    assign task to machines \n% Second stage:\n%    based on observed processign times, schedule taks on respective machines\n% Objective:\n%    minimise expected makespan\n\ninclude \"globals.mzn\";\n\n% Parameters\n\nint: no_mach;   % Number of machines\nint: no_jobs;   % Number of jobs\nint: no_task;   % Number of total tasks\nint: no_optt;   % Number of total optional tasks\n\nset of int: Mach  = 1..no_mach;\nset of int: Jobs  = 1..no_jobs;\nset of int: Tasks = 1..no_task;\nset of int: OptTs = 1..no_optt;\n\narray [Jobs] of set of int: tasks;\narray [Tasks] of set of int: optts;\n\narray [OptTs] of int: optt_mach;\narray [SCENARIOS1,OptTs] of int: optt_dur;\n\n\narray [Jobs] of int: last_task = [ max(tasks[j]) | j in Jobs ];\n%---------implications for multi scenarion solving ---------------\nint: nbScenarios;\nset of int: SCENARIOS1 = 1..nbScenarios;\nint: first_scen;\nint: last_scen;\nset of int: SCENARIOS = first_scen..last_scen;\narray[SCENARIOS1] of int: weights;\n\n%-------end of multi scenario addons ----------------\narray [Tasks] of int: task_job = \n    [ min(j in Jobs where t in tasks[j])(j) | t in Tasks ];\narray [SCENARIOS,Tasks] of int: task_mins =\n    array2d(SCENARIOS,Tasks,[ sum(k in tasks[task_job[t]])(if k < t then task_mind[s,k] else 0 endif)\n    |   s in SCENARIOS, t in Tasks ]);\narray [SCENARIOS,Tasks] of int: task_maxs =\n    array2d(SCENARIOS,Tasks,[ t_max[s] -\n        sum(k in tasks[task_job[t]])(if k < t then 0 else task_mind[s,k] endif)\n    |   s in SCENARIOS,  t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_mind =\n    array2d(SCENARIOS,Tasks,[ min(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS,t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_maxd = \n    array2d(SCENARIOS,Tasks,[ max(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS, t in Tasks ]);\n\n    % Additional deirved parameters for optional tasks\n    %\narray [OptTs] of int: optt_task =\n    [ min(t in Tasks where o in optts[t])(t) | o in OptTs ];\n\narray[SCENARIOS1] of int: min_dur = [ min([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\narray[SCENARIOS1] of int: max_dur = [ max([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\nset of int: Durs = min(min_dur)..max(max_dur);\n\n    % Parameters related to the planning horizon\n    %\narray[SCENARIOS1] of int: t_max = [sum(t in Tasks)(max(o in optts[t])(optt_dur[s,o])) | s in SCENARIOS1];\n\nset of int: Times = 0..max(t_max);\n\n%-----------------------------------------------------------------------------%\n% Variables\n\n    % Start time variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Times: start =\n    array2d(SCENARIOS,Tasks,[ let { var task_mins[s,t]..task_maxs[s,t]: k } in k | s in SCENARIOS, t in Tasks ]);\n\n    % Duration variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Durs: dur =\n    array2d(SCENARIOS,Tasks,[ if task_mind[s,t] = task_maxd[s,t] then task_mind[s,t] else\n        let { var task_mind[s,t]..task_maxd[s,t]: d } in d endif\n    |   s in SCENARIOS,t in Tasks ]);\n\n    % Variables whether an optional task is executed\n    %\narray [OptTs] of var bool: b;\n\narray[SCENARIOS] of var Times: de_objective;\n\nset of int: StochTimes = 0..sum(t_max);\nvar StochTimes: objective;\n%-----------------------------------------------------------------------------%\n% Constraints\n\n    % Precedence relations\n    %\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs, i in tasks[j] where i < last_task[j])(\n            start[s,i] + dur[s,i] <= start[s,i + 1]\n        )    \n    );\n\n    % Duration constraints\n    %\nconstraint\n    forall(o in OptTs,s in SCENARIOS)(\n        let { int: t = optt_task[o] } in (\n            if card(optts[t]) = 1 then\n                b[o] = true\n            else\n                b[o] -> dur[s,t] = optt_dur[s,o]\n            endif\n        )\n    );\n\n    % Optional tasks' constraints\n    %\nconstraint\n    forall(t in Tasks where card(optts[t]) > 1)(\n        ( sum(o in optts[t])(bool2int(b[o])) <= 1     )\n    /\\  ( exists(o in optts[t])(b[o])                 )\n    );\n\nconstraint\n    forall(t in Tasks where card(optts[t]) = 2)(\n        let {\n            int: o1 = min(optts[t]),\n            int: o2 = max(optts[t])\n        } in ( b[o1] <-> not(b[o2]) )\n    );\n\n    % Resource constraints\n    %\nconstraint\n    forall(m in Mach,s in SCENARIOS)(\n        let {\n            set of int: MTasks = { o | o in OptTs where optt_mach[o] = m }\n        } in (\n            cumulative(\n                [ start[s,optt_task[o]] | o in MTasks ],\n                [ optt_dur[s,o]         | o in MTasks ],\n                [ bool2int(b[o])      | o in MTasks ],\n                1\n            )\n        )\n    );\n\n% Objective constraint\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs)(start[s,last_task[j]] + dur[s,last_task[j]] <= de_objective[s])\n    );\nconstraint \n        objective = sum(s in SCENARIOS)(weights[s]*de_objective[s]);\n%-----------------------------------------------------------------------------%\n% Solve item\n\nsolve \n    :: search\n    minimize objective;\n\n%------------------------------------------------------------------------------%\n% Searches\n\nann: s_mindur   = int_search([dur[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_minstart = int_search([start[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_bool     = bool_search(b, input_order, indomain_max, complete);\nann: s_obj      = int_search(de_objective, input_order, indomain_min, complete);\n\nann: search = seq_search([s_mindur, s_bool, s_minstart, s_obj]);\n\n%-----------------------------------------------------------------------------%\n% Output\n\noutput \n[   \"objective = \", show(de_objective), \";\\n\",\n    \"stoch obj = \", show(objective), \";\\n\",\n    \"start = \", show(start), \";\\n\",\n    \"dur = \", show(dur), \";\\n\",\n    \"b = \", show(b), \";\\n\",\n];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "302ff925-7fa2-4216-adc6-f1f92f1660bc": {"__data__": {"id_": "302ff925-7fa2-4216-adc6-f1f92f1660bc", "embedding": null, "metadata": {"model_name": "submultisetsum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "submultisetsum_source_code", "node_type": "4", "metadata": {"model_name": "submultisetsum"}, "hash": "807400f286bd0f7604f9bacbf1458b91439aaa2b7fde34d70fe394ea5473af37", "class_name": "RelatedNodeInfo"}}, "text": "% subsetsum problem\narray[int] of int: number;\nint: target;\n\nset of int: NUMBER = index_set(number);\nvar set of NUMBER: selected;\n\nconstraint sum(i in selected)\n              (number[i]) = target;\nsolve satisfy;\n\noutput [show(selected)];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa44f403-8c30-4b25-924b-491b35a8ccfb": {"__data__": {"id_": "aa44f403-8c30-4b25-924b-491b35a8ccfb", "embedding": null, "metadata": {"model_name": "table_seating"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "table_seating_source_code", "node_type": "4", "metadata": {"model_name": "table_seating"}, "hash": "114c6501313c967de72375894437d6804bdcbb217106b989832d26a0a86ac14b", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\nint: n;\nset of int: PERSON = 1..n;\nint: T; % number of tables\nset of int: TABLE = 1..T;\nint: S; % tables size\narray[int,1..2] of PERSON: couples;\nset of PERSON: key;\n\narray[TABLE] of var set of PERSON: table;\n\npredicate not_same_table(PERSON:p1, PERSON: p2) =\n          forall(t in TABLE)(not ({p1,p2} subset table[t]));\n\nconstraint forall(t in TABLE)(card(table[t]) <= S);\n\nconstraint forall(p in PERSON)(exists(t in TABLE)(p in table[t]));\n\nconstraint forall(c in index_set_1of2(couples))\n                 (not_same_table(couples[c,1],couples[c,2]));\n\nconstraint forall(p1,p2 in key where p1 < p2)\n                 (not_same_table(p1,p2));\n\nvar int: obj = sum(c in index_set_1of2(couples))\n                  ( let { var TABLE: tn1 = sum(t in TABLE)(t * bool2int(couples[c,1] in table[t]));\n                          var TABLE: tn2 = sum(t in TABLE)(t * bool2int(couples[c,2] in table[t]));\n                    } in  tn1 + tn2);\n\n\n\nsolve minimize obj;\n\noutput [show(table), \" = \", show(obj)];\n\n\nn = 20;\nT = 5;\nS = 5;\ncouples = [| 1, 2 | 4, 5 | 6, 7 | 8, 10\n           | 11, 12 | 13, 14 | 17, 18 |];\nkey = {1, 6, 7, 8};\n\n\n\nModel 2 : \n\n\nint: n;\nset of int: PERSON = 1..n;\nint: T; % number of tables\nset of int: TABLE = 1..T;\nint: S; % tables size\narray[int,1..2] of PERSON: couples;\nset of PERSON: key;\n\narray[TABLE] of var set of PERSON: table;\narray[PERSON] of var TABLE: seat;\n\n\npredicate not_same_table(PERSON:p1, PERSON: p2) =\n                        seat[p1] != seat[p2];\n\nconstraint global_cardinality_low_up(seat, [t|t in TABLE], [0|t in TABLE], [S|t in TABLE]);\n\nconstraint forall(c in index_set_1of2(couples))\n                 (not_same_table(couples[c,1],couples[c,2]));\n\nconstraint forall(p1,p2 in key where p1 < p2)\n                 (not_same_table(p1,p2));\n\nvar int: obj = sum(c in index_set_1of2(couples))(seat[couples[c,1]] + seat[couples[c,2]]);\n\nconstraint forall(t in TABLE, p in PERSON)(p in table[t] <-> seat[p] = t);    \n\nsolve minimize obj;\n\noutput [show(table), \" = \", show(obj)];\n\n\nn = 20;\nT = 5;\nS = 5;\ncouples = [| 1, 2 | 4, 5 | 6, 7 | 8, 10\n           | 11, 12 | 13, 14 | 17, 18 |];\nkey = {1, 6, 7, 8};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62546787-81e8-48ae-9c79-650072d44dfc": {"__data__": {"id_": "62546787-81e8-48ae-9c79-650072d44dfc", "embedding": null, "metadata": {"model_name": "teamselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "teamselect_source_code", "node_type": "4", "metadata": {"model_name": "teamselect"}, "hash": "0344da45c0aef8eb4a2224e68de764dcad0b5a1450a64b4ccb1185fe7b49e233", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n\n\nset of int: PLAYER = 1..11;\nset of int: GOALIE = 1..2;\nset of int: DEFENCE = 3..6;\nset of int: OFFENCE = 7..11;\n\nvar set of PLAYER: Xavier;\nvar set of PLAYER: Yuri;\nvar set of PLAYER: Zena;\n\narray[CAPTAIN] of var set of PLAYER: team = [Xavier,Yuri,Zena];\n\nset of int: CAPTAIN = 1..3;\narray[CAPTAIN,PLAYER] of int: value;\n \nvalue = [| 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6\n         | 9, 8, 4, 7, 6, 4, 5, 3, 5, 5, 7\n         | 8, 4, 3, 3, 6, 2, 5, 5, 3, 2, 5 |]; \n\nconstraint card(Xavier intersect GOALIE) >= 1;\nconstraint card(Xavier intersect DEFENCE) >= 2;\nconstraint card(Xavier intersect OFFENCE) >= 2;\nconstraint card(Xavier) = 6;\n\n\nconstraint card(Yuri intersect GOALIE) >= 1;\nconstraint card(Yuri intersect DEFENCE) >= 2;\nconstraint card(Yuri intersect OFFENCE) >= 2;\nconstraint card(Yuri) = 6;\n\nconstraint card(Zena intersect GOALIE) >= 1;\nconstraint card(Zena intersect DEFENCE) >= 2;\nconstraint card(Zena intersect OFFENCE) >= 2;\nconstraint card(Zena) = 6;\n\nconstraint card(Xavier intersect Yuri) <= 2;\nconstraint card(Xavier intersect Zena) <= 2;\n\nsolve maximize obj;\n\nvar int: obj = sum(c in CAPTAIN)(sum(p in team[c])(value[c,p]));\n\narray[PLAYER] of string: name =\n  [\"Ant\",\"Bee\",\"Cip\",\"Deb\",\"Eve\",\"Fin\",\"Ged\",\"Hel\",\"Ila\",\"Jan\",\"Kim\"];\n\noutput [\"Xavier: \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Xavier) ] ++\n       [\"\\nYuri:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Yuri) ] ++\n       [\"\\nZena:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Zena) ] ++\n       [\"\\nobj = \", show(obj), \";\\n\"];\n\n\n\nModel 2 :\n\n\n% team select problem\n\nset of int: PLAYER = 1..11;\nset of int: GOALIE = 1..2;\nset of int: DEFENCE = 3..6;\nset of int: OFFENCE = 7..11;\narray[PLAYER] of string: name =\n  [\"Ant\",\"Bee\",\"Cip\",\"Deb\",\"Eve\",\"Fin\",\"Ged\",\"Hel\",\"Ila\",\"Jan\",\"Kim\"];\nset of int: CAPTAIN = 1..3;\nint: xavier = 1; int: yuri = 2; int: zena = 3;\narray[CAPTAIN,PLAYER] of int: value;\nvalue = [| 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6\n         | 9, 8, 4, 7, 6, 4, 5, 3, 5, 5, 7\n         | 8, 4, 3, 3, 6, 2, 5, 5, 3, 2, 5 |];\n\nvar set of PLAYER: Xavier;\nvar set of PLAYER: Yuri;\nvar set of PLAYER: Zena;\n\npredicate correct_team(var set of PLAYER: team) = \n          card(team) = 6 /\\ \n          card(team intersect GOALIE) >= 1 /\\\n          card(team intersect DEFENCE) >= 2 /\\\n          card(team intersect OFFENCE) >= 2;\n\nconstraint correct_team(Xavier) /\\ correct_team(Yuri) /\\ correct_team(Zena);\n\nconstraint card(Xavier intersect Yuri) <= 2;\nconstraint card(Xavier intersect Zena) <= 2;\n\nvar int: obj = sum(p in Xavier)(value[xavier,p]) +\n               sum(p in Yuri)(value[yuri,p]) +\n               sum(p in Zena)(value[zena,p]);\n\nsolve maximize obj;\n\noutput [\"Xavier: \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Xavier) ] ++\n       [\"\\nYuri:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Yuri) ] ++\n       [\"\\nZena:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Zena) ] ++\n       [\"\\nobj = \", show(obj), \";\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47a1a6aa-86a2-4fd2-8cfb-495242483049": {"__data__": {"id_": "47a1a6aa-86a2-4fd2-8cfb-495242483049", "embedding": null, "metadata": {"model_name": "template_design"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "template_design_source_code", "node_type": "4", "metadata": {"model_name": "template_design"}, "hash": "56757b07193da56b9df0c5913c8e4d41075cc864474a10efd70dfd7552fc12b1", "class_name": "RelatedNodeInfo"}}, "text": "% Template design\ninclude \"globals.mzn\";\n\nint: S;   \t\t% Number of slots per template.\nint: t;   \t\t% Number of templates.\nint: n;   \t\t% Number of variations.\narray[1..n] of int: d; \t% How much of each variation we must print?\n\n% Lower and upper bounds for the total production.\n%\nint: llower = ceil(sum(i in 1..n)(int2float(d[i]))/int2float(S));\nint: lupper = 2*llower; % If t>1, this should be the optimal Production_{t-1}-1.\n\n% # Slots allocated to variation i in template j\narray[1..n,1..t] of var 0..S: p;\n\n% # Pressings of template j.\narray[1..t] of var 1..lupper: R;\n\n% Sum of all Rj.\nvar llower..lupper: Production;\n\n% Production x S - sum(d[i])\nvar 0..lupper-llower: Surplus;\n\n% First, set up Production to be the sum of the Rj\nconstraint\n\tProduction = sum(i in 1..t)(R[i]);\n\n% the limits on production\nconstraint\n\tProduction >= llower /\\ Production <= lupper;\n\n% The number of slots occupied in each template is S.\nconstraint\n\tforall(j in 1..t)\n\t\t (sum(i in 1..n)(p[i,j]) = S);\n\n% Enough of each variation is printed.\nconstraint\n\tforall(i in 1..n)\n\t\t (sum(j in 1..t)(p[i,j]*R[j]) >= d[i]);\n\n% Symmetry constraints.\n% Variations with the same demand are symmetric.\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] == d[i+1] then\n\t\t\tlex_lesseq([p[i,  j] | j in 1..t],\n\t\t\t\t[p[i+1,j] | j in 1..t])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% pseudo symmetry\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] < d[i+1] then\n\t\t       sum (j in 1..t) (p[i,j]*R[j])\n\t\t     <= sum (j in 1..t) (p[i+1,j]*R[j])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% implied constraints on the surplus\n\n% These are presented in the paper as necessary to get good\n% performance for this model, but I think bounds consistency on the\n% sum(R[i]) constraint would produce the same amount of propagation\n\n% Set up surplus, which is bounded as production is bounded.\nconstraint\n\tSurplus = Production*S - sum(i in 1..n)(d[i]);\n\n% The surplus of each variation is also limited by the surplus.\nconstraint\n\tforall(k in 1..n)\n\t\t (sum(j in 1..t)(p[k,j]*R[j]-d[k]) <= Surplus);\n\n% The surplus of the first k variations is limited by the surplus.\nconstraint\n\tforall(k in 2..n-1)\n\t\t (sum(j in 1..t, m in 1..k)( p[m,j]*R[j]-d[m] ) <= Surplus);\n\n% Implied constraints on the run length.\nconstraint\n\tif t=2 then (\n\t\tR[1] <= Production div 2\n\t/\\\tR[2] >= Production div 2\n\t) else true endif;\n\nconstraint\n\tif t=3 then (\n\t\tR[1] <= Production div 3\n\t/\\\tR[2] <= Production div 2\n\t/\\\tR[3] >= Production div 3\n\t) else true endif;\n\n% Minimize the production.\nsolve :: int_search(array1d(1..n*t,p) ++ R, input_order, indomain_min, complete)\n    minimize Production;\n\noutput [\n    if v = 1 then \"template #\" ++ show(i) ++ \": [\" else \"\" endif ++\n    show(p[v, i]) ++\n    if v = n then \"], pressings: \" ++ show(R[i]) ++ \"\\n\" else \", \" endif\n\t| i in 1..t, v in 1..n]\n    ++ [\"Total pressings: \", show(Production), \"\\n%\\n\"];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9105bdad-23f8-420d-a91d-0b24fcea91c7": {"__data__": {"id_": "9105bdad-23f8-420d-a91d-0b24fcea91c7", "embedding": null, "metadata": {"model_name": "toomany"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "toomany_source_code", "node_type": "4", "metadata": {"model_name": "toomany"}, "hash": "99acb6a14c34efacea1dfb7dacd14bb6a838930d9feda2272d782000db7342ef", "class_name": "RelatedNodeInfo"}}, "text": "%% TooMany.mzn (too many solutions)\nint: n; % number of machines\nset of int: MACHINE = 1..n;\nint: k; % production per day\nint: red = 1; int: white = 2; int: black = 3; int: blue = 4;\nset of int: COLOR = 1..4;\narray[COLOR] of int: l; % lower bound on production\narray[COLOR] of int: u; % upper bound on production\n\narray[MACHINE,COLOR] of var 0..k div 2: produce;\n\nconstraint forall(m in MACHINE)\n                 (sum(c in COLOR)(produce[m,c]) <= k);\nconstraint forall(c in COLOR)\n                 (sum(m in MACHINE)(produce[m,c]) >= l[c]);\nconstraint forall(c in COLOR)\n                 (sum(m in MACHINE)(produce[m,c]) <= u[c]);\nconstraint forall(m in MACHINE)\n                 (produce[m,white] > 0 /\\ produce[m,black] > 0 -> produce[m,blue] = 0);\nconstraint forall(m in MACHINE)\n                 (produce[m,blue] <= produce[m,red]);\nconstraint forall(m in MACHINE)\n                 (produce[m,red] mod 4 = 0);\nconstraint forall(m in MACHINE)\n                 (produce[m,white] mod 3 = 0);\n\n\nsolve maximize sum(m in MACHINE, c in COLOR)(produce[m,c]);\n\noutput [ show_int(3,produce[m,c]) ++\n         if c = 4 then \"\\n\" else \" \" endif\n       | m in MACHINE, c in COLOR ];\n\nn = 4;\nk = 11;\nl = [8,7,10,6];\nu = [14,16,12,20];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08f78060-8466-4db7-98b6-e3e526919fde": {"__data__": {"id_": "08f78060-8466-4db7-98b6-e3e526919fde", "embedding": null, "metadata": {"model_name": "traffic_lights_table"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "traffic_lights_table_source_code", "node_type": "4", "metadata": {"model_name": "traffic_lights_table"}, "hash": "7b83689817efed9749e7da0c9ad4ba54e6d687a359d7e81c17de086dde16cd55", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n%Traffic lights problem in MiniZinc.\n% Specification:\n% Consider a four way traffic junction with eight traffic lights. Four of\n% the traffic lights are for the vehicles and can be represented by the\n% variables V1 to V4 with domains\n% {r,ry,g,y} (for red, red-yellow, green and yellow).\n%  The other four traffic lights are for the pedestrians and can be\n%  represented by the variables P1 to P4 with domains {r,g}.\n%\n% The constraints on these variables can be modelled by quaternary\n% constraints on\n% (Vi, Pi, Vj, Pj ) for 1<=i<=4, j=(1+i)mod 4 which allow just the tuples\n% {(r,r,g,g), (ry,r,y,r), (g,g,r,r), (y,r,ry,r)}.\n%\n% It would be interesting to consider other types of junction (e.g. five roads\n% intersecting) as well as modelling the evolution over time of the\n% traffic light sequence.\n\ninclude \"globals.mzn\";\n\nint: n = 4;\nint: r  = 1; % red\nint: ry = 2; % red-yellow\nint: g  = 3; % green\nint: y  = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V;\narray[1..n] of var Pedestrians: P;\n\n\nsolve satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   table([V[i], P[i], V[j], P[j]], allowed)\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\n% output [\n%  \"V: \", show(V), \"\\nP: \", show(P), \"\\n\"\n% ];\noutput [\n show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\nint: n = 4;\nint: r = 1; % red\nint: ry = 2; % red-yellow\nint: g = 3; % green\nint: y = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V; % ;\narray[1..n] of var Pedestrians: P; %;\n\npredicate cp1d(array[int] of var int: x, array[int] of var int: y) =\n  assert(index_set(x) = index_set(y),\n           \"cp1d: x and y have different sizes\",\n     forall(i in index_set(x)) ( x[i] = y[i] ))\n; \n\n% solve satisfy;\nsolve :: int_search(V ++ P, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   exists(a in 1..4) (\n      cp1d([V[i], P[i], V[j], P[j]], [allowed[a,k] | k in 1..4])\n   )\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\noutput [\n  show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb5e0173-ab3a-4aaa-9c5f-96196d05ae2b": {"__data__": {"id_": "bb5e0173-ab3a-4aaa-9c5f-96196d05ae2b", "embedding": null, "metadata": {"model_name": "TTPPV"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "TTPPV_source_code", "node_type": "4", "metadata": {"model_name": "TTPPV"}, "hash": "d47668f248004f17fc9ab60a5da660f54e11511cec24c2059d891c51dfe4c662", "class_name": "RelatedNodeInfo"}}, "text": "% Traveling Tournament Problem with Predefined Venues\n%\n% Compact single round robin schedule minimizing total travel distance\n% The venue of each game has already been decided\n% Specialized for CIRC instances (circular distances)\n\ninclude \"globals.mzn\";\n\nint: nbTeams;\nint: nbRounds = nbTeams-1;\n\nset of int: Teams = 1..nbTeams;\nset of int: Rounds = 1..nbRounds;\nset of int: Travels = 1..nbRounds+1;\n\n% predefined venue: pv[i][j] = 1 iff i is playing at home against j\narray[Teams,Teams] of 1..2: pv; \n\n% circular distances: for i>=j, distance[i][j]=min{i-j,j-i+nbTeams}\narray[Teams,Teams] of int: distance = \n  array2d(Teams,Teams,[ if i>=j then (if i-j < j-i+nbTeams then i-j else j-i+nbTeams endif) \n                                else (if j-i < i-j+nbTeams then j-i else i-j+nbTeams endif) \n                                endif | i,j in Teams]);\n\n% output related\nint: digs = ceil(log(10.0,int2float(nbTeams)));\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% decision variables: in round k, team i plays against team opponent[i,k]\narray[Teams,Rounds] of var Teams: opponent;\n\n% auxiliary variables: venue[i,k] = 1 iff team i plays at home in round k\narray[Teams,Rounds] of var 1..2: venue;\nconstraint forall (i in Teams, k in Rounds) (venue[i,k] = pv[i,opponent[i,k]]);\n\n% auxiliary variables: travel[i,k] is the distance travelled by team i to go play in round k (includes travelling back home after last round)\narray[Teams,Travels] of var 0..(nbTeams div 2): travel;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n% a team cannot play against itself\nconstraint forall (i in Teams, k in Rounds) (opponent[i,k] != i);\n\n% in round k, i plays j means j plays i\nconstraint forall (i in Teams, k in Rounds) (opponent[opponent[i,k],k] = i);\n\n% for each team i, all opponents are different\nconstraint forall (i in Teams) (alldifferent([opponent[i,k] | k in Rounds]));\n\n% for each round k, all opponents are different (implied constraint)\nconstraint forall (k in Rounds) (alldifferent([opponent[i,k] | i in Teams]));\n\n% for each team i, there can be at most 3 consecutive home games and at most 3 consecutive away games\nint: nbStates = 7;\nset of int: States = 1..nbStates;\narray[States,1..2] of int: delta = \n  [| 2, 5\n   | 3, 5\n   | 4, 5\n   | 0, 5\n   | 2, 6\n   | 2, 7\n   | 2, 0 |];\nconstraint forall (i in Teams) (regular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States));\n\n% symmetry breaking: distances are symmetric so reversing the rounds yields a schedule of same cost\nconstraint (opponent[1,1] < opponent[1,nbRounds]);\n\n% define travel variables wrt venues of current- and next-round games\nconstraint forall (i in Teams) (\n\t(venue[i,1]=1 -> travel[i,1] = 0) /\\\n\t(venue[i,1]=2 -> travel[i,1] = distance[i,opponent[i,1]]) );\nconstraint forall (i in Teams, k in 1..nbRounds-1) (\n\t((venue[i,k]=1 /\\ venue[i,k+1]=1) -> travel[i,k+1] = 0) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=1) -> travel[i,k+1] = distance[opponent[i,k],i]) /\\\n\t((venue[i,k]=1 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[i,opponent[i,k+1]]) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[opponent[i,k],opponent[i,k+1]]) );\nconstraint forall (i in Teams) (\n\t(venue[i,nbRounds]=1 -> travel[i,nbRounds+1] = 0) /\\\n\t(venue[i,nbRounds]=2 -> travel[i,nbRounds+1] = distance[opponent[i,nbRounds],i]) );\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nvar int: totalTravel;\nconstraint totalTravel = sum (i in Teams, k in Travels) (travel[i,k]);\nsolve minimize totalTravel;\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\noutput [\"SCHEDULE\\n\"] ++ \n       [ if fix(venue[i,k]) == 1 then \" \" else \"@\" endif ++\n\t show_int(digs,opponent[i,k]) ++ \" \" ++ \n         if k == nbRounds /\\ i != nbTeams then \"\\n\" else \"\" endif\n         | i in Teams, k in Rounds ] ++ [\"\\n\"] ++\n       [\"total travel = \"] ++ [show(totalTravel)] ++ [\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60c5488e-8bd2-4210-a347-6dbec76ab209": {"__data__": {"id_": "60c5488e-8bd2-4210-a347-6dbec76ab209", "embedding": null, "metadata": {"model_name": "vessel-loading"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "vessel-loading_source_code", "node_type": "4", "metadata": {"model_name": "vessel-loading"}, "hash": "71c6099e3aec895b01bbca1c147f98e4783398c1335414b5dd0eee9566af1140", "class_name": "RelatedNodeInfo"}}, "text": "% Vessel Loading\n\nint: deck_width; % width of deck\nint: deck_length; % height of deck\nint: n_containers; % number of containers\nint: n_classes; % number of container classes\n\narray[int] of int: width;\n% width[c] = width of container c\narray[int] of int: length;\n% length[c] = length of container c\narray[int] of int: class;\n% class[c] = class of container c\narray[int, int] of int: separation;\n% separation[a, b] = the minimum allowed separation between\n%                    containers of classes a and b\n\nset of int: Containers = 1..n_containers;\n\narray[Containers] of var 0..deck_width: Left;\n% Left[c] = leftmost point of container c\narray[Containers] of var 0..deck_width: Right;\n% Right[c] = rightmost point of container c\narray[Containers] of var 0..deck_length: Bottom;\n% Bottom[c] = bottommost point of container c\narray[Containers] of var 0..deck_length: Top;\n% Top[c] = topmost point of container c\n\narray[Containers] of var 1..2: orientation;\n% orientation[c] = 2 if container c is turned 90 degrees, else 1.\n\nconstraint\n  forall (c in Containers) (\n    let {\n      array[1..2] of int: ElemWidth = [width[c], length[c]];\n      array[1..2] of int: ElemLength = [length[c], width[c]]\n    }\n    in \n      Right[c] = Left[c] + ElemWidth[orientation[c]] /\\\n      Top[c] = Bottom[c] + ElemLength[orientation[c]]\n  )\n;\n\nconstraint\n  forall(c, k in Containers where c < k) (\n    Left[c] >= Right[k] + separation[class[c], class[k]] \\/\n    Right[c] + separation[class[c], class[k]] <= Left[k] \\/\n    Bottom[c] >= Top[k] + separation[class[c], class[k]] \\/\n    Top[c] + separation[class[c], class[k]] <= Bottom[k]\n  )\n;\n\n% Excessive (pretty) output\noutput [\"\u250c\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2510\\n\"] ++\n       [if x == 0 then \"\u2502\" else \"\" endif ++\n        let {\n          bool: l = exists([fix(Left[c])   = x | c in Containers]);\n          bool: r = exists([fix(Right[c])  = x | c in Containers]);\n          bool: b = exists([fix(Bottom[c]) = y | c in Containers]);\n          bool: t = exists([fix(Top[c])    = y | c in Containers])\n        } in\n          if     l /\\ r /\\ b /\\ t then \"\u253c\"\n          elseif l /\\ r /\\ b      then \"\u252c\"\n          elseif l /\\ r /\\      t then \"\u2534\"\n          elseif l /\\      b /\\ t then \"\u251c\"\n          elseif      r /\\ b /\\ t then \"\u2524\"\n          elseif l /\\      b      then \"\u250c\"\n          elseif l /\\           t then \"\u2514\"\n          elseif      r /\\ b      then \"\u2510\"\n          elseif      r /\\      t then \"\u2518\"\n          elseif l \\/ r           then \"\u2502\"\n          elseif           b \\/ t then \"\u2500\" \n          else \" \" endif ++\n        if x == deck_width then \"\u2502\\n\" else \"\" endif\n        | y in 0..deck_length, x in 0..deck_width] ++\n        [\"\u2514\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2518\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b44b9b6a-b601-4a03-88cd-2d2c72f7fc92": {"__data__": {"id_": "b44b9b6a-b601-4a03-88cd-2d2c72f7fc92", "embedding": null, "metadata": {"model_name": "warehouses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "warehouses_source_code", "node_type": "4", "metadata": {"model_name": "warehouses"}, "hash": "754981337e840300547cefb89eabdb0854507f3f94f7eec7e5c463bf85b54553", "class_name": "RelatedNodeInfo"}}, "text": "% Warehouse allocation\n\n% vim: ft=zinc ts=2 sw=2 et tw=0\n\n% A company needs to construct warehouses to supply stores with goods.  Each\n% warehouse possibly to be constructed has a certain capacity defining how many\n% stores it can supply.  Constructing a warehouse incurs a fixed cost.  Costs\n% for transportation from warehouses to stores depend on the locations of\n% warehouses and stores.\n%\n% Determine which warehouses should be constructed and which warehouse should\n% supply which store such that overall cost (transportation cost plus\n% construction cost) is smallest.\n%-----------------------------------------------------------------------------\n\ninclude \"globals.mzn\";\n\n%-----------------------------------------------------------------------------\n% Instance\n\nn_suppliers = 5;\nn_stores = 10;\nbuilding_cost = 30;\n\ncapacity = [1,4,2,1,3];\n\ncost_matrix =\n [|20, 24, 11, 25, 30\n  |28, 27, 82, 83, 74\n  |74, 97, 71, 96, 70\n  | 2, 55, 73, 69, 61\n  |46, 96, 59, 83,  4\n  |42, 22, 29, 67, 59\n  | 1,  5, 73, 59, 56\n  |10, 73, 13, 43, 96\n  |93, 35, 63, 85, 46\n  |47, 65, 55, 71, 95|]; \n\n%-----------------------------------------------------------------------------\n% Model\n\nint: n_suppliers;\nint: n_stores;\nint: building_cost;\narray[1..n_suppliers] of int: capacity;\narray[1..n_stores,1..n_suppliers] of int: cost_matrix;\n\nint: MaxCost = max(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]);\nint: MaxTotal =   (n_suppliers * building_cost) \n                + sum(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]); \n\narray[1..n_stores] of var 1..n_suppliers: supplier;\narray[1..n_suppliers] of var bool: open;\narray[1..n_stores] of var 1..MaxCost: cost;\nvar 1..MaxTotal: tot;\n\nconstraint\n  sum (i in 1..n_suppliers) (building_cost * bool2int(open[i])) +\n  sum (i in 1..n_stores) (cost[i])\n  = tot;\n\nconstraint\n  forall (i in 1..n_stores) (\n    cost_matrix[i,supplier[i]] = cost[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    let {\n      var int: use\n     } in\n    count(supplier,i,use) /\\ use <= capacity[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    (exists (j in 1..n_stores) (supplier[j] == i)) == open[i]\n  );\n\nsolve\n  :: int_search(\n    supplier ++ cost ++ [bool2int(open[i]) | i in 1..n_suppliers],\n    first_fail,\n    indomain_split,\n    complete\n  )\n  minimize tot;\n\noutput\n  [ \"warehouses:\" ]\n  ++\n  [ \"\\ntot = \", show(tot) ]\n  ++\n  [ \"\\nsupplier = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(supplier[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\ncost = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(cost[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\nopen = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(open[i]) ++\n    if i = n_suppliers then \"\\n]\\n\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_suppliers\n  ]\n\n%-----------------------------------------------------------------------------\n%-----------------------------------------------------------------------------", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3065, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37d97e92-ae7c-4e20-9fe0-e917480e0fe4": {"__data__": {"id_": "37d97e92-ae7c-4e20-9fe0-e917480e0fe4", "embedding": null, "metadata": {"model_name": "water_buckets1"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "water_buckets1_source_code", "node_type": "4", "metadata": {"model_name": "water_buckets1"}, "hash": "18bf6089dcd60bd566f2bc1f7fcf36a1633f63cca71993fb1e7e927d2439eb04", "class_name": "RelatedNodeInfo"}}, "text": "Model 1 :\n\n% Water buckets problem in Minizinc\n% \"\"\"\n% Problem description\n% This is a generalization of the CSPLib specification, which is as follows: Given an 8 pint bucket of water, and two empty buckets which can contain 5 and 3 pints respectively, the problem requires to divide the water into two by pouring water between buckets (that is, to end up with 4 pints in the 8 pint bucket, and 4 pints in the 5 pint bucket) in the smallest number of transfers.\n%\n% The generalization consists in making the specification parametric with respect to the start and goal configurations, which are now inputs to the problem.\n%\n% Problem input\n%\n% * Function start, assigning an initial amount of water to each bucket\n% * Function goal, assigning the goal amount of water to each bucket \n%\n% Search space\n% The set of all possibile sequences of configurations (states), where a configuration is a triple encoding the amount of water in each bucket at a given time-step\n%\n% Constraints\n%\n% * C1: At beginning, buckets contain the amount of water specified by function start\n% * C2: At the end, buckets contain the amount of water specified by function goal\n% * C3: The configuration at each step differs from that of the next one in that the amount of water of exactly 2 buckets changes (that in the others remain the same)\n% * C4: The overall amount of water is the same at each time step\n% * C5: After each transition (involving buckets b1 and b2), either the source bucket becomes empty, or the target becomes full\n% \"\"\"\n\n\nint: nb_buckets = 3;\nint: max_step = 10; % 8 for satisfy\nset of int: buckets = 1..nb_buckets;\nset of int: steps = 1..max_step;\narray[buckets] of int: capacity = [8,5,3];\narray[buckets] of int: start = [8,0,0];\narray[buckets] of int: goal = [4,4,0];\n\n% Search space: The set of all possibile sequences of configurations (states), \n% where a configuration is a triple encoding the amount of water in each \n% bucket at a given time-step\narray[steps, buckets] of var int: state;\nvar 1..max_step: goal_step;\n\n% Objective function\nsolve minimize goal_step;\n% solve :: int_search( [ state[i,j] | i in steps, j in buckets ] , \"first_fail\", \"indomain\", \"complete\")  minimize goal_step;\n\nconstraint\n%   goal_step <= 8 % for solve satisfy\n%   /\\\n   % assertions\n   forall(b in buckets) (\n      (start[b] <= capacity[b]) /\\ (goal[b] <= capacity[b])\n   )\n   /\\\n   sum(b in buckets)(start[b]) = sum(b in buckets)(goal[b])\n   /\\\n   forall(s in steps, b in buckets) (\n      state[s,b] >= 0 /\\\n      state[s,b] <= capacity[b]\n   )\n   /\\\n   forall(b in buckets) (\n      % C1: At beginning, buckets contain the amount of water specified by function start\n      state[1,b]=start[b]\n      /\\\n      % C2: At the end, buckets contain the amount of water specified by function goal\n      state[goal_step,b] = goal[b]\n   )\n   /\\\n   forall(step in 1..max_step-1) (\n      % C3: The configuration at each step differs from that of the next one in that the amount of\n      % water of exactly 2 buckets changes (that in the others remain the same)\n      sum(b in buckets)( bool2int(state[step,b] != state[step+1, b])) = 2\n      /\\\n      % C4: The overall amount of water is the same at each time step\n      sum(b in buckets)(state[step,b]) = sum(b in buckets)(state[step+1,b])\n      /\\\n\n      % C5: After each transition (involving buckets b1 and b2), either the source\n      % bucket becomes empty, or the target becomes full\n      forall(b1, b2 in buckets where b1 != b2) (\n         ((state[step, b1] != state[step+1, b1]) /\\ (state[step, b2] != state[step+1, b2])) ->\n            (state[step+1,b1] = 0 \\/ state[step+1,b1] = capacity[b1] \\/\n             state[step+1,b2] = 0 \\/ state[step+1,b2] = capacity[b2])\n     )\n   )\n;\n\n\noutput [\n  if s = 1 /\\ b = 1 then \n    \"goal_step: \" ++ show(goal_step)\n  else \"\" endif ++\n  if b = 1 then \"\\n\" else \" \" endif ++\n  show(state[s, b])\n  | s in steps, b in buckets\n\n] \n++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\n\ninclude \"globals.mzn\";\n\nint: n_states = 15;\nint: input_max = 15;\nint: initial_state = 1;\nset of int: accepting_states = {15};\n\n\n% distance\narray[1..n_states, 1..n_states] of 0..input_max: transition_fn =\narray2d(1..n_states, 1..n_states,\n[%1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n  0, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 1\n  0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 2 \n  0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 3\n  0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 4\n  0, 0, 0, 0, 0, 6, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 5\n  0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, % 6\n  0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, % 7\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, % 8 \n  0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 0, 0, 0, 0, % 9\n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0, %10\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0, 0, 0, %11 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,13, 0, 0, %12\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14, 0, %13 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %14\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %15\n]);\n\n\narray[1..n_states] of string:  nodes = [\n        \"8,0,0\", % 1 start\n        \"5,0,3\", % 2\n        \"5,3,0\", % 3 \n        \"2,3,3\", % 4 \n        \"2,5,1\", % 5\n        \"7,0,1\", % 6\n        \"7,1,0\", % 7\n        \"4,1,3\", % 8\n        \"3,5,0\", % 9\n        \"3,2,3\", % 10\n        \"6,2,0\", % 11\n        \"6,0,2\", % 12\n        \"1,5,2\", % 13\n        \"1,4,3\", % 14\n        \"4,4,0\"  % 15 goal\n        ];\n\n\narray[1..input_max] of var 0..input_max: x;\nvar 0..input_max: cost;\n\n% solve satisfy;\nsolve minimize cost;\n\nconstraint\nregular(x, n_states, input_max, transition_fn,\n        initial_state, accepting_states)\n;\n\nconstraint\n   cost = 2+sum([bool2int(x[i-1] != x[i] ) | i in 2..input_max])\n;\n\noutput \n[\"cost: \" ++ show(cost) ++ \"\\n\"] ++\n[show(initial_state) ++ \" \"] ++\n[\n  if fix(x[i]) < input_max then show(x[i]) ++ \" \" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(input_max) ++ \"\\n\"] ++ \n[\"\\n\\n\"] ++\n\n[show(nodes[initial_state]) ++ \"\\n\"] ++\n[\n  if fix(x[i]) < input_max then show(nodes[fix(x[i])]) ++ \"\\n\" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(nodes[input_max]) ++ \"\\n\"] ++ \n[\"\\n\"];", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 6128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"all_interval_source_code": {"node_ids": ["66aff7a9-f2e5-42ce-aa23-685b29ecaedd"], "metadata": {"model_name": "all_interval"}}, "assign_source_code": {"node_ids": ["178ecb07-932d-4fbc-a3a4-fb5a068adfd3"], "metadata": {"model_name": "assign"}}, "aust_color_source_code": {"node_ids": ["b48d9dcd-ea3c-433d-bdb8-7d63c5bef39d"], "metadata": {"model_name": "aust_color"}}, "bibd_source_code": {"node_ids": ["4d4693d1-2c6a-44b6-96a6-db6dd8c668a0"], "metadata": {"model_name": "bibd"}}, "bus_scheduling_csplib_source_code": {"node_ids": ["7771dd13-7b68-4fc1-8799-eed880aed5b1"], "metadata": {"model_name": "bus_scheduling_csplib"}}, "car_source_code": {"node_ids": ["f1b03222-c342-4816-b47a-2d2566387a5e"], "metadata": {"model_name": "car"}}, "carpet_cutting_source_code": {"node_ids": ["c2c9e5ca-2a2c-4f7a-86f6-5a80c9220406"], "metadata": {"model_name": "carpet_cutting"}}, "cell_block_source_code": {"node_ids": ["92a200cf-b30f-4bd7-8ee0-7e975f2b8325"], "metadata": {"model_name": "cell_block"}}, "clique_source_code": {"node_ids": ["1e07b61c-ac30-47fc-95c9-f16c54f8f17d"], "metadata": {"model_name": "clique"}}, "cluster_source_code": {"node_ids": ["242d4532-0503-4833-b0e6-96df2776873a"], "metadata": {"model_name": "cluster"}}, "compatible_assignment_source_code": {"node_ids": ["bc9ee4a7-afab-47ec-b1de-660a32cb800d"], "metadata": {"model_name": "compatible_assignment"}}, "constrained_connected_source_code": {"node_ids": ["bb15f4c1-6f19-4752-941d-ec4b668cd045"], "metadata": {"model_name": "constrained_connected"}}, "crazy_sets_source_code": {"node_ids": ["2500f50d-0ebe-4825-9313-90e62cf640a2"], "metadata": {"model_name": "crazy_sets"}}, "crossfigure_source_code": {"node_ids": ["7dec99f3-9d68-44a0-935d-f07516176a20"], "metadata": {"model_name": "crossfigure"}}, "curriculum_source_code": {"node_ids": ["aad75ded-c6cc-4bc6-83dd-ba9061273cec"], "metadata": {"model_name": "curriculum"}}, "diamond_free_degree_sequence_source_code": {"node_ids": ["917952e9-24d8-47f3-8471-c608d40c088c"], "metadata": {"model_name": "diamond_free_degree_sequence"}}, "doublechannel_source_code": {"node_ids": ["a510b5a8-679f-4e0d-b954-f6ee4c0d2193"], "metadata": {"model_name": "doublechannel"}}, "fractions_source_code": {"node_ids": ["3e88bd90-5fd4-4913-9c38-9e43f42187ed"], "metadata": {"model_name": "fractions"}}, "golfers_source_code": {"node_ids": ["8673ae3a-8b69-4087-8851-d117e28bba7a"], "metadata": {"model_name": "golfers"}}, "golomb_source_code": {"node_ids": ["cd7e037a-7e2e-4517-8dbf-cde92b359f38"], "metadata": {"model_name": "golomb"}}, "graph_source_code": {"node_ids": ["c3950b3d-f146-49ed-ab1f-e1c9f2feaef2"], "metadata": {"model_name": "graph"}}, "itemset_mining_source_code": {"node_ids": ["487e1222-884a-4f19-8abb-8613b69a6a6e"], "metadata": {"model_name": "itemset_mining"}}, "jobshop_source_code": {"node_ids": ["f2eaf832-34f0-4fcb-9b40-d06720c4812c"], "metadata": {"model_name": "jobshop"}}, "K4xP2Graceful_source_code": {"node_ids": ["9157072c-085a-4cee-9c71-efcbc889ec20"], "metadata": {"model_name": "K4xP2Graceful"}}, "killer_sudoku_source_code": {"node_ids": ["1c7c0732-ec64-458b-b19d-7f574a85d29d"], "metadata": {"model_name": "killer_sudoku"}}, "knapsack_source_code": {"node_ids": ["a94e1664-7127-4dc7-938c-be821ee65104"], "metadata": {"model_name": "knapsack"}}, "langford_source_code": {"node_ids": ["8e649d36-e2d7-4939-be73-945bc0f0bab9"], "metadata": {"model_name": "langford"}}, "loan_source_code": {"node_ids": ["12f8241a-c416-47ed-bf1f-38b16e67e831"], "metadata": {"model_name": "loan"}}, "ltsp_source_code": {"node_ids": ["cec3eedd-6f41-42a0-9f3d-bf0cd0846859"], "metadata": {"model_name": "ltsp"}}, "magic_hexagon_source_code": {"node_ids": ["01db9572-246a-4f4e-9687-f3c253840d7e"], "metadata": {"model_name": "magic_hexagon"}}, "magic_sequence_source_code": {"node_ids": ["09670331-95d7-417f-a216-cf244b1b9488"], "metadata": {"model_name": "magic_sequence"}}, "maximum_density_still_life_source_code": {"node_ids": ["6db0bc1f-8c7d-4fd6-af0b-aed0973d82ee"], "metadata": {"model_name": "maximum_density_still_life"}}, "mip_source_code": {"node_ids": ["03bcdb29-cf91-46a4-8a53-b20a5f22e609"], "metadata": {"model_name": "mip"}}, "missing_solution_source_code": {"node_ids": ["dcba139a-7122-4479-9f37-9d9465c77561"], "metadata": {"model_name": "missing_solution"}}, "nonogram_create_automaton2_source_code": {"node_ids": ["c1e242a9-8d26-4aa8-9431-b2c2ec732195"], "metadata": {"model_name": "nonogram_create_automaton2"}}, "nurses_source_code": {"node_ids": ["33eb3af5-9788-468f-83a9-d74f407c6abb"], "metadata": {"model_name": "nurses"}}, "opd_source_code": {"node_ids": ["a7caf877-db55-480f-873b-938aa2675b40"], "metadata": {"model_name": "opd"}}, "partition_source_code": {"node_ids": ["5116abfa-f3b4-425f-98f4-8ba1f9d5f949"], "metadata": {"model_name": "partition"}}, "photo_source_code": {"node_ids": ["ca231dbd-ea13-4d81-9833-8a863e170f01"], "metadata": {"model_name": "photo"}}, "project_scheduling_source_code": {"node_ids": ["b38d3324-aed3-4b19-ba0e-aced0a8c871f"], "metadata": {"model_name": "project_scheduling"}}, "QuasigroupCompletion_source_code": {"node_ids": ["95e4da60-62b6-4787-a388-357d5d08d9fb"], "metadata": {"model_name": "QuasigroupCompletion"}}, "QuasiGroupExistence_source_code": {"node_ids": ["a077ce57-dc89-4ca9-a596-1dd14a79ddf8"], "metadata": {"model_name": "QuasiGroupExistence"}}, "queens_source_code": {"node_ids": ["b28df122-49bc-43df-a6f7-6748e5476514"], "metadata": {"model_name": "queens"}}, "rcpsp_source_code": {"node_ids": ["27942944-8024-4099-b5bc-f6ea82d86d10"], "metadata": {"model_name": "rcpsp"}}, "rehearsal_source_code": {"node_ids": ["60c03920-08a8-4d93-93ee-b4f230d8d48a"], "metadata": {"model_name": "rehearsal"}}, "restart_source_code": {"node_ids": ["71ae3813-94f1-454f-8561-3a2b3ae035dd"], "metadata": {"model_name": "restart"}}, "RosteringProblem_source_code": {"node_ids": ["77c00cff-aa60-4ab9-a6c4-d11ff86ca0cd"], "metadata": {"model_name": "RosteringProblem"}}, "sb_source_code": {"node_ids": ["298ec0e6-3e4c-47b7-b6a0-ac6c14405b06"], "metadata": {"model_name": "sb"}}, "schur_source_code": {"node_ids": ["c21d8227-5a8b-40cd-9923-bc323f9c8c1c"], "metadata": {"model_name": "schur"}}, "setselect_source_code": {"node_ids": ["f7c98854-50f0-49c9-9aa9-a2fd418eacce"], "metadata": {"model_name": "setselect"}}, "shipping_source_code": {"node_ids": ["7c6d07e4-7946-4a58-8618-910d36422f41"], "metadata": {"model_name": "shipping"}}, "simple-prod-planning_source_code": {"node_ids": ["6a64b4fd-32f6-4f4e-a97c-293d944d9659"], "metadata": {"model_name": "simple-prod-planning"}}, "sonet_problem_source_code": {"node_ids": ["32035836-6fc4-4e9c-82ce-d2cea9de1d6a"], "metadata": {"model_name": "sonet_problem"}}, "square_pack_source_code": {"node_ids": ["00f4c044-144d-43c0-b718-4b8760a02089"], "metadata": {"model_name": "square_pack"}}, "stableroommates_source_code": {"node_ids": ["9b20ca51-dad0-4954-ad1c-cea7984bf072"], "metadata": {"model_name": "stableroommates"}}, "steiner_source_code": {"node_ids": ["305433ba-5ad0-45b3-a0c4-576547215506"], "metadata": {"model_name": "steiner"}}, "stoch_fjsp_source_code": {"node_ids": ["206733f8-4aa8-42bc-bdf4-73cad608bac0"], "metadata": {"model_name": "stoch_fjsp"}}, "submultisetsum_source_code": {"node_ids": ["302ff925-7fa2-4216-adc6-f1f92f1660bc"], "metadata": {"model_name": "submultisetsum"}}, "table_seating_source_code": {"node_ids": ["aa44f403-8c30-4b25-924b-491b35a8ccfb"], "metadata": {"model_name": "table_seating"}}, "teamselect_source_code": {"node_ids": ["62546787-81e8-48ae-9c79-650072d44dfc"], "metadata": {"model_name": "teamselect"}}, "template_design_source_code": {"node_ids": ["47a1a6aa-86a2-4fd2-8cfb-495242483049"], "metadata": {"model_name": "template_design"}}, "toomany_source_code": {"node_ids": ["9105bdad-23f8-420d-a91d-0b24fcea91c7"], "metadata": {"model_name": "toomany"}}, "traffic_lights_table_source_code": {"node_ids": ["08f78060-8466-4db7-98b6-e3e526919fde"], "metadata": {"model_name": "traffic_lights_table"}}, "TTPPV_source_code": {"node_ids": ["bb5e0173-ab3a-4aaa-9c5f-96196d05ae2b"], "metadata": {"model_name": "TTPPV"}}, "vessel-loading_source_code": {"node_ids": ["60c5488e-8bd2-4210-a347-6dbec76ab209"], "metadata": {"model_name": "vessel-loading"}}, "warehouses_source_code": {"node_ids": ["b44b9b6a-b601-4a03-88cd-2d2c72f7fc92"], "metadata": {"model_name": "warehouses"}}, "water_buckets1_source_code": {"node_ids": ["37d97e92-ae7c-4e20-9fe0-e917480e0fe4"], "metadata": {"model_name": "water_buckets1"}}}}