{"docstore/metadata": {"all_interval_medium": {"doc_hash": "351a5fd3345d067db34822ca884682d9caf6708ff0c27b01f6330bfeff72170d"}, "assign_medium": {"doc_hash": "0a74685fa067390318ec6713425969c65cbc9122ae8d65b8d9554ac5320babf1"}, "aust_color_medium": {"doc_hash": "86a5a916c053bea0039b76d9d04fdecd076e8f48caca16bd4bb61a1ae4243605"}, "bibd_medium": {"doc_hash": "abb3378e38691f962d884b29fbb1bd652936d113712b7be9d0501edb1a1f52ac"}, "bus_scheduling_csplib_medium": {"doc_hash": "a99d34196288cb2b6a7403463deae388528c99ba9ca220a924795139089e4177"}, "car_medium": {"doc_hash": "07f4e21ade563cba82e78d8b10d73a66c656237d781357f4beccd4d6be97a20b"}, "carpet_cutting_medium": {"doc_hash": "8ccf0514b084827b8e392f1421371175ae7be41e59aa12718ee639b659af8a6e"}, "cell_block_medium": {"doc_hash": "de30b559e3d8687cf6ebff4b5dc1490fd8ec8ef4697ad0fd8419d0fb37d607fa"}, "clique_medium": {"doc_hash": "2b8ad60d7f84e8f916ed4224d77daac979e9976d6d72ddf5c81aa55b748ece50"}, "cluster_medium": {"doc_hash": "3a6d92453c5664a029445d23b6e8d3a4d85bf1f36f318ab6e50051da5cdd95da"}, "compatible_assignment_medium": {"doc_hash": "f381d50b07fb540ef43af0afc4d613401a5b70fe6aa2fa4fe637f4f3e0e1a7a7"}, "constrained_connected_medium": {"doc_hash": "1dc8819c70e2f56a4e27abaa1958e8b6af738be231c6fc1bba7b2d026cd1af53"}, "crazy_sets_medium": {"doc_hash": "b50ce5a53ba173fa4ecdc0b4d85e055de86d52b550eb76dd12b5f9170a18edc6"}, "crossfigure_medium": {"doc_hash": "c109d511be586a084894321dc6aa65b7eff470f8707eff3251fe857021de5803"}, "curriculum_medium": {"doc_hash": "6c556981f3aa450c79faf0a9d9e789cad4586037fa83fae8147a5b3e278e78a8"}, "diamond_free_degree_sequence_medium": {"doc_hash": "b534501630088fbe43cabb4d37aea4b289d24c7349223c2891d10567f1bce272"}, "doublechannel_medium": {"doc_hash": "a6f017070c6c22f6361baebc74c3c228c16d8679151b08c60ea8f7d6785c3597"}, "fractions_medium": {"doc_hash": "8b17efaaa30e90b8d57c3ef1b512a7b4724cc74e3f623128b791b7dd5757b0e1"}, "golfers_medium": {"doc_hash": "1c0588705de0e6b65f40711221973d4b4150bc9fc1e8ea4f7fba518e52d6dfd5"}, "golomb_medium": {"doc_hash": "3f3db66ba1d9832a3384ff041d4582ea8733923cb6541d7a2b77f52d48420494"}, "graph_medium": {"doc_hash": "e278591e23e9b096b73d75b0dcd0f35d240bac8a10dcf683155c81c61ee77ede"}, "itemset_mining_medium": {"doc_hash": "6e6b6b10e1e68b31817d610cb9d75c1f12e6849f0728b39df809940b6b957513"}, "jobshop_medium": {"doc_hash": "3dd65b35e43f6bd5c49aa7b853939c97d8921161ccaad6e616f375a28e0cd227"}, "K4xP2Graceful_medium": {"doc_hash": "c0b2219c7de9068e5eb33604911fe48c3ed3c4293dd469d02d2ea08ca90653ce"}, "killer_sudoku_medium": {"doc_hash": "5effa8c57a5f7f8709a77360946e4e33ac9a0ea5b20696ec2b6a93325718aa20"}, "knapsack_medium": {"doc_hash": "3a2961a03c1d206306fc4baadce484e48266063dee76ff7441cc292d746b9cc5"}, "langford_medium": {"doc_hash": "3e81468c352b5dce6d153a6fb845a173df723846a922af312d10cc353006a578"}, "loan_medium": {"doc_hash": "b45f3a2e7169a5cf1b813161a751c68cae16a955f5aa2d884ccd032a33f686da"}, "ltsp_medium": {"doc_hash": "4ea94bfcbc6dc5e122645bd28544c854c54e69f35099a77be04df2d99b643b70"}, "magic_hexagon_medium": {"doc_hash": "f33760faf557bc0f450f9f94bbd3450b0a48d700bf75f1a5d0aa3544abb67245"}, "magic_sequence_medium": {"doc_hash": "aef9d5dc6a1c7889c66d90598f81bf9da7a6ba0d291ef1c77b796faa6f79b0f8"}, "maximum_density_still_life_medium": {"doc_hash": "b85ad2a8e59dfd9ba51eb1dd6b11cd56abab0b9e9845476edcf4ee18a080d180"}, "mip_medium": {"doc_hash": "9ab871dbba1bf9be8df7778caa60ca605f63394b3ab1d06efd33291df61cd82d"}, "missing_solution_medium": {"doc_hash": "5394384d8080dde01449d3e6d294fddb94d624b0feeeeaf1ee5af4cc597e123a"}, "nonogram_create_automaton2_medium": {"doc_hash": "33783b3763a9d2edfdf743fc6d20cc84cd41ee63d092d135dee03770c32d7bb1"}, "nurses_medium": {"doc_hash": "8199fea96bda54f9ee9ff6fc94edace0764192d39a0068ec9f05002a4b65d95f"}, "opd_medium": {"doc_hash": "3233f3298acc3dc12d38b10b2abdd14595582e5e18aa97dd4c43034301940aef"}, "partition_medium": {"doc_hash": "ae4e2c5e6a99c03fd98cd6f308d2faa1ba8f1e30a62663ec094113d67b5c4506"}, "photo_medium": {"doc_hash": "fa061379f2d0e55d17d94ca0570688c84158b59df4eaab453c46b1b0851c78d8"}, "project_scheduling_medium": {"doc_hash": "35e6d69132d46814aa87c0099d39de768eb4ae9b7ed319219d80b1dd557f8380"}, "QuasigroupCompletion_medium": {"doc_hash": "9ecc5e8f2d63625d63cc1b592506db9460f5e2c112c55c7f2029bcdf50198065"}, "QuasiGroupExistence_medium": {"doc_hash": "1158ac1e044de4f5f45cd5320d40a51cddd20d1e13a804c759ac266297a2f174"}, "queens_medium": {"doc_hash": "fbca9cd67886fbd88f859bad7920dfbb365cb4ea41480b695390104fbc2b801a"}, "rcpsp_medium": {"doc_hash": "87b1ae67f24590bf456276b7c2e8d842bbe188fb57222219682b08a6e0fe072f"}, "rehearsal_medium": {"doc_hash": "337760617d7e9b5209384e3d92b9f0fac1c286d715cd91faade7e09fbbd3af9f"}, "restart_medium": {"doc_hash": "a07b350b9133580db996bf41dfd2ff5a646d77aa37301fd925c83cd1c088b31b"}, "RosteringProblem_medium": {"doc_hash": "35b98306b172422be7a5c3c7c62fc08cd8fe1066f1a75ff48465222e19c6ef56"}, "sb_medium": {"doc_hash": "96ba0c2f30e8e1974d9256edfe82a242cb898b920dc86db6e93aa2834afb792d"}, "schur_medium": {"doc_hash": "a030f32e5e9228354e8745895e9ee845b431ba6459a71b4a4587f921a0d57f24"}, "setselect_medium": {"doc_hash": "c66657f10a67494d42b1feafff97a8c415d77be60a174291b658d48b8e7361d2"}, "shipping_medium": {"doc_hash": "4e1fbad6928115ab32ae468d13e5a5260b696ef8f22e2167d3d112590ba64b12"}, "simple-prod-planning_medium": {"doc_hash": "cd65328e97b0025529347daac796bbca3b43fbb2ef198a83154ac5d7589641d3"}, "sonet_problem_medium": {"doc_hash": "21a0f3fe418af783c789c8f1bc412dc6568e0209e6f5fa09238d3024bceae711"}, "square_pack_medium": {"doc_hash": "9395edaff3b68170a55062c551228b8562f41ace225754356f854a3adb32d489"}, "stableroommates_medium": {"doc_hash": "e24aba482071ea9669f8f32b53969430888bc335e2f2b5a0ea00c4d4e86892a2"}, "steiner_medium": {"doc_hash": "49637cb150f062985d1b5f435ac5b5c4b4927b0227c57e5c61ea3737167f6c9c"}, "stoch_fjsp_medium": {"doc_hash": "f7bde1ff67e6b070cbcd93920f4c47f5c22805f23540a457a6d0dc3f3d01c6f2"}, "submultisetsum_medium": {"doc_hash": "5e6611591fdae8d89b44fb86e80f3982e1a9576789dbd500d497bd7b715105b9"}, "table_seating_medium": {"doc_hash": "8bc1128b069603ad34b2e6605b420f907f8984a13c1dc70cc82b3f6faa50f60c"}, "teamselect_medium": {"doc_hash": "f163bf3286a38625694452a81718ac88c5e9ef58dca7fe036a6425bcfb39839c"}, "template_design_medium": {"doc_hash": "e2f4efdf6c37f454831fa930c16f964b7d140374ca0253428499addcd801e336"}, "toomany_medium": {"doc_hash": "952d7a7a5f4d4604c122f3f982df85b38ce91cb70a6a09d2ad1af31e8e3fe91b"}, "traffic_lights_table_medium": {"doc_hash": "6b2d1b5b75e22295da2f425f6894324258f7a270cfea2cf82eab5c47b2134d23"}, "TTPPV_medium": {"doc_hash": "d24b3b1162b5d5f623e6f8eb67260cb0ed0de4c2646a5a4422dfe4b54b42d0fb"}, "vessel-loading_medium": {"doc_hash": "0c270cc118090dbafb372b0034a4924294d72d991c33880ea4f97b10f060f8d7"}, "warehouses_medium": {"doc_hash": "6277befc256db9bfee593b6d55b1fd362e3240f64b062d78ebed2202a8efb35b"}, "water_buckets1_medium": {"doc_hash": "b1cb752bbcfd557a09a7fa36dcb78c51c188efec4bbcf773140b907e520bf9d6"}, "d60a0e1d-9d0a-41d8-b710-62dc4584ae5f": {"doc_hash": "9474092ff81a445914dfaccccdc84d0e2acc1d447948ee5f24bf9598aa17e766", "ref_doc_id": "all_interval_medium"}, "1624373a-5c1c-46b3-9411-dfa002da1e0a": {"doc_hash": "2c306e13cba61f5521514ca890e02ce6983cac142585776ecc4780032cfaf103", "ref_doc_id": "assign_medium"}, "ffbfe3e3-7377-4b20-b6bc-8b558f3065d9": {"doc_hash": "34e14167ba63616ab85b54c5b75b67a1ea4da310059bf8778b17553c133ae1a5", "ref_doc_id": "aust_color_medium"}, "c23f7cec-66b1-4e03-8f15-eebe62cda346": {"doc_hash": "dddbc0d4fb9b851872257ce3c5143719b4e6007eddac2b15880370f527075168", "ref_doc_id": "bibd_medium"}, "3b8b2001-cbcd-477d-b810-ecfe4826ac31": {"doc_hash": "9da7e307743a0c7faf2aaf440fbd3f73aa17422c11960dec3c719aad7f1f93c7", "ref_doc_id": "bus_scheduling_csplib_medium"}, "68b9a1e7-60d7-44bf-919f-7b41774dbc1b": {"doc_hash": "0b2b69a3d2f5d9d327d6fba21a511bfcaa134c7d3916a7593c03e9fcccef3385", "ref_doc_id": "car_medium"}, "f742c982-4ba4-4731-a056-e015934cf610": {"doc_hash": "41e576d1af02ff3fd4da3ae65b5e37cfbad1a3cb7294c7b7394fdea474fd7e1e", "ref_doc_id": "carpet_cutting_medium"}, "8d6728e5-fe2f-44c6-a652-a408cfa38b81": {"doc_hash": "3cafb1934f4f398779860a40d158f1dcb39c2d88271976ff90f5ec84bb3afa7f", "ref_doc_id": "cell_block_medium"}, "2dbaa887-8863-49c4-9fe7-b1dbdde5b720": {"doc_hash": "007e8339b3c5437b52ddf3c1fa3f27c673fb6ae22675968af696c40bdbe4ba20", "ref_doc_id": "clique_medium"}, "8e560cb1-2e13-484f-b23e-43b790ba82f9": {"doc_hash": "a86e36f8e7503b889184de0394d164738dbe41d56f1e86b90e74b73ea600ccae", "ref_doc_id": "cluster_medium"}, "5d12f342-cd64-4cfe-8fe1-7310b57108a3": {"doc_hash": "65ea34db4cbcdf2a2c433cb468a5ad6cda9797e9f7d28973abc75c26735551a6", "ref_doc_id": "compatible_assignment_medium"}, "94089677-3595-42e5-b3cf-eadbbec85dcf": {"doc_hash": "1b6db8de4cec1004e1e803e8a7cf3e1440f812c9f3bdbd03e32bea36b7bafae0", "ref_doc_id": "constrained_connected_medium"}, "ea4b8d3e-e201-4c90-9c38-8d6ccea095b3": {"doc_hash": "1d799fea59ae180b69107c271254c9af1032ce246afbf7110322df7fefb828e4", "ref_doc_id": "crazy_sets_medium"}, "42c924de-58ac-4e30-9c10-aa3648b4be52": {"doc_hash": "61e365dce3ebcdf5ed293acc74e23f66d0d6dc5bbf7bd69a9f82930afab6d6f2", "ref_doc_id": "crossfigure_medium"}, "a74cdd2a-e9b1-4f65-86ed-ee3b47e575c3": {"doc_hash": "7958f1d0ce3c1a7d91f19002336857361ad88837e046a2aa0925760841b6521b", "ref_doc_id": "curriculum_medium"}, "cb4514cf-a974-4c5e-aceb-020c085c9b82": {"doc_hash": "64c0fa1f48f6be0a9410f414e3828d2712a6fe2df33d3266a80088c8e86919bf", "ref_doc_id": "diamond_free_degree_sequence_medium"}, "1c57f2c5-078b-4183-ad7b-b5097216b22b": {"doc_hash": "144670cc0c93d7d870e761bbef5f40f4c35b4960a61296f89b6b3aa066898767", "ref_doc_id": "doublechannel_medium"}, "0dd17cb2-e834-43c1-98c9-df3c2f8848af": {"doc_hash": "0b51876b4681c5fa3213409380f63f31efe41db17dc9c8111d240a9e96708bdc", "ref_doc_id": "fractions_medium"}, "3b9651b4-125a-4eaa-ab86-70ebfb311267": {"doc_hash": "55edff35c09cf338cf6557dec5e0e5c5850e848206e7ffe0fd0b792610b6a825", "ref_doc_id": "golfers_medium"}, "a95df690-285e-4dea-b4d2-a6fb9496fbbd": {"doc_hash": "76938333fd4ea8a859cc6c867dbc599356ad2bd66bbcdc91809035e329a0d2a0", "ref_doc_id": "golomb_medium"}, "777f86c3-d039-41cc-a838-98e319f89c52": {"doc_hash": "b2bba0026d21bf11dfaef696e662091a861f5a14a4a7836797b0351fd391087e", "ref_doc_id": "graph_medium"}, "83938db1-0ace-4dbe-9fe9-a199456e7dee": {"doc_hash": "73faee331b7ce5025f0978544271afbf70db276cbdc3e70c5ac93e9fc7a37689", "ref_doc_id": "itemset_mining_medium"}, "30dd21bf-f4bf-4b1c-9eb2-a542759b210b": {"doc_hash": "3c40e0915f2c4479db6e0617033d3e106d650b4685a304689c4f097de37a760f", "ref_doc_id": "jobshop_medium"}, "14098322-477a-4334-9c76-be443b59fec8": {"doc_hash": "df1e0eb3ab4aed7ff5c0dd22d4de0c7c443d37fc734166c85291209849b06354", "ref_doc_id": "K4xP2Graceful_medium"}, "71e992bf-7a8e-40c2-bd89-2782731a109f": {"doc_hash": "cfa92db687c8a147950b222d909711e002ea3bc3e244a30ace10f29d4da768cf", "ref_doc_id": "killer_sudoku_medium"}, "3a4f2620-2a65-4ed2-8829-f53085c4a06c": {"doc_hash": "ccdb86100cac4669214d1859328a3c2d83fa0b87e977c4c778c55d79cc0fb3e2", "ref_doc_id": "knapsack_medium"}, "1e86fc0e-3c5d-4552-a898-4461833b710a": {"doc_hash": "de52a64f00fe839b7d44ea2734e0dcb998eb3ccf411048b3c770a4571e688baf", "ref_doc_id": "langford_medium"}, "405d3655-665f-4793-baae-889d5191a539": {"doc_hash": "70516d61ca6008d8a50fe86be411817b2f40263e31d70a5032550a222c998b05", "ref_doc_id": "loan_medium"}, "666fe564-dc5e-47d6-9c75-052c31083428": {"doc_hash": "a621bf4c202dab34b8aed422820ca5145051208e7b415569c3582fc5eb9fe887", "ref_doc_id": "ltsp_medium"}, "712d9747-9ba7-4b6f-a97c-f178a1f569cd": {"doc_hash": "3a541d090272e9113e8f28098f0f836f8b725248d2011f91b025f35010a682a8", "ref_doc_id": "magic_hexagon_medium"}, "5922ddb4-bc5d-44ad-aab4-476fdfa3ef15": {"doc_hash": "58135c6a7fbf0216b075a1c6d9a95732abbce629c7763d2f59c98ce56424045f", "ref_doc_id": "magic_sequence_medium"}, "6ec37072-8ae9-4480-a5bf-3c27cb460438": {"doc_hash": "1bff1a993587653f7f31b7104131c8dc11944b40dd48630c0394f5398f5f12a9", "ref_doc_id": "maximum_density_still_life_medium"}, "d9d18f6f-f70f-4882-92c6-95f673f39136": {"doc_hash": "492ee2755c55e76eddf7c2aebfcf2432587ef6593cfc3ca132d55f1ad6e1b2a6", "ref_doc_id": "mip_medium"}, "0149f4a7-0ac3-4b79-901b-65ee0a2fa32a": {"doc_hash": "3c13c7a4513ca1bfee3f55d271901c7a95596e2a6b87bb5be91f5e68771e986b", "ref_doc_id": "missing_solution_medium"}, "19d9b3ba-52ce-4c94-b905-54f780598844": {"doc_hash": "742161da3d1a199cb9e5240fe0bf2514adf773bcb0f3aca2e8461bd37be19cda", "ref_doc_id": "nonogram_create_automaton2_medium"}, "36173e8e-881d-4c7a-a87c-0204b71ade0a": {"doc_hash": "430a0ba665de586e880c7f02db46528e2f0f2c719f9a970a42687e852a77c6bf", "ref_doc_id": "nurses_medium"}, "0f7783a0-da56-447e-b457-cf1d10155a7b": {"doc_hash": "1bf0c46cd727a0c5c5b080f6932f952196a72af1e9a296144f7cda83f6fc02a1", "ref_doc_id": "opd_medium"}, "9858ce87-6b7c-4eed-8612-c335e13b4850": {"doc_hash": "6c3aef439de0ed8c2c9f5f51126b3e9cc405c0413552eda13ddc9fca87d92d17", "ref_doc_id": "partition_medium"}, "1e65c94c-8f68-4be5-b627-ca53dbbc6eb7": {"doc_hash": "a5ccfcfab63773455cb889904f7197a5cb7b80190d18dcb7119e240c392a8c88", "ref_doc_id": "photo_medium"}, "1bce54c8-abc9-44f5-b902-3a9eee716c25": {"doc_hash": "d3c932396e164d4d8d17a6e8907771149cb08b9ba5e687aac260c3c894dadc8a", "ref_doc_id": "project_scheduling_medium"}, "567896c9-bc02-41d9-977b-9051a00e07d1": {"doc_hash": "a227dc2a2039182ccc9f4902b45681f632327e0f33d1ddc428ff430e4b49afb0", "ref_doc_id": "QuasigroupCompletion_medium"}, "cd78bf0b-cb21-4ba7-932d-4daf1b98a5e3": {"doc_hash": "308d364e3119e269c282143f87c5d9a13c0677fa292397faae189a507015e387", "ref_doc_id": "QuasiGroupExistence_medium"}, "a0086f58-4423-449b-88f7-db9eaf2bf9aa": {"doc_hash": "75e4cbfbbd4a15ccf635b0ecd52e71eb2107733dfb50d1c65f19cb218e7958e7", "ref_doc_id": "queens_medium"}, "8395661d-8526-42fc-be7c-d419262a5490": {"doc_hash": "fd70709299887d5813321daf8a451819a12e2f7c3cb3911758bc1b48d4dcc44a", "ref_doc_id": "rcpsp_medium"}, "de197fb7-3c53-4e96-870b-f0f3ef7f51db": {"doc_hash": "5efae2f53c4cf7596c60b0c6a007281b70e601777f5b5bbf65e19666fdf56a2b", "ref_doc_id": "rehearsal_medium"}, "0780c77c-19d4-462d-82eb-1a23837bf9dd": {"doc_hash": "f3908fd80ae157a5e938017c533582653765070dec59a5c417f9e5052a6bbc85", "ref_doc_id": "restart_medium"}, "1c7fc968-0d34-4778-ab44-452b47775eb7": {"doc_hash": "e11e24d9f8513a42361d3f4e1ff44209b065dce4f1b1ed1a057ab1a12c3e3131", "ref_doc_id": "RosteringProblem_medium"}, "3a72e571-60e2-454d-bb78-a771cec2765f": {"doc_hash": "959d8233a93c80e256f0f65f77de6372d9a1c4f94ec3af00ea8824a51af27c66", "ref_doc_id": "sb_medium"}, "852ceff8-493b-40cf-a61a-ab113c4d29b7": {"doc_hash": "1d3df9a4746ee4b36488780dc6054faa253c798bb2da1939ace592ebc73a4efb", "ref_doc_id": "schur_medium"}, "f8684a37-c67d-4d73-b23e-6eda40c66edb": {"doc_hash": "431cdc8a20e70f204a144022d3f92fa7417a38423acbe378208a7a5a1b1132ec", "ref_doc_id": "setselect_medium"}, "d7b891f4-2d50-447d-b151-d8e6eaf563f8": {"doc_hash": "e1d50dbaa2368494c0715f65cd6ce21607f69c4a10fd59396bc5e0333c51fe20", "ref_doc_id": "shipping_medium"}, "a6d68786-5ea2-4660-8478-859411b1e45e": {"doc_hash": "ded7a093c4f7f30e0fdc26133a7bd354e0673142a296c481caa61271abca5119", "ref_doc_id": "simple-prod-planning_medium"}, "276d777f-57e7-4451-9af5-5bf1712bca8e": {"doc_hash": "104d3e666b9ad26df27808da5d3a98c574e13d1b468233e82cffc63c2f2966f0", "ref_doc_id": "sonet_problem_medium"}, "f4af3cd8-deb8-4c38-82bb-0b4e781e1819": {"doc_hash": "570cba0a4d33e0624dc509f9e6bb3d7f228641d830c878d6f0a7c9c61294a7e7", "ref_doc_id": "square_pack_medium"}, "9a95a655-4cd5-4254-8ce9-96b74b42bc03": {"doc_hash": "be9674d3b430e4e72e964989802301ec3f7f64cc486c4177d109c0fe0bafb8b6", "ref_doc_id": "stableroommates_medium"}, "7f1ac1de-df4f-4382-86f2-5c3165b0ee15": {"doc_hash": "78ad42bac88b2504fa329bf9a9bc23410f38c54772ed008647073ab8db684266", "ref_doc_id": "steiner_medium"}, "aee21091-1b31-4526-831d-32483706d0c5": {"doc_hash": "695e2ff06785b9d10509ad5259e3f6e0fd9d22323ee6a6d720077cc201352ae4", "ref_doc_id": "stoch_fjsp_medium"}, "9ee6f9de-ee36-4990-93e4-370740f06d62": {"doc_hash": "5b47a6d077a843799f1da8d40b5ad8e192c085366f47c6c6b4c49fd6b0c52df1", "ref_doc_id": "submultisetsum_medium"}, "c2d1b178-ba73-4f42-b6bb-a3daf50c7f04": {"doc_hash": "580309f6b96c9b3085ed5c587c37ac1a1017e1cf4cfd12d489b4506737cba436", "ref_doc_id": "table_seating_medium"}, "b9864d5c-959d-4d3f-be53-c12d64357e34": {"doc_hash": "ebd7bc3755676d4617457a90105c256b3d8dfddad2dbd82a399fd28a6849de25", "ref_doc_id": "teamselect_medium"}, "35872fb0-06f2-4479-8403-45c186fea5ee": {"doc_hash": "b76f7b38bde0abbf35b5f31148a07d8eb1647265196e336bf6bcf77bb32ed4c2", "ref_doc_id": "template_design_medium"}, "999dfd6c-7b58-46e2-bf45-e463294fd098": {"doc_hash": "ba4efbdb2cbb6abcc33e2ac4ba2daca048601204318e36709104d6a935e25e9c", "ref_doc_id": "toomany_medium"}, "286c9474-9c4b-40e5-9687-d426c9e116af": {"doc_hash": "6e75113c17281bb1d23a869aae053cdaaafdc18ec87c13a1ecc2c2defb9fecd7", "ref_doc_id": "traffic_lights_table_medium"}, "f2ea0e74-ebb5-468a-a8c2-a8b43cead64a": {"doc_hash": "a6f3136be74e249201a9581037ad63a08ee944f7d32e7f6af0710266e66f2c77", "ref_doc_id": "TTPPV_medium"}, "78dc01c3-2e2d-406f-9a28-231e45c1d2d9": {"doc_hash": "3db067dc4ae090c64d504ca73a45a41e0d8053e412d202c8a977e9cbc12fcc0a", "ref_doc_id": "vessel-loading_medium"}, "54ce8bfe-c30e-415b-b154-61f2c4171a98": {"doc_hash": "f60d1ad7c4fe2f5e4c542c5036841a09f65a04646795d3167c597a930c2bc7b8", "ref_doc_id": "warehouses_medium"}, "d5dcd085-b9b3-464b-9e03-9c18db807361": {"doc_hash": "2f635d4fc311ae0e8497d7a01311afe3fe2ab3683caeb1c34880aebf6315cedb", "ref_doc_id": "water_buckets1_medium"}}, "docstore/data": {"d60a0e1d-9d0a-41d8-b710-62dc4584ae5f": {"__data__": {"id_": "d60a0e1d-9d0a-41d8-b710-62dc4584ae5f", "embedding": null, "metadata": {"model_name": "all_interval"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "all_interval_medium", "node_type": "4", "metadata": {"model_name": "all_interval"}, "hash": "351a5fd3345d067db34822ca884682d9caf6708ff0c27b01f6330bfeff72170d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is the All-Interval Series Problem.\n\nThe All-Interval Series Problem is a classic constraint programming problem that involves finding a series of pitch classes (represented by numbers 0 to 11) such that each pitch class occurs exactly once, and the musical intervals between neighboring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones).\n\nThe main decision variables in this problem are the pitch classes, represented by an array `x` or `series` in the models, which is a permutation of the set of integers from 0 to 11.\n\nThe key constraints in this problem are:\n\n* Each pitch class occurs exactly once (i.e., the array `x` or `series` is a permutation of the set of integers from 0 to 11).\n* The differences between neighboring notes are all different (i.e., the intervals between consecutive pitch classes are all unique).\n\nThe objective of this problem is to find a series that satisfies these constraints.\n\nNote that there is no explicit objective function to minimize or maximize in this problem. The goal is to find a feasible solution that satisfies the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1624373a-5c1c-46b3-9411-dfa002da1e0a": {"__data__": {"id_": "1624373a-5c1c-46b3-9411-dfa002da1e0a", "embedding": null, "metadata": {"model_name": "assign"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "assign_medium", "node_type": "4", "metadata": {"model_name": "assign"}, "hash": "0a74685fa067390318ec6713425969c65cbc9122ae8d65b8d9554ac5320babf1", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is the **Assignment Problem**.\n\nThe Assignment Problem is a classic constraint programming problem that involves assigning a set of tasks to a set of workers in such a way that each task is assigned to exactly one worker and each worker is assigned to exactly one task. The goal is to maximize the total profit or value obtained from the assignments.\n\nThe main decision variables in this problem are:\n\n* `x` or `task` or `worker`: These variables represent the assignment of tasks to workers. For example, `x[w]` represents the task assigned to worker `w`.\n\nThe key constraints in this problem are:\n\n* Each task is assigned to exactly one worker.\n* Each worker is assigned to exactly one task.\n* The assignments must be unique, meaning that no two workers can be assigned the same task, and no two tasks can be assigned to the same worker.\n\nThe objective of the problem is to maximize the total profit obtained from the assignments. The profit is calculated as the sum of the profits obtained from each task-worker pair.\n\nIn the provided models, the profit is represented by the `profit` array, where `profit[w,t]` represents the profit obtained from assigning task `t` to worker `w`. The objective is to maximize the sum of these profits.\n\nThe models use different constraints and search strategies to solve the problem. Model 1 uses the `alldifferent` constraint to ensure that the assignments are unique, while Model 2 uses the `inverse` constraint to achieve the same goal. Model 3 is similar to Model 1 but uses a different search strategy.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffbfe3e3-7377-4b20-b6bc-8b558f3065d9": {"__data__": {"id_": "ffbfe3e3-7377-4b20-b6bc-8b558f3065d9", "embedding": null, "metadata": {"model_name": "aust_color"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aust_color_medium", "node_type": "4", "metadata": {"model_name": "aust_color"}, "hash": "86a5a916c053bea0039b76d9d04fdecd076e8f48caca16bd4bb61a1ae4243605", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Graph Colouring Problem, specifically the Australian Map Colouring Problem.\n\nThis problem is about assigning colours to different regions of a map, such that no two adjacent regions have the same colour. In this case, the map is of Australia, and the regions are the six states and territories: Western Australia (wa), Northern Territory (nt), South Australia (sa), Queensland (q), New South Wales (nsw), and Victoria (v), as well as Tasmania (t).\n\nThe main decision variables are the colours assigned to each region, represented by the variables wa, nt, sa, q, nsw, v, and t. Each variable can take an integer value between 1 and nc, where nc is the number of colours available.\n\nThe key constraints are that adjacent regions must have different colours. For example, Western Australia and Northern Territory must have different colours, as must Western Australia and South Australia, and so on. These constraints are represented by the \"!=\" constraints in the model, which ensure that the colours assigned to adjacent regions are not equal.\n\nThe objective of the problem is to find a feasible assignment of colours to the regions, such that all the constraints are satisfied. In other words, the goal is to find a colouring of the Australian map using the available colours, such that no two adjacent regions have the same colour. There is no objective to minimize or maximize in this problem; the goal is simply to find a valid solution.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1552, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c23f7cec-66b1-4e03-8f15-eebe62cda346": {"__data__": {"id_": "c23f7cec-66b1-4e03-8f15-eebe62cda346", "embedding": null, "metadata": {"model_name": "bibd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bibd_medium", "node_type": "4", "metadata": {"model_name": "bibd"}, "hash": "abb3378e38691f962d884b29fbb1bd652936d113712b7be9d0501edb1a1f52ac", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Balanced Incomplete Block Design (BIBD)\n\nA Balanced Incomplete Block Design is a classic problem in combinatorial design theory. It involves arranging a set of elements (called \"treatments\") into subsets (called \"blocks\") such that each treatment appears in a fixed number of blocks, each block contains a fixed number of treatments, and each pair of treatments appears together in a fixed number of blocks.\n\nDecision Variables:\nThe main decision variables in this problem are the elements of a binary matrix `m`, where `m[i, j]` represents whether treatment `i` is included in block `j` or not.\n\nKey Constraints:\n\n* Each treatment appears in a fixed number of blocks (`r`).\n* Each block contains a fixed number of treatments (`k`).\n* Each pair of treatments appears together in a fixed number of blocks (`lambda`).\n\nObjective:\nThe objective of the problem is to find a binary matrix `m` that satisfies the above constraints.\n\nIn this model, the problem is formulated as a constraint satisfaction problem, where the goal is to find a feasible solution that satisfies all the constraints. The `solve` statement uses a boolean search strategy to find a solution, and the `output` statement is used to print the solution in a human-readable format.\n\nNote that the model also includes some symmetry-breaking constraints to reduce the search space and improve the efficiency of the solver. These constraints ensure that the solution is lexicographically smaller than any other possible solution, which helps to avoid duplicate solutions.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b8b2001-cbcd-477d-b810-ecfe4826ac31": {"__data__": {"id_": "3b8b2001-cbcd-477d-b810-ecfe4826ac31", "embedding": null, "metadata": {"model_name": "bus_scheduling_csplib"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bus_scheduling_csplib_medium", "node_type": "4", "metadata": {"model_name": "bus_scheduling_csplib"}, "hash": "a99d34196288cb2b6a7403463deae388528c99ba9ca220a924795139089e4177", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Bus Driver Scheduling Problem**\n\nThe Bus Driver Scheduling Problem is a classic constraint programming problem that involves assigning bus drivers to shifts to cover a set of tasks (pieces of work) while minimizing the number of shifts used.\n\n**Decision Variables:**\n\n* `x[i]`: a binary variable that represents whether shift `i` is selected (1) or not (0)\n* `tot_shifts`: an integer variable that represents the total number of shifts used in the solution\n\n**Key Constraints:**\n\n* Each task (piece of work) must be covered by exactly one shift.\n* The total number of shifts used must be greater than or equal to the minimum number of shifts required to cover all tasks.\n* The cost of each shift is the same, so the goal is to minimize the total number of shifts used.\n\n**Objective:**\n\nThe objective is to minimize the total number of shifts used (`tot_shifts`) to cover all tasks while satisfying the constraints.\n\nIn summary, the Bus Driver Scheduling Problem is a set partitioning problem that involves selecting a subset of shifts to cover a set of tasks while minimizing the number of shifts used. The problem has applications in real-world bus driver scheduling, where the goal is to reduce the number of shifts and associated costs while ensuring that all tasks are covered.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68b9a1e7-60d7-44bf-919f-7b41774dbc1b": {"__data__": {"id_": "68b9a1e7-60d7-44bf-919f-7b41774dbc1b", "embedding": null, "metadata": {"model_name": "car"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "car_medium", "node_type": "4", "metadata": {"model_name": "car"}, "hash": "07f4e21ade563cba82e78d8b10d73a66c656237d781357f4beccd4d6be97a20b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Car Sequencing Problem**\n\nThe Car Sequencing Problem is a classic constraint programming problem that involves scheduling the production of cars with different options and classes.\n\n**Description**\n\nIn this problem, we have a set of cars to be produced, each belonging to a specific class (e.g., sedan, SUV, etc.). Each class has a certain number of cars to be produced, and each car can have multiple options (e.g., sunroof, navigation system, etc.). The problem is to sequence the production of cars in a way that minimizes the total \"cost\" or \"penalty\" associated with the production process.\n\n**Decision Variables**\n\nThe main decision variables in this problem are:\n\n* `slot`: an array of variables that assigns each car to a specific class.\n* `setup`: a 2D array of variables that indicates whether a specific option is set up for a particular car.\n\n**Key Constraints**\n\nThe key constraints in this problem are:\n\n* Each class of cars must be produced in the correct quantity.\n* For each option, there is a limited window of cars within which the option can be set up (i.e., a \"window size\" constraint).\n* The number of cars with a specific option set up must not exceed a certain maximum limit.\n* The setup of options must be consistent with the class of car being produced.\n\n**Objective**\n\nThe objective of the problem is to minimize the total \"cost\" or \"penalty\" associated with the production sequence, which is represented by the variable `z`. The cost is calculated based on the sequence of cars produced, with higher costs associated with producing cars with more options or switching between different classes of cars.\n\nIn summary, the Car Sequencing Problem is a complex scheduling problem that involves optimizing the production sequence of cars with different options and classes, subject to various constraints and limitations.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1929, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f742c982-4ba4-4731-a056-e015934cf610": {"__data__": {"id_": "f742c982-4ba4-4731-a056-e015934cf610", "embedding": null, "metadata": {"model_name": "carpet_cutting"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "carpet_cutting_medium", "node_type": "4", "metadata": {"model_name": "carpet_cutting"}, "hash": "8ccf0514b084827b8e392f1421371175ae7be41e59aa12718ee639b659af8a6e", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the \"2D Rectangular Cutting Stock Problem\" or \"2D Bin Packing Problem\".\n\nThis problem is about cutting rectangular pieces from a roll of carpet to cover a set of rooms with different shapes and sizes. The goal is to minimize the total length of carpet used.\n\nThe main decision variables are:\n\n* `x` and `y`: the coordinates of the top-left corner of each room on the carpet\n* `rot`: the rotation of each room (0, 90, 180, or 270 degrees)\n* `kind`: the shape of each room (which set of rectangles to use)\n* `l`: the total length of carpet used\n\nThe key constraints are:\n\n* Each room must be placed within the carpet roll, without exceeding its boundaries.\n* No two rooms can overlap.\n* Each room must be placed according to its rotation and shape.\n* The total length of carpet used must be minimized.\n\nThe objective is to minimize the total length of carpet used (`l`).", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d6728e5-fe2f-44c6-a652-a408cfa38b81": {"__data__": {"id_": "8d6728e5-fe2f-44c6-a652-a408cfa38b81", "embedding": null, "metadata": {"model_name": "cell_block"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cell_block_medium", "node_type": "4", "metadata": {"model_name": "cell_block"}, "hash": "de30b559e3d8687cf6ebff4b5dc1490fd8ec8ef4697ad0fd8419d0fb37d607fa", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Prisoner Allocation Problem.\n\nThis problem involves allocating prisoners to cells in a prison, where each prisoner has a specific cost associated with their allocation. The goal is to minimize the total cost of allocating all prisoners to cells.\n\nThe main decision variables are `r` and `c`, which represent the row and column of the cell assigned to each prisoner, respectively.\n\nThe key constraints are:\n\n* Each prisoner must be assigned a unique cell (i.e., no two prisoners can be in the same cell).\n* Prisoners deemed \"dangerous\" must be separated from each other by at least one cell in either the row or column direction.\n* Female prisoners must be allocated to cells in the top half of the prison, while male prisoners must be allocated to cells in the bottom half.\n\nThe objective is to minimize the total cost of allocating all prisoners to cells, where the cost of allocating a prisoner to a cell is given by the `cost` array.\n\nIn essence, this problem involves finding an optimal assignment of prisoners to cells that satisfies the constraints and minimizes the total cost.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2dbaa887-8863-49c4-9fe7-b1dbdde5b720": {"__data__": {"id_": "2dbaa887-8863-49c4-9fe7-b1dbdde5b720", "embedding": null, "metadata": {"model_name": "clique"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "clique_medium", "node_type": "4", "metadata": {"model_name": "clique"}, "hash": "2b8ad60d7f84e8f916ed4224d77daac979e9976d6d72ddf5c81aa55b748ece50", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Maximum Clique Problem\n\nThe Maximum Clique Problem is a classic problem in computer science and graph theory that involves finding the largest subset of vertices in a graph such that every pair of vertices in the subset is connected by an edge.\n\nThe main decision variables in this problem are the boolean variables `c[i]`, which represent whether vertex `i` is included in the clique or not. The integer variable `size` represents the total number of vertices in the clique.\n\nThe key constraints in this problem are:\n\n* Each pair of non-adjacent vertices cannot both be included in the clique.\n* The size of the clique is equal to the sum of the vertices included in it.\n\nThe objective of the problem is to maximize the size of the clique, i.e., to find the largest subset of vertices that are all connected to each other.\n\nIn simpler terms, imagine you have a social network where people are represented by vertices, and friendships are represented by edges between vertices. The Maximum Clique Problem is about finding the largest group of friends where everyone is friends with each other.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e560cb1-2e13-484f-b23e-43b790ba82f9": {"__data__": {"id_": "8e560cb1-2e13-484f-b23e-43b790ba82f9", "embedding": null, "metadata": {"model_name": "cluster"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cluster_medium", "node_type": "4", "metadata": {"model_name": "cluster"}, "hash": "3a6d92453c5664a029445d23b6e8d3a4d85bf1f36f318ab6e50051da5cdd95da", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the \"Clustering Problem\" or \"Facility Location Problem\".\n\nThis problem is about dividing a set of points into clusters such that the points within each cluster are close to each other and the clusters are well-separated. The goal is to find the optimal assignment of points to clusters that minimizes the maximum distance between any two points in the same cluster.\n\nThe main decision variables are:\n\n* `x`: an array of variables, where `x[i]` represents the cluster assignment of point `i`.\n\nThe key constraints are:\n\n* Each pair of points in the same cluster must be within a certain distance (`maxdiam`) of each other.\n* The clusters must be contiguous, meaning that the points in cluster `i` must have smaller indices than the points in cluster `i+1`.\n\nThe objective is to maximize the minimum distance between any two points in different clusters, which is represented by the variable `obj`. This is achieved by minimizing the sum of distances between points in the same cluster and penalizing assignments that put points in different clusters.\n\nIn essence, the problem is trying to find the best way to group points into clusters such that the points within each cluster are close together, and the clusters are well-separated from each other.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1357, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d12f342-cd64-4cfe-8fe1-7310b57108a3": {"__data__": {"id_": "5d12f342-cd64-4cfe-8fe1-7310b57108a3", "embedding": null, "metadata": {"model_name": "compatible_assignment"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "compatible_assignment_medium", "node_type": "4", "metadata": {"model_name": "compatible_assignment"}, "hash": "f381d50b07fb540ef43af0afc4d613401a5b70fe6aa2fa4fe637f4f3e0e1a7a7", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Problem Name:** Task Scheduling with Compatibility Constraints\n\n**Description:** This problem involves scheduling tasks to workers while ensuring that certain compatibility constraints are met. Each task has a profit associated with it, and the goal is to maximize the total profit earned by assigning tasks to workers.\n\n**Decision Variables:**\n\n* `task`: an array of variables representing the task assigned to each worker. Each element `task[w]` represents the task assigned to worker `w`.\n* `worker`: an array of variables representing the worker assigned to each task. Each element `worker[t]` represents the worker assigned to task `t`.\n\n**Key Constraints:**\n\n* Each task is assigned to a unique worker (ensured by the `alldifferent` constraint).\n* If two tasks are compatible, they must be assigned to adjacent time slots (ensured by the `compatible` array and the constraint `task[w1] != m /\\ task[w2] = task[w1] + 1 -> compatible[w1,w2]`).\n* If a task is assigned to a worker, the next task in the sequence must be assigned to the same worker (ensured by the constraint `compatible[worker[t],worker[t+1]]`).\n\n**Objective:**\nThe objective is to maximize the total profit earned by assigning tasks to workers, calculated as the sum of profits for each task assigned to a worker.\n\nIn summary, this problem involves scheduling tasks to workers while ensuring compatibility constraints are met, with the goal of maximizing the total profit earned.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1536, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94089677-3595-42e5-b3cf-eadbbec85dcf": {"__data__": {"id_": "94089677-3595-42e5-b3cf-eadbbec85dcf", "embedding": null, "metadata": {"model_name": "constrained_connected"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "constrained_connected_medium", "node_type": "4", "metadata": {"model_name": "constrained_connected"}, "hash": "1dc8819c70e2f56a4e27abaa1958e8b6af738be231c6fc1bba7b2d026cd1af53", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Constrained Clustering Problem\n\nThe Constrained Clustering Problem is a classic constraint programming problem that involves dividing a set of nodes into clusters such that certain constraints are satisfied.\n\nThe problem is about grouping nodes into clusters in a way that no two nodes in the same cluster are connected by a forbidden edge. The goal is to find the largest possible subset of edges that do not violate these constraints.\n\nThe main decision variables in this problem are:\n\n* `selected`: a set of edges that are selected to form the clusters\n* `rep`: an array of node representatives, where `rep[i]` represents the cluster that node `i` belongs to\n\nThe key constraints in this problem are:\n\n* Each selected edge must connect two nodes that belong to the same cluster (i.e., have the same representative)\n* No two nodes that are connected by a forbidden edge can belong to the same cluster\n\nThe objective of the problem is to maximize the number of selected edges, which means finding the largest possible subset of edges that satisfy the constraints.\n\nIn other words, the goal is to find the largest possible clustering of nodes such that no two nodes connected by a forbidden edge are in the same cluster.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea4b8d3e-e201-4c90-9c38-8d6ccea095b3": {"__data__": {"id_": "ea4b8d3e-e201-4c90-9c38-8d6ccea095b3", "embedding": null, "metadata": {"model_name": "crazy_sets"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crazy_sets_medium", "node_type": "4", "metadata": {"model_name": "crazy_sets"}, "hash": "b50ce5a53ba173fa4ecdc0b4d85e055de86d52b550eb76dd12b5f9170a18edc6", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **The Problem:**\n\nThe problem is known as the \"Triple-Free Set\" or \"Triple-Free Family\" problem.\n\n**Description:**\n\nThe Triple-Free Set problem is a classic constraint programming problem that involves finding a collection of sets, each containing a certain number of elements, such that no three sets have any elements in common.\n\n**Decision Variables:**\n\nThe main decision variables in this problem are:\n\n* `s[i]`: a set of elements, where `i` represents the index of the set.\n* `x[i, j]`: an element in the `i`-th set, where `j` represents the index of the element within the set.\n\n**Key Constraints:**\n\nThe key constraints in this problem can be described as follows:\n\n* No three sets have any elements in common. This is ensured by the constraint that the intersection of any three sets is empty.\n* Each set contains a certain number of elements, and these elements are distinct and in increasing order.\n* Each element in a set is also an element in the overall universe of elements.\n\n**Objective:**\n\nThe objective of this problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function. In other words, the goal is to find a collection of sets that meet the specified conditions, rather than minimizing or maximizing a particular value.\n\nIn summary, the Triple-Free Set problem is a classic constraint programming problem that involves finding a collection of sets with certain properties, such as distinct elements and no triple intersections, and the objective is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42c924de-58ac-4e30-9c10-aa3648b4be52": {"__data__": {"id_": "42c924de-58ac-4e30-9c10-aa3648b4be52", "embedding": null, "metadata": {"model_name": "crossfigure"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crossfigure_medium", "node_type": "4", "metadata": {"model_name": "crossfigure"}, "hash": "c109d511be586a084894321dc6aa65b7eff470f8707eff3251fe857021de5803", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called the Crossfigure problem.\n\nThe Crossfigure problem is a classic constraint programming problem that involves placing numerical answers to clues in a grid, similar to a crossword puzzle. The clues come in different forms, such as arithmetic operations, prime numbers, and square numbers.\n\nThe main decision variables in this problem are:\n\n* `M`: a 9x9 grid of variables, where each cell can take a value between 0 and 9.\n* `A1`, `A4`, ..., `A30`: variables representing the answers to the across clues.\n* `D1`, `D2`, ..., `D28`: variables representing the answers to the down clues.\n\nThe key constraints in this problem are:\n\n* The `across` and `down` predicates, which ensure that the answers to the clues are correctly placed in the grid.\n* The arithmetic constraints, such as `A1 = 2 * A27` and `D1 = A1 + 27`, which relate the answers to each other.\n* The constraints on prime numbers and square numbers, such as `is_prime(A23)` and `square(A20)`.\n* The constraints on the black boxes, which fix certain cells in the grid to be 0.\n\nThe objective of this problem is to find a solution that satisfies all the constraints.\n\nNote that this problem does not have an objective function to minimize or maximize, as it is a satisfaction problem. The goal is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a74cdd2a-e9b1-4f65-86ed-ee3b47e575c3": {"__data__": {"id_": "a74cdd2a-e9b1-4f65-86ed-ee3b47e575c3", "embedding": null, "metadata": {"model_name": "curriculum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "curriculum_medium", "node_type": "4", "metadata": {"model_name": "curriculum"}, "hash": "6c556981f3aa450c79faf0a9d9e789cad4586037fa83fae8147a5b3e278e78a8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Balanced Academic Curriculum Problem.\n\nThis problem is about assigning courses to periods in a curriculum while satisfying various constraints and minimizing the total load across all periods.\n\nThe main decision variables are:\n\n* `course_period`: an array that assigns each course to a period\n* `x`: a 2D array that indicates whether a course is assigned to a particular period\n* `load`: an array that represents the total load for each period\n* `objective`: the overall objective value to be minimized, which represents the maximum load across all periods\n\nThe key constraints are:\n\n* Each course must be assigned to a period\n* A course cannot be scheduled before its prerequisites\n* Each period has a minimum and maximum number of courses that can be assigned\n* Each period has a minimum and maximum total load (academic credits) that can be assigned\n* The total load for each period must be within the allowed bounds\n* The objective is to minimize the maximum load across all periods\n\nThe problem's objective is to minimize the maximum load across all periods, while ensuring that all courses are assigned to periods and all constraints are satisfied.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb4514cf-a974-4c5e-aceb-020c085c9b82": {"__data__": {"id_": "cb4514cf-a974-4c5e-aceb-020c085c9b82", "embedding": null, "metadata": {"model_name": "diamond_free_degree_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "diamond_free_degree_sequence_medium", "node_type": "4", "metadata": {"model_name": "diamond_free_degree_sequence"}, "hash": "b534501630088fbe43cabb4d37aea4b289d24c7349223c2891d10567f1bce272", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called the Diamond-free Degree Sequence problem.\n\nThis problem is about finding all possible degree sequences of a simple, undirected graph that satisfies certain properties. A degree sequence is a list of numbers, where each number represents the number of edges connected to a vertex in the graph. The graph is simple, meaning it has no loop edges (edges that connect a vertex to itself), and undirected, meaning that if there is an edge between two vertices, it can be traversed in both directions.\n\nThe main decision variables in this problem are:\n\n* `x[i,j]`: a binary variable that represents whether there is an edge between vertices `i` and `j` in the graph.\n* `degrees[i]`: an integer variable that represents the degree of vertex `i`, i.e., the number of edges connected to vertex `i`.\n\nThe key constraints in this problem are:\n\n* The graph is diamond-free, meaning that for any four vertices, there are at most four edges between them.\n* The degree of each vertex is greater than zero and is a multiple of 3.\n* The sum of the degrees of all vertices is a multiple of 12.\n* The graph is undirected, meaning that if there is an edge between two vertices, it can be traversed in both directions.\n* There are no loop edges, meaning that a vertex cannot be connected to itself.\n\nThe objective of this problem is to find all possible degree sequences that satisfy these constraints, without optimizing any particular objective function. In other words, the goal is to enumerate all possible solutions that meet the given constraints.\n\nNote that the problem also includes some symmetry-breaking constraints to reduce the number of duplicate solutions.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c57f2c5-078b-4183-ad7b-b5097216b22b": {"__data__": {"id_": "1c57f2c5-078b-4183-ad7b-b5097216b22b", "embedding": null, "metadata": {"model_name": "doublechannel"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "doublechannel_medium", "node_type": "4", "metadata": {"model_name": "doublechannel"}, "hash": "a6f017070c6c22f6361baebc74c3c228c16d8679151b08c60ea8f7d6785c3597", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Ship Scheduling Problem**\n\nThe Ship Scheduling Problem is a classic constraint programming problem that involves scheduling ships entering and leaving a port through multiple channels.\n\n**Decision Variables:**\n\n* `kind`: represents the type of ship movement (entering or leaving) for each ship\n* `start`: represents the start time for each ship to enter or leave the channel\n* `end`: represents the end time for each ship to enter or leave the channel\n* `channel`: represents the channel assignment for each ship\n* `next`: represents the next ship in the same channel (or a dummy ship)\n\n**Key Constraints:**\n\n* Each ship must enter and leave the channel without clashes with other ships in the same channel.\n* The start and end times of each ship are related by the length of the channel and the ship's speed.\n* The next ship in the same channel must be different from the current ship.\n* Ships must maintain a safe distance (leeway) between each other when entering or leaving the channel.\n\n**Objective:**\n\nThe objective is to minimize the total absolute difference between the desired start time and the actual start time for all ships. In other words, the goal is to schedule the ships to enter and leave the channel as close as possible to their desired times.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0dd17cb2-e834-43c1-98c9-df3c2f8848af": {"__data__": {"id_": "0dd17cb2-e834-43c1-98c9-df3c2f8848af", "embedding": null, "metadata": {"model_name": "fractions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fractions_medium", "node_type": "4", "metadata": {"model_name": "fractions"}, "hash": "8b17efaaa30e90b8d57c3ef1b512a7b4724cc74e3f623128b791b7dd5757b0e1", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the \"Fractions Problem\" or \"Einstein's Fractions Problem\".\n\nThis problem is about finding distinct non-zero digits (from 1 to 9) that satisfy a specific equation involving three fractions. The equation is:\n\n(A / (B*C)) + (D / (E*F)) + (G / (H*I)) = 1\n\nThe main decision variables are the digits A, B, C, D, E, F, G, H, and I, which represent the numerators and denominators of the three fractions.\n\nThe key constraints are:\n\n* Each digit must be distinct and non-zero.\n* The equation above must hold.\n* Some symmetry-breaking constraints are added to reduce the search space:\n\t+ A*D2 >= D*D1 (to avoid swapping the first two fractions)\n\t+ D*D3 >= G*D2 (to avoid swapping the last two fractions)\n* Some redundant constraints are added to help the solver:\n\t+ 3*A >= D1 (to reduce the possible values of A)\n\t+ 3*G <= D2 (to reduce the possible values of G)\n\nThe objective of the problem is to find a solution that satisfies all the constraints, rather than to minimize or maximize a specific objective function. The problem is a classic example of a constraint satisfaction problem, where the goal is to find a feasible solution that meets all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b9651b4-125a-4eaa-ab86-70ebfb311267": {"__data__": {"id_": "3b9651b4-125a-4eaa-ab86-70ebfb311267", "embedding": null, "metadata": {"model_name": "golfers"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golfers_medium", "node_type": "4", "metadata": {"model_name": "golfers"}, "hash": "1c0588705de0e6b65f40711221973d4b4150bc9fc1e8ea4f7fba518e52d6dfd5", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Social Golfers Problem.\n\nThe Social Golfers Problem is about scheduling golfers into groups for multiple rounds of golf, such that each golfer plays with a different set of people in each round, and no two golfers play together more than once.\n\nThe main decision variables in this problem are:\n\n* `round_place_golfer` (in Model 1) or `round_group_i_golfer` (in Model 2) or `round_group_golfers` (in Model 3) or `assign` (in Model 4), which represent the assignment of golfers to groups in each round.\n\nThe key constraints in this problem are:\n\n* Each group in each round must have a distinct set of golfers.\n* Each pair of golfers can play together at most once across all rounds.\n* Symmetry-breaking constraints to reduce the search space and avoid duplicate solutions.\n\nThe objective of this problem is to find a feasible assignment of golfers to groups in each round, satisfying the above constraints.\n\nNote that the problem does not have an explicit objective function to minimize or maximize, but rather aims to find a feasible solution that satisfies the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a95df690-285e-4dea-b4d2-a6fb9496fbbd": {"__data__": {"id_": "a95df690-285e-4dea-b4d2-a6fb9496fbbd", "embedding": null, "metadata": {"model_name": "golomb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golomb_medium", "node_type": "4", "metadata": {"model_name": "golomb"}, "hash": "3f3db66ba1d9832a3384ff041d4582ea8733923cb6541d7a2b77f52d48420494", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Golomb Ruler Problem\n\nThe Golomb Ruler Problem is a classic constraint programming problem that involves finding a set of marks on a ruler such that the differences between all pairs of marks are distinct.\n\nThe main decision variables in this problem are the `mark` array, which represents the positions of the marks on the ruler, and the `differences` array, which represents the differences between all pairs of marks.\n\nThe key constraints in this problem are:\n\n* The first mark is at position 0.\n* Each mark is to the right of the previous mark.\n* All differences between pairs of marks are distinct.\n* A symmetry-breaking constraint to ensure that the solution is not mirrored.\n\nThe objective of the problem is to minimize the length of the ruler, which is represented by the position of the last mark (`mark[m]`).\n\nIn essence, the Golomb Ruler Problem is about finding the shortest ruler that can measure all distances up to a certain length, with the constraint that all distances must be unique.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "777f86c3-d039-41cc-a838-98e319f89c52": {"__data__": {"id_": "777f86c3-d039-41cc-a838-98e319f89c52", "embedding": null, "metadata": {"model_name": "graph"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "graph_medium", "node_type": "4", "metadata": {"model_name": "graph"}, "hash": "e278591e23e9b096b73d75b0dcd0f35d240bac8a10dcf683155c81c61ee77ede", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the \"Graph Numbering Problem\" or \"Graph Labeling Problem\".\n\nThis problem is about assigning unique numbers from 1 to 8 to the vertices of a specific graph, such that each number is used exactly once, and the numbers assigned to adjacent vertices differ by at most two.\n\nThe main decision variables are `a` to `h`, which represent the numbers assigned to each vertex of the graph.\n\nThe key constraints are:\n\n* Each number is used exactly once, which means that no two vertices can have the same number.\n* Adjacent vertices (connected by an edge) must have numbers that differ by at least two. This is represented by the absolute difference constraints, such as `abs(a - b) >= 2`.\n\nThe objective of the problem is to find a feasible assignment of numbers to the vertices that satisfies all the constraints, which is achieved by using the `solve satisfy` statement.\n\nThe output of the model is a graphical representation of the graph with the assigned numbers, as well as a list of the assigned numbers for each vertex.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83938db1-0ace-4dbe-9fe9-a199456e7dee": {"__data__": {"id_": "83938db1-0ace-4dbe-9fe9-a199456e7dee", "embedding": null, "metadata": {"model_name": "itemset_mining"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "itemset_mining_medium", "node_type": "4", "metadata": {"model_name": "itemset_mining"}, "hash": "6e6b6b10e1e68b31817d610cb9d75c1f12e6849f0728b39df809940b6b957513", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Market Basket Analysis Problem**\n\nThe Market Basket Analysis Problem is a classic constraint programming problem that involves identifying a set of items that frequently appear together in a dataset of transactions.\n\n**Decision Variables:**\n\nThe main decision variable is `Items`, which represents a set of items (e.g., products) that are frequently purchased together.\n\n**Key Constraints:**\n\n1. **Frequency constraint**: The set of items `Items` must appear together in at least `Freq` transactions (i.e., baskets).\n2. **Transaction database constraint**: Each transaction in the dataset `TDB` contains a subset of items, and the set of items `Items` must be a subset of at least one transaction.\n3. **Minimum utility constraint**: The total price of the items in `Items` must be at least `minUtility`.\n\n**Objective:**\n\nThe objective is to find a set of items that satisfies the constraints, without optimizing any specific objective function (i.e., `solve satisfy`). The goal is to identify a set of items that frequently appear together in the transactions and meet the minimum utility requirement.\n\nIn this specific model, the problem is instantiated with 6 items (bread, butter, cheese, cocoa, milk, and vegemite) and 7 transactions. The frequency threshold is set to 4, and the minimum utility is set to 3. The model aims to find a set of items that appears together in at least 4 transactions and has a total price of at least 3.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30dd21bf-f4bf-4b1c-9eb2-a542759b210b": {"__data__": {"id_": "30dd21bf-f4bf-4b1c-9eb2-a542759b210b", "embedding": null, "metadata": {"model_name": "jobshop"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "jobshop_medium", "node_type": "4", "metadata": {"model_name": "jobshop"}, "hash": "3dd65b35e43f6bd5c49aa7b853939c97d8921161ccaad6e616f375a28e0cd227", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Flowshop Scheduling Problem**\n\nThe Flowshop Scheduling Problem is a classic constraint programming problem that involves scheduling a set of jobs on a set of machines in a specific order.\n\n**Decision Variables:**\n\n* `s[j,t]`: the start time of task `t` in job `j`\n* `makespan`: the maximum completion time of all jobs\n\n**Key Constraints:**\n\n* Each task in a job must be performed in order, meaning that the start time of a task must be after the completion time of the previous task in the same job.\n* Only one task can be performed on a machine at a time, meaning that two tasks on the same machine cannot overlap in time.\n\n**Objective:**\n\nThe objective of the problem is to minimize the `makespan`, which is the maximum completion time of all jobs.\n\nIn summary, the Flowshop Scheduling Problem involves scheduling a set of jobs on a set of machines in a specific order, subject to constraints on the order of tasks within each job and the availability of machines, with the goal of minimizing the overall completion time.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14098322-477a-4334-9c76-be443b59fec8": {"__data__": {"id_": "14098322-477a-4334-9c76-be443b59fec8", "embedding": null, "metadata": {"model_name": "K4xP2Graceful"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "K4xP2Graceful_medium", "node_type": "4", "metadata": {"model_name": "K4xP2Graceful"}, "hash": "c0b2219c7de9068e5eb33604911fe48c3ed3c4293dd469d02d2ea08ca90653ce", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the \"Graceful Graph\" problem.\n\nThe Graceful Graph problem is about labeling the nodes of a graph with integers from 1 to m, such that the absolute difference between the labels of two adjacent nodes is equal to the edge label connecting them. The goal is to find a labeling that satisfies this condition for all edges in the graph.\n\nThe main decision variables in this problem are:\n\n* `nodes`: an array of variables representing the labels assigned to each node in the graph.\n* `edges`: an array of variables representing the labels assigned to each edge in the graph.\n* `graph`: a 2D array representing the adjacency matrix of the graph, where `graph[i,1]` and `graph[i,2]` represent the nodes connected by the `i`-th edge.\n\nThe key constraints in this problem are:\n\n* For each edge, the absolute difference between the labels of the two nodes it connects must be equal to the edge label.\n* All edge labels must be distinct.\n* All node labels must be distinct.\n\nThe objective of the problem is to find a feasible solution that satisfies all these constraints, rather than optimizing a specific objective function.\n\nIn this specific model, the graph is fixed and represented by the `graph` array, and the goal is to find a labeling of the nodes and edges that satisfies the graceful graph condition.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71e992bf-7a8e-40c2-bd89-2782731a109f": {"__data__": {"id_": "71e992bf-7a8e-40c2-bd89-2782731a109f", "embedding": null, "metadata": {"model_name": "killer_sudoku"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "killer_sudoku_medium", "node_type": "4", "metadata": {"model_name": "killer_sudoku"}, "hash": "5effa8c57a5f7f8709a77360946e4e33ac9a0ea5b20696ec2b6a93325718aa20", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called Killer Sudoku.\n\nKiller Sudoku is a puzzle that combines elements of Sudoku and Kakuro. The objective is to fill a 9x9 grid with numbers from 1 to 9, such that each row, column, and nonet (a 3x3 sub-grid) contains each number exactly once. Additionally, the puzzle is divided into \"cages\" or \"segments\" which are groups of cells that must add up to a specific total value. Each cage must contain each number only once, and no number can be repeated within a cage.\n\nThe main decision variables in this problem are the values of the cells in the 9x9 grid, represented by the `x` array in the model. Each `x[i,j]` represents the value of the cell at row `i` and column `j`.\n\nThe key constraints in this problem are:\n\n* Each row, column, and nonet must contain each number exactly once.\n* The sum of the values in each cage must equal the specified total value for that cage.\n* No number can be repeated within a cage.\n\nThe objective of the problem is to find a solution that satisfies all these constraints.\n\nIn the provided models, the `solve` statement is set to `satisfy`, which means that the objective is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a4f2620-2a65-4ed2-8829-f53085c4a06c": {"__data__": {"id_": "3a4f2620-2a65-4ed2-8829-f53085c4a06c", "embedding": null, "metadata": {"model_name": "knapsack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "knapsack_medium", "node_type": "4", "metadata": {"model_name": "knapsack"}, "hash": "3a2961a03c1d206306fc4baadce484e48266063dee76ff7441cc292d746b9cc5", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the 0/1 Knapsack Problem.\n\nThis problem is about selecting a subset of items to include in a knapsack of limited capacity, with the goal of maximizing the total value of the selected items. Each item has a size and a profit, and the knapsack has a limited capacity.\n\nThe main decision variables are the `x` variables, which represent whether each item is included in the knapsack (1) or not (0).\n\nThe key constraints are:\n\n* Each item can only be included once (or not at all), which is ensured by the `x` variables being binary.\n* The total size of the included items must not exceed the knapsack's capacity.\n\nThe objective is to maximize the total profit of the included items.\n\nIn other words, the problem is to find the optimal selection of items to put in the knapsack, given the capacity constraint, to maximize the total value of the selected items.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e86fc0e-3c5d-4552-a898-4461833b710a": {"__data__": {"id_": "1e86fc0e-3c5d-4552-a898-4461833b710a", "embedding": null, "metadata": {"model_name": "langford"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "langford_medium", "node_type": "4", "metadata": {"model_name": "langford"}, "hash": "3e81468c352b5dce6d153a6fb845a173df723846a922af312d10cc353006a578", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Langford's Problem.\n\nLangford's Problem is a classic constraint programming problem that involves arranging a sequence of digits in a specific way. The problem is defined as follows: given two positive integers `m` and `n`, create a sequence of `m` copies of the digits from 1 to `n`, such that any two consecutive copies of a digit `k` are separated by exactly `k` other digits.\n\nThe main decision variables in this problem are the positions of the digits in the sequence, represented by the `x` or `y` arrays in the models. These variables represent the indices at which each digit appears in the sequence.\n\nThe key constraints in this problem are:\n\n* Each digit appears exactly `m` times in the sequence.\n* Any two consecutive copies of a digit `k` are separated by exactly `k` other digits.\n* The sequence must contain all digits from 1 to `n` exactly `m` times.\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints.\n\nIn simpler terms, the problem is about creating a sequence of digits where each digit appears a certain number of times, and the distance between consecutive appearances of the same digit is equal to the digit's value. For example, if we have two copies of the digits 1 to 4, a valid solution would be `41312432`, where each digit appears twice, and the distance between consecutive appearances of the same digit is equal to the digit's value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "405d3655-665f-4793-baae-889d5191a539": {"__data__": {"id_": "405d3655-665f-4793-baae-889d5191a539", "embedding": null, "metadata": {"model_name": "loan"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "loan_medium", "node_type": "4", "metadata": {"model_name": "loan"}, "hash": "b45f3a2e7169a5cf1b813161a751c68cae16a955f5aa2d884ccd032a33f686da", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Loan Repayment Problem.\n\nThis problem is about finding the optimal loan repayment plan for a borrower who takes out a loan with a certain interest rate and repays it over four quarters.\n\nThe main decision variables are:\n\n* R: the quarterly repayment amount\n* P: the principal amount borrowed\n* I: the interest rate\n\nThese variables represent the key aspects of the loan: how much is borrowed, how much interest is charged, and how much is repaid each quarter.\n\nThe key constraints are:\n\n* The balance after each quarter is calculated by adding the interest accrued and subtracting the repayment made.\n* The balance owing at the end of the four quarters is calculated similarly.\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function. In other words, the goal is to find a loan repayment plan that works, rather than minimizing or maximizing a particular aspect of the plan.\n\nIn essence, the problem is about finding a loan repayment schedule that takes into account the interest rate and the borrower's quarterly repayments, and ensures that the loan is repaid over the course of a year.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "666fe564-dc5e-47d6-9c75-052c31083428": {"__data__": {"id_": "666fe564-dc5e-47d6-9c75-052c31083428", "embedding": null, "metadata": {"model_name": "ltsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ltsp_medium", "node_type": "4", "metadata": {"model_name": "ltsp"}, "hash": "4ea94bfcbc6dc5e122645bd28544c854c54e69f35099a77be04df2d99b643b70", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Traveling Salesman Problem (TSP)\n\nThe Traveling Salesman Problem is a classic constraint programming problem that involves finding the shortest possible tour that visits a set of cities and returns to the starting city.\n\nThe main decision variables in this problem are:\n\n* `order`: an array of variables that represents the order in which the cities are visited\n* `city`: an array of variables that represents the city at each position in the tour\n\nThese variables are used to determine the sequence of cities that the salesman will visit.\n\nThe key constraints in this problem are:\n\n* Each city must be visited exactly once\n* The order of visitation must satisfy the precedence constraints, which specify that certain cities must be visited before others\n* The tour must start and end at the same city\n\nThe objective of the problem is to minimize the total distance traveled by the salesman, which is calculated as the sum of the absolute differences between the coordinates of consecutive cities in the tour.\n\nIn other words, the goal is to find the shortest possible route that visits all the cities and returns to the starting point, while satisfying the precedence constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "712d9747-9ba7-4b6f-a97c-f178a1f569cd": {"__data__": {"id_": "712d9747-9ba7-4b6f-a97c-f178a1f569cd", "embedding": null, "metadata": {"model_name": "magic_hexagon"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_hexagon_medium", "node_type": "4", "metadata": {"model_name": "magic_hexagon"}, "hash": "f33760faf557bc0f450f9f94bbd3450b0a48d700bf75f1a5d0aa3544abb67245", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Magic Hexagon Problem**\n\nThe Magic Hexagon problem is a classic constraint programming problem that involves arranging numbers in a specific pattern to satisfy certain conditions.\n\n**Description**\n\nThe problem is about creating a hexagonal arrangement of 19 numbers from 1 to 19, such that the sum of the numbers in each row, column, and diagonal is equal to 38. The arrangement is subject to certain constraints, making it a challenging problem to solve.\n\n**Decision Variables**\n\nThe main decision variables in this problem are the 19 variables `a` to `s`, which represent the numbers to be arranged in the hexagonal pattern. These variables are integers between 1 and 19.\n\n**Key Constraints**\n\nThe key constraints in this problem can be described as follows:\n\n* Each number from 1 to 19 must be used exactly once in the arrangement (all_different constraint).\n* The sum of the numbers in each row, column, and diagonal must be equal to 38.\n* Certain numbers must be less than or equal to others (e.g., `a` must be less than `c`, `h`, `l`, `q`, and `s`).\n\n**Objective**\n\nThe objective of this problem is to find a feasible arrangement of the numbers that satisfies all the constraints. There is no explicit objective function to minimize or maximize; the goal is to find a solution that meets all the conditions.\n\nIn summary, the Magic Hexagon problem is a challenging constraint programming problem that requires finding a specific arrangement of numbers to satisfy a set of constraints, with no explicit objective function to optimize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1624, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5922ddb4-bc5d-44ad-aab4-476fdfa3ef15": {"__data__": {"id_": "5922ddb4-bc5d-44ad-aab4-476fdfa3ef15", "embedding": null, "metadata": {"model_name": "magic_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_sequence_medium", "node_type": "4", "metadata": {"model_name": "magic_sequence"}, "hash": "aef9d5dc6a1c7889c66d90598f81bf9da7a6ba0d291ef1c77b796faa6f79b0f8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem represented by these Minizinc models is the Magic Sequence/Magic Square problem.\n\n**Problem Description:**\nA Magic Sequence/Magic Square is an arrangement of integers in a sequence or square grid, such that each integer from 0 to n-1 appears exactly i times in the sequence, where i is the value of the integer. For example, the sequence 6, 2, 1, 0, 0, 0, 1, 0, 0, 0 is a Magic Sequence of length 10, because 0 appears 6 times, 1 appears twice, and 2 appears once.\n\n**Decision Variables:**\nThe main decision variables in these models are arrays of integers, representing the Magic Sequence or Magic Square. In the sequence models, the array `s` represents the Magic Sequence, where `s[i]` is the value of the i-th element in the sequence. In the square models, the array `magic` or `square` represents the Magic Square, where `magic[i, j]` or `square[i, j]` is the value of the cell at row i and column j.\n\n**Key Constraints:**\nThe key constraints in these models are:\n\n* Each integer from 0 to n-1 appears exactly i times in the sequence (or square).\n* The sum of the values in each row, column, and diagonal of the square is equal to a constant magic sum.\n\n**Objective:**\nThe objective of these models is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\n\nNote that Models 1-4 represent the Magic Sequence problem, while Models 5 and 6 represent the Magic Square problem. Model 5 uses a more concise representation of the Magic Square, while Model 6 uses a more explicit representation with binary variables.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ec37072-8ae9-4480-a5bf-3c27cb460438": {"__data__": {"id_": "6ec37072-8ae9-4480-a5bf-3c27cb460438", "embedding": null, "metadata": {"model_name": "maximum_density_still_life"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "maximum_density_still_life_medium", "node_type": "4", "metadata": {"model_name": "maximum_density_still_life"}, "hash": "b85ad2a8e59dfd9ba51eb1dd6b11cd56abab0b9e9845476edcf4ee18a080d180", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Still Life Problem**\n\nThe Still Life problem is a classic constraint programming problem that involves finding a stable pattern of live and dead cells in a grid, where live cells are represented by 1s and dead cells are represented by 0s.\n\n**Decision Variables**\n\nThe main decision variables are the elements of the `grid` array, which represents the assignment of live (1) or dead (0) cells to each position in the grid.\n\n**Key Constraints**\n\nThe key constraints in the problem are:\n\n* **Boundary constraints**: Cells in the first and last two rows and columns of the grid are all dead (0).\n* **Live cell constraints**: A cell is alive (1) if it has exactly three live neighbors. A live cell must have 2 or 3 live neighbors.\n* **Symmetry-breaking constraints**: The assignment of live and dead cells is forced to respect an ordering on the values that occur in corner entries of the grid.\n\n**Objective**\n\nThe objective of the problem is to **maximize** the number of live cells in the grid, subject to the constraints.\n\nIn essence, the problem is to find a stable pattern of live and dead cells in a grid, where live cells are sustained by having exactly three live neighbors, and dead cells are sustained by not having three live neighbors. The goal is to find the pattern with the maximum number of live cells.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9d18f6f-f70f-4882-92c6-95f673f39136": {"__data__": {"id_": "d9d18f6f-f70f-4882-92c6-95f673f39136", "embedding": null, "metadata": {"model_name": "mip"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "mip_medium", "node_type": "4", "metadata": {"model_name": "mip"}, "hash": "9ab871dbba1bf9be8df7778caa60ca605f63394b3ab1d06efd33291df61cd82d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is a classic Linear Programming (LP) problem, specifically a Resource Allocation problem.\n\n**Description:**\nThe problem involves allocating resources to different activities or products to maximize profit or minimize cost, while satisfying certain constraints. In this case, we have three variables, B, C, and D, which represent the quantities of three different products or activities.\n\n**Decision Variables:**\nThe decision variables are B, C, and D, which represent the quantities of the three products or activities. These variables can take on non-negative values, indicating the amount of each product or activity to allocate.\n\n**Key Constraints:**\nThe constraints can be described as follows:\n\n* The total amount of resources used by the three products or activities cannot exceed certain limits (e.g., 30, 25, and 20 units).\n* Each product or activity has a specific resource requirement, and the total resource usage must not exceed the available resources.\n\n**Objective:**\nThe objective is to maximize the total profit or value obtained from the allocation of resources to the three products or activities. The profit or value is calculated as a linear combination of the quantities of each product or activity, with different coefficients (e.g., 3, 1, and 3) representing the profit or value per unit of each product or activity.\n\nIn summary, the problem involves finding the optimal allocation of resources to three products or activities to maximize profit or value, while satisfying resource constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0149f4a7-0ac3-4b79-901b-65ee0a2fa32a": {"__data__": {"id_": "0149f4a7-0ac3-4b79-901b-65ee0a2fa32a", "embedding": null, "metadata": {"model_name": "missing_solution"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "missing_solution_medium", "node_type": "4", "metadata": {"model_name": "missing_solution"}, "hash": "5394384d8080dde01449d3e6d294fddb94d624b0feeeeaf1ee5af4cc597e123a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Social Golfer Problem.\n\nThis problem is about arranging a group of people, with different genders and ages, into a sequence or order, subject to certain constraints.\n\nThe main decision variables are:\n\n* `order`: an array of variables representing the sequence of people.\n* `gender`: an array of constants representing the gender of each person (male or female).\n* `age`: an array of constants representing the age of each person.\n\nThe key constraints are:\n\n* The sequence of people must be a permutation of the original group (i.e., each person appears exactly once).\n* Males and females must alternate in the sequence.\n* The age difference between consecutive people in the sequence cannot exceed 10 years.\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function. In other words, the goal is to find a valid sequence of people that meets the given constraints.\n\nIn this specific model, the problem is formulated as a satisfaction problem, where the goal is to find a solution that satisfies all the constraints, without any optimization objective.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19d9b3ba-52ce-4c94-b905-54f780598844": {"__data__": {"id_": "19d9b3ba-52ce-4c94-b905-54f780598844", "embedding": null, "metadata": {"model_name": "nonogram_create_automaton2"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nonogram_create_automaton2_medium", "node_type": "4", "metadata": {"model_name": "nonogram_create_automaton2"}, "hash": "33783b3763a9d2edfdf743fc6d20cc84cd41ee63d092d135dee03770c32d7bb1", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called the Nonogram problem.\n\nThe Nonogram problem is a classic constraint programming problem that involves solving a puzzle where a set of clues are given to determine the state of a grid. The grid is divided into rows and columns, and each row and column has a set of clues that specify the pattern of states in that row or column. The goal is to determine the state of each cell in the grid such that the clues are satisfied.\n\nThe main decision variables in this problem are the states of each cell in the grid, which are represented by the `x` or `A` arrays in the models. These variables can take on two values, typically 0 and 1, or \" \" and \"#\", which represent the two possible states of a cell.\n\nThe key constraints in this problem are the clues, which are specified by the `row_rules` and `col_rules` arrays in the models. These clues specify the pattern of states in each row and column, and the constraints ensure that the states of the cells in each row and column satisfy these patterns.\n\nThe objective of the problem is to find a solution that satisfies all the clues, and there is no explicit objective function to minimize or maximize.\n\nIn simpler terms, the Nonogram problem is like solving a puzzle where you have to figure out the state of each cell in a grid based on clues about the patterns of states in each row and column. The clues are like hints that help you determine the solution, and the goal is to find a solution that satisfies all the clues.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36173e8e-881d-4c7a-a87c-0204b71ade0a": {"__data__": {"id_": "36173e8e-881d-4c7a-a87c-0204b71ade0a", "embedding": null, "metadata": {"model_name": "nurses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nurses_medium", "node_type": "4", "metadata": {"model_name": "nurses"}, "hash": "8199fea96bda54f9ee9ff6fc94edace0764192d39a0068ec9f05002a4b65d95f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Nurse Rostering Problem**\n\nThe Nurse Rostering Problem is a classic constraint programming problem that involves creating a schedule for a set of nurses to work on different days and shifts.\n\n**Decision Variables:**\n\nThe main decision variables in this problem are the assignments of nurses to shifts on different days, represented by a 2D array `x` where `x[n,d]` represents the shift assigned to nurse `n` on day `d`. The shifts can be one of three types: day, night, or day off.\n\n**Key Constraints:**\n\n1. **Consecutive Night Shifts:** A nurse cannot work two consecutive night shifts without a day off in between.\n2. **Night Shift Followed by Day Off:** If a nurse works a night shift, they cannot work a day shift the next day.\n3. **Shift Coverage:** The number of nurses working night shifts on each day must be within a specified range (lower bound `l` and upper bound `u`).\n4. **Day Shift Coverage:** The number of nurses working day shifts on each day must be at least `o`.\n\n**Objective:**\n\nThe objective of the problem is to find a feasible schedule that satisfies all the constraints, rather than optimizing a specific objective function. The goal is to assign shifts to nurses in a way that meets the requirements and rules of the problem.\n\nIn summary, the Nurse Rostering Problem involves creating a schedule for nurses to work on different days and shifts, subject to constraints on consecutive night shifts, shift coverage, and day shift coverage. The problem is typically solved using constraint programming techniques, and the goal is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1700, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f7783a0-da56-447e-b457-cf1d10155a7b": {"__data__": {"id_": "0f7783a0-da56-447e-b457-cf1d10155a7b", "embedding": null, "metadata": {"model_name": "opd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "opd_medium", "node_type": "4", "metadata": {"model_name": "opd"}, "hash": "3233f3298acc3dc12d38b10b2abdd14595582e5e18aa97dd4c43034301940aef", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Orthogonal Pairs of Designs (OPD) Problem**\n\nThe OPD problem is a classic constraint programming problem that involves designing a binary matrix with specific properties.\n\n**Problem Description**\n\nGiven three integers `v`, `b`, and `r`, the goal is to find a binary matrix `m` with `v` rows and `b` columns, where each row sums to `r`. The matrix should be designed such that the dot product between any pair of distinct rows is minimal.\n\n**Decision Variables**\n\nThe main decision variables are the elements of the binary matrix `m`, where `m[i, j]` represents the value (0 or 1) at row `i` and column `j`.\n\n**Key Constraints**\n\n1. **Row Sum Constraint**: Each row of the matrix must sum to `r`.\n2. **Dot Product Constraint**: The dot product between any pair of distinct rows must be less than or equal to a minimum value, represented by the variable `objective`.\n3. **Symmetry Breaking Constraints**: These constraints are used to break the symmetry of the matrix, ensuring that the solution is unique and not duplicated.\n\n**Objective**\n\nThe objective of the problem is to minimize the dot product between any pair of distinct rows, represented by the variable `objective`. This is equivalent to finding the minimum value of lambda (\u03bb) that satisfies the dot product constraint.\n\nIn summary, the OPD problem involves designing a binary matrix with specific properties, where each row sums to a fixed value, and the dot product between any pair of distinct rows is minimal. The goal is to find the minimum value of lambda that satisfies these constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1642, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9858ce87-6b7c-4eed-8612-c335e13b4850": {"__data__": {"id_": "9858ce87-6b7c-4eed-8612-c335e13b4850", "embedding": null, "metadata": {"model_name": "partition"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "partition_medium", "node_type": "4", "metadata": {"model_name": "partition"}, "hash": "ae4e2c5e6a99c03fd98cd6f308d2faa1ba8f1e30a62663ec094113d67b5c4506", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Partition Problem.\n\nThis problem is about dividing a set of 2n numbers into two groups, each of size n, such that the sums of the numbers in each group are equal, and the sums of the squares of the numbers in each group are also equal.\n\nThe main decision variables are x and y, which represent the two groups of numbers. Each element of x and y is a variable that takes a value from 1 to 2n, representing the numbers in each group.\n\nThe key constraints are:\n\n* Each group must contain n numbers, and all numbers from 1 to 2n must be used exactly once.\n* The sums of the numbers in each group must be equal.\n* The sums of the squares of the numbers in each group must be equal.\n* To break symmetries, the numbers in each group are ordered, and the groups themselves are also ordered.\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints.\n\nNote that the problem does not have an objective function to minimize or maximize, it is a satisfaction problem where the goal is to find a solution that meets all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e65c94c-8f68-4be5-b627-ca53dbbc6eb7": {"__data__": {"id_": "1e65c94c-8f68-4be5-b627-ca53dbbc6eb7", "embedding": null, "metadata": {"model_name": "photo"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "photo_medium", "node_type": "4", "metadata": {"model_name": "photo"}, "hash": "fa061379f2d0e55d17d94ca0570688c84158b59df4eaab453c46b1b0851c78d8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Social Golfer Problem.\n\nThe Social Golfer Problem is a classic constraint programming problem that involves scheduling golf games for a group of golfers over a series of weeks. The goal is to create a schedule that maximizes the social interaction among the golfers.\n\nThe main decision variables in this problem are `x` and `y`. `x` represents the assignment of golfers to positions in each game, while `y` represents the assignment of positions to golfers. In other words, `x[i]` represents the position of golfer `i`, and `y[j]` represents the golfer assigned to position `j`.\n\nThe key constraints in this problem are:\n\n* Each golfer must be assigned a unique position in each game (alldifferent constraint on `y`).\n* Each position in each game must be assigned to a unique golfer (inverse constraint between `x` and `y`).\n* The objective is to maximize the total number of friendships between golfers playing together in consecutive games.\n\nThe problem's objective is to maximize the sum of friendships between golfers playing together in consecutive games. This is achieved by summing up the friendships between golfers `y[i]` and `y[i+1]` for each game `i`. The `friend` array represents the friendships between golfers, where `friend[i, j]` is 1 if golfers `i` and `j` are friends, and 0 otherwise.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bce54c8-abc9-44f5-b902-3a9eee716c25": {"__data__": {"id_": "1bce54c8-abc9-44f5-b902-3a9eee716c25", "embedding": null, "metadata": {"model_name": "project_scheduling"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "project_scheduling_medium", "node_type": "4", "metadata": {"model_name": "project_scheduling"}, "hash": "35e6d69132d46814aa87c0099d39de768eb4ae9b7ed319219d80b1dd557f8380", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called the \"Resource-Constrained Project Scheduling Problem\" (RCPSP).\n\nThis problem is about scheduling a set of tasks with given durations and precedence constraints, where some tasks cannot start until others are finished. The goal is to find a schedule that minimizes the total duration of the project, also known as the \"makespan\".\n\nThe main decision variables are the start times of each task, represented by the `start` array. Each element `start[t]` represents the start time of task `t`.\n\nThe key constraints are:\n\n* Precedence constraints: each task can only start after its predecessors have finished. For example, the task \"interior walls\" cannot start until the task \"foundations\" has finished.\n* Non-overlap constraints: certain tasks, such as carpentry tasks, cannot overlap with each other. For example, the tasks \"interior walls\" and \"exterior walls\" cannot be performed at the same time.\n\nThe objective is to minimize the makespan, which is the maximum finish time of all tasks. In other words, the goal is to complete the project as quickly as possible.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "567896c9-bc02-41d9-977b-9051a00e07d1": {"__data__": {"id_": "567896c9-bc02-41d9-977b-9051a00e07d1", "embedding": null, "metadata": {"model_name": "QuasigroupCompletion"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasigroupCompletion_medium", "node_type": "4", "metadata": {"model_name": "QuasigroupCompletion"}, "hash": "9ecc5e8f2d63625d63cc1b592506db9460f5e2c112c55c7f2029bcdf50198065", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Quasigroup with Holes or Latin Square Completion problem.\n\nThis problem is about completing a partially filled N x N grid with numbers from 1 to N, such that each row, column, and cell contains each number exactly once. The grid may have some initial values already filled in, and the goal is to fill in the remaining empty cells to satisfy the constraints.\n\nThe main decision variables in this problem are the `puzzle` variables, which represent the values to be assigned to each cell in the grid.\n\nThe key constraints in this problem are:\n\n* Each row must contain each number from 1 to N exactly once.\n* Each column must contain each number from 1 to N exactly once.\n* Each cell must contain exactly one number from 1 to N.\n* The initial values in the grid must be preserved.\n\nThe objective of this problem is to find a solution that satisfies all the constraints, rather than minimizing or maximizing a specific objective function. The `solve satisfy` statement in the model indicates that the goal is to find a feasible solution that meets all the constraints.\n\nIn essence, the Quasigroup with Holes problem is a classic constraint satisfaction problem that requires finding a solution that satisfies a set of constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd78bf0b-cb21-4ba7-932d-4daf1b98a5e3": {"__data__": {"id_": "cd78bf0b-cb21-4ba7-932d-4daf1b98a5e3", "embedding": null, "metadata": {"model_name": "QuasiGroupExistence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasiGroupExistence_medium", "node_type": "4", "metadata": {"model_name": "QuasiGroupExistence"}, "hash": "1158ac1e044de4f5f45cd5320d40a51cddd20d1e13a804c759ac266297a2f174", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem represented by these Minizinc models is the Quasigroup Existence Problem, also known as the Quasigroup Completion Problem.\n\nThe Quasigroup Existence Problem is a classic constraint satisfaction problem that involves finding a multiplication table for a quasigroup of a given order. A quasigroup is a mathematical structure that satisfies certain properties, similar to a group, but without the requirement of associativity.\n\nIn this problem, we are given an integer `n`, and we need to find an `n x n` multiplication table, represented by the `quasiGroup` array, such that each element in the table is an integer between 0 and `n-1`. The table must satisfy certain constraints, which are:\n\n* Each row and column must contain each integer between 0 and `n-1` exactly once (i.e., all rows and columns must be different).\n* The table must satisfy certain multiplication axioms, such as `(b*a)*b = a*(b*a)` or `(j*i)*(i*j) = i`.\n* The table must also satisfy some implied constraints, such as idempotency (i.e., `quasiGroup[i,i] = i`) and anti-Abelian properties (i.e., `quasiGroup[i,j] != quasiGroup[j,i]` for `i != j`).\n\nThe decision variables in this problem are the elements of the `quasiGroup` array, which represent the multiplication table.\n\nThe objective of this problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\n\nThe problem is challenging because the constraints are complex and interconnected, making it difficult to find a solution that satisfies all of them. The Quasigroup Existence Problem has applications in various fields, including combinatorics, algebra, and computer science.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0086f58-4423-449b-88f7-db9eaf2bf9aa": {"__data__": {"id_": "a0086f58-4423-449b-88f7-db9eaf2bf9aa", "embedding": null, "metadata": {"model_name": "queens"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "queens_medium", "node_type": "4", "metadata": {"model_name": "queens"}, "hash": "fbca9cd67886fbd88f859bad7920dfbb365cb4ea41480b695390104fbc2b801a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is the N-Queens Problem.\n\nThe N-Queens Problem is a classic constraint satisfaction problem where we need to place N queens on an NxN chessboard such that no queen attacks another queen. A queen can attack another queen if they are in the same row, column, or diagonal.\n\nThe main decision variables in this problem are the positions of the queens on the chessboard, represented by the array `queens` of size N, where `queens[i]` represents the column number of the queen in the i-th row.\n\nThe key constraints in this problem are:\n\n* Each queen must be placed in a different column (ensured by the `all_different` constraint).\n* No two queens can be in the same diagonal (ensured by the constraints `queens[i] + i != queens[j] + j` and `queens[i] - i != queens[j] - j`).\n\nThe objective of this problem is to find a feasible solution that satisfies all the constraints, i.e., to find a way to place N queens on an NxN chessboard such that no queen attacks another queen.\n\nNote that there is no objective function to minimize or maximize in this problem, as the goal is simply to find a feasible solution.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8395661d-8526-42fc-be7c-d419262a5490": {"__data__": {"id_": "8395661d-8526-42fc-be7c-d419262a5490", "embedding": null, "metadata": {"model_name": "rcpsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rcpsp_medium", "node_type": "4", "metadata": {"model_name": "rcpsp"}, "hash": "87b1ae67f24590bf456276b7c2e8d842bbe188fb57222219682b08a6e0fe072f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Resource-Constrained Project Scheduling Problem (RCPSP)\n\nThe Resource-Constrained Project Scheduling Problem is a classic constraint programming problem that involves scheduling a set of tasks with given durations and resource requirements, subject to resource availability and precedence constraints.\n\nThe main decision variables in this problem are the start times of each task, represented by the array `s` of variables. Each `s[t]` represents the start time of task `t`.\n\nThe key constraints in this problem are:\n\n* Precedence constraints: Each task can only start after its predecessors have finished. This is ensured by the constraint `s[pre[p,1]] + d[pre[p,1]] <= s[pre[p,2]]`, which states that the start time of a task plus its duration must be less than or equal to the start time of its successor.\n* Resource constraints: The total resource usage of all tasks at any given time must not exceed the available resource limit. This is ensured by the cumulative constraint, which is implemented using the `cumulative` function from the `cumulative.mzn` library.\n\nThe objective of the problem is to minimize the maximum completion time of all tasks, which is equivalent to minimizing the project duration. This is achieved by minimizing the maximum value of `s[t] + d[t]` across all tasks `t`.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de197fb7-3c53-4e96-870b-f0f3ef7f51db": {"__data__": {"id_": "de197fb7-3c53-4e96-870b-f0f3ef7f51db", "embedding": null, "metadata": {"model_name": "rehearsal"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rehearsal_medium", "node_type": "4", "metadata": {"model_name": "rehearsal"}, "hash": "337760617d7e9b5209384e3d92b9f0fac1c286d715cd91faade7e09fbbd3af9f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is called the \"Rehearsal Scheduling Problem\".\n\nThis problem is about scheduling a rehearsal for a concert where nine pieces of music need to be rehearsed by five orchestra players. Each piece has a different duration and requires a different combination of players. The goal is to find an order in which the pieces can be rehearsed to minimize the total time that players are waiting to play, i.e., the total time when players are present but not currently playing.\n\nThe main decision variables are:\n\n* `rehearsal_order`: an array of variables representing the order in which the pieces are rehearsed.\n* `waiting_time`: an array of variables representing the total waiting time for each player.\n* `p_from` and `p_to`: arrays of variables representing the first and last pieces that each player is involved in.\n\nThe key constraints are:\n\n* Each piece is rehearsed exactly once (all_different constraint).\n* Each player arrives at the rehearsal immediately before the first piece they are involved in and departs immediately after the last piece they are involved in.\n* The waiting time for each player is calculated as the sum of the durations of the pieces they are not playing in, but are present for.\n\nThe objective is to minimize the total waiting time for all players.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1368, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0780c77c-19d4-462d-82eb-1a23837bf9dd": {"__data__": {"id_": "0780c77c-19d4-462d-82eb-1a23837bf9dd", "embedding": null, "metadata": {"model_name": "restart"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "restart_medium", "node_type": "4", "metadata": {"model_name": "restart"}, "hash": "a07b350b9133580db996bf41dfd2ff5a646d77aa37301fd925c83cd1c088b31b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Social Golfer Problem.\n\nThis problem is about scheduling a group of golfers into pairs to play golf over a series of weeks, subject to certain constraints.\n\nThe main decision variables are an array of 10 variables, x, where each x[i] represents the golfing partner of golfer i.\n\nThe key constraints are:\n\n* Each golfer must have a different partner each week (i.e., no golfer can play with the same partner more than once).\n* Golfers 2-10 can only play with partners 1-9 (i.e., golfer 1 is the most popular golfer and can play with anyone, while the others have limited options).\n* Golfer 1 must play with a partner 9 or higher (i.e., golfer 1 is very popular and can only play with the top-ranked golfers).\n\nThe objective of the problem is to find a schedule that satisfies these constraints.\n\nNote that the three models are equivalent and represent the same problem. The differences between them are in the way the constraints are formulated and the search strategy used to solve the problem.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c7fc968-0d34-4778-ab44-452b47775eb7": {"__data__": {"id_": "1c7fc968-0d34-4778-ab44-452b47775eb7", "embedding": null, "metadata": {"model_name": "RosteringProblem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "RosteringProblem_medium", "node_type": "4", "metadata": {"model_name": "RosteringProblem"}, "hash": "35b98306b172422be7a5c3c7c62fc08cd8fe1066f1a75ff48465222e19c6ef56", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Nurse Rostering Problem**\n\nThe Nurse Rostering Problem is a classic constraint programming problem that involves creating a schedule for nurses to work in a hospital. The goal is to assign nurses to shifts while satisfying various constraints, such as ensuring that each shift has the required number of staff, and that nurses get adequate rest days.\n\n**Decision Variables:**\n\nThe main decision variables in this problem are the `plan1d`, `plan2d`, and `plan2dT` arrays, which represent the assignment of nurses to shifts. Each element in these arrays corresponds to a specific day and shift, and its value indicates the type of shift assigned (early, late, night, or rest day).\n\n**Key Constraints:**\n\n1. **Weekend constraint**: Saturday and Sunday shifts must be the same for each week.\n2. **Shift repetition constraint**: Each shift type must have a minimum and maximum number of consecutive assignments.\n3. **Rest day constraint**: At least two rest days must be assigned every two weeks.\n4. **Shift order constraint**: The order of shifts must follow a forward-rotating principle, where an early shift can only be followed by a shift with the same or higher value, or a rest shift.\n5. **Shift requirement constraint**: The number of staff required for each shift must be satisfied.\n\n**Objective:**\n\nThe objective of this problem is to find a feasible schedule that satisfies all the constraints. There is no explicit objective function to minimize or maximize, as the goal is to find a valid solution that meets all the requirements.\n\nIn summary, the Nurse Rostering Problem is a complex constraint programming problem that involves assigning nurses to shifts while satisfying various constraints related to shift repetition, rest days, shift order, and staff requirements.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a72e571-60e2-454d-bb78-a771cec2765f": {"__data__": {"id_": "3a72e571-60e2-454d-bb78-a771cec2765f", "embedding": null, "metadata": {"model_name": "sb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sb_medium", "node_type": "4", "metadata": {"model_name": "sb"}, "hash": "96ba0c2f30e8e1974d9256edfe82a242cb898b920dc86db6e93aa2834afb792d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Solitaire Battleships**\n\nSolitaire Battleships is a classic constraint programming problem that involves filling a partially filled board with ships, respecting certain constraints.\n\n**Decision Variables and Their Representation**\n\nThe main decision variables in this problem are:\n\n* `board`: a 2D array representing the board, where each cell can take one of 7 possible values (water, submarine, left/right/top/bottom of a ship, or middle of a ship).\n* `fill`: a 2D array indicating which pieces on the board are part of a ship.\n* `npiece`: an array representing the number of each type of piece on the board.\n\n**Key Constraints**\n\nThe key constraints in this problem are:\n\n* **Hints**: The initial board configuration must be respected, i.e., if a cell has a hint, it must be filled with the corresponding piece.\n* **Spacing**: There must be gaps between ships, and ships cannot touch each other diagonally.\n* **Ship Shape**: Each ship must have a valid shape, with left and right ends, top and bottom ends, and middle pieces.\n* **Piece Sums**: The number of each type of piece on the board must match the given sums.\n* **Row and Column Sums**: The number of filled cells in each row and column must match the given sums.\n\n**Objective**\n\nThe objective of the problem is to find a valid configuration of the board that satisfies all the constraints.\n\nIn essence, the problem is to fill a partially filled board with ships, respecting the given constraints, to create a valid Solitaire Battleships puzzle solution.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1600, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "852ceff8-493b-40cf-a61a-ab113c4d29b7": {"__data__": {"id_": "852ceff8-493b-40cf-a61a-ab113c4d29b7", "embedding": null, "metadata": {"model_name": "schur"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "schur_medium", "node_type": "4", "metadata": {"model_name": "schur"}, "hash": "a030f32e5e9228354e8745895e9ee845b431ba6459a71b4a4587f921a0d57f24", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Schur's Numbers Problem\n\nSchur's Numbers Problem is a classic constraint programming problem that involves placing labeled balls into boxes subject to certain constraints.\n\nThe problem is about distributing `n` balls, labeled from 1 to `n`, into `c` boxes such that no box contains a triple of balls `{x, y, z}` where `x + y = z`. In other words, the problem seeks to find an assignment of balls to boxes that avoids any arithmetic progression of length three.\n\nThe main decision variables in this problem are the `box` array, where `box[i]` represents the box number that ball `i` is assigned to.\n\nThe key constraints in this problem are:\n\n* For any two balls `i` and `j`, if `i + j` is also a ball, then `i` and `j` cannot be in the same box, and `i` and `i + j` cannot be in the same box, and `j` and `i + j` cannot be in the same box. This ensures that no box contains a triple of balls that form an arithmetic progression.\n\nThe objective of this problem is to find a feasible assignment of balls to boxes that satisfies the constraints, rather than optimizing a specific objective function. The `solve satisfy` statement in the model indicates that the goal is to find a solution that satisfies all the constraints, rather than minimizing or maximizing a particular objective.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8684a37-c67d-4d73-b23e-6eda40c66edb": {"__data__": {"id_": "f8684a37-c67d-4d73-b23e-6eda40c66edb", "embedding": null, "metadata": {"model_name": "setselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "setselect_medium", "node_type": "4", "metadata": {"model_name": "setselect"}, "hash": "c66657f10a67494d42b1feafff97a8c415d77be60a174291b658d48b8e7361d2", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Set Selection Problem.\n\nThe Set Selection Problem is about selecting a subset of elements from a larger set, subject to certain constraints. The goal is to maximize the sum of the selected elements.\n\nThe main decision variables in this problem are the elements that are selected, represented by the set `x` in the models. In some models, `x` is an array of variables, where each variable represents an element that may or may not be selected.\n\nThe key constraints in this problem are:\n\n* Each subset `s[i]` can have at most one element in common with the selected set `x`. This is represented by the constraint `card(x intersect s[i]) <= 1`.\n* In some models, the cardinality of the selected set `x` is fixed to `u`, represented by the constraint `card(x) = u`.\n* In other models, the selected set `x` is represented as an array of variables, and constraints are added to ensure that the variables are distinct and non-decreasing.\n\nThe objective of the problem is to maximize the sum of the selected elements, represented by the expression `sum(i in x)(i)` or `sum(x)`.\n\nIn summary, the Set Selection Problem is about selecting a subset of elements from a larger set, subject to constraints on the overlap with predefined subsets, and maximizing the sum of the selected elements.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7b891f4-2d50-447d-b151-d8e6eaf563f8": {"__data__": {"id_": "d7b891f4-2d50-447d-b151-d8e6eaf563f8", "embedding": null, "metadata": {"model_name": "shipping"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "shipping_medium", "node_type": "4", "metadata": {"model_name": "shipping"}, "hash": "4e1fbad6928115ab32ae468d13e5a5260b696ef8f22e2167d3d112590ba64b12", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Transportation Problem.\n\nThis problem is about finding the most cost-effective way to transport goods from multiple factories to multiple warehouses, while meeting the demand of each warehouse and not exceeding the production capacity of each factory.\n\nThe main decision variables are the `ship` variables, which represent the quantity of goods to be shipped from each factory to each warehouse.\n\nThe key constraints are:\n\n* Each warehouse must receive at least as many goods as it demands.\n* Each factory cannot ship more goods than it produces.\n* The quantity of goods shipped from each factory to each warehouse must be non-negative.\n\nThe objective is to minimize the total transportation cost, which is calculated by multiplying the cost of shipping from each factory to each warehouse by the quantity of goods shipped.\n\nIn essence, the problem is about finding the optimal assignment of goods from factories to warehouses that meets the demand and production constraints while minimizing the total transportation cost.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6d68786-5ea2-4660-8478-859411b1e45e": {"__data__": {"id_": "a6d68786-5ea2-4660-8478-859411b1e45e", "embedding": null, "metadata": {"model_name": "simple-prod-planning"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "simple-prod-planning_medium", "node_type": "4", "metadata": {"model_name": "simple-prod-planning"}, "hash": "cd65328e97b0025529347daac796bbca3b43fbb2ef198a83154ac5d7589641d3", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Problem Name:** Production Planning Problem\n\n**Description:** The Production Planning Problem is a classic constraint programming problem that involves determining the optimal production quantities of different products to maximize profit, given limited resources and production constraints.\n\n**Decision Variables:**\n\n* `produce`: an array of variables representing the quantity of each product to produce.\n* `used`: an array of variables representing the amount of each resource used in production.\n\n**Key Constraints:**\n\n* The production of each product cannot exceed the available resources. This is ensured by the constraint that the total amount of each resource used (calculated by multiplying the production quantity of each product by its resource consumption) does not exceed the available capacity of that resource.\n* The production quantity of each product is bounded by the maximum possible production quantity, calculated based on the available resources and resource consumption.\n\n**Objective:**\n\nThe objective is to maximize the total profit, which is calculated by multiplying the production quantity of each product by its profit per unit.\n\nIn summary, the Production Planning Problem involves finding the optimal production quantities of different products to maximize profit, while ensuring that the production does not exceed the available resources and respecting the production constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "276d777f-57e7-4451-9af5-5bf1712bca8e": {"__data__": {"id_": "276d777f-57e7-4451-9af5-5bf1712bca8e", "embedding": null, "metadata": {"model_name": "sonet_problem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sonet_problem_medium", "node_type": "4", "metadata": {"model_name": "sonet_problem"}, "hash": "21a0f3fe418af783c789c8f1bc412dc6568e0209e6f5fa09238d3024bceae711", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    SONET Problem\n\nThe SONET problem is a network design problem that involves setting up a network between a set of nodes, where only certain nodes require a connection. The goal is to minimize the number of Add-Drop Multiplexers (ADMs) needed to establish these connections.\n\nThe main decision variables in this problem are the `rings` matrix, which represents the assignment of nodes to rings. Each element `rings[i, j]` is a boolean value indicating whether node `j` is assigned to ring `i`.\n\nThe key constraints in this problem are:\n\n* If there is a demand for communication between two nodes, they must be assigned to the same ring.\n* The number of nodes assigned to each ring must not exceed the ring's capacity.\n\nThe objective of the problem is to minimize the total number of ADMs used, which is equivalent to minimizing the sum of all elements in the `rings` matrix.\n\nIn other words, the problem is to find the most efficient way to connect the nodes that require communication, using the minimum number of rings and ADMs, while ensuring that each ring does not exceed its capacity.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4af3cd8-deb8-4c38-82bb-0b4e781e1819": {"__data__": {"id_": "f4af3cd8-deb8-4c38-82bb-0b4e781e1819", "embedding": null, "metadata": {"model_name": "square_pack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "square_pack_medium", "node_type": "4", "metadata": {"model_name": "square_pack"}, "hash": "9395edaff3b68170a55062c551228b8562f41ace225754356f854a3adb32d489", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **The 2D Bin Packing Problem**\n\nThe 2D Bin Packing Problem is a classic constraint programming problem that involves packing a set of rectangular items of different sizes into a single rectangular container, called a bin, in a way that minimizes the area of the bin.\n\n**Decision Variables:**\n\n* `height` and `width`: the dimensions of the bin\n* `x` and `y`: arrays of variables representing the x and y coordinates of the top-left corner of each item in the bin\n* `area`: the area of the bin, calculated as the product of `height` and `width`\n\n**Key Constraints:**\n\n* Each item must fit within the bin, meaning its top-right corner must be within the bin's boundaries.\n* No two items can overlap, meaning that for any two items, one must be to the left of, above, or below the other.\n\n**Objective:**\n\nThe objective is to minimize the area of the bin, which is equivalent to minimizing the product of `height` and `width`.\n\nIn this model, the problem is formulated as a minimization problem, where the goal is to find the smallest bin that can accommodate all the items. The model uses various constraints to ensure that the items fit within the bin and do not overlap, and the objective is to minimize the area of the bin.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a95a655-4cd5-4254-8ce9-96b74b42bc03": {"__data__": {"id_": "9a95a655-4cd5-4254-8ce9-96b74b42bc03", "embedding": null, "metadata": {"model_name": "stableroommates"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stableroommates_medium", "node_type": "4", "metadata": {"model_name": "stableroommates"}, "hash": "e24aba482071ea9669f8f32b53969430888bc335e2f2b5a0ea00c4d4e86892a2", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the **Stable Roommates Problem**.\n\nThis problem is about finding a stable matching between a set of agents, where each agent has a preference order over the other agents. The goal is to assign each agent to a roommate in a way that is stable, meaning that there is no pair of agents who would prefer to be roommates with each other rather than their current assignments.\n\nThe main decision variables in this problem are:\n\n* `a[i]`: the roommate assigned to agent `i`\n* `rank[i, j]`: the ranking of agent `j` in agent `i`'s preference order\n\nThe key constraints in this problem are:\n\n* Each agent is assigned to a roommate\n* An agent's roommate is one of their top preferences\n* If an agent prefers another agent to their current roommate, then the other agent must prefer their current roommate to the first agent\n* If an agent is indifferent between two roommates, then the two roommates must also be indifferent between each other\n\nThe objective of this problem is to find a stable matching, which means that there is no pair of agents who would prefer to be roommates with each other rather than their current assignments.\n\nIn other words, the problem is trying to find a way to assign roommates to each other in a way that is stable and respects the preferences of each agent.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f1ac1de-df4f-4382-86f2-5c3165b0ee15": {"__data__": {"id_": "7f1ac1de-df4f-4382-86f2-5c3165b0ee15", "embedding": null, "metadata": {"model_name": "steiner"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "steiner_medium", "node_type": "4", "metadata": {"model_name": "steiner"}, "hash": "49637cb150f062985d1b5f435ac5b5c4b4927b0227c57e5c61ea3737167f6c9c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The ternary Steiner problem.\n\nThis problem is about finding a collection of sets, each containing three elements, from a given set of `N` elements, such that any two sets have at most one element in common.\n\nThe main decision variables are the `Sets` array, which represents the collection of sets to be found. Each set is a subset of the `N` elements, and the model decides which elements to include in each set.\n\nThe key constraints are:\n\n* Each set must contain exactly three elements.\n* Any two sets must have at most one element in common.\n* The sets should be \"symmetrically broken\", meaning that the model should avoid duplicate solutions by imposing an ordering on the sets.\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\n\nIn other words, the goal is to find a way to partition the `N` elements into `NB = N*(N-1)/6` sets of three elements each, such that no two sets share more than one element. The problem is often used as a benchmark for constraint programming solvers.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aee21091-1b31-4526-831d-32483706d0c5": {"__data__": {"id_": "aee21091-1b31-4526-831d-32483706d0c5", "embedding": null, "metadata": {"model_name": "stoch_fjsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stoch_fjsp_medium", "node_type": "4", "metadata": {"model_name": "stoch_fjsp"}, "hash": "f7bde1ff67e6b070cbcd93920f4c47f5c22805f23540a457a6d0dc3f3d01c6f2", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Stochastic General Assignment Problem.\n\nThis problem is about assigning tasks to machines and scheduling them to minimize the expected makespan. The problem has two stages: in the first stage, tasks are assigned to machines, and in the second stage, the tasks are scheduled on the machines based on observed processing times.\n\nThe main decision variables are:\n\n* `start`: the start time of each task on each machine in each scenario\n* `dur`: the duration of each task on each machine in each scenario\n* `b`: a boolean variable indicating whether an optional task is executed or not\n\nThe key constraints are:\n\n* Precedence relations: each task must start after its predecessor has finished\n* Duration constraints: the duration of each task is determined by the observed processing time\n* Optional tasks' constraints: each optional task can be executed at most once, and if it is executed, its duration is fixed\n* Resource constraints: the total processing time of all tasks on each machine cannot exceed the machine's capacity\n\nThe objective is to minimize the expected makespan, which is the maximum completion time of all tasks across all scenarios.\n\nIn essence, this problem is about finding the best assignment and scheduling of tasks to machines to minimize the overall processing time, while taking into account the uncertainty in processing times and the availability of optional tasks.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ee6f9de-ee36-4990-93e4-370740f06d62": {"__data__": {"id_": "9ee6f9de-ee36-4990-93e4-370740f06d62", "embedding": null, "metadata": {"model_name": "submultisetsum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "submultisetsum_medium", "node_type": "4", "metadata": {"model_name": "submultisetsum"}, "hash": "5e6611591fdae8d89b44fb86e80f3982e1a9576789dbd500d497bd7b715105b9", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Subset Sum Problem.\n\nThis problem is about finding a subset of a given set of integers that adds up to a specific target sum.\n\nThe main decision variable is `selected`, which represents the subset of integers from the original set `number` that should be included to reach the target sum.\n\nThe key constraint is that the sum of the integers in the `selected` subset must equal the `target` value.\n\nThe objective of the problem is to find a feasible solution that satisfies the constraint, rather than minimizing or maximizing a specific objective function.\n\nIn other words, the goal is to find a subset of the given integers that adds up to the target sum, without considering any optimization criteria.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2d1b178-ba73-4f42-b6bb-a3daf50c7f04": {"__data__": {"id_": "c2d1b178-ba73-4f42-b6bb-a3daf50c7f04", "embedding": null, "metadata": {"model_name": "table_seating"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "table_seating_medium", "node_type": "4", "metadata": {"model_name": "table_seating"}, "hash": "8bc1128b069603ad34b2e6605b420f907f8984a13c1dc70cc82b3f6faa50f60c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Social Golfer Problem.\n\nThis problem is about assigning golfers to tables for a social golfing event. The goal is to seat golfers in a way that maximizes social interaction while respecting certain constraints.\n\nThe main decision variables are:\n\n* `table`: a 2D array that represents the assignment of golfers to tables. Each element `table[t]` is a set of golfers assigned to table `t`.\n* `seat`: a 1D array that represents the assignment of golfers to tables. Each element `seat[p]` is the table number assigned to golfer `p`.\n\nThe key constraints are:\n\n* Each table can have at most `S` golfers.\n* Each golfer must be assigned to exactly one table.\n* Couples (defined in the `couples` array) must not be seated at the same table.\n* Golfers in the `key` set must not be seated at the same table.\n\nThe objective is to minimize the sum of table numbers assigned to couples. In other words, the goal is to seat couples at tables with the lowest possible numbers, while respecting the constraints.\n\nThe problem is a classic example of a constraint satisfaction problem, and the Minizinc models provided use a combination of set variables, array variables, and constraints to model the problem. The `not_same_table` predicate is used to ensure that couples and golfers in the `key` set are not seated at the same table. The `global_cardinality_low_up` constraint is used to ensure that each table has at most `S` golfers.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9864d5c-959d-4d3f-be53-c12d64357e34": {"__data__": {"id_": "b9864d5c-959d-4d3f-be53-c12d64357e34", "embedding": null, "metadata": {"model_name": "teamselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "teamselect_medium", "node_type": "4", "metadata": {"model_name": "teamselect"}, "hash": "f163bf3286a38625694452a81718ac88c5e9ef58dca7fe036a6425bcfb39839c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Team Selection Problem.\n\nThis problem is about selecting three teams, Xavier, Yuri, and Zena, from a pool of 11 players, where each team must have exactly 6 players, including at least one goalie, two defenders, and two offenders. The goal is to maximize the total value of the selected players across all three teams.\n\nThe main decision variables are Xavier, Yuri, and Zena, which represent the sets of players selected for each team.\n\nThe key constraints are:\n\n* Each team must have exactly 6 players.\n* Each team must have at least one goalie, two defenders, and two offenders.\n* The intersection of any two teams cannot have more than 2 players in common.\n\nThe objective is to maximize the total value of the selected players across all three teams, where the value of each player is given by the value array.\n\nIn essence, the problem is about finding the optimal selection of players for each team, subject to the constraints, to maximize the overall value of the teams.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35872fb0-06f2-4479-8403-45c186fea5ee": {"__data__": {"id_": "35872fb0-06f2-4479-8403-45c186fea5ee", "embedding": null, "metadata": {"model_name": "template_design"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "template_design_medium", "node_type": "4", "metadata": {"model_name": "template_design"}, "hash": "e2f4efdf6c37f454831fa930c16f964b7d140374ca0253428499addcd801e336", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Template Design Problem**\n\nThe Template Design Problem is a classic constraint programming problem that involves allocating slots on templates to produce different variations of a product.\n\n**Decision Variables:**\n\n* `p[i, j]`: The number of slots allocated to variation `i` on template `j`.\n* `R[j]`: The number of pressings (or copies) of template `j`.\n* `Production`: The total number of pressings across all templates.\n* `Surplus`: The total surplus of production, which is the difference between the total production and the total demand.\n\n**Key Constraints:**\n\n* Each template has a fixed number of slots (`S`), and the total number of slots allocated to all variations on each template must equal `S`.\n* The total production of each variation must meet or exceed the demand for that variation.\n* The total surplus of production is limited by the total demand and the production capacity.\n* Symmetry constraints are used to reduce the search space by ensuring that variations with the same demand are treated equally.\n\n**Objective:**\n\nThe objective is to minimize the total production (`Production`) while meeting the demand for each variation and satisfying the constraints.\n\nIn summary, the Template Design Problem involves allocating slots on templates to produce different variations of a product, while minimizing the total production and meeting the demand for each variation.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "999dfd6c-7b58-46e2-bf45-e463294fd098": {"__data__": {"id_": "999dfd6c-7b58-46e2-bf45-e463294fd098", "embedding": null, "metadata": {"model_name": "toomany"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "toomany_medium", "node_type": "4", "metadata": {"model_name": "toomany"}, "hash": "952d7a7a5f4d4604c122f3f982df85b38ce91cb70a6a09d2ad1af31e8e3fe91b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Problem Name:** Production Planning Problem\n\n**Description:** This problem involves planning the production of different colored items on multiple machines, subject to various constraints and limitations. The goal is to maximize the total production while meeting the requirements and restrictions.\n\n**Decision Variables:** The main decision variables are `produce[m,c]`, which represent the quantity of items of color `c` produced on machine `m`.\n\n**Key Constraints:**\n\n* Each machine can produce at most `k` items per day.\n* The total production of each color must be within the specified lower and upper bounds (`l[c]` and `u[c]`).\n* If a machine produces white and black items, it cannot produce blue items.\n* The production of blue items on a machine cannot exceed the production of red items.\n* The production of red items on a machine must be a multiple of 4.\n* The production of white items on a machine must be a multiple of 3.\n\n**Objective:** The objective is to maximize the total production of all colors on all machines.\n\nIn essence, this problem involves allocating production capacities to different machines and colors while respecting various constraints and limitations, with the goal of maximizing overall production.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "286c9474-9c4b-40e5-9687-d426c9e116af": {"__data__": {"id_": "286c9474-9c4b-40e5-9687-d426c9e116af", "embedding": null, "metadata": {"model_name": "traffic_lights_table"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "traffic_lights_table_medium", "node_type": "4", "metadata": {"model_name": "traffic_lights_table"}, "hash": "6b2d1b5b75e22295da2f425f6894324258f7a270cfea2cf82eab5c47b2134d23", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Traffic Lights Problem.\n\nThis problem is about scheduling the traffic lights at a four-way junction to ensure safe and efficient traffic flow. The junction has eight traffic lights: four for vehicles and four for pedestrians. Each traffic light can be in one of four states: red, red-yellow, green, or yellow.\n\nThe main decision variables are:\n\n* V1 to V4, which represent the states of the traffic lights for vehicles\n* P1 to P4, which represent the states of the traffic lights for pedestrians\n\nThe key constraints are:\n\n* At any given time, the traffic lights for vehicles and pedestrians at adjacent roads must be in a safe and compatible state. For example, if the traffic light for vehicles on one road is green, the traffic light for pedestrians on the adjacent road must be red.\n* The traffic lights must follow a specific sequence to ensure smooth traffic flow.\n\nThe objective of the problem is to find a feasible schedule for the traffic lights that satisfies all the constraints.\n\nIn this model, the constraints are represented using quaternary constraints, which specify the allowed combinations of states for the traffic lights at adjacent roads. The model uses a table constraint to enforce these quaternary constraints. The objective is to find a solution that satisfies all the constraints, and the model uses the \"satisfy\" objective to achieve this.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2ea0e74-ebb5-468a-a8c2-a8b43cead64a": {"__data__": {"id_": "f2ea0e74-ebb5-468a-a8c2-a8b43cead64a", "embedding": null, "metadata": {"model_name": "TTPPV"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "TTPPV_medium", "node_type": "4", "metadata": {"model_name": "TTPPV"}, "hash": "d24b3b1162b5d5f623e6f8eb67260cb0ed0de4c2646a5a4422dfe4b54b42d0fb", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The Traveling Tournament Problem with Predefined Venues.\n\nThis problem is about scheduling a round-robin tournament where each team plays every other team exactly once, with the added constraint that the venue of each game has already been decided. The goal is to find a schedule that minimizes the total travel distance of all teams.\n\nThe main decision variables are:\n\n* `opponent[i,k]`: the team that team `i` plays against in round `k`\n* `venue[i,k]`: whether team `i` plays at home (1) or away (2) in round `k`\n* `travel[i,k]`: the distance team `i` travels to play in round `k` (including the return journey after the last round)\n\nThe key constraints are:\n\n* Each team plays every other team exactly once\n* A team cannot play against itself\n* The venue of each game is already decided and must be respected\n* Each team has a different opponent in each round\n* Each round has a different set of opponents\n* No team can have more than three consecutive home games or away games\n* The schedule is symmetric, so reversing the rounds would result in the same total travel distance\n\nThe objective is to minimize the total travel distance of all teams, which is calculated as the sum of the distances traveled by each team in each round.\n\nIn essence, this problem is about finding the most efficient schedule for a tournament, taking into account the pre-defined venues and the need to minimize travel distances.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78dc01c3-2e2d-406f-9a28-231e45c1d2d9": {"__data__": {"id_": "78dc01c3-2e2d-406f-9a28-231e45c1d2d9", "embedding": null, "metadata": {"model_name": "vessel-loading"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "vessel-loading_medium", "node_type": "4", "metadata": {"model_name": "vessel-loading"}, "hash": "0c270cc118090dbafb372b0034a4924294d72d991c33880ea4f97b10f060f8d7", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    Vessel Loading Problem.\n\nThe Vessel Loading Problem is a classic constraint programming problem that involves loading containers of different sizes and classes onto a vessel with a fixed deck width and length, while ensuring that certain constraints are satisfied.\n\nThe main decision variables in this problem are:\n\n* `Left[c]` and `Right[c]`: the leftmost and rightmost points of container `c` on the deck, respectively.\n* `Bottom[c]` and `Top[c]`: the bottommost and topmost points of container `c` on the deck, respectively.\n* `orientation[c]`: a binary variable indicating whether container `c` is turned 90 degrees (orientation = 2) or not (orientation = 1).\n\nThe key constraints in this problem are:\n\n* Each container must be placed within the deck boundaries.\n* Containers of different classes must be separated by a minimum allowed distance, specified by the `separation` array.\n* Containers cannot overlap with each other.\n\nThe objective of this problem is to find a feasible arrangement of containers on the deck that satisfies all the constraints.\n\nNote that the provided model does not specify an objective function to be minimized or maximized, which is unusual for a constraint programming problem. Typically, the objective would be to minimize the unused space on the deck or to maximize the number of containers loaded. However, the model focuses on finding a feasible solution that satisfies all the constraints, which is a common approach in constraint programming.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1567, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54ce8bfe-c30e-415b-b154-61f2c4171a98": {"__data__": {"id_": "54ce8bfe-c30e-415b-b154-61f2c4171a98", "embedding": null, "metadata": {"model_name": "warehouses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "warehouses_medium", "node_type": "4", "metadata": {"model_name": "warehouses"}, "hash": "6277befc256db9bfee593b6d55b1fd362e3240f64b062d78ebed2202a8efb35b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Warehouse Allocation Problem**\n\nThe Warehouse Allocation Problem is a classic constraint programming problem that involves determining the optimal allocation of warehouses to supply stores with goods.\n\n**Decision Variables:**\n\n* `supplier`: an array of variables that represents which warehouse supplies each store.\n* `open`: an array of boolean variables that indicates whether each warehouse is constructed or not.\n* `cost`: an array of variables that represents the transportation cost from each warehouse to each store.\n* `tot`: a variable that represents the total cost (construction cost plus transportation cost).\n\n**Key Constraints:**\n\n* Each store must be supplied by exactly one warehouse.\n* The total capacity of the open warehouses must be sufficient to supply all stores.\n* The transportation cost from each warehouse to each store is determined by the cost matrix.\n* The construction cost of each warehouse is fixed and must be paid if the warehouse is open.\n\n**Objective:**\n\nThe objective is to minimize the total cost, which is the sum of the construction costs of the open warehouses and the transportation costs from the warehouses to the stores.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5dcd085-b9b3-464b-9e03-9c18db807361": {"__data__": {"id_": "d5dcd085-b9b3-464b-9e03-9c18db807361", "embedding": null, "metadata": {"model_name": "water_buckets1"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "water_buckets1_medium", "node_type": "4", "metadata": {"model_name": "water_buckets1"}, "hash": "b1cb752bbcfd557a09a7fa36dcb78c51c188efec4bbcf773140b907e520bf9d6", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    The problem is known as the Water Buckets Problem.\n\nThis problem is about dividing a certain amount of water into two buckets of specific capacities using a series of pouring operations. The goal is to find the minimum number of transfers required to achieve a desired distribution of water in the buckets.\n\nThe main decision variables in this problem are the states of the buckets at each time step, represented by the `state` array in the model. Each element of the array represents the amount of water in a particular bucket at a particular time step.\n\nThe key constraints in this problem are:\n\n* The initial state of the buckets is specified by the `start` array.\n* The goal state of the buckets is specified by the `goal` array.\n* At each time step, the amount of water in each bucket must be within its capacity.\n* The total amount of water remains constant throughout the process.\n* At each step, exactly two buckets change their water levels.\n* After each transfer, either the source bucket becomes empty or the target bucket becomes full.\n\nThe objective of the problem is to minimize the number of transfers required to reach the goal state from the initial state.\n\nIn the second model, the problem is represented as a finite state machine, where the states are the possible configurations of the buckets, and the transitions between states are the pouring operations. The goal is to find the shortest path from the initial state to the goal state.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"all_interval_medium": {"node_ids": ["d60a0e1d-9d0a-41d8-b710-62dc4584ae5f"], "metadata": {"model_name": "all_interval"}}, "assign_medium": {"node_ids": ["1624373a-5c1c-46b3-9411-dfa002da1e0a"], "metadata": {"model_name": "assign"}}, "aust_color_medium": {"node_ids": ["ffbfe3e3-7377-4b20-b6bc-8b558f3065d9"], "metadata": {"model_name": "aust_color"}}, "bibd_medium": {"node_ids": ["c23f7cec-66b1-4e03-8f15-eebe62cda346"], "metadata": {"model_name": "bibd"}}, "bus_scheduling_csplib_medium": {"node_ids": ["3b8b2001-cbcd-477d-b810-ecfe4826ac31"], "metadata": {"model_name": "bus_scheduling_csplib"}}, "car_medium": {"node_ids": ["68b9a1e7-60d7-44bf-919f-7b41774dbc1b"], "metadata": {"model_name": "car"}}, "carpet_cutting_medium": {"node_ids": ["f742c982-4ba4-4731-a056-e015934cf610"], "metadata": {"model_name": "carpet_cutting"}}, "cell_block_medium": {"node_ids": ["8d6728e5-fe2f-44c6-a652-a408cfa38b81"], "metadata": {"model_name": "cell_block"}}, "clique_medium": {"node_ids": ["2dbaa887-8863-49c4-9fe7-b1dbdde5b720"], "metadata": {"model_name": "clique"}}, "cluster_medium": {"node_ids": ["8e560cb1-2e13-484f-b23e-43b790ba82f9"], "metadata": {"model_name": "cluster"}}, "compatible_assignment_medium": {"node_ids": ["5d12f342-cd64-4cfe-8fe1-7310b57108a3"], "metadata": {"model_name": "compatible_assignment"}}, "constrained_connected_medium": {"node_ids": ["94089677-3595-42e5-b3cf-eadbbec85dcf"], "metadata": {"model_name": "constrained_connected"}}, "crazy_sets_medium": {"node_ids": ["ea4b8d3e-e201-4c90-9c38-8d6ccea095b3"], "metadata": {"model_name": "crazy_sets"}}, "crossfigure_medium": {"node_ids": ["42c924de-58ac-4e30-9c10-aa3648b4be52"], "metadata": {"model_name": "crossfigure"}}, "curriculum_medium": {"node_ids": ["a74cdd2a-e9b1-4f65-86ed-ee3b47e575c3"], "metadata": {"model_name": "curriculum"}}, "diamond_free_degree_sequence_medium": {"node_ids": ["cb4514cf-a974-4c5e-aceb-020c085c9b82"], "metadata": {"model_name": "diamond_free_degree_sequence"}}, "doublechannel_medium": {"node_ids": ["1c57f2c5-078b-4183-ad7b-b5097216b22b"], "metadata": {"model_name": "doublechannel"}}, "fractions_medium": {"node_ids": ["0dd17cb2-e834-43c1-98c9-df3c2f8848af"], "metadata": {"model_name": "fractions"}}, "golfers_medium": {"node_ids": ["3b9651b4-125a-4eaa-ab86-70ebfb311267"], "metadata": {"model_name": "golfers"}}, "golomb_medium": {"node_ids": ["a95df690-285e-4dea-b4d2-a6fb9496fbbd"], "metadata": {"model_name": "golomb"}}, "graph_medium": {"node_ids": ["777f86c3-d039-41cc-a838-98e319f89c52"], "metadata": {"model_name": "graph"}}, "itemset_mining_medium": {"node_ids": ["83938db1-0ace-4dbe-9fe9-a199456e7dee"], "metadata": {"model_name": "itemset_mining"}}, "jobshop_medium": {"node_ids": ["30dd21bf-f4bf-4b1c-9eb2-a542759b210b"], "metadata": {"model_name": "jobshop"}}, "K4xP2Graceful_medium": {"node_ids": ["14098322-477a-4334-9c76-be443b59fec8"], "metadata": {"model_name": "K4xP2Graceful"}}, "killer_sudoku_medium": {"node_ids": ["71e992bf-7a8e-40c2-bd89-2782731a109f"], "metadata": {"model_name": "killer_sudoku"}}, "knapsack_medium": {"node_ids": ["3a4f2620-2a65-4ed2-8829-f53085c4a06c"], "metadata": {"model_name": "knapsack"}}, "langford_medium": {"node_ids": ["1e86fc0e-3c5d-4552-a898-4461833b710a"], "metadata": {"model_name": "langford"}}, "loan_medium": {"node_ids": ["405d3655-665f-4793-baae-889d5191a539"], "metadata": {"model_name": "loan"}}, "ltsp_medium": {"node_ids": ["666fe564-dc5e-47d6-9c75-052c31083428"], "metadata": {"model_name": "ltsp"}}, "magic_hexagon_medium": {"node_ids": ["712d9747-9ba7-4b6f-a97c-f178a1f569cd"], "metadata": {"model_name": "magic_hexagon"}}, "magic_sequence_medium": {"node_ids": ["5922ddb4-bc5d-44ad-aab4-476fdfa3ef15"], "metadata": {"model_name": "magic_sequence"}}, "maximum_density_still_life_medium": {"node_ids": ["6ec37072-8ae9-4480-a5bf-3c27cb460438"], "metadata": {"model_name": "maximum_density_still_life"}}, "mip_medium": {"node_ids": ["d9d18f6f-f70f-4882-92c6-95f673f39136"], "metadata": {"model_name": "mip"}}, "missing_solution_medium": {"node_ids": ["0149f4a7-0ac3-4b79-901b-65ee0a2fa32a"], "metadata": {"model_name": "missing_solution"}}, "nonogram_create_automaton2_medium": {"node_ids": ["19d9b3ba-52ce-4c94-b905-54f780598844"], "metadata": {"model_name": "nonogram_create_automaton2"}}, "nurses_medium": {"node_ids": ["36173e8e-881d-4c7a-a87c-0204b71ade0a"], "metadata": {"model_name": "nurses"}}, "opd_medium": {"node_ids": ["0f7783a0-da56-447e-b457-cf1d10155a7b"], "metadata": {"model_name": "opd"}}, "partition_medium": {"node_ids": ["9858ce87-6b7c-4eed-8612-c335e13b4850"], "metadata": {"model_name": "partition"}}, "photo_medium": {"node_ids": ["1e65c94c-8f68-4be5-b627-ca53dbbc6eb7"], "metadata": {"model_name": "photo"}}, "project_scheduling_medium": {"node_ids": ["1bce54c8-abc9-44f5-b902-3a9eee716c25"], "metadata": {"model_name": "project_scheduling"}}, "QuasigroupCompletion_medium": {"node_ids": ["567896c9-bc02-41d9-977b-9051a00e07d1"], "metadata": {"model_name": "QuasigroupCompletion"}}, "QuasiGroupExistence_medium": {"node_ids": ["cd78bf0b-cb21-4ba7-932d-4daf1b98a5e3"], "metadata": {"model_name": "QuasiGroupExistence"}}, "queens_medium": {"node_ids": ["a0086f58-4423-449b-88f7-db9eaf2bf9aa"], "metadata": {"model_name": "queens"}}, "rcpsp_medium": {"node_ids": ["8395661d-8526-42fc-be7c-d419262a5490"], "metadata": {"model_name": "rcpsp"}}, "rehearsal_medium": {"node_ids": ["de197fb7-3c53-4e96-870b-f0f3ef7f51db"], "metadata": {"model_name": "rehearsal"}}, "restart_medium": {"node_ids": ["0780c77c-19d4-462d-82eb-1a23837bf9dd"], "metadata": {"model_name": "restart"}}, "RosteringProblem_medium": {"node_ids": ["1c7fc968-0d34-4778-ab44-452b47775eb7"], "metadata": {"model_name": "RosteringProblem"}}, "sb_medium": {"node_ids": ["3a72e571-60e2-454d-bb78-a771cec2765f"], "metadata": {"model_name": "sb"}}, "schur_medium": {"node_ids": ["852ceff8-493b-40cf-a61a-ab113c4d29b7"], "metadata": {"model_name": "schur"}}, "setselect_medium": {"node_ids": ["f8684a37-c67d-4d73-b23e-6eda40c66edb"], "metadata": {"model_name": "setselect"}}, "shipping_medium": {"node_ids": ["d7b891f4-2d50-447d-b151-d8e6eaf563f8"], "metadata": {"model_name": "shipping"}}, "simple-prod-planning_medium": {"node_ids": ["a6d68786-5ea2-4660-8478-859411b1e45e"], "metadata": {"model_name": "simple-prod-planning"}}, "sonet_problem_medium": {"node_ids": ["276d777f-57e7-4451-9af5-5bf1712bca8e"], "metadata": {"model_name": "sonet_problem"}}, "square_pack_medium": {"node_ids": ["f4af3cd8-deb8-4c38-82bb-0b4e781e1819"], "metadata": {"model_name": "square_pack"}}, "stableroommates_medium": {"node_ids": ["9a95a655-4cd5-4254-8ce9-96b74b42bc03"], "metadata": {"model_name": "stableroommates"}}, "steiner_medium": {"node_ids": ["7f1ac1de-df4f-4382-86f2-5c3165b0ee15"], "metadata": {"model_name": "steiner"}}, "stoch_fjsp_medium": {"node_ids": ["aee21091-1b31-4526-831d-32483706d0c5"], "metadata": {"model_name": "stoch_fjsp"}}, "submultisetsum_medium": {"node_ids": ["9ee6f9de-ee36-4990-93e4-370740f06d62"], "metadata": {"model_name": "submultisetsum"}}, "table_seating_medium": {"node_ids": ["c2d1b178-ba73-4f42-b6bb-a3daf50c7f04"], "metadata": {"model_name": "table_seating"}}, "teamselect_medium": {"node_ids": ["b9864d5c-959d-4d3f-be53-c12d64357e34"], "metadata": {"model_name": "teamselect"}}, "template_design_medium": {"node_ids": ["35872fb0-06f2-4479-8403-45c186fea5ee"], "metadata": {"model_name": "template_design"}}, "toomany_medium": {"node_ids": ["999dfd6c-7b58-46e2-bf45-e463294fd098"], "metadata": {"model_name": "toomany"}}, "traffic_lights_table_medium": {"node_ids": ["286c9474-9c4b-40e5-9687-d426c9e116af"], "metadata": {"model_name": "traffic_lights_table"}}, "TTPPV_medium": {"node_ids": ["f2ea0e74-ebb5-468a-a8c2-a8b43cead64a"], "metadata": {"model_name": "TTPPV"}}, "vessel-loading_medium": {"node_ids": ["78dc01c3-2e2d-406f-9a28-231e45c1d2d9"], "metadata": {"model_name": "vessel-loading"}}, "warehouses_medium": {"node_ids": ["54ce8bfe-c30e-415b-b154-61f2c4171a98"], "metadata": {"model_name": "warehouses"}}, "water_buckets1_medium": {"node_ids": ["d5dcd085-b9b3-464b-9e03-9c18db807361"], "metadata": {"model_name": "water_buckets1"}}}}