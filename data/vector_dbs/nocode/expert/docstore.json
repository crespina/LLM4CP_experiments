{"docstore/metadata": {"all_interval_expert": {"doc_hash": "cb930f879c084ec05515d0fc02add96a8d309817019a328c748f8b6ed5df1487"}, "assign_expert": {"doc_hash": "e18f6efc765d73336fb69c975f62ccc5dddd97fa032800957c8b143a799a8881"}, "aust_color_expert": {"doc_hash": "630fed0093ec847c4ca7b85a23d3f5b0d003954d99d0572c3bdad3892ea2375a"}, "bibd_expert": {"doc_hash": "1af1ba7ebba8afcb71ce0a557ca7ab6fc441fb6f791898a68789d5496dc916e5"}, "bus_scheduling_csplib_expert": {"doc_hash": "dd6c9a75b93e404c88dcf3347f29a49e45e696b325f4372f7bce9143b88f9c1a"}, "car_expert": {"doc_hash": "91ebd81a8f77e3b36cd98b38ac70d64ef0d4e46a60a0619339f35de5355eddb5"}, "carpet_cutting_expert": {"doc_hash": "7701235ccde17bff69cb6264a6e3698a306a110b81dee8b034d29615433de45a"}, "cell_block_expert": {"doc_hash": "ab569a38519794d2293d46a3cec8390cc09ebd62c69d9edbde3bf9bc4844e4de"}, "clique_expert": {"doc_hash": "ca4bea2e26d983227dd8995067122b98f484b6a28d63e4ffce6d96ef8bf00f84"}, "cluster_expert": {"doc_hash": "0dd164c8f841f0f4cc250d01ce891cc5171c99393d38c0f74a908a566409760a"}, "compatible_assignment_expert": {"doc_hash": "e5a0816d22e898b1c0ccba89ce2fdf7f7f91c3f5d3fc2616a795fb08731930a8"}, "constrained_connected_expert": {"doc_hash": "df87f3320f62289a7c97db42fcd430a80a64f2ff145aa78bedc1f00188332d85"}, "crazy_sets_expert": {"doc_hash": "cf6512bdb0e029b338b80e42180ace8f7199c94b7751f93c48b66c431980bc4c"}, "crossfigure_expert": {"doc_hash": "ec42310862cfd12a382ef15c3e659ba0b927f54c500d4e38f1aa9049b67b3e97"}, "curriculum_expert": {"doc_hash": "ded65b70444313ebfc6c1444db13e35a7b5f7864584c7d5dea4070341f90056a"}, "diamond_free_degree_sequence_expert": {"doc_hash": "a6e73d999896916bf99f18a1be7079d94f1d4102dfad951557d9309a685ae8d6"}, "doublechannel_expert": {"doc_hash": "7b14717e246a64d013d0f1b90b13976bee2699bb0fbbe58ccb9432705ac338bb"}, "fractions_expert": {"doc_hash": "554e5fb0777c7375cc0b37e6b323b96e669148d8b202a4bd41c280e7a0396223"}, "golfers_expert": {"doc_hash": "647fada069972309fb778d80f7d6880a9c8788b08402281fe773544eed85c777"}, "golomb_expert": {"doc_hash": "c71534330d50a77df4f882d943858c3d1f85ed5e9647097a35b31d978a60866a"}, "graph_expert": {"doc_hash": "12b4194f4eaa2f36f8fee38a1d70dd370b80687a3234f2ab1a041235ead32d25"}, "itemset_mining_expert": {"doc_hash": "7951ede1d7b9841f77f7ccfbdcf4c69e4b334ade03bd5c0d1827009946f76c88"}, "jobshop_expert": {"doc_hash": "fbfeb6b4a41381c8d460355cbe732b167b3113560ff4ed8e1e8bdea30b7c78ca"}, "K4xP2Graceful_expert": {"doc_hash": "979c48a6967ed69baa2ec7e168e2d6f5463b13ff7bf8f4af0e2f7858681e4226"}, "killer_sudoku_expert": {"doc_hash": "715a0862bdb3127a8ed6ae0a973941697b65cd4aa7112ab10706dca27be94ef8"}, "knapsack_expert": {"doc_hash": "68716e6aa5789fea38991882152c17b49e091aa54bcf0a01ce6bd25ec49b63c4"}, "langford_expert": {"doc_hash": "072e35588b918898bc9e8f261fab28857b169c8a1a965d3241ff4717915069bf"}, "loan_expert": {"doc_hash": "33f57376681324a89fd7b6814c4b576b72ad84dbc20bbd75f7fffed24a99304d"}, "ltsp_expert": {"doc_hash": "b8d836642ead2c845fad952527144920beea5cd2335f003eece17a9e8918d8d1"}, "magic_hexagon_expert": {"doc_hash": "6d40842836071dbbe39a677f840d605333e5138d1ad4df7b49aeca5a6f10c90b"}, "magic_sequence_expert": {"doc_hash": "f220b449c243754c99b7eec214d2c39695acb0a41a74b658ef5cdb0b42e3b471"}, "maximum_density_still_life_expert": {"doc_hash": "d6e1677610f5934889eb878a22fb3fdbbcdbdca23b955ffacc20e4cecdbd7782"}, "mip_expert": {"doc_hash": "ad334172865c818ebded189a2114981ed87bdede14afb8cd9bfd64fa3972ef6c"}, "missing_solution_expert": {"doc_hash": "5faae49d6acecd18277870cf8560e455b9f0f5f1105bf0e0c84f3d655fd4c80d"}, "nonogram_create_automaton2_expert": {"doc_hash": "e59d056924b40bacb5bddce8b53011190c23d3d70715142b91396eedc7118ce4"}, "nurses_expert": {"doc_hash": "82fc9040bac1ead915da4d941ddbd12e682415e7ff2b77b14f4ba90bbbed25b2"}, "opd_expert": {"doc_hash": "bab6daf89e12923cc66e908e19b91934622e199a49ad890b102e8268cc1c16dc"}, "partition_expert": {"doc_hash": "12dcefbd17cd7c6b302e9a4034780b4cbd19beed50b4c54d96004c3895f2663a"}, "photo_expert": {"doc_hash": "99590ecb8f8244dfcf685c47d92aff87b0ea2ab61b7c028fae770184c7294ec3"}, "project_scheduling_expert": {"doc_hash": "0c832f7315c05f5111d0a1f394d8c900b1704cbc969346cca70d9aad4742fe3d"}, "QuasigroupCompletion_expert": {"doc_hash": "5cc6c7c8ac6fc44aed4cd358e498638d239eb7578957e3596f19ac2d2762957c"}, "QuasiGroupExistence_expert": {"doc_hash": "b12a634e46c9c0d506d33ee96d6608be41d3f6553c663018f5a939d6739d9849"}, "queens_expert": {"doc_hash": "fbd280e5da76f031359deaed68bdf13cb5bcf239e9750fbcef9df50475206a17"}, "rcpsp_expert": {"doc_hash": "55ec018f32ef2b2b8dc0fa2b249c41919422f1a5bcea7fbcc611eb1af782e5d7"}, "rehearsal_expert": {"doc_hash": "bbe323381df8d51322c8a1316e1c4142615a1f4617d1e327286fb9aecb4b1720"}, "restart_expert": {"doc_hash": "bae67b515329113b306c7e28b877733d697fb4c01f50a08887a63e0387eb03af"}, "RosteringProblem_expert": {"doc_hash": "ade2204cb014c14e4fb4e747ac43ec821e9d6df147673d6337e747c18a46ffd0"}, "sb_expert": {"doc_hash": "48074b465a661dc58e29446ffb6ce1e10d4844eb0c348788b0029c88bcd030e7"}, "schur_expert": {"doc_hash": "1b0b312d749e4d4a1838d78fa94b3daf547cd6dd257096e308f4a70df193ffb8"}, "setselect_expert": {"doc_hash": "36ed410edb2f82a6373598a594e03b7c02915318ac521a71338ee267bf72fb7f"}, "shipping_expert": {"doc_hash": "39920e8b96594450ae8e4200ebdd38747dd60dc26a36beb1a996588db3d439be"}, "simple-prod-planning_expert": {"doc_hash": "381564e648bdacc13fafe37cfe23931037217ebe2100bee57b01c7aa700ab7a4"}, "sonet_problem_expert": {"doc_hash": "1563b2d21dd2adfd3ae60098f783183c8db1378b8f488459dfbc425c09499f0f"}, "square_pack_expert": {"doc_hash": "0a9513f736badc4428ad42a6d4939dcbbd6709e3569b17851b16e7049281e041"}, "stableroommates_expert": {"doc_hash": "4e698a88c56edfd93a2f061ad7fa0ce79a8fc61989cc5df74ae89ea2996d6362"}, "steiner_expert": {"doc_hash": "7d6b943bbd10ebdaff7df249ad882ef2f4541e12643806d74b04a2540bcace08"}, "stoch_fjsp_expert": {"doc_hash": "5a2fdad307283ab8ee839aae2199c5f339d3b76f3096aae225a3b78e685dd51c"}, "submultisetsum_expert": {"doc_hash": "0441f0ae7d3065275cee636895ebdeee2ca231511e072a521f39fa1bf0a926c3"}, "table_seating_expert": {"doc_hash": "8c58d5c6b88149a2cc8c908eec1efcbaadb2ce466e3367df29160f2619c072e7"}, "teamselect_expert": {"doc_hash": "acc27419888659a1a0efffed9afc8fbe18e77984898238286b691da42061c34a"}, "template_design_expert": {"doc_hash": "92e1fc822ba7a7483707174571addfcc54815ae7b064ce4eabe231257585d82e"}, "toomany_expert": {"doc_hash": "ee19cf361a2bd061b431a851ba66ebf71b20d7bb9317b491694c5c5ba018225b"}, "traffic_lights_table_expert": {"doc_hash": "773768a520182d4a11e86cd79896e18b5506f3e1e20d386a2f7a5ef19b532e3f"}, "TTPPV_expert": {"doc_hash": "9f9db16c03d0d4354910898c36323631caa557bf70b9902b161f9d28dac58b6c"}, "vessel-loading_expert": {"doc_hash": "2bd1d4fb25b57d348b7289c760d4488e28a2fcb95bb5dc0ef91c153b8f0d4c2e"}, "warehouses_expert": {"doc_hash": "ae97cb4ca7dc362696ea5ec3375d4148649bcc6b4725180fe13b0ba17c221fd8"}, "water_buckets1_expert": {"doc_hash": "c071eab6a88a47fcb9cce0c7de10653e8b8163372981fddadb41d02b9a5332b5"}, "a3a6c366-279b-4bea-9f34-1a5e96b9549c": {"doc_hash": "489aae93fe53f1da961fd4b88598ffac0631227a43e7248a4ae92cfe564ed7ef", "ref_doc_id": "all_interval_expert"}, "da8ae75c-4c1e-49dd-93ef-7db8c8909390": {"doc_hash": "bf44d86591311a2c01e6507778da5e7068ddf3620d30aa1ae511009a4bbed094", "ref_doc_id": "assign_expert"}, "177b2bb3-af08-4886-8c06-dde7a3909f9a": {"doc_hash": "3297d33d08de65112ead3eb47fa060944f9fd208a68109ae869163c2d51dc417", "ref_doc_id": "aust_color_expert"}, "316419ba-8fd7-4ac0-9dbe-8bcb610a8bb9": {"doc_hash": "8ca718929ea8c31d79298cb8164568ea3dea28a7bfaf91aea7414b58a42a1d93", "ref_doc_id": "bibd_expert"}, "1275375f-0fa1-41c7-bfae-37a9c22a21e8": {"doc_hash": "284d5e005d32e2ed65e4ae6d371f8832716f6bfab5f042cda59ad4257d3ecd81", "ref_doc_id": "bus_scheduling_csplib_expert"}, "c4e72729-51c4-4499-8c2c-3a845a5c8922": {"doc_hash": "bcfc7bb8988067d2911ac4c654fa2d00f6f1de16d23bf80d1a1d8097673bf64f", "ref_doc_id": "car_expert"}, "71e044cd-639e-4384-9bd3-979866c437e8": {"doc_hash": "2118f2b8b58ecfb994461ced3b77c4e2010072b219e09299fd761f0ec094dc07", "ref_doc_id": "carpet_cutting_expert"}, "a45e488d-47d7-40e0-8e7d-3ee64947f538": {"doc_hash": "547a9317417101d6ab6ccefd1b476b74652608afb84ab8ebd2b6e5cfb21504ab", "ref_doc_id": "cell_block_expert"}, "5d6b4b67-f22f-4487-9ab9-e13a9b2ebae9": {"doc_hash": "2a1c05add2cdb6ee3852a1b4baf75110a8494c1e8066fce0d522b9d58aee13f2", "ref_doc_id": "clique_expert"}, "4ecb19f4-d7dc-4e76-b1ad-52221054affc": {"doc_hash": "e4d1e6b821d81fb47dde20cb185a2fe1cf2779ce8e3d563e40ddcc01048715f1", "ref_doc_id": "cluster_expert"}, "f6d582a6-620e-4f27-8ac0-108801d9a806": {"doc_hash": "8e49a73f5258da1cd9e952eb01c0ac919d4fdaf2fa537b4f1fb6b76dacb3ab61", "ref_doc_id": "compatible_assignment_expert"}, "b0915c8d-547b-4248-af30-b40c2efb8fde": {"doc_hash": "138e1f3b2bcdafaefdd8f14c1c00928ba9e17e1bf9dcc216b02e919d14c8f2a9", "ref_doc_id": "constrained_connected_expert"}, "143fef9e-1b90-4658-877e-1f594f6c4db8": {"doc_hash": "7e1792ccd716a374be63e7d60ecf5571676a1819d3191396de51a49a7abd242a", "ref_doc_id": "crazy_sets_expert"}, "eb995c65-4a87-4968-816b-65599bd5d113": {"doc_hash": "483bdd80c2b5e4dadbcf291889a708b662ba8856ef5b3c0bfb5f0fc8988af897", "ref_doc_id": "crossfigure_expert"}, "d410710b-836a-45d1-b24a-af913ada17ea": {"doc_hash": "32cf7901b0663b096b19646a3ee9e06fbf3a1afca014ab62afcf23b28e1730df", "ref_doc_id": "curriculum_expert"}, "b49d1cd6-d6c0-4dd7-8978-3423ebf9a31a": {"doc_hash": "8aa3cbd87c9033082d7638acbbaa13f9c51847cea64e1925b75d2de3d548ff7f", "ref_doc_id": "diamond_free_degree_sequence_expert"}, "c1f7bf8e-7214-4077-ad34-de8d96d61951": {"doc_hash": "2fbdc4555079d0075afde2631145983bd560767e97feff6ef3ca91c0796711c0", "ref_doc_id": "doublechannel_expert"}, "f4d63661-be7e-4dde-a5ca-496cf227499f": {"doc_hash": "3c434caf297327c6440ef2383db859b09c37763fb649b6483c5e793e03105f0b", "ref_doc_id": "fractions_expert"}, "3c5e4fa8-8ebd-424e-b656-b5a57cf93815": {"doc_hash": "dceddb6619c1c186c03f9325093a89f00431244bdfaa8d7b55f1d9df13cd7c85", "ref_doc_id": "golfers_expert"}, "87ce9977-f5cc-469e-8bdb-c514d781b570": {"doc_hash": "0f59cca1a8352567eb9d9031a9ea71bf228e70717d80817aa47201d4d90b3d5f", "ref_doc_id": "golomb_expert"}, "a7a620bf-22ae-44ff-b70c-aaf48871df5b": {"doc_hash": "07d7c0484ab64b33fdbee556e338c68a406fba0f6f39da941dbb5ccf90e7d0d7", "ref_doc_id": "graph_expert"}, "77798d32-1e52-47c0-99da-af416ce85b27": {"doc_hash": "bce78d83e0e59ff0d7c0c2c0cc2ab420ca09bea5714884b49e0bdb3b2f8c61b6", "ref_doc_id": "itemset_mining_expert"}, "8b3ef458-0525-4233-939f-a44673431c10": {"doc_hash": "12ba3fe7f54794863964929f89730b0f32900c20e8ca78b647cb2b3a6343b401", "ref_doc_id": "jobshop_expert"}, "bd5e788c-f0bb-4777-b7d0-c03262f38a92": {"doc_hash": "90ab980062d8bc5efbc92ce300b3021317ba81ef3ce3cc9e2d1ab3a9c7b89b20", "ref_doc_id": "K4xP2Graceful_expert"}, "3b352137-ccf0-4696-85c6-af6ebec7fa2b": {"doc_hash": "5f3fdaca92ae6b98c6882e2ce8deb820ff077a936858f8a6335e0913efdabc35", "ref_doc_id": "killer_sudoku_expert"}, "2f611cb5-ab00-4be1-a9f6-d67aef7a926d": {"doc_hash": "a3f7766a2d9126f3435a960387c34b41b3345982b206c116d48c6fb073ca777a", "ref_doc_id": "knapsack_expert"}, "e642b588-645f-4b58-9157-3bea962fe3d5": {"doc_hash": "07ac2c7ec684ebd9a1d9da34cb8ba6e086d52485e6e5a680207d43bfce38941b", "ref_doc_id": "langford_expert"}, "bc55456e-ad0a-4378-b536-649ea8feb467": {"doc_hash": "4c17611cf6c9593edde9b1c156c7fbaea8cb2c81527cd8a401323e0ea3c0b0ef", "ref_doc_id": "loan_expert"}, "fec83baf-7c82-435a-b768-1ead200ba429": {"doc_hash": "71ac0d3e2e9c56791b62f89f037e5ee91c891bc15dc12fb6acc7029929e7fcf5", "ref_doc_id": "ltsp_expert"}, "7af76126-70ba-400c-bee6-696a9721b1fc": {"doc_hash": "f5a39bcc3e2ffa004ace10df9d6da7bc56edeb9faa2500a5d96f384e1582b08c", "ref_doc_id": "magic_hexagon_expert"}, "b3ed8872-0bb9-4310-a7b2-bbb13a8ce076": {"doc_hash": "7461fc0a84955500902d8c225570a801d762b123f5525adc642425fd54cd3e60", "ref_doc_id": "magic_sequence_expert"}, "228efb8c-1960-453f-96cd-eb8597e0ca5e": {"doc_hash": "d4069f9bd160cc602d49b2139b693c81129130c6560284874df07f1fd1655eae", "ref_doc_id": "maximum_density_still_life_expert"}, "3c39163c-332d-4fb8-8179-f3b70a44ce9a": {"doc_hash": "34cd7705afb90204d4803939ffeac72a9313514c6cebdff64b7717cf0f18550e", "ref_doc_id": "mip_expert"}, "a984c70e-bcf4-428c-831c-4db4d275db55": {"doc_hash": "856ada313ea81ec71e5f9160ab6df8ffaec7ebcdcebc950d8930612853c897bd", "ref_doc_id": "missing_solution_expert"}, "ff00872d-ec23-4f08-8b32-ee95cd89498c": {"doc_hash": "f22d876f71725aa8ade62b1e97caf03449d54e5be191b7d046b41081d06da7fe", "ref_doc_id": "nonogram_create_automaton2_expert"}, "8fe0372c-766b-418b-ac1b-e019ec8d189f": {"doc_hash": "7b365d37877c61ee1e74d9b91f002d0c0c9ef1c16f3822da826db0f15aec24ab", "ref_doc_id": "nurses_expert"}, "b60d56c5-0b42-47fe-a52a-a5e5c7082892": {"doc_hash": "b0e793af3fd37f342150a5a18fc103d1216cf2d1da6f627bc88cd6c049f3ab1b", "ref_doc_id": "opd_expert"}, "ebce1f6b-30e9-47cf-81f1-d8717ff56822": {"doc_hash": "53adb78f27d223a31088e4dd058d26617e32c96d4bb74d279a361ec3375f3083", "ref_doc_id": "partition_expert"}, "aa5137f0-641e-4056-ace7-0acb693e7ff4": {"doc_hash": "e978300aa747dcdeed4a2cb61c07dfb7c1b3b48b450f8e94eea7a0dec0bfc126", "ref_doc_id": "photo_expert"}, "e31b726c-ed91-49da-8e36-0d4f23cc780b": {"doc_hash": "61a9920a4779e0e4abc7949daa4fc3b568e033b33f453ae77a3e2128d033165f", "ref_doc_id": "project_scheduling_expert"}, "2aef254c-87f0-43f2-b06e-31739697841c": {"doc_hash": "6b6232d1201efe6dbbff6aee99133d7fe04b91af71b8cd4fcf44fc98942b4afe", "ref_doc_id": "QuasigroupCompletion_expert"}, "ca7363e7-e911-4be0-a777-85090ee3db08": {"doc_hash": "f45f122ab642b73e2a35a3003da660ec08231a6c1923a12c2f9b0195bcf14356", "ref_doc_id": "QuasiGroupExistence_expert"}, "0bf15221-d9bc-46d0-977c-5dbdd1960785": {"doc_hash": "dddd34098424f71cc53b1348bc982ae03f3d9dcb98fb2b241d4c2f45de951a34", "ref_doc_id": "queens_expert"}, "517c0780-9fa6-47af-a703-fc6a3e794448": {"doc_hash": "f0db3a0d698edd30594509f0b69c39d340e38703610c449c7b417845f8641796", "ref_doc_id": "rcpsp_expert"}, "c2ec588f-868a-40ab-bd43-2fefb0b5e4bf": {"doc_hash": "1ce3beaa5ad340f5ab6e8a3ed440382a18dfd4373649e0d24514b5b5835fd3ba", "ref_doc_id": "rehearsal_expert"}, "a8bf1adf-d2b5-413f-aa1d-d573e43f3992": {"doc_hash": "19826ef0f7d8894683c779f7c56c7faa56caff7ac4b6463630934dd1e7a38d53", "ref_doc_id": "restart_expert"}, "121ebeeb-637e-41e6-b316-f650eb95b4cb": {"doc_hash": "f6f6da47fe19304938c84931ad9d4396350ff37e476051ded2ea360f98391db2", "ref_doc_id": "RosteringProblem_expert"}, "4c521e34-1e88-45ed-8b2b-2f9c254f925b": {"doc_hash": "9ce1601f675c7c7da9288e57f8164637e186aa176b9a744ce87eaf7642b8bf40", "ref_doc_id": "sb_expert"}, "33c286db-cb60-494c-afe6-0273abc3787f": {"doc_hash": "b5d0708be748ca1b1bc3908ac34ca5ba242e54e8f58233fe1dc0ef70395cbe75", "ref_doc_id": "schur_expert"}, "91471fe6-d609-4a10-b7ee-5bcc0bd5c0da": {"doc_hash": "09fce10454e74448f96c6d2d807ddd40159e9ce0e5210310ca1222f276d50466", "ref_doc_id": "setselect_expert"}, "0ec471c4-0cd9-4759-9564-7513ca8c654b": {"doc_hash": "deb3aff2cb6bcf4c90a88a6040266aa96e44ccdbf862034f0d17c5909f42aa5e", "ref_doc_id": "shipping_expert"}, "73ae44f6-c029-4797-91a3-607e464de338": {"doc_hash": "dffc7ddf1ce0636b2250ac6d40949c81cd1d8c71e3644919183f9c9a9fbbf2f6", "ref_doc_id": "simple-prod-planning_expert"}, "3aace288-cf67-4fc0-b778-216b71a31fc7": {"doc_hash": "8d019585acc12d7a13d855c3adc12ae29af7f6a094569fcaded7348f97baeee0", "ref_doc_id": "sonet_problem_expert"}, "6f52ea9b-1132-4d64-a70c-afc56ea9e853": {"doc_hash": "525a3851f123e53a005fee6dbc5c0eaa1287e33ee613e28f5650479f951bd5ad", "ref_doc_id": "square_pack_expert"}, "187adeda-c3d7-4b2b-b4d7-42adce76ba6c": {"doc_hash": "0d5379b55db94228f75031ab9b170294418e7be3d5c82a6dfe899ee830af19bf", "ref_doc_id": "stableroommates_expert"}, "ba0f8fee-a6a8-4a33-9efc-c2cb5d5e537c": {"doc_hash": "46f3f8da5780522e10dcd3890ec3d4f1d663940f8c0a1717851b29facfe3e8ce", "ref_doc_id": "steiner_expert"}, "491dcf3d-dd07-475f-9c4a-22155be95a54": {"doc_hash": "147f502c9a0e1104c157b89e905511a987d4988f7e3ad5071f6d33b7076e7277", "ref_doc_id": "stoch_fjsp_expert"}, "86e7382b-31ba-4ff8-97b4-703021fe84cd": {"doc_hash": "2fb154b19b0ad736d9a586fdfa5b62b68c6c98d572ada401476ba4913762a276", "ref_doc_id": "submultisetsum_expert"}, "9dd54293-e7e5-41ef-a8e7-a184c1260587": {"doc_hash": "bc994e6d89d706e600e96eccbefe12db088135862b29278267bd8c6679d1777c", "ref_doc_id": "table_seating_expert"}, "1075c261-3954-409c-b72e-c8a40bc614ed": {"doc_hash": "5b42e4bad68909a02e271d52077648b679258cb51c43d07ee3180470182e4ac4", "ref_doc_id": "teamselect_expert"}, "b3d80f72-a219-46b0-a7fd-a1ec6b831312": {"doc_hash": "4d1be9d2234be04ee94bee30963d344e5893fe8476e3164d4f48ef9d607c74ad", "ref_doc_id": "template_design_expert"}, "08267fc1-3060-46f2-8001-7e7319ab7f7c": {"doc_hash": "ab41c99cb2821e5ed7db6caa63d310d7739358f302f8fd52ee4da367feec4aa6", "ref_doc_id": "toomany_expert"}, "557d2fb0-24ef-40e6-aec0-3bd54f02e525": {"doc_hash": "a02d153c9fa14188768287fe49d697f285c0e240b6e4cbefefe8e73e03ce37a6", "ref_doc_id": "traffic_lights_table_expert"}, "73683a10-74dd-4199-b871-fad3976780e3": {"doc_hash": "645313a4011decc1482c8a47fba3a8f4906a257b31469e634e1434268d0b452a", "ref_doc_id": "TTPPV_expert"}, "2cad03a0-c770-439b-813f-b6f92d2dbed9": {"doc_hash": "1097c750536f2e1507e84da9c13a01609abeaffd5685f620cfc07f2a1e2bb60e", "ref_doc_id": "vessel-loading_expert"}, "d45a87f5-f396-432c-a7ca-03a2dab353d7": {"doc_hash": "4b5efe7420447b1633e7106b252c811cbb6375a2a06c3f049d0479905b2ca944", "ref_doc_id": "warehouses_expert"}, "6e3aa236-d73b-475c-ba25-49cd36b103dc": {"doc_hash": "7f52b3b6f5d96c92c07ad9feac34c5189f0e1112f7bb25669a2fa63473378374", "ref_doc_id": "water_buckets1_expert"}}, "docstore/data": {"a3a6c366-279b-4bea-9f34-1a5e96b9549c": {"__data__": {"id_": "a3a6c366-279b-4bea-9f34-1a5e96b9549c", "embedding": null, "metadata": {"model_name": "all_interval"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "all_interval_expert", "node_type": "4", "metadata": {"model_name": "all_interval"}, "hash": "cb930f879c084ec05515d0fc02add96a8d309817019a328c748f8b6ed5df1487", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: All-Interval Series Problem\n\ndescription: The All-Interval Series Problem is a classic problem in constraint programming that involves finding a series of pitch classes such that each pitch class occurs exactly once and the musical intervals between neighboring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones).\n\nvariables: x = (x_1, ..., x_n) where x_i \u2208 {0, ..., n-1} for i = 1, ..., n; diffs = (diffs_1, ..., diffs_{n-1}) where diffs_i \u2208 {1, ..., n-1} for i = 1, ..., n-1\n\nThe variables x represent the pitch classes in the series, and the variables diffs represent the intervals between neighboring notes.\n\nconstraints: \nall_different(x) \u2227 all_different(diffs) \u2227 \n\u2200k \u2208 {1, ..., n-1} (diffs_k = |x_{k+1} - x_k|) \u2227 \nx_1 < x_{n-1} \u2227 diffs_1 < diffs_2\n\nThe constraints ensure that each pitch class occurs exactly once, each interval occurs exactly once, the intervals are calculated correctly, and some symmetry-breaking constraints are added to reduce the search space.\n\nobjective: The problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da8ae75c-4c1e-49dd-93ef-7db8c8909390": {"__data__": {"id_": "da8ae75c-4c1e-49dd-93ef-7db8c8909390", "embedding": null, "metadata": {"model_name": "assign"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "assign_expert", "node_type": "4", "metadata": {"model_name": "assign"}, "hash": "e18f6efc765d73336fb69c975f62ccc5dddd97fa032800957c8b143a799a8881", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Assignment Problem\n\ndescription: The Assignment Problem is a classic problem in combinatorial optimization and operations research. It involves finding the optimal assignment of a set of workers to a set of tasks, where each worker can be assigned to at most one task and each task can be assigned to at most one worker, in order to maximize the total profit or value of the assignments.\n\nvariables: x, px, task, worker\nx: an array of variables, where x[w] represents the task assigned to worker w\npx: an array of variables, where px[w] represents the profit of assigning worker w to task x[w]\ntask: an array of variables, where task[w] represents the worker assigned to task w\nworker: an array of variables, where worker[t] represents the task assigned to worker t\nThese variables represent the assignment of workers to tasks and the corresponding profits.\n\nconstraints: alldifferent(x), inverse(task,worker), alldifferent(worker)\nalldifferent(x): ensures that each worker is assigned to at most one task\ninverse(task,worker): ensures that each task is assigned to at most one worker and each worker is assigned to at most one task\nalldifferent(worker): ensures that each task is assigned to at most one worker\nThese constraints ensure that the assignment is one-to-one, i.e., each worker is assigned to at most one task and each task is assigned to at most one worker.\n\nobjective: maximize obj, where obj = sum(w in WORK)(px[w]) or obj = sum(t in COD)(profit[worker[t],t])\nThe objective is to maximize the total profit of the assignments, which is the sum of the profits of assigning each worker to their assigned task.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "177b2bb3-af08-4886-8c06-dde7a3909f9a": {"__data__": {"id_": "177b2bb3-af08-4886-8c06-dde7a3909f9a", "embedding": null, "metadata": {"model_name": "aust_color"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aust_color_expert", "node_type": "4", "metadata": {"model_name": "aust_color"}, "hash": "630fed0093ec847c4ca7b85a23d3f5b0d003954d99d0572c3bdad3892ea2375a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Graph Colouring Problem (Australia Map Colouring)\n\ndescription: The Graph Colouring Problem is a classic problem in constraint programming, where we need to assign colours to the regions of a map such that no two adjacent regions have the same colour. In this specific instance, we are colouring the map of Australia, which is divided into six regions: Western Australia (wa), Northern Territory (nt), South Australia (sa), Queensland (q), New South Wales (nsw), and Victoria (v), plus Tasmania (t).\n\nvariables: wa, nt, sa, q, nsw, v, t \u2208 {1, ..., nc} \nThese variables represent the colours assigned to each region of the Australia map, where nc is the total number of colours available.\n\nconstraints: wa \u2260 nt, wa \u2260 sa, nt \u2260 sa, nt \u2260 q, sa \u2260 q, sa \u2260 nsw, sa \u2260 v, q \u2260 nsw, nsw \u2260 v \nThese constraints ensure that no two adjacent regions have the same colour. For example, wa \u2260 nt means that Western Australia and Northern Territory cannot have the same colour.\n\nobjective: satisfy \nThe objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to find a colouring of the Australia map such that no two adjacent regions have the same colour. There is no objective to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "316419ba-8fd7-4ac0-9dbe-8bcb610a8bb9": {"__data__": {"id_": "316419ba-8fd7-4ac0-9dbe-8bcb610a8bb9", "embedding": null, "metadata": {"model_name": "bibd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bibd_expert", "node_type": "4", "metadata": {"model_name": "bibd"}, "hash": "1af1ba7ebba8afcb71ce0a557ca7ab6fc441fb6f791898a68789d5496dc916e5", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Balanced Incomplete Block Design (BIBD)\n\ndescription: A Balanced Incomplete Block Design (BIBD) is a combinatorial design in which a set of v elements is divided into b blocks, each of size k, such that each element occurs in r blocks, and every pair of elements occurs together in \u03bb blocks. The goal is to find a binary matrix representing the incidence of elements in blocks, satisfying these conditions.\n\nvariables: m[i, j] for i in {1, ..., v}, j in {1, ..., b} - m[i, j] represents whether element i is in block j (true) or not (false).\n\nconstraints: \n1. \u2200i in {1, ..., v} (\u2211(j in {1, ..., b}) bool2int(m[i, j]) = r) - Each element occurs in r blocks.\n2. \u2200j in {1, ..., b} (\u2211(i in {1, ..., v}) bool2int(m[i, j]) = k) - Each block contains k elements.\n3. \u2200i, i' in {1, ..., v} where i < i' (\u2211(j in {1, ..., b}) bool2int(m[i, j] \u2227 m[i', j]) = \u03bb) - Every pair of elements occurs together in \u03bb blocks.\n4. \u2200i in {1, ..., v-1} (lex_lesseq([m[i, j] | j in {1, ..., b}], [m[i+1, j] | j in {1, ..., b}])) - Break row symmetry in the incidence matrix.\n5. \u2200j in {1, ..., b-1} (lex_lesseq([m[i, j] | i in {1, ..., v}], [m[i, j+1] | i in {1, ..., v}])) - Break column symmetry in the incidence matrix.\n\nobjective: The problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1275375f-0fa1-41c7-bfae-37a9c22a21e8": {"__data__": {"id_": "1275375f-0fa1-41c7-bfae-37a9c22a21e8", "embedding": null, "metadata": {"model_name": "bus_scheduling_csplib"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bus_scheduling_csplib_expert", "node_type": "4", "metadata": {"model_name": "bus_scheduling_csplib"}, "hash": "dd6c9a75b93e404c88dcf3347f29a49e45e696b325f4372f7bce9143b88f9c1a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Bus Driver Scheduling Problem\n\ndescription: The Bus Driver Scheduling Problem is a classic problem in constraint programming that involves assigning bus drivers to shifts to cover a set of tasks (pieces of work) while minimizing the number of shifts used. Each shift has a set of tasks it covers, and the goal is to select a subset of shifts that covers each task exactly once.\n\nvariables: x = (x[1], ..., x[num_shifts]) \u2208 {0, 1}^num_shifts, tot_shifts \u2208 {0, ..., num_shifts}\n\nThe decision variables x[i] represent whether shift i is selected (x[i] = 1) or not (x[i] = 0). The variable tot_shifts represents the total number of shifts used in the solution.\n\nconstraints: \ntot_shifts = \u2211(x)\n\u2200j \u2208 {0, ..., num_work-1}, \u2211(i \u2208 {1, ..., num_shifts}) (x[i] * bool2int(j \u2208 shifts[i])) = 1\ntot_shifts \u2265 min_num_shifts\n\nThe first constraint sets the total number of shifts used to the sum of the x variables. The second constraint ensures that each task is covered exactly once by the selected shifts. The third constraint sets a lower bound on the total number of shifts used.\n\nobjective: Minimize tot_shifts", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4e72729-51c4-4499-8c2c-3a845a5c8922": {"__data__": {"id_": "c4e72729-51c4-4499-8c2c-3a845a5c8922", "embedding": null, "metadata": {"model_name": "car"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "car_expert", "node_type": "4", "metadata": {"model_name": "car"}, "hash": "91ebd81a8f77e3b36cd98b38ac70d64ef0d4e46a60a0619339f35de5355eddb5", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Car Sequencing Problem\n\ndescription: The Car Sequencing Problem is a classic problem in constraint programming that involves scheduling the production of cars with different options and classes. The goal is to find an optimal sequence of cars to produce, taking into account the availability of options and the constraints on the production process.\n\nvariables: \n`slot[s] \u2208 Classes, s \u2208 Slots` \n`setup[o, s] \u2208 {0, 1}, o \u2208 Options, s \u2208 Slots`\n\nThe decision variables are `slot` and `setup`. `slot[s]` represents the class of the car produced in slot `s`, and `setup[o, s]` represents whether option `o` is installed in the car produced in slot `s`.\n\nconstraints: \n`\u2200c \u2208 Classes, \u2211(s \u2208 Slots) (bool2int(slot[s] = c)) = numberPerClass[c]`\n`\u2200o \u2208 Options, s \u2208 1..numcars - windowSize[o] + 1, \u2211(j \u2208 s..s + windowSize[o]- 1) (setup[o, j]) \u2264 optMax[o]`\n`\u2200o \u2208 Options, s \u2208 Slots, setup[o, s] = optionsRequired[slot[s], o]`\n`\u2200o \u2208 Options, i \u2208 1..optionNumberPerClass[o], \u2211(s \u2208 1..(numcars - i * windowSize[o])) (setup[o, s]) \u2265 (optionNumberPerClass[o] - i * optMax[o])`\n\nThe constraints ensure that: \n- each class of cars is produced the required number of times, \n- the number of consecutive cars with a particular option does not exceed the maximum allowed, \n- each car is produced with the required options, \n- and the total number of cars with a particular option is at least the minimum required.\n\nobjective: \n`minimize z = \u2211(s \u2208 Classes) (s * slot[s])`\n\nThe objective is to minimize the total \"cost\" of the production sequence, where the cost of each car is proportional to its class.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71e044cd-639e-4384-9bd3-979866c437e8": {"__data__": {"id_": "71e044cd-639e-4384-9bd3-979866c437e8", "embedding": null, "metadata": {"model_name": "carpet_cutting"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "carpet_cutting_expert", "node_type": "4", "metadata": {"model_name": "carpet_cutting"}, "hash": "7701235ccde17bff69cb6264a6e3698a306a110b81dee8b034d29615433de45a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: 2D Rectangular Cutting Stock Problem\n\ndescription: The 2D Rectangular Cutting Stock Problem is a classic problem in operations research and computer science. It involves cutting a set of rectangles from a larger rectangular roll of material, such as wood or metal, to minimize waste. Each rectangle has a specific size and offset, and can be rotated by 90 degrees. The goal is to find the optimal placement of the rectangles on the roll to minimize the total length of the roll used.\n\nvariables: x[i], y[i], rot[i], l, kind[i]\n\n* x[i] and y[i] are the coordinates of the top-left corner of room i on the roll.\n* rot[i] is the rotation of room i (0, 90, 180, or 270 degrees).\n* l is the total length of the roll used.\n* kind[i] is the shape of room i (1, 2, 3, or 4).\n\nconstraints: \nforall(i in ROOM)(shape[i,rot[i]] != {}),\nforall(i in ROOM)(forall(r in ROFF)(r in shape[i,rot[i]] -> x[i] + d[r,1] + d[r,3] <= l /\\ y[i] + d[r,2] + d[r,4] <= h)),\nforall(i,j in ROOM where i < j)(forall(r1,r2 in ROFF)(r1 in shape[i,rot[i]] /\\ r2 in shape[j,rot[j]] -> x[i] + d[r1,1] + d[r1,3] <= x[j] + d[r2,1] \\/ x[j] + d[r2,1] + d[r2,3] <= x[i] + d[r1,1] \\/ y[i] + d[r1,2] + d[r1,4] <= y[j] + d[r2,2] \\/ y[j] + d[r2,2] + d[r2,4] <= y[i] + d[r1,2])),\ngeost_bb(2, rect_size, rect_offset, shapes, coords, kind, [0,0], [l,h]),\nkind[i] in {1,2,3,4}\n\n* The first constraint ensures that each room has a non-empty shape.\n* The second constraint ensures that each rectangle in a room does not exceed the roll's length and height.\n* The third constraint ensures that no two rooms overlap.\n* The fourth constraint is a geometric constraint that ensures the rectangles are placed correctly on the roll.\n* The fifth constraint ensures that each room has a valid shape.\n\nobjective: minimize l", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a45e488d-47d7-40e0-8e7d-3ee64947f538": {"__data__": {"id_": "a45e488d-47d7-40e0-8e7d-3ee64947f538", "embedding": null, "metadata": {"model_name": "cell_block"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cell_block_expert", "node_type": "4", "metadata": {"model_name": "cell_block"}, "hash": "ab569a38519794d2293d46a3cec8390cc09ebd62c69d9edbde3bf9bc4844e4de", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Prisoner Allocation Problem\n\ndescription: The Prisoner Allocation Problem is a classic constraint satisfaction problem that involves allocating prisoners to cells in a prison. The prison has a certain number of rows and columns, and each prisoner has a specific cost associated with being placed in a particular cell. The goal is to allocate the prisoners to cells in such a way that the total cost is minimized, while also satisfying certain constraints. These constraints include ensuring that prisoners who are deemed \"dangerous\" are not placed in adjacent cells, and that female prisoners are placed in cells in the top half of the prison, while male prisoners are placed in cells in the bottom half.\n\nvariables: r, c (arrays of variables, where r[p] and c[p] represent the row and column of prisoner p, respectively)\n\nThese variables represent the decision of which cell to allocate each prisoner to.\n\nconstraints: \nalldifferent([r[p] * m + c[p] | p in PRISONER]) (each prisoner must be allocated to a unique cell)\nforall(p in PRISONER, d in danger where p != d) (manhattan(r[p],c[p],r[d],c[d]) > 1) (dangerous prisoners must not be placed in adjacent cells)\nforall(p in female)(r[p] <= (n + 1) div 2) (female prisoners must be placed in cells in the top half of the prison)\nforall(p in male)(r[p] >= n div 2 + 1) (male prisoners must be placed in cells in the bottom half of the prison)\n\nThese constraints ensure that the allocation of prisoners to cells is valid and satisfies the rules of the prison.\n\nobjective: minimize totalcost (the total cost of allocating prisoners to cells)", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1679, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d6b4b67-f22f-4487-9ab9-e13a9b2ebae9": {"__data__": {"id_": "5d6b4b67-f22f-4487-9ab9-e13a9b2ebae9", "embedding": null, "metadata": {"model_name": "clique"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "clique_expert", "node_type": "4", "metadata": {"model_name": "clique"}, "hash": "ca4bea2e26d983227dd8995067122b98f484b6a28d63e4ffce6d96ef8bf00f84", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Maximum Clique Problem\n\ndescription: The Maximum Clique Problem is a classic problem in graph theory and computer science. Given a graph, the goal is to find the largest subset of vertices such that every pair of vertices in the subset is connected by an edge. This problem has applications in social network analysis, data mining, and computer vision, among others.\n\nvariables: c = (c_1, ..., c_n), size\n\nThe decision variables c_i (i = 1, ..., n) are boolean variables indicating whether vertex i is included in the clique or not. The variable size is an integer representing the total number of vertices in the clique.\n\nconstraints: size = \u2211_{i=1}^n c_i, \u2200i, j \u2208 {1, ..., n} where i < j and adj[i, j] = 0, c_i + c_j \u2264 1\n\nThe first constraint ensures that the size of the clique is equal to the sum of the boolean variables c_i. The second constraint ensures that for any pair of non-adjacent vertices i and j, at most one of them can be included in the clique.\n\nobjective: Maximize size", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1079, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ecb19f4-d7dc-4e76-b1ad-52221054affc": {"__data__": {"id_": "4ecb19f4-d7dc-4e76-b1ad-52221054affc", "embedding": null, "metadata": {"model_name": "cluster"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cluster_expert", "node_type": "4", "metadata": {"model_name": "cluster"}, "hash": "0dd164c8f841f0f4cc250d01ce891cc5171c99393d38c0f74a908a566409760a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Capacitated Clustering Problem\n\ndescription: The Capacitated Clustering Problem is a classic problem in constraint programming that involves dividing a set of points into a fixed number of clusters, such that the maximum distance between any two points in the same cluster does not exceed a certain limit, and the clusters are ordered in a way that the points in each cluster are contiguous.\n\nvariables: x (array of variables, where x[i] represents the cluster assignment of point i)\n\nThe decision variables x represent the assignment of each point to a cluster.\n\nconstraints: \n\u2200i,j in POINT where i < j /\\ x[i] = x[j], dist[i,j] \u2264 maxdiam \n\u2200i in 1..k-1, min([ j | j in POINT where x[j] = i]) < min([ j | j in POINT where x[j] = i+1])\nvalue_precede_chain([ i | i in 1..k ],x)\n\nThe first constraint ensures that the distance between any two points in the same cluster does not exceed the maximum diameter. The second constraint ensures that the points in each cluster are contiguous, i.e., the points in cluster i are all less than the points in cluster i+1. The third constraint is a global constraint that ensures the same contiguity property.\n\nobjective: maximize obj = min( i,j in POINT where i < j ) ( dist[i,j] + maxdist * (x[i] != x[j]) )\n\nThe objective is to maximize the minimum distance between any two points in different clusters, while also penalizing the assignment of points to different clusters.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6d582a6-620e-4f27-8ac0-108801d9a806": {"__data__": {"id_": "f6d582a6-620e-4f27-8ac0-108801d9a806", "embedding": null, "metadata": {"model_name": "compatible_assignment"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "compatible_assignment_expert", "node_type": "4", "metadata": {"model_name": "compatible_assignment"}, "hash": "e5a0816d22e898b1c0ccba89ce2fdf7f7f91c3f5d3fc2616a795fb08731930a8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Task Scheduling Problem\n\ndescription: The Task Scheduling Problem is a classic problem in constraint programming where we have a set of tasks and a set of workers. Each task has a profit associated with it, and each worker can perform a subset of tasks. The problem is to assign tasks to workers such that the total profit is maximized, subject to certain constraints.\n\nvariables: task[w] (w \u2208 W), worker[t] (t \u2208 T)\nThe decision variables are task[w] which represents the task assigned to worker w, and worker[t] which represents the worker assigned to task t.\n\nconstraints: \nalldifferent(task), \n\u2200w1, w2 \u2208 W (task[w1] \u2260 m \u2227 task[w2] = task[w1] + 1 \u2192 compatible[w1, w2]), \ninverse(task, worker), \n\u2200t \u2208 T (t mod m \u2260 0 \u2192 compatible[worker[t], worker[t+1]])\n\nThe constraints are: \n- Each worker is assigned a unique task (alldifferent(task)).\n- If two tasks are assigned to two consecutive workers, then the tasks must be compatible (compatible[w1, w2]).\n- The inverse constraint ensures that each task is assigned to a unique worker and each worker is assigned a unique task (inverse(task, worker)).\n- If two tasks are consecutive, then the workers assigned to these tasks must be compatible (compatible[worker[t], worker[t+1]]).\n\nobjective: Maximize \u2211(w \u2208 W) profit[w, task[w]]\nThe objective is to maximize the total profit by assigning tasks to workers such that the profit of each task is maximized.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0915c8d-547b-4248-af30-b40c2efb8fde": {"__data__": {"id_": "b0915c8d-547b-4248-af30-b40c2efb8fde", "embedding": null, "metadata": {"model_name": "constrained_connected"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "constrained_connected_expert", "node_type": "4", "metadata": {"model_name": "constrained_connected"}, "hash": "df87f3320f62289a7c97db42fcd430a80a64f2ff145aa78bedc1f00188332d85", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Constrained Clustering\n\ndescription: The Constrained Clustering problem is a variant of the traditional clustering problem, where we want to group nodes into clusters such that no two nodes in the same cluster are connected by a forbidden edge. The goal is to find the maximum number of edges that can be included in the clustering while satisfying the constraints.\n\nvariables: selected \u2286 EDGE, rep: NODE \u2192 NODE\nThe decision variables are `selected`, a subset of edges that will be included in the clustering, and `rep`, a function that assigns a representative node to each node in the graph.\n\nconstraints: \u2200e \u2208 EDGE: e \u2208 selected \u2192 rep[pre[e]] = rep[suc[e]], \u2200d \u2208 DPAIR: rep[first[d]] \u2260 rep[second[d]]\nThe constraints ensure that if an edge is selected, its endpoints must have the same representative node, and that the representative nodes of nodes connected by a forbidden edge must be different.\n\nobjective: maximize |selected|\nThe objective is to maximize the number of edges included in the clustering.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "143fef9e-1b90-4658-877e-1f594f6c4db8": {"__data__": {"id_": "143fef9e-1b90-4658-877e-1f594f6c4db8", "embedding": null, "metadata": {"model_name": "crazy_sets"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crazy_sets_expert", "node_type": "4", "metadata": {"model_name": "crazy_sets"}, "hash": "cf6512bdb0e029b338b80e42180ace8f7199c94b7751f93c48b66c431980bc4c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Error-Correcting Code Design\n\ndescription: The problem of Error-Correcting Code Design involves designing a set of codes such that any three codes have no element in common. This problem is a classic problem in constraint programming and is used in various applications such as coding theory and data storage.\n\nvariables: s[i], x[i,j]\n\nThe decision variables are s[i] which represents the i-th set of codes, and x[i,j] which represents the j-th element of the i-th set.\n\nconstraints: \ns[i] intersect s[j] intersect s[k] = {}, \nx[i,j] < x[i,j+1], \nx[i,j] < x[i+1,j], \no in s[i] -> exists(j in 1..c)(x[i,j] = o), \nx[i,j] in s[i]\n\nThe constraints ensure that any three sets have no element in common, the elements in each set are in increasing order, and the elements in each set are distinct. The last two constraints ensure that the x[i,j] variables are correctly assigned to the sets s[i].\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to design a set of codes such that any three codes have no element in common.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb995c65-4a87-4968-816b-65599bd5d113": {"__data__": {"id_": "eb995c65-4a87-4968-816b-65599bd5d113", "embedding": null, "metadata": {"model_name": "crossfigure"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "crossfigure_expert", "node_type": "4", "metadata": {"model_name": "crossfigure"}, "hash": "ec42310862cfd12a382ef15c3e659ba0b927f54c500d4e38f1aa9049b67b3e97", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Crossfigure Problem\n\ndescription: The Crossfigure problem is a numerical puzzle where a 9x9 grid is filled with numbers such that each row, column, and some predefined regions satisfy certain numerical clues. The clues are given in the form of arithmetic operations and comparisons involving the numbers in the grid.\n\nvariables: M[i,j] (i, j = 1..9), A1, A4, ..., A30, D1, D2, ..., D28\n\nThe variables M[i,j] represent the numbers in the 9x9 grid. The variables A1, A4, ..., A30 and D1, D2, ..., D28 represent the numerical answers to the clues, which are placed horizontally (Across) and vertically (Down) in the grid, respectively.\n\nconstraints: \nacross(M, A1, 4, 1, 1) /\\ ... /\\ down(M, D28, 2, 8, 8) /\\ \nA1 = 2 * A27 /\\ ... /\\ D28 = D21 + 27 /\\ \nM[1,5] = 0 /\\ ... /\\ M[9,5] = 0\n\nThe constraints can be divided into three categories: \n1. The across and down predicates, which ensure that the numbers in the grid are correctly placed to form the numerical answers to the clues.\n2. The clue constraints, which define the relationships between the numerical answers, such as arithmetic operations and comparisons.\n3. The blackbox constraints, which fix certain cells in the grid to be zero.\n\nobjective: The objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to fill the grid with numbers such that all the clues are satisfied. There is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d410710b-836a-45d1-b24a-af913ada17ea": {"__data__": {"id_": "d410710b-836a-45d1-b24a-af913ada17ea", "embedding": null, "metadata": {"model_name": "curriculum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "curriculum_expert", "node_type": "4", "metadata": {"model_name": "curriculum"}, "hash": "ded65b70444313ebfc6c1444db13e35a7b5f7864584c7d5dea4070341f90056a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Balanced Academic Curriculum Problem\n\ndescription: The Balanced Academic Curriculum Problem is a classic constraint programming problem that involves assigning courses to periods in a curriculum while satisfying various constraints. Each course has a certain load (number of credits) and prerequisites, and students have limits on the number of credits and courses they can take in a period. The goal is to assign courses to periods such that the total load in each period is minimized.\n\nvariables: $course_period[c] \\in \\{1, ..., n_periods\\} \\forall c \\in courses, x[p, c] \\in \\{0, 1\\} \\forall p \\in periods, c \\in courses, load[p] \\in [load_per_period_lb, load_per_period_ub] \\forall p \\in periods, objective \\in [load_per_period_lb, load_per_period_ub]$\n\nThe decision variables are: \n- $course_period[c]$ represents the period to which course $c$ is assigned.\n- $x[p, c]$ is a binary variable indicating whether course $c$ is assigned to period $p$.\n- $load[p]$ represents the total load (number of credits) in period $p$.\n- $objective$ is the minimum total load across all periods.\n\nconstraints: \n$course_period[c] = p \\Leftrightarrow x[p, c] = 1 \\forall p \\in periods, c \\in courses$\n$\\sum_{i \\in courses} x[p, i] \\geq courses_per_period_lb \\forall p \\in periods$\n$\\sum_{i \\in courses} x[p, i] \\leq courses_per_period_ub \\forall p \\in periods$\n$load[p] = \\sum_{c \\in courses} x[p, c] * course_load[c] \\forall p \\in periods$\n$load[p] \\geq load_per_period_lb \\forall p \\in periods$\n$load[p] \\leq objective \\forall p \\in periods$\n$course_period[b] < course_period[a] \\forall a, b \\in courses : prerequisite(a, b)$\n$l \\geq (n_periods - p) * load_per_period_lb \\forall p \\in 0..n_periods-1$\n$l \\leq (n_periods - p) * objective \\forall p \\in 0..n_periods-1$\n\nThe constraints are:\n- Each course is assigned to exactly one period.\n- The number of courses in each period is within the bounds.\n- The total load in each period is calculated correctly.\n- The total load in each period is within the bounds.\n- The load in each period is less than or equal to the objective.\n- Courses are assigned to periods respecting their prerequisites.\n- Redundant linear constraints to help the solver.\n\nobjective: Minimize $objective$, which represents the minimum total load across all periods.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b49d1cd6-d6c0-4dd7-8978-3423ebf9a31a": {"__data__": {"id_": "b49d1cd6-d6c0-4dd7-8978-3423ebf9a31a", "embedding": null, "metadata": {"model_name": "diamond_free_degree_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "diamond_free_degree_sequence_expert", "node_type": "4", "metadata": {"model_name": "diamond_free_degree_sequence"}, "hash": "a6e73d999896916bf99f18a1be7079d94f1d4102dfad951557d9309a685ae8d6", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Diamond-free Degree Sequence\n\ndescription: The Diamond-free Degree Sequence problem is a constraint satisfaction problem that involves finding all unique degree sequences of a simple, undirected, and diamond-free graph. A diamond-free graph is a graph that does not contain a diamond subgraph, which is a set of four vertices with at least five edges between them. The problem requires that each vertex has a degree greater than zero, the degree of each vertex is a multiple of 3, and the sum of the degrees is a multiple of 12.\n\nvariables: x[i,j], degrees[i]\n\nThe decision variables are x[i,j], which represents the adjacency matrix of the graph, where x[i,j] = 1 if there is an edge between vertices i and j, and x[i,j] = 0 otherwise. The variables degrees[i] represent the degree of each vertex i, which is the number of edges incident on that vertex.\n\nconstraints: \nx[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4, \ndegrees[i] = sum([x[i,j] | j in 1..n]), \ndegrees[i] mod 3 = 0, \nx[i,i] = 0, \nx[i,j] = x[j,i], \nsum(degrees) mod 12 = 0, \ndecreasing(degrees), \nlex2(x)\n\nThe constraints ensure that the graph is diamond-free, each vertex has a degree greater than zero and a multiple of 3, the sum of the degrees is a multiple of 12, and the graph is undirected. The symmetry breaking constraints decreasing(degrees) and lex2(x) are used to reduce the number of symmetric solutions.\n\nobjective: satisfy", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1f7bf8e-7214-4077-ad34-de8d96d61951": {"__data__": {"id_": "c1f7bf8e-7214-4077-ad34-de8d96d61951", "embedding": null, "metadata": {"model_name": "doublechannel"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "doublechannel_expert", "node_type": "4", "metadata": {"model_name": "doublechannel"}, "hash": "7b14717e246a64d013d0f1b90b13976bee2699bb0fbbe58ccb9432705ac338bb", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Ship Scheduling Problem\n\ndescription: The Ship Scheduling Problem is a classic constraint satisfaction problem that involves scheduling ships entering and leaving a port through multiple channels. The goal is to assign a start time, end time, and channel to each ship such that there are no clashes between ships in the same channel, and the total deviation from the desired start times is minimized.\n\nvariables: \nstart[s], end[s], channel[s], next[s], kind[s] for s in SHIPE\nThese variables represent the start time, end time, assigned channel, and the next ship in the same channel for each ship, respectively. The kind variable represents the direction of the ship (entering or leaving).\n\nconstraints: \nforall(s in nS + 1 .. nS + nC)(start[s] = maxt /\\ end[s] = maxt)\nforall(s in nS + 1 .. nS + nC)(channel[s] = s - nS)\nforall(s in SHIP)(end[s] = start[s] + len[channel[s]]*speed[s])\nalldifferent(next)\nforall(s in SHIP)(if kind[s] + kind[next[s]] = entering+leaving then end[s] <= start[next[s]] else start[s] + speed[s]*leeway <= start[next[s]] /\\ end[s] + speed[s]*leeway <= end[next[s]])\nforall(s in SHIP)(channel[next[s]] = channel[s])\n\nThese constraints ensure that dummy ships have a start and end time of maxt, and are assigned to their own channel. They also ensure that the end time of a ship is calculated based on its start time, speed, and channel length. The alldifferent constraint ensures that each ship has a unique next ship in the same channel. The remaining constraints ensure that there are no clashes between ships in the same channel, and that the next ship in the same channel is correctly assigned.\n\nobjective: \nminimize sum(s in SHIP)(abs(start[s] - desired[s]))\n\nThe objective is to minimize the total deviation from the desired start times for all ships.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4d63661-be7e-4dde-a5ca-496cf227499f": {"__data__": {"id_": "f4d63661-be7e-4dde-a5ca-496cf227499f", "embedding": null, "metadata": {"model_name": "fractions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fractions_expert", "node_type": "4", "metadata": {"model_name": "fractions"}, "hash": "554e5fb0777c7375cc0b37e6b323b96e669148d8b202a4bd41c280e7a0396223", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Fractions Problem\n\ndescription: The Fractions Problem is a classic constraint satisfaction problem where the goal is to find distinct non-zero digits such that the following equation holds: A/(BC) + D/(EF) + G/(HI) = 1.\n\nvariables: A, B, C, D, E, F, G, H, I, D1, D2, D3\nThese variables represent the digits in the equation. A, B, C, D, E, F, G, H, and I are the digits in the numerators and denominators of the fractions, and D1, D2, and D3 are intermediate variables used to calculate the denominators.\n\nconstraints: \nall_different(Vars) \nD1 = 10*B+C \nD2 = 10*E+F \nD3 = 10*H+I \nA*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3 \nA*D2 >= D*D1 \nD*D3 >= G*D2 \n3*A >= D1 \n3*G <= D2\n\nThese constraints ensure that: \n- all digits are distinct, \n- the intermediate variables D1, D2, and D3 are correctly calculated, \n- the equation A/(BC) + D/(EF) + G/(HI) = 1 holds, \n- and some symmetry-breaking and redundant constraints are added to help the solver.\n\nobjective: satisfy\nThe objective of the problem is to find a solution that satisfies all the constraints, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c5e4fa8-8ebd-424e-b656-b5a57cf93815": {"__data__": {"id_": "3c5e4fa8-8ebd-424e-b656-b5a57cf93815", "embedding": null, "metadata": {"model_name": "golfers"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golfers_expert", "node_type": "4", "metadata": {"model_name": "golfers"}, "hash": "647fada069972309fb778d80f7d6880a9c8788b08402281fe773544eed85c777", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Social Golfers Problem\n\ndescription: The Social Golfers Problem is a classic constraint satisfaction problem that involves scheduling golfers into groups for multiple rounds of golf, such that each golfer plays with a different set of golfers in each round, and no two golfers play together more than once.\n\nvariables: `round_place_golfer[r, p]`, `golfer_golfer_round[g1, g2]`, `round_group_i_golfer[r, g, i]`, `round_group_golfers[r, g]`, `assign[g, w]`\n\nThese variables represent the assignment of golfers to groups and rounds. Specifically, `round_place_golfer[r, p]` represents the golfer assigned to place `p` in round `r`, `golfer_golfer_round[g1, g2]` represents the round in which golfers `g1` and `g2` play together, `round_group_i_golfer[r, g, i]` represents the golfer assigned to group `g` and position `i` in round `r`, `round_group_golfers[r, g]` represents the set of golfers assigned to group `g` in round `r`, and `assign[g, w]` represents the group assignment of golfer `g` in week `w`.\n\nconstraints: \n`alldifferent (p in places) (round_place_golfer[r, p])`, \n`round_place_golfer[r, p] < round_place_golfer[r, p + 1]`, \n`golfer_golfer_round[g1, g2] = r`, \n`alldifferent (g in groups, i in group) (round_group_i_golfer[r, g, i])`, \n`round_group_i_golfer[r, g, i] < round_group_i_golfer[r, g, i + 1]`, \n`sum (r in rounds, g in groups, i, j in group where i < j) (bool2int(round_group_i_golfer[r, g, i] = a /\\ round_group_i_golfer[r, g, j] = b)) <= 1`, \n`card(round_group_golfers[r, g]) = n_per_group`, \n`all_disjoint (g in groups) (round_group_golfers[r, g])`, \n`sum (r in rounds, g in groups) (bool2int({a, b} subset round_group_golfers[r, g])) <= 1`, \n`sum (g in Golfer) (bool2int(assign[g,w] = gr)) = groupSize`, \n`(bool2int(assign[g1,w1] = assign[g2,w1]) + bool2int(assign[g1,w2] = assign[g2,w2])) <= 1`, \n`assign[g,1]=((g-1) div groupSize) + 1`, \n`assign[g,2]=g`\n\nThese constraints ensure that each golfer is assigned to a unique group and position in each round, that each group has the correct size, that each pair of golfers plays together at most once, and that the symmetry of the problem is broken.\n\nobjective: The objective of the problem is to find a feasible assignment of golfers to groups and rounds that satisfies all the constraints. There is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87ce9977-f5cc-469e-8bdb-c514d781b570": {"__data__": {"id_": "87ce9977-f5cc-469e-8bdb-c514d781b570", "embedding": null, "metadata": {"model_name": "golomb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "golomb_expert", "node_type": "4", "metadata": {"model_name": "golomb"}, "hash": "c71534330d50a77df4f882d943858c3d1f85ed5e9647097a35b31d978a60866a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Golomb Ruler Problem\n\ndescription: The Golomb Ruler Problem is a classic problem in constraint programming that involves finding a set of distinct integers, called marks, such that the differences between all pairs of marks are also distinct. The goal is to find a Golomb ruler with the minimum length, which is the maximum mark value.\n\nvariables: mark[1..m] \u2208 {0, ..., n}\n\nThe decision variables are an array of m integers, mark[i], representing the i-th mark on the ruler, where 0 \u2264 mark[i] \u2264 n. These variables determine the positions of the marks on the ruler.\n\nconstraints: \nmark[1] = 0\nmark[i] < mark[i+1] \u2200 i \u2208 {1, ..., m-1}\nalldifferent(differences)\ndifferences[1] < differences[(m*(m-1)) div 2]\n\nThe constraints are:\n- The first mark is fixed at 0.\n- Each mark is strictly greater than the previous one, ensuring that the marks are in increasing order.\n- The differences between all pairs of marks are distinct, which is the core constraint of the Golomb Ruler Problem.\n- A symmetry-breaking constraint is added to ensure that the differences are in increasing order, which helps to reduce the search space.\n\nobjective: minimize mark[m]\n\nThe objective is to minimize the maximum mark value, which represents the length of the Golomb ruler.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7a620bf-22ae-44ff-b70c-aaf48871df5b": {"__data__": {"id_": "a7a620bf-22ae-44ff-b70c-aaf48871df5b", "embedding": null, "metadata": {"model_name": "graph"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "graph_expert", "node_type": "4", "metadata": {"model_name": "graph"}, "hash": "12b4194f4eaa2f36f8fee38a1d70dd370b80687a3234f2ab1a041235ead32d25", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Graph Labeling Problem\n\ndescription: This problem is a variant of the graph labeling problem, where we have a graph with 8 vertices and we need to assign a unique label from 1 to 8 to each vertex such that adjacent vertices have labels that differ by at least 2.\n\nvariables: a, b, c, d, e, f, g, h \u2208 {1, ..., 8}\nThese variables represent the labels assigned to each vertex of the graph.\n\nconstraints: \na \u2260 b, a \u2260 c, ..., g \u2260 h (28 constraints)\nThese constraints ensure that each label is used exactly once, i.e., no two vertices have the same label.\n\n|a - b| \u2265 2, |a - c| \u2265 2, ..., |g - h| \u2265 2 (16 constraints)\nThese constraints ensure that adjacent vertices have labels that differ by at least 2.\n\nobjective: satisfy\nThe objective of this problem is to find a feasible assignment of labels to the vertices that satisfies all the constraints, i.e., a solution that meets the conditions of unique labeling and adjacent vertices differing by at least 2.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1041, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77798d32-1e52-47c0-99da-af416ce85b27": {"__data__": {"id_": "77798d32-1e52-47c0-99da-af416ce85b27", "embedding": null, "metadata": {"model_name": "itemset_mining"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "itemset_mining_expert", "node_type": "4", "metadata": {"model_name": "itemset_mining"}, "hash": "7951ede1d7b9841f77f7ccfbdcf4c69e4b334ade03bd5c0d1827009946f76c88", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Market Basket Analysis\n\ndescription: The Market Basket Analysis problem is a classic problem in data mining and constraint programming. It involves finding a set of items that are frequently purchased together in a transactional database. The goal is to identify a set of items that covers a minimum number of transactions, with a minimum total utility or value.\n\nvariables: Items \u2208 2^{1..NrI}\n\nThe decision variable Items is a set of items, represented as a subset of the universe of items {1..NrI}. It represents the set of items that are frequently purchased together.\n\nconstraints: \ncard(cover(Items, TDB)) \u2265 Freq\n\u2211(i in Items)(itemprice[i]) \u2265 minUtility\n\nThe first constraint ensures that the set of items covers at least Freq transactions in the transactional database TDB. The cover function is a custom function that returns the set of transactions that are covered by the items.\n\nThe second constraint ensures that the total utility or value of the items in the set is at least minUtility.\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function. The goal is to find a set of items that covers a minimum number of transactions with a minimum total utility or value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b3ef458-0525-4233-939f-a44673431c10": {"__data__": {"id_": "8b3ef458-0525-4233-939f-a44673431c10", "embedding": null, "metadata": {"model_name": "jobshop"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "jobshop_expert", "node_type": "4", "metadata": {"model_name": "jobshop"}, "hash": "fbfeb6b4a41381c8d460355cbe732b167b3113560ff4ed8e1e8bdea30b7c78ca", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Job Shop Scheduling Problem\n\ndescription: The Job Shop Scheduling Problem is a classic problem in operations research and computer science that involves scheduling a set of jobs on a set of machines. Each job consists of a sequence of tasks, and each task requires a specific machine. The goal is to find a schedule that minimizes the total time required to complete all jobs.\n\nvariables: s[j,t] (start time of task t of job j), makespan (maximum completion time of all jobs)\n\nThe decision variables s[j,t] represent the start time of task t of job j, and makespan represents the maximum completion time of all jobs.\n\nconstraints: \ns[j,t] + d[j,t] <= s[j,t+1] (tasks in a job are performed in order), \nnonoverlap(s[j1,t1],d[j1,t1],s[j2,t2],d[j2,t2]) (only one task on any machine at one time), \ndisjunctive(ss,dd) (tasks on the same machine do not overlap)\n\nThe constraints ensure that tasks in a job are performed in order, only one task on any machine can be performed at a time, and tasks on the same machine do not overlap.\n\nobjective: minimize makespan\n\nThe objective is to minimize the maximum completion time of all jobs, which is represented by the makespan variable.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd5e788c-f0bb-4777-b7d0-c03262f38a92": {"__data__": {"id_": "bd5e788c-f0bb-4777-b7d0-c03262f38a92", "embedding": null, "metadata": {"model_name": "K4xP2Graceful"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "K4xP2Graceful_expert", "node_type": "4", "metadata": {"model_name": "K4xP2Graceful"}, "hash": "979c48a6967ed69baa2ec7e168e2d6f5463b13ff7bf8f4af0e2f7858681e4226", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Graceful Graph\n\ndescription: The Graceful Graph problem is a well-known problem in graph theory and constraint programming. It involves labeling the nodes of a graph with integers from 1 to m, such that the absolute difference between the labels of two adjacent nodes is equal to the edge label. The goal is to find a labeling that satisfies these conditions and makes the edge labels distinct.\n\nvariables: nodes \u2208 {0, ..., m}^n, graph \u2208 {1, ..., n}^(m \u00d7 2), edges \u2208 {1, ..., m}^m\nThe decision variables are:\n- nodes: an array of length n, where each element represents the label of a node in the graph.\n- graph: a 2D array of size m \u00d7 2, where each row represents an edge in the graph, and the two columns represent the nodes connected by the edge.\n- edges: an array of length m, where each element represents the label of an edge in the graph.\n\nconstraints: \n\u2200i \u2208 {1, ..., m} (|nodes[graph[i,1]] - nodes[graph[i,2]]| = edges[i]) \u2227 \nall_different(edges) \u2227 \nall_different(nodes)\nThe constraints are:\n- For each edge, the absolute difference between the labels of the two nodes connected by the edge is equal to the edge label.\n- All edge labels are distinct.\n- All node labels are distinct.\n\nobjective: The problem does not have an objective function to minimize or maximize. The goal is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b352137-ccf0-4696-85c6-af6ebec7fa2b": {"__data__": {"id_": "3b352137-ccf0-4696-85c6-af6ebec7fa2b", "embedding": null, "metadata": {"model_name": "killer_sudoku"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "killer_sudoku_expert", "node_type": "4", "metadata": {"model_name": "killer_sudoku"}, "hash": "715a0862bdb3127a8ed6ae0a973941697b65cd4aa7112ab10706dca27be94ef8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Killer Sudoku\n\ndescription: Killer Sudoku is a puzzle that combines elements of Sudoku and Kakuro. The objective is to fill a 9x9 grid with numbers from 1 to 9 such that each row, column, and nonet (3x3 sub-grid) contains each number exactly once. Additionally, the sum of all numbers in a \"cage\" (a group of cells) must match the small number printed in its corner.\n\nvariables: x[i, j] (i, j \u2208 {1, ..., 9}) - decision variables representing the value of each cell in the grid.\n\nconstraints:\n- \u2200i \u2208 {1, ..., 9} (\u2200j \u2208 {1, ..., 9} x[i, j] \u2260 x[i, k] \u2227 \u2200j \u2208 {1, ..., 9} x[j, i] \u2260 x[k, i]) - each row and column contains each number exactly once\n- \u2200i, j \u2208 {0, ..., 2} (\u2200r, c \u2208 {i*3+1, ..., i*3+3} \u00d7 {j*3+1, ..., j*3+3} x[r, c] \u2260 x[r', c'] for r \u2260 r' or c \u2260 c') - each nonet contains each number exactly once\n- \u2200p \u2208 {1, ..., num_segments} (\u2211(i, j) \u2208 {1, ..., n} \u00d7 {1, ..., n} where segments[i, j] = p x[i, j] = segment_sums[p]) - the sum of all numbers in a cage must match the small number printed in its corner\n\nobjective: satisfy - the objective is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f611cb5-ab00-4be1-a9f6-d67aef7a926d": {"__data__": {"id_": "2f611cb5-ab00-4be1-a9f6-d67aef7a926d", "embedding": null, "metadata": {"model_name": "knapsack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "knapsack_expert", "node_type": "4", "metadata": {"model_name": "knapsack"}, "hash": "68716e6aa5789fea38991882152c17b49e091aa54bcf0a01ce6bd25ec49b63c4", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: 0/1 Knapsack Problem\n\ndescription: The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. Given a set of objects, each with a weight and a value, determine the subset of objects to include in a knapsack of limited capacity to maximize the total value while not exceeding the knapsack's capacity.\n\nvariables: x (x[i] for i in OBJ or x[i] for i in 1..n)\n\nThe decision variables x represent the number of each object to include in the knapsack. In some models, x is a binary variable (0 or 1) indicating whether to include the object or not, while in others, x is an integer variable representing the quantity of each object to include.\n\nconstraints: x[i] >= 0, sum(i in OBJ)(size[i] * x[i]) <= capacity\n\nThe constraints ensure that the number of each object included is non-negative and that the total weight of the selected objects does not exceed the knapsack's capacity.\n\nobjective: maximize sum(i in OBJ)(profit[i] * x[i])\n\nThe objective is to maximize the total value of the objects included in the knapsack.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e642b588-645f-4b58-9157-3bea962fe3d5": {"__data__": {"id_": "e642b588-645f-4b58-9157-3bea962fe3d5", "embedding": null, "metadata": {"model_name": "langford"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "langford_expert", "node_type": "4", "metadata": {"model_name": "langford"}, "hash": "072e35588b918898bc9e8f261fab28857b169c8a1a965d3241ff4717915069bf", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Langford's Problem\n\ndescription: Langford's problem is a classic constraint satisfaction problem that involves arranging m copies of digits 1 to n in a sequence such that any two consecutive copies of digit k are separated by k other digits.\n\nvariables: x[d,c], y[p] \nx[d,c] represents the position of the c-th copy of digit d in the sequence, and y[p] represents the digit at position p in the sequence. \n\nconstraints: \nalldifferent([x[d,c] | d in DIG, c in COPY]), \ninverse([x[d,c] | d in DIG, c in COPY], y), \nforall(d in DIG, c in 1..m-1) (x[d,c+1] = x[d,c] + d + 1), \nalldifferent(y), \nforall(d in DIG, c in 1..m-1, p in POS) (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1)\n\nThe first constraint ensures that all positions in the sequence are distinct. The second constraint links the x and y variables. The third constraint ensures that the Langford's condition is satisfied, i.e., any two consecutive copies of digit k are separated by k other digits. The fourth constraint ensures that all digits in the sequence are distinct. The fifth constraint is an alternative way to ensure the Langford's condition.\n\nobjective: satisfy\nThe objective of the problem is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc55456e-ad0a-4378-b536-649ea8feb467": {"__data__": {"id_": "bc55456e-ad0a-4378-b536-649ea8feb467", "embedding": null, "metadata": {"model_name": "loan"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "loan_expert", "node_type": "4", "metadata": {"model_name": "loan"}, "hash": "33f57376681324a89fd7b6814c4b576b72ad84dbc20bbd75f7fffed24a99304d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Loan Repayment Problem\n\ndescription: This problem models a loan repayment scenario where a borrower takes a loan with a certain principal amount and interest rate, and repays the loan in quarterly installments over a year. The problem calculates the balance owing at the end of the year.\n\nvariables: R, P, I, B1, B2, B3, B4\nR is the quarterly repayment amount, P is the principal amount borrowed, I is the interest rate, and B1, B2, B3, B4 are the balances owing after each quarter.\n\nconstraints: B1 = P * (1.0 + I) - R, B2 = B1 * (1.0 + I) - R, B3 = B2 * (1.0 + I) - R, B4 = B3 * (1.0 + I) - R\nThese constraints model the balance update after each quarter, where the new balance is the previous balance plus the interest accrued minus the repayment amount.\n\nobjective: satisfy\nThe objective of this problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1018, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fec83baf-7c82-435a-b768-1ead200ba429": {"__data__": {"id_": "fec83baf-7c82-435a-b768-1ead200ba429", "embedding": null, "metadata": {"model_name": "ltsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ltsp_expert", "node_type": "4", "metadata": {"model_name": "ltsp"}, "hash": "b8d836642ead2c845fad952527144920beea5cd2335f003eece17a9e8918d8d1", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Traveling Salesman Problem with Precedences\n\ndescription: The Traveling Salesman Problem with Precedences is a variant of the classic Traveling Salesman Problem. It involves finding the shortest possible tour that visits a set of cities and returns to the starting city, with the additional constraint that certain cities must be visited in a specific order.\n\nvariables: order \u2208 {1, ..., n}^n, city \u2208 {1, ..., n}^n\nThe decision variables are two arrays, order and city, which represent the order in which the cities are visited. The order array maps each city to its position in the tour, and the city array maps each position in the tour to the corresponding city.\n\nconstraints: \n\u2200i \u2208 PREC, order[left[i]] < order[right[i]]\ninverse(order, city)\nThe constraints ensure that the precedences are respected, i.e., if city A must be visited before city B, then the position of city A in the tour must be less than the position of city B. The inverse constraint ensures that the order and city arrays are inverses of each other, i.e., the position of a city in the tour is equal to the city at that position.\n\nobjective: minimize \u2211(i=1 to n-1) |coord[city[i]] - coord[city[i+1]]|\nThe objective is to minimize the total distance traveled, which is calculated as the sum of the distances between consecutive cities in the tour.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1410, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7af76126-70ba-400c-bee6-696a9721b1fc": {"__data__": {"id_": "7af76126-70ba-400c-bee6-696a9721b1fc", "embedding": null, "metadata": {"model_name": "magic_hexagon"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_hexagon_expert", "node_type": "4", "metadata": {"model_name": "magic_hexagon"}, "hash": "6d40842836071dbbe39a677f840d605333e5138d1ad4df7b49aeca5a6f10c90b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Magic Hexagon Problem\n\ndescription: The Magic Hexagon Problem is a classic constraint satisfaction problem where the goal is to find a configuration of numbers in a hexagonal shape such that the sums of numbers along each line and diagonal are equal to a certain value.\n\nvariables: a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s \u2208 {1, ..., 19}\n\nThese variables represent the numbers to be placed in the hexagonal shape.\n\nconstraints: \nall_different(LD) \u2227 \na + b + c = 38 \u2227 \nd + e + f + g = 38 \u2227 \nh + i + j + k + l = 38 \u2227 \nm + n + o + p = 38 \u2227 \nq + r + s = 38 \u2227 \na + d + h = 38 \u2227 \nb + e + i + m = 38 \u2227 \nc + f + j + n + q = 38 \u2227 \ng + k + o + r = 38 \u2227 \nl + p + s = 38 \u2227 \nc + g + l = 38 \u2227 \nb + f + k + p = 38 \u2227 \na + e + j + o + s = 38 \u2227 \nd + i + n + r = 38 \u2227 \nh + m + q = 38 \u2227 \na < c \u2227 \na < h \u2227 \na < l \u2227 \na < q \u2227 \na < s \u2227 \nc < h\n\nThese constraints ensure that all numbers are distinct, the sums of numbers along each line and diagonal are equal to 38, and some additional ordering constraints to break symmetry.\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3ed8872-0bb9-4310-a7b2-bbb13a8ce076": {"__data__": {"id_": "b3ed8872-0bb9-4310-a7b2-bbb13a8ce076", "embedding": null, "metadata": {"model_name": "magic_sequence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "magic_sequence_expert", "node_type": "4", "metadata": {"model_name": "magic_sequence"}, "hash": "f220b449c243754c99b7eec214d2c39695acb0a41a74b658ef5cdb0b42e3b471", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    **Model 1, 2, 3, and 4: Magic Sequence**\n\nname: Magic Sequence\n\ndescription: A magic sequence of length n is a sequence of integers x0, ..., xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\n\nvariables: s (array of var 0..n-1)\n\nThe decision variable s is an array of length n, where each element si represents the number of times the integer i appears in the sequence.\n\nconstraints: \nforall(i in 0..n-1) (s[i] = sum(j in 0..n-1) (bool2int(s[j] = i)))\nsum(i in 0..n-1) (s[i]) = n\nsum(i in 0..n-1) (s[i]*i) = n\ndistribute(s, value, s)\nglobal_cardinality(s, array1d(0..n-1, set2array(index_set(s))), s)\n\nThe constraints ensure that each number i in the sequence appears exactly si times, the sum of all si is equal to n, and the sum of all si*i is equal to n. The distribute and global_cardinality constraints are used to model the magic sequence property.\n\nobjective: satisfy\n\nThe objective is to find a feasible solution that satisfies all the constraints.\n\n**Model 5: Magic Square**\n\nname: Magic Square\n\ndescription: A magic square of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that n numbers in all rows, all columns, and both diagonals sum to the same constant.\n\nvariables: magic (array of var 1..n*n), total (int)\n\nThe decision variable magic is a 2D array of size n x n, where each element magic[i,j] represents the integer in the cell (i,j) of the magic square. The variable total is the magic sum.\n\nconstraints: \nall_different([magic[i,j] | i in 1..n, j in 1..n])\nforall(k in 1..n) (sum(i in 1..n) (magic[k,i]) = total)\nforall(k in 1..n) (sum(i in 1..n) (magic[i,k]) = total)\nsum(i in 1..n) (magic[i,i]) = total\nsum(i in 1..n) (magic[i,n-i+1]) = total\n\nThe constraints ensure that all numbers in the magic square are distinct, the sum of each row, column, and diagonal is equal to the magic sum total.\n\nobjective: satisfy\n\nThe objective is to find a feasible solution that satisfies all the constraints.\n\n**Model 6: Magic Square (Integer Programming Version)**\n\nname: Magic Square (Integer Programming Version)\n\ndescription: A magic square of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that n numbers in all rows, all columns, and both diagonals sum to the same constant.\n\nvariables: x (array of var 0..1), square (array of var 1..n*n), s (int)\n\nThe decision variable x is a 3D array of size n x n x n, where x[i,j,k] = 1 if the cell (i,j) contains the integer k. The variable square is a 2D array of size n x n, where square[i,j] represents the integer in the cell (i,j) of the magic square. The variable s is the magic sum.\n\nconstraints: \ns >= 0 /\\ s <= n*n*n\nforall(i in 1..n, j in 1..n) (sum(k in N) (x[i,j,k]) = 1)\nforall(k in N) (sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1)\nforall(i in 1..n) (sum(j in 1..n, k in N) (k * x[i,j,k]) = s)\nforall(j in 1..n) (sum(i in 1..n, k in N) (k * x[i,j,k]) = s)\nsum(i in 1..n, k in N) (k * x[i,i,k]) = s\nsum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s\nforall(i,j in 1..n) (square[i,j] = sum(k in N) (k * x[i,j,k]))\n\nThe constraints ensure that each cell contains exactly one integer, each integer is assigned to exactly one cell, the sum of each row, column, and diagonal is equal to the magic sum s, and the magic square is correctly constructed.\n\nobjective: satisfy\n\nThe objective is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 3526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "228efb8c-1960-453f-96cd-eb8597e0ca5e": {"__data__": {"id_": "228efb8c-1960-453f-96cd-eb8597e0ca5e", "embedding": null, "metadata": {"model_name": "maximum_density_still_life"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "maximum_density_still_life_expert", "node_type": "4", "metadata": {"model_name": "maximum_density_still_life"}, "hash": "d6e1677610f5934889eb878a22fb3fdbbcdbdca23b955ffacc20e4cecdbd7782", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Maximum Density Still Life\n\ndescription: The Maximum Density Still Life problem is a classic problem in constraint programming, which involves finding a stable pattern of live and dead cells in a grid, such that the density of live cells is maximized. The problem is inspired by Conway's Game of Life, where live cells follow certain rules to survive or die in each generation. In this problem, the goal is to find a pattern that is stable, meaning it does not change over time, and has the maximum number of live cells.\n\nvariables: `grid[r,c]` for `r, c in augmentedBoardCoord`\n\nThe decision variables are the elements of the `grid` array, which represent the state of each cell in the grid. The value of `grid[r,c]` is 0 if the cell at row `r` and column `c` is dead, and 1 if it is live.\n\nconstraints: \n`grid[0,x] = 0 /\\ grid[1,x] = 0 /\\ grid[size+2,x] = 0 /\\ grid[size+3,x] = 0 /\\ grid[x,0] == 0 /\\ grid[x,1] == 0 /\\ grid[x,size+2] = 0 /\\ grid[x,size+3] = 0` for `x in augmentedBoardCoord`\n`((grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + grid[r,c-1] + grid[r,c+1] + grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] ) = 3) -> (grid[r,c] = 1)` for `r, c in checkConstraintsBoardCoord`\n`(grid[r,c] = 1) -> (2 <= (grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + grid[r,c-1] + grid[r,c+1] + grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] ) <= 3)` for `r, c in checkConstraintsBoardCoord`\n`grid[2,2] >= grid[size+1,size+1] /\\ grid[2,size+1] >= grid[size+1,2]`\n\nThe constraints ensure that the pattern is stable and follows the rules of Conway's Game of Life. The first constraint sets the boundary cells to be dead. The second constraint ensures that each cell with exactly three live neighbors is alive. The third constraint ensures that each live cell has two or three live neighbors. The last constraint is a symmetry-breaking constraint, which forces the assignment to respect an ordering on the values that occur in corner entries of the board.\n\nobjective: Maximize `z = sum(r in objFunctionBoardCoord, c in objFunctionBoardCoord) (grid[r,c])`\n\nThe objective is to maximize the number of live cells in the grid, which is represented by the variable `z`.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c39163c-332d-4fb8-8179-f3b70a44ce9a": {"__data__": {"id_": "3c39163c-332d-4fb8-8179-f3b70a44ce9a", "embedding": null, "metadata": {"model_name": "mip"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "mip_expert", "node_type": "4", "metadata": {"model_name": "mip"}, "hash": "ad334172865c818ebded189a2114981ed87bdede14afb8cd9bfd64fa3972ef6c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Linear Programming Problem\n\ndescription: This is a classic Linear Programming Problem, which involves finding the optimal values of decision variables to maximize or minimize a linear objective function, subject to a set of linear constraints.\n\nvariables: x, y, B, C, D\nThese variables represent the quantities of different items or resources that need to be optimized. In the context of Linear Programming, they are often referred to as decision variables.\n\nconstraints: \n2.0*B + 2.0*C + 1.0*D <= 30.0, \n1.0*B + 2.0*C + 3.0*D <= 25.0, \n2.0*B + 1.0*C + 1.0*D <= 20.0, \n7*x + 4*y <= 13, \nx + y <= 6, \n9*x + 5*y <= 45, \n2.0*B - 1.0*C + 2.0*D <= 4.0, \n2.0*B - 3.0*C + 1.0*D <= -5.0, \n-1.0*B + 1.0*C - 2.0*D <= -1.0, \nB >= 0, C >= 0, D >= 0, x >= 0, y >= 0\nThese constraints represent the limitations and restrictions on the values of the decision variables. They can be interpreted as resource constraints, capacity constraints, or other types of limitations that need to be satisfied.\n\nobjective: Maximize 3.0*B + 1.0*C + 3.0*D, Maximize 1.0*B - 1.0*C + 1.0*D, Maximize 21*x + 11*y, Maximize 8*x + 5*y\nThe objective of the problem is to maximize the given linear function, which represents the profit, revenue, or other performance metric that needs to be optimized.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a984c70e-bcf4-428c-831c-4db4d275db55": {"__data__": {"id_": "a984c70e-bcf4-428c-831c-4db4d275db55", "embedding": null, "metadata": {"model_name": "missing_solution"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "missing_solution_expert", "node_type": "4", "metadata": {"model_name": "missing_solution"}, "hash": "5faae49d6acecd18277870cf8560e455b9f0f5f1105bf0e0c84f3d655fd4c80d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Alternating Marriage Problem\n\ndescription: This problem involves arranging a sequence of people of different genders and ages in a specific order, subject to certain constraints. The goal is to find an ordering that satisfies the conditions.\n\nvariables: order \u2208 {1, ..., n}^n\nThe decision variable is an array `order` of length `n`, where each element `order[i]` represents the person at position `i` in the sequence.\n\nconstraints: \nalldifferent(order)\n\u2200i \u2208 {1, ..., n} : (i mod 2 = 0 \u2194 gender[order[i]] = female)\n\u2200i \u2208 {1, ..., n-1} : age[order[i+1]] - age[order[i]] \u2264 10\n\nThe constraints are:\n- `alldifferent(order)`: Each person must appear exactly once in the sequence.\n- `\u2200i \u2208 {1, ..., n} : (i mod 2 = 0 \u2194 gender[order[i]] = female)`: Males and females must alternate in the sequence.\n- `\u2200i \u2208 {1, ..., n-1} : age[order[i+1]] - age[order[i]] \u2264 10`: The age difference between consecutive people in the sequence must not exceed 10.\n\nobjective: satisfy\nThe objective is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff00872d-ec23-4f08-8b32-ee95cd89498c": {"__data__": {"id_": "ff00872d-ec23-4f08-8b32-ee95cd89498c", "embedding": null, "metadata": {"model_name": "nonogram_create_automaton2"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nonogram_create_automaton2_expert", "node_type": "4", "metadata": {"model_name": "nonogram_create_automaton2"}, "hash": "e59d056924b40bacb5bddce8b53011190c23d3d70715142b91396eedc7118ce4", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Nonogram\n\ndescription: A Nonogram is a puzzle where a set of clues are given to fill in a grid with two colors (usually black and white). The clues are given in the form of row and column constraints, specifying the sequence of colors in each row and column. The goal is to fill in the grid such that the clues are satisfied.\n\nvariables: A[i, j] for i in 1..Y, j in 1..X, where A[i, j] \u2208 {1, 2}\n\nThe variables A[i, j] represent the color of the cell at row i and column j in the grid, where 1 and 2 correspond to the two colors.\n\nconstraints: \n\u2200i in 1..Y, nonogram_row(A, [rows[i, j] | j in 1..maxlen where rows[i, j] >= 0], i)\n\u2200i in 1..X, nonogram_col(A, [cols[i, j] | j in 1..maxlen where cols[i, j] >= 0], i)\n\nThe constraints ensure that the row and column constraints are satisfied. The nonogram_row and nonogram_col predicates enforce the regular expression constraints for each row and column, respectively.\n\nobjective: The objective is to find a feasible solution that satisfies all the constraints, i.e., to fill in the grid such that all row and column constraints are met. There is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fe0372c-766b-418b-ac1b-e019ec8d189f": {"__data__": {"id_": "8fe0372c-766b-418b-ac1b-e019ec8d189f", "embedding": null, "metadata": {"model_name": "nurses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "nurses_expert", "node_type": "4", "metadata": {"model_name": "nurses"}, "hash": "82fc9040bac1ead915da4d941ddbd12e682415e7ff2b77b14f4ba90bbbed25b2", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Nurse Scheduling Problem\n\ndescription: The Nurse Scheduling Problem is a classic constraint satisfaction problem that involves creating a schedule for a set of nurses over a set of days, where each nurse can be assigned to one of three shifts: day, night, or day off. The problem aims to find a schedule that satisfies certain constraints, such as ensuring that a nurse who works two consecutive night shifts gets a day off on the third day, and that the number of nurses working night shifts on each day is within a certain range.\n\nvariables: x[n,d] \u2208 {1, 2, 3} \u2200n \u2208 NURSE, \u2200d \u2208 DAY\nThe decision variables x[n,d] represent the shift assigned to nurse n on day d, where 1 corresponds to a day shift, 2 corresponds to a night shift, and 3 corresponds to a day off.\n\nconstraints: \n1. \u2200n \u2208 NURSE, \u2200d \u2208 1..m-2: (x[n,d] = 2 \u2227 x[n,d+1] = 2) \u2192 x[n,d+2] = 3\nThis constraint ensures that if a nurse works two consecutive night shifts, they get a day off on the third day.\n\n2. \u2200n \u2208 NURSE, \u2200d \u2208 1..m-1: x[n,d] = 2 \u2192 x[n,d+1] \u2260 1\nThis constraint ensures that a nurse who works a night shift on one day does not work a day shift on the next day.\n\n3. \u2200d \u2208 DAY: l \u2264 \u2211(n \u2208 NURSE) (bool2int(x[n,d] = 2)) \u2264 u\nThis constraint ensures that the number of nurses working night shifts on each day is within the range [l, u].\n\nobjective: satisfy\nThe objective of the problem is to find a schedule that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1552, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b60d56c5-0b42-47fe-a52a-a5e5c7082892": {"__data__": {"id_": "b60d56c5-0b42-47fe-a52a-a5e5c7082892", "embedding": null, "metadata": {"model_name": "opd"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "opd_expert", "node_type": "4", "metadata": {"model_name": "opd"}, "hash": "bab6daf89e12923cc66e908e19b91934622e199a49ad890b102e8268cc1c16dc", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Orthogonal Pairs of Designs (OPD) problem\n\ndescription: The OPD problem is a classical problem in combinatorial design theory, which involves finding a binary matrix of v rows and b columns such that each row sums to r, and the dot product between any pair of distinct rows is minimal. This problem has applications in the design of Collateralised Debt Obligations Squared (CDO^2) transactions.\n\nvariables: m[i, j] (i in rows, j in cols), objective\n\nThe decision variables are the elements of the binary matrix m, where m[i, j] represents the value of the element at row i and column j. The variable objective represents the minimum dot product between any pair of distinct rows.\n\nconstraints: \nsum (j in cols) (m[i, j]) = r (forall i in rows), \nsum (j in cols) (m[i_a, j] * m[i_b, j]) <= objective (forall i_a, i_b in rows where i_a < i_b), \nlex_greatereq([m[i, j] | j in cols], [m[i+1, j] | j in cols]) (forall i in rows diff {max(rows)}), \nlex_greatereq([m[i, j] | i in rows], [m[i, j+1] | i in rows]) (forall j in cols diff {max(cols)})\n\nThe constraints ensure that each row sums to r, the dot product between any pair of distinct rows is at most lambda, and the row and column symmetries are broken.\n\nobjective: minimize objective", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebce1f6b-30e9-47cf-81f1-d8717ff56822": {"__data__": {"id_": "ebce1f6b-30e9-47cf-81f1-d8717ff56822", "embedding": null, "metadata": {"model_name": "partition"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "partition_expert", "node_type": "4", "metadata": {"model_name": "partition"}, "hash": "12dcefbd17cd7c6b302e9a4034780b4cbd19beed50b4c54d96004c3895f2663a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Partition Problem\n\ndescription: The Partition Problem is a classic problem in constraint programming that involves dividing a set of 2n numbers into two disjoint subsets, each of size n, such that the sum of the numbers in each subset is equal, and the sum of the squares of the numbers in each subset is also equal.\n\nvariables: x, y (arrays of var 1..2n), sx, sy (arrays of var 1..4n^2)\n\nx and y are arrays of decision variables representing the two subsets of numbers. sx and sy are auxiliary variables used to calculate the sum of squares of the numbers in each subset.\n\nconstraints: \nx[i-1] < x[i], y[i-1] < y[i] (ordering constraints)\nx[1] < y[1] (symmetry breaking constraint)\nalldifferent(x++y) (partitioning constraint)\nsum(x) = 2n(2n+1) div 4, sum(y) = 2n(2n+1) div 4 (sum equality constraints)\nsx[i] = x[i]*x[i], sy[i] = y[i]*y[i] (definition of sum of squares)\nsum(sx) = 2n(2n+1)(4n+1) div 12, sum(sy) = 2n(2n+1)(4n+1) div 12 (sum of squares equality constraints)\n\nThe constraints ensure that the two subsets are disjoint, have the same sum, and the same sum of squares. The ordering constraints and symmetry breaking constraint are used to reduce the search space.\n\nobjective: satisfy (there is no objective function to minimize or maximize, the goal is to find a feasible solution)", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa5137f0-641e-4056-ace7-0acb693e7ff4": {"__data__": {"id_": "aa5137f0-641e-4056-ace7-0acb693e7ff4", "embedding": null, "metadata": {"model_name": "photo"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "photo_expert", "node_type": "4", "metadata": {"model_name": "photo"}, "hash": "99590ecb8f8244dfcf685c47d92aff87b0ea2ab61b7c028fae770184c7294ec3", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Social Golfer Problem\n\ndescription: The Social Golfer Problem is a classic constraint satisfaction problem that involves scheduling golfers into groups of a fixed size over a series of rounds, such that each golfer plays with every other golfer exactly once.\n\nvariables: x[i] (i in PERSON), y[j] (j in POS)\n\nThe decision variables are x and y, where x[i] represents the position of person i in the schedule, and y[j] represents the person assigned to position j in the schedule.\n\nconstraints: \ninverse(x, y), \nalldifferent(y), \n%alldifferent(x), \ny[i] = sum(j in 1..n)(bool2int(x[j] = i) * j)\n\nThe constraints ensure that each person is assigned a unique position, and each position is assigned a unique person (inverse and alldifferent constraints). The third constraint is a redundant constraint that is commented out, and the fourth constraint ensures that the y array is correctly defined as the inverse of the x array.\n\nobjective: maximize sum(i in 1..n-1)(friend[y[i],y[i+1]])\n\nThe objective is to maximize the total friendship score, which is calculated by summing the friendship values between adjacent pairs of golfers in the schedule.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e31b726c-ed91-49da-8e36-0d4f23cc780b": {"__data__": {"id_": "e31b726c-ed91-49da-8e36-0d4f23cc780b", "embedding": null, "metadata": {"model_name": "project_scheduling"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "project_scheduling_expert", "node_type": "4", "metadata": {"model_name": "project_scheduling"}, "hash": "0c832f7315c05f5111d0a1f394d8c900b1704cbc969346cca70d9aad4742fe3d", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Resource-Constrained Project Scheduling Problem (RCPSP)\n\ndescription: The Resource-Constrained Project Scheduling Problem (RCPSP) is a classic problem in operations research and project management. It involves scheduling a set of tasks with given durations and precedence relationships, subject to resource constraints, to minimize the total project duration (makespan).\n\nvariables: `start[t]` for `t in TASK`, where `start[t]` represents the start time of task `t`.\n\nThe decision variables `start[t]` represent the start time of each task, which determines the schedule of the project.\n\nconstraints: \n`start[pre[i,1]] + duration[pre[i,1]] <= start[pre[i,2]]` for `i in PREC`, \n`nonoverlap(start[t1],duration[t1],start[t2],duration[t2])` for `t1, t2 in CARPENTRY` where `t1 < t2`.\n\nThe first constraint enforces the precedence relationships between tasks, ensuring that a task cannot start before its predecessors have finished. The second constraint ensures that tasks that require the same resource (in this case, carpentry) do not overlap in time.\n\nobjective: Minimize `makespan = max(t in TASK)(start[t] + duration[t])`, which represents the total project duration.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2aef254c-87f0-43f2-b06e-31739697841c": {"__data__": {"id_": "2aef254c-87f0-43f2-b06e-31739697841c", "embedding": null, "metadata": {"model_name": "QuasigroupCompletion"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasigroupCompletion_expert", "node_type": "4", "metadata": {"model_name": "QuasigroupCompletion"}, "hash": "5cc6c7c8ac6fc44aed4cd358e498638d239eb7578957e3596f19ac2d2762957c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Latin Square Completion\n\ndescription: The Latin Square Completion problem is a classic problem in constraint programming. It involves completing a partially filled N x N grid with numbers from 1 to N, such that each row, column, and cell contains each number exactly once.\n\nvariables: puzzle[i,j] (Model 1) or puzzle[i,j,k] (Model 2)\n\nThe decision variables represent the values to be assigned to each cell in the grid. In Model 1, puzzle[i,j] represents the value assigned to the cell at row i and column j. In Model 2, puzzle[i,j,k] represents a binary variable indicating whether the value k is assigned to the cell at row i and column j.\n\nconstraints: \nfill initial board: \u2200i,j (if start[i,j] > 0 then puzzle[i,j] = start[i,j] else true endif) (Model 1)\n\u2200i,j (if start[i,j] > 0 then puzzle[i,j, start[i,j]] = 1 else true endif) (Model 2)\n\nThese constraints ensure that the initial values in the grid are preserved.\n\nAll different in rows: \u2200i (alldifferent([puzzle[i,j] | j in PuzzleRange])) (Model 1)\n\u2200i,k (\u2211j (puzzle[i,j,k]) == 1) (Model 2)\n\nThese constraints ensure that each row contains each number exactly once.\n\nAll different in columns: \u2200j (alldifferent([puzzle[i,j] | i in PuzzleRange])) (Model 1)\n\u2200j,k (\u2211i (puzzle[i,j,k]) == 1) (Model 2)\n\nThese constraints ensure that each column contains each number exactly once.\n\nEach cell must have a number assigned: \u2200i,j (\u2211k (puzzle[i,j,k]) == 1) (Model 2)\n\nThis constraint ensures that each cell contains exactly one number.\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1739, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca7363e7-e911-4be0-a777-85090ee3db08": {"__data__": {"id_": "ca7363e7-e911-4be0-a777-85090ee3db08", "embedding": null, "metadata": {"model_name": "QuasiGroupExistence"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "QuasiGroupExistence_expert", "node_type": "4", "metadata": {"model_name": "QuasiGroupExistence"}, "hash": "b12a634e46c9c0d506d33ee96d6608be41d3f6553c663018f5a939d6739d9849", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Quasigroup Existence Problem\n\ndescription: The Quasigroup Existence Problem is a classic problem in combinatorial mathematics, which involves finding a multiplication table of size n x n, where each element is an integer from 1 to n, such that each row and column contains each element exactly once, and certain multiplication axioms hold.\n\nvariables: quasiGroup[row, col], qgDiagonal[i]\n\nThe decision variables are a 2D array quasiGroup, where quasiGroup[row, col] represents the element at row and column in the multiplication table, and a 1D array qgDiagonal, where qgDiagonal[i] represents the diagonal element at position i.\n\nconstraints: \nall_different([quasiGroup[row,col] | col in nDomain]) /\\ \nall_different([quasiGroup[row,col] | row in nDomain]) /\\ \nquasiGroup[i,i] = i /\\ \nquasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i /\\ \nall_different(qgDiagonal) /\\ \nquasiGroup[i,j] != quasiGroup[j,i] /\\ \n(quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i) /\\ \nquasiGroup[i,n-1] + 2 >= i\n\nThe constraints ensure that:\n- Each row and column contains each element exactly once.\n- The diagonal elements are equal to their indices.\n- The multiplication axiom (b*a)*b = a*(b*a) holds.\n- The diagonal elements are all different.\n- The table is anti-Abelian, i.e., quasiGroup[i,j] is not equal to quasiGroup[j,i] for i != j.\n- If (i*i)=j then (j*j) = i.\n- Symmetry-breaking constraints to reduce the search space.\n\nobjective: The problem is a satisfaction problem, i.e., it does not have an objective function to minimize or maximize. The goal is to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bf15221-d9bc-46d0-977c-5dbdd1960785": {"__data__": {"id_": "0bf15221-d9bc-46d0-977c-5dbdd1960785", "embedding": null, "metadata": {"model_name": "queens"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "queens_expert", "node_type": "4", "metadata": {"model_name": "queens"}, "hash": "fbd280e5da76f031359deaed68bdf13cb5bcf239e9750fbcef9df50475206a17", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: N-Queens Problem\n\ndescription: The N-Queens Problem is a classic problem in computer science and mathematics, where the goal is to place N queens on an NxN chessboard such that no queen attacks another queen.\n\nvariables: q (or queens) \u2208 {1, ..., n}^n, where q[i] represents the column index of the queen in the i-th row.\n\nconstraints: \n\u2200i, j \u2208 {1, ..., n} (i \u2260 j) : q[i] \u2260 q[j] \u2227 q[i] + i \u2260 q[j] + j \u2227 q[i] - i \u2260 q[j] - j\n\u2200i \u2208 {1, ..., n} : q[i] is distinct\n\nThe first constraint ensures that no two queens are in the same column, and no two queens are on the same diagonal. The second constraint ensures that all queens are distinct.\n\nobjective: The objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to place N queens on an NxN chessboard such that no queen attacks another queen. There is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 975, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "517c0780-9fa6-47af-a703-fc6a3e794448": {"__data__": {"id_": "517c0780-9fa6-47af-a703-fc6a3e794448", "embedding": null, "metadata": {"model_name": "rcpsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rcpsp_expert", "node_type": "4", "metadata": {"model_name": "rcpsp"}, "hash": "55ec018f32ef2b2b8dc0fa2b249c41919422f1a5bcea7fbcc611eb1af782e5d7", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Resource-Constrained Project Scheduling Problem (RCPSP)\n\ndescription: The Resource-Constrained Project Scheduling Problem (RCPSP) is a classic problem in operations research and project management. It involves scheduling a set of tasks with given durations and resource requirements, subject to resource availability constraints and precedence constraints between tasks. The goal is to find a schedule that minimizes the total project duration.\n\nvariables: s \u2208 TIME ^ TASK, where s[t] represents the start time of task t.\n\nThe decision variables are the start times of each task, which determine the schedule of the project.\n\nconstraints: \n\u2200p \u2208 PREC, s[pre[p,1]] + d[pre[p,1]] \u2264 s[pre[p,2]]\n\u2200r \u2208 RESOURCE, cumulative(s, d, [res[r,t]|t \u2208 TASK], L[r])\n\nThe first constraint enforces the precedence relationships between tasks, ensuring that a task cannot start before its predecessors have finished. The second constraint ensures that the resource usage of all tasks does not exceed the available resource limit at any time.\n\nobjective: minimize max(t \u2208 TASK)(s[t] + d[t])\n\nThe objective is to minimize the maximum completion time of all tasks, which represents the total project duration.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2ec588f-868a-40ab-bd43-2fefb0b5e4bf": {"__data__": {"id_": "c2ec588f-868a-40ab-bd43-2fefb0b5e4bf", "embedding": null, "metadata": {"model_name": "rehearsal"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "rehearsal_expert", "node_type": "4", "metadata": {"model_name": "rehearsal"}, "hash": "bbe323381df8d51322c8a1316e1c4142615a1f4617d1e327286fb9aecb4b1720", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Rehearsal Scheduling Problem\n\ndescription: The problem involves scheduling a rehearsal for a concert consisting of nine pieces of music with different durations, each requiring a different combination of five orchestra players. The goal is to find an order in which the pieces can be rehearsed to minimize the total time that players are waiting to play, i.e., the total time when players are present but not currently playing.\n\nvariables: rehearsal_order \u2208 {1, ..., num_pieces}^num_pieces, waiting_time \u2208 \u2124^num_players, p_from \u2208 {1, ..., num_pieces}^num_players, p_to \u2208 {1, ..., num_pieces}^num_players, total_waiting_time \u2208 \u2124\n\nThe decision variables are:\n- rehearsal_order: an array representing the order in which the pieces are rehearsed\n- waiting_time: an array representing the waiting time for each player\n- p_from and p_to: arrays representing the first and last pieces each player is involved in, respectively\n- total_waiting_time: the total waiting time for all players\n\nconstraints: \nall_different(rehearsal_order), \np_from[p] < p_to[p] \u2200p \u2208 {1, ..., num_players}, \nrehearsal[p, rehearsal_order[i]] = 0 \u2200p \u2208 {1, ..., num_players}, i < p_from[p], \nrehearsal[p, rehearsal_order[i]] = 0 \u2200p \u2208 {1, ..., num_players}, i > p_to[p], \nwaiting_time[p] = \u2211(i \u2208 {1, ..., num_pieces}) (duration[rehearsal_order[i]] * bool2int(i \u2265 p_from[p] \u2227 i \u2264 p_to[p] \u2227 rehearsal[p, rehearsal_order[i]] = 0)) \u2200p \u2208 {1, ..., num_players}, \nrehearsal_order[1] < rehearsal_order[num_pieces]\n\nThe constraints are:\n- all_different(rehearsal_order): ensures that each piece is rehearsed exactly once\n- p_from[p] < p_to[p]: ensures that the first piece each player is involved in is before the last piece\n- rehearsal[p, rehearsal_order[i]] = 0: ensures that players are not involved in pieces before their first or after their last piece\n- waiting_time[p] = ...: calculates the waiting time for each player\n- rehearsal_order[1] < rehearsal_order[num_pieces]: breaks symmetry by ensuring that the first piece is rehearsed before the last piece\n\nobjective: minimize total_waiting_time", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8bf1adf-d2b5-413f-aa1d-d573e43f3992": {"__data__": {"id_": "a8bf1adf-d2b5-413f-aa1d-d573e43f3992", "embedding": null, "metadata": {"model_name": "restart"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "restart_expert", "node_type": "4", "metadata": {"model_name": "restart"}, "hash": "bae67b515329113b306c7e28b877733d697fb4c01f50a08887a63e0387eb03af", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Permutation with Restrictions\n\ndescription: This problem involves finding a permutation of numbers from 1 to 10, where the first element is at least 9, and all elements from the second to the tenth are at most 9. The goal is to find a permutation that satisfies these restrictions.\n\nvariables: x = (x[1], x[2], ..., x[10]) \u2208 {1, 2, ..., 10}^10\nThese variables represent the elements of the permutation, where x[i] is the i-th element of the permutation.\n\nconstraints: \n\u2200i, j \u2208 {1, 2, ..., 10} where i < j, x[i] \u2260 x[j] (alldifferent constraint)\n\u2200i \u2208 {2, 3, ..., 10}, x[i] \u2264 9\nx[1] \u2265 9\nThe first constraint ensures that all elements in the permutation are distinct. The second constraint restricts the values of elements from the second to the tenth to be at most 9. The third constraint ensures that the first element is at least 9.\n\nobjective: satisfy\nThe objective of this problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1079, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "121ebeeb-637e-41e6-b316-f650eb95b4cb": {"__data__": {"id_": "121ebeeb-637e-41e6-b316-f650eb95b4cb", "embedding": null, "metadata": {"model_name": "RosteringProblem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "RosteringProblem_expert", "node_type": "4", "metadata": {"model_name": "RosteringProblem"}, "hash": "ade2204cb014c14e4fb4e747ac43ec821e9d6df147673d6337e747c18a46ffd0", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Nurse Rostering Problem\n\ndescription: The Nurse Rostering Problem is a classic problem in constraint programming that involves creating a schedule for nurses to work in a hospital. The problem involves assigning shifts to nurses over a certain period of time, taking into account various constraints such as the number of nurses required for each shift, the minimum and maximum number of consecutive days a nurse can work, and the requirement for rest days.\n\nvariables: plan1d, plan2d, plan2dT, s_min_arrays, s_max_arrays\nplan1d, plan2d, and plan2dT are arrays of decision variables that represent the shift assignments for each nurse over the planning period. plan1d is a 1D array, while plan2d and plan2dT are 2D arrays that represent the same schedule in different formats. s_min_arrays and s_max_arrays are helper arrays used to model the minimum and maximum consecutive days constraints.\n\nconstraints: \nC_equalDays: plan2d[week, daysPerWeek - 1] == plan2d[week, daysPerWeek]\nC_shiftRepetitions: forall(day in 1..numberOfDays - s_min) (plan1d[day] != plan1d[day+1] -> all_equal(plan1d[day+1..day+s_min]))\nC_shiftRepetitions: forall(day in 1..numberOfWeeks * daysPerWeek - s_max) ((all_equal(plan1d[day..day+s_max])) -> (plan1d[day] != plan1d[day + s_max]))\nC_restDays: forall(day in 1..(numberOfWeeks - 2) * daysPerWeek) (count(j in plan1d[day..day + daysPerWeek * 2])(j=0) >= 2)\nC_shiftOrder: forall(day in 2..numberOfWeeks * daysPerWeek - 1) (plan1d[day] <= plan1d[day + 1] \\/ plan1d[day+1] == 0)\nC_shiftRequirements: forall(day in 1..daysPerWeek) ((global_cardinality(row(plan2dT,day),[0,1,2,3],row(shiftRequirements,day))))\n\nThese constraints ensure that: \n- weekend days have the same shift\n- there is a minimum and maximum number of consecutive days with the same shift\n- there are at least 2 rest days every 2 weeks\n- the order of shifts follows a forward rotating principle\n- the number of required staff for each shift is satisfied\n\nobjective: The objective of the problem is to find a feasible schedule that satisfies all the constraints, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c521e34-1e88-45ed-8b2b-2f9c254f925b": {"__data__": {"id_": "4c521e34-1e88-45ed-8b2b-2f9c254f925b", "embedding": null, "metadata": {"model_name": "sb"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sb_expert", "node_type": "4", "metadata": {"model_name": "sb"}, "hash": "48074b465a661dc58e29446ffb6ce1e10d4844eb0c348788b0029c88bcd030e7", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Solitaire Battleships\n\ndescription: Solitaire Battleships is a puzzle where a partially filled board is given along with the number of ships in each row and column. The goal is to fill the board with ships of different lengths, respecting the given constraints.\n\nvariables: `board[i, j], fill[i, j], npiece[p]`\n\n* `board[i, j]`: a variable representing the type of piece (water, submarine, left/right/top/bottom of a ship, or middle of a ship) at position `(i, j)` on the board.\n* `fill[i, j]`: a binary variable indicating whether the piece at position `(i, j)` is part of a ship or not.\n* `npiece[p]`: a variable representing the number of pieces of type `p` on the board.\n\nconstraints: \n`hint[i, j] != 0 -> board[i, j] == hint[i, j], \nboard[i, 0] == w, board[i, width + 1] == w, \nboard[0, j] == w, board[height + 1, j] == w, \nfill[i, j] = bool2int(board[i, j] != w), \nspacing constraints, \nship shape constraints, \nsum up pieces, \npiece sum constraints, \ncount number of bigger ships, \nrow sums respected, \ncolumn sums respected`\n\n* `hint[i, j] != 0 -> board[i, j] == hint[i, j]`: ensure that the initial hints are respected.\n* `board[i, 0] == w, board[i, width + 1] == w, board[0, j] == w, board[height + 1, j] == w`: ensure that the extended rows and columns are empty.\n* `fill[i, j] = bool2int(board[i, j] != w)`: ensure that the fill array matches the board.\n* `spacing constraints`: ensure that there are gaps between ships.\n* `ship shape constraints`: ensure that ships are correctly formed.\n* `sum up pieces`: count the number of each type of piece.\n* `piece sum constraints`: ensure that the number of pieces of each type matches the given ship lengths.\n* `count number of bigger ships`: count the number of ships of each length.\n* `row sums respected`: ensure that the sum of pieces in each row matches the given row sum.\n* `column sums respected`: ensure that the sum of pieces in each column matches the given column sum.\n\nobjective: The objective is to satisfy all the constraints, i.e., to find a feasible solution. There is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33c286db-cb60-494c-afe6-0273abc3787f": {"__data__": {"id_": "33c286db-cb60-494c-afe6-0273abc3787f", "embedding": null, "metadata": {"model_name": "schur"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "schur_expert", "node_type": "4", "metadata": {"model_name": "schur"}, "hash": "1b0b312d749e4d4a1838d78fa94b3daf547cd6dd257096e308f4a70df193ffb8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Schur's Numbers Problem\n\ndescription: The Schur's Numbers Problem is a classic problem in constraint programming that involves placing n balls labeled 1 to n into c boxes such that no box contains a triple of balls {x, y, z} where x + y = z.\n\nvariables: box = (box[1], ..., box[n]) \u2208 {1, ..., c}^n\nThe decision variables are the box assignments for each ball, where box[i] represents the box that ball i is placed in.\n\nconstraints: \u2200i \u2208 {1, ..., n-1}, \u2200j \u2208 {i+1, ..., n-i} : box[i] \u2260 box[j] \u2228 box[i] \u2260 box[i+j] \u2228 box[j] \u2260 box[i+j]\nThe constraints ensure that for any two balls i and j, if ball i is in box k, then ball j cannot be in box k, and ball i+j cannot be in box k.\n\nobjective: satisfy\nThe objective is to find a feasible solution that satisfies all the constraints, i.e., to determine if it is possible to place the balls in the boxes according to the given rules.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 963, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91471fe6-d609-4a10-b7ee-5bcc0bd5c0da": {"__data__": {"id_": "91471fe6-d609-4a10-b7ee-5bcc0bd5c0da", "embedding": null, "metadata": {"model_name": "setselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "setselect_expert", "node_type": "4", "metadata": {"model_name": "setselect"}, "hash": "36ed410edb2f82a6373598a594e03b7c02915318ac521a71338ee267bf72fb7f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Set Covering Problem\n\ndescription: The Set Covering Problem is a classic problem in computer science and operations research that involves finding a subset of elements that covers all subsets of a given set. In this problem, we have a set of elements and a collection of subsets of these elements. The goal is to select a subset of the elements such that each subset in the collection contains at most one element from the selected subset.\n\nvariables: x (Model 1), x (Model 2), x[1..u] (Model 3), x[1..u] (Model 4)\nThe decision variables represent the elements to be selected from the set of elements. In Models 1 and 2, x is a set of elements, while in Models 3 and 4, x is an array of variables representing the selected elements.\n\nconstraints: \ncard(x intersect s[i]) <= 1 (Model 1, 2), \ncard(x) = u (Model 2), \nx[i] < x[i+1] (Model 3), \nx[i] != x[j] (Model 3), \nsum(j in 1..u)(x[j] in s[i]) <= 1 (Model 3, 4), \nx[i] >= (x[i] != 0) + x[i+1] (Model 4)\nThe constraints ensure that each subset in the collection contains at most one element from the selected subset (card(x intersect s[i]) <= 1). In Model 2, the cardinality of the selected subset is fixed to u. In Model 3, the selected elements are distinct and in increasing order. In Model 4, the selected elements are also distinct, and the constraint ensures that the elements are in decreasing order.\n\nobjective: maximize sum(i in x)(i) (Model 1, 2), maximize sum(x) (Model 3, 4)\nThe objective is to maximize the sum of the selected elements.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ec471c4-0cd9-4759-9564-7513ca8c654b": {"__data__": {"id_": "0ec471c4-0cd9-4759-9564-7513ca8c654b", "embedding": null, "metadata": {"model_name": "shipping"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "shipping_expert", "node_type": "4", "metadata": {"model_name": "shipping"}, "hash": "39920e8b96594450ae8e4200ebdd38747dd60dc26a36beb1a996588db3d439be", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Transportation Problem\n\ndescription: The Transportation Problem is a classic problem in Operations Research and Management Science that involves finding the most cost-effective way to transport goods from a set of factories to a set of warehouses. Each factory has a limited production capacity, and each warehouse has a certain demand that must be met. The goal is to determine the optimal shipment quantities from each factory to each warehouse to minimize the total transportation cost.\n\nvariables: ship[f,w] (f \u2208 FACT, w \u2208 WARE) - The decision variables represent the quantity of goods to be shipped from factory f to warehouse w.\n\nconstraints: \n\u2200f \u2208 FACT, w \u2208 WARE : ship[f,w] \u2265 0 - Each shipment quantity must be non-negative.\n\u2200w \u2208 WARE : \u2211(f \u2208 FACT) ship[f,w] \u2265 demand[w] - The total quantity shipped to each warehouse must meet its demand.\n\u2200f \u2208 FACT : \u2211(w \u2208 WARE) ship[f,w] \u2264 production[f] - The total quantity shipped from each factory must not exceed its production capacity.\n\nobjective: Minimize \u2211(f \u2208 FACT, w \u2208 WARE) cost[f,w]*ship[f,w] - The objective is to minimize the total transportation cost, which is the sum of the product of the cost of shipping from each factory to each warehouse and the corresponding shipment quantity.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73ae44f6-c029-4797-91a3-607e464de338": {"__data__": {"id_": "73ae44f6-c029-4797-91a3-607e464de338", "embedding": null, "metadata": {"model_name": "simple-prod-planning"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "simple-prod-planning_expert", "node_type": "4", "metadata": {"model_name": "simple-prod-planning"}, "hash": "381564e648bdacc13fafe37cfe23931037217ebe2100bee57b01c7aa700ab7a4", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Production Planning Problem\n\ndescription: The Production Planning Problem is a classic problem in Operations Research and Management Science. It involves determining the optimal production levels of different products to maximize profit, given limited resources and production constraints.\n\nvariables: produce[p] (p \u2208 Products), used[r] (r \u2208 Resources)\nThese variables represent the decision variables in the problem. produce[p] represents the quantity of product p to be produced, and used[r] represents the amount of resource r used in the production process.\n\nconstraints: \n\u2200r \u2208 Resources, used[r] = \u2211(p \u2208 Products)(consumption[p, r] * produce[p]) \u2227 used[r] \u2264 capacity[r]\nThese constraints ensure that the total amount of each resource used does not exceed the available capacity. The first part of the constraint calculates the total amount of resource r used, and the second part ensures that it does not exceed the capacity.\n\nobjective: Maximize \u2211(p \u2208 Products)(profit[p]*produce[p])\nThe objective of the problem is to maximize the total profit, which is calculated by summing the profit of each product multiplied by its production quantity.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3aace288-cf67-4fc0-b778-216b71a31fc7": {"__data__": {"id_": "3aace288-cf67-4fc0-b778-216b71a31fc7", "embedding": null, "metadata": {"model_name": "sonet_problem"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "sonet_problem_expert", "node_type": "4", "metadata": {"model_name": "sonet_problem"}, "hash": "1563b2d21dd2adfd3ae60098f783183c8db1378b8f488459dfbc425c09499f0f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: SONET Problem\n\ndescription: The SONET problem is a network design problem where a network needs to be set up between a set of nodes, with some nodes requiring a connection. The nodes are connected by putting them on a ring, where all nodes on a ring can communicate. The goal is to set up a network using a minimal amount of Add-Drop Multiplexers (ADMs).\n\nvariables: $rings_{i,j} \\in \\{0,1\\}$ for $i \\in \\{1, \\ldots, r\\}$ and $j \\in \\{1, \\ldots, n\\}$. These variables represent the assignment of nodes to rings, where $rings_{i,j} = 1$ if node $j$ is assigned to ring $i$ and $0$ otherwise.\n\nconstraints: \n$\\sum_{i=1}^r rings_{i,j} + \\sum_{i=1}^r rings_{i,k} \\geq 2$ for all $j, k \\in \\{1, \\ldots, n\\}$ such that $j < k$ and $demand_{j,k} = 1$.\n$\\sum_{j=1}^n rings_{i,j} \\leq capacity\\_nodes_i$ for all $i \\in \\{1, \\ldots, r\\}$.\n\nThe first constraint ensures that if there is a demand between two nodes, then there exists a ring on which both nodes are installed. The second constraint ensures that the capacity of each ring is not exceeded.\n\nobjective: Minimize the total number of ADMs used, which is represented by the variable $z = \\sum_{i=1}^r \\sum_{j=1}^n rings_{i,j}$.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f52ea9b-1132-4d64-a70c-afc56ea9e853": {"__data__": {"id_": "6f52ea9b-1132-4d64-a70c-afc56ea9e853", "embedding": null, "metadata": {"model_name": "square_pack"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "square_pack_expert", "node_type": "4", "metadata": {"model_name": "square_pack"}, "hash": "0a9513f736badc4428ad42a6d4939dcbbd6709e3569b17851b16e7049281e041", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: 2D Rectangular Packing Problem\n\ndescription: The 2D Rectangular Packing Problem is a classic problem in constraint programming where we are given a set of rectangles of different sizes and we need to pack them into a larger rectangle of minimum area, such that no two rectangles overlap and all rectangles are fully contained within the larger rectangle.\n\nvariables: height, width, area, x, y\n\nheight and width are the dimensions of the larger rectangle, area is the area of the larger rectangle, x and y are arrays of variables representing the x and y coordinates of the top-left corner of each rectangle.\n\nconstraints: \nx[s] + s <= width, y[s] + s <= height, \n(x[s1] + s1 <= x[s2] \\/ x[s2] + s2 <= x[s1] \\/ y[s1] + s1 <= y[s2] \\/ y[s2] + s2 <= y[s1])\n\nThe first two constraints ensure that each rectangle is fully contained within the larger rectangle. The third constraint ensures that no two rectangles overlap.\n\nobjective: minimize area", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "187adeda-c3d7-4b2b-b4d7-42adce76ba6c": {"__data__": {"id_": "187adeda-c3d7-4b2b-b4d7-42adce76ba6c", "embedding": null, "metadata": {"model_name": "stableroommates"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stableroommates_expert", "node_type": "4", "metadata": {"model_name": "stableroommates"}, "hash": "4e698a88c56edfd93a2f061ad7fa0ce79a8fc61989cc5df74ae89ea2996d6362", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Stable Roommates Problem\n\ndescription: The Stable Roommates Problem is a classic problem in constraint programming that involves finding a stable matching between a set of agents, where each agent has a preference order over the other agents. The goal is to find a matching such that there is no pair of agents who prefer each other to their current match.\n\nvariables: a[i] (i in AGENT)\n\nThe decision variables a[i] represent the ranking of agent i in the stable matching.\n\nconstraints:\n- a[i] <= npref[i] + 1 (i in AGENT)\n- a[i] > rank[i,j] -> a[j] < rank[j,i] (i in AGENT, p in 1..npref[i], j = pref[i,p])\n- a[i] = rank[i,j] -> a[j] = rank[j,i] (i in AGENT, p in 1..npref[i], j = pref[i,p])\n\nThe constraints ensure that each agent is matched with one of their top npref[i] preferences, and that the matching is stable. The first constraint ensures that each agent is matched with a rank no higher than their number of preferences plus one. The second and third constraints ensure that if agent i prefers agent j to their current match, then agent j must prefer their current match to agent i, and vice versa.\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba0f8fee-a6a8-4a33-9efc-c2cb5d5e537c": {"__data__": {"id_": "ba0f8fee-a6a8-4a33-9efc-c2cb5d5e537c", "embedding": null, "metadata": {"model_name": "steiner"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "steiner_expert", "node_type": "4", "metadata": {"model_name": "steiner"}, "hash": "7d6b943bbd10ebdaff7df249ad882ef2f4541e12643806d74b04a2540bcace08", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Ternary Steiner Problem\n\ndescription: The Ternary Steiner Problem is a classic problem in combinatorial mathematics that involves finding a collection of sets, each containing three elements, such that any two sets have at most one element in common.\n\nvariables: Sets = {S_1, S_2, ..., S_NB}, where S_i \u2286 {1, 2, ..., N}\n\nThe decision variables are the sets S_i, which are subsets of {1, 2, ..., N}, and NB is the number of sets, calculated as N*(N-1)/6.\n\nconstraints: \ncard(S_i) = 3 \u2200i \u2208 {1, 2, ..., NB}\ncard(S_i \u2229 S_j) \u2264 1 \u2200i, j \u2208 {1, 2, ..., NB} where i < j\ndecreasing(Sets)\n\nThe constraints ensure that each set S_i has exactly three elements, any two sets S_i and S_j have at most one element in common, and the sets are ordered in a decreasing manner (symmetry breaking).\n\nobjective: satisfy\n\nThe objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific value. The problem is a satisfaction problem, where the goal is to find a valid assignment of values to the decision variables that meets all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "491dcf3d-dd07-475f-9c4a-22155be95a54": {"__data__": {"id_": "491dcf3d-dd07-475f-9c4a-22155be95a54", "embedding": null, "metadata": {"model_name": "stoch_fjsp"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "stoch_fjsp_expert", "node_type": "4", "metadata": {"model_name": "stoch_fjsp"}, "hash": "5a2fdad307283ab8ee839aae2199c5f339d3b76f3096aae225a3b78e685dd51c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Stochastic General Assignment Problem\n\ndescription: The Stochastic General Assignment Problem is a variant of the classic assignment problem, where tasks need to be assigned to machines and scheduled to minimize the expected makespan. The problem is stochastic because the processing times of the tasks are uncertain and are represented by multiple scenarios. The problem involves two stages: in the first stage, tasks are assigned to machines, and in the second stage, the tasks are scheduled on the machines based on the observed processing times.\n\nvariables: `start[s,t], dur[s,t], b[o], de_objective[s], objective`\n\n* `start[s,t]`: the start time of task `t` in scenario `s`\n* `dur[s,t]`: the duration of task `t` in scenario `s`\n* `b[o]`: a boolean variable indicating whether optional task `o` is executed\n* `de_objective[s]`: the makespan of scenario `s`\n* `objective`: the expected makespan over all scenarios\n\nconstraints: \n`start[s,i] + dur[s,i] <= start[s,i + 1], \ndur[s,t] = optt_dur[s,o] <-> b[o], \nsum(o in optts[t])(bool2int(b[o])) <= 1, \nexists(o in optts[t])(b[o]), \nb[o1] <-> not(b[o2]), \ncumulative(start, dur, b, 1), \nstart[s,last_task[j]] + dur[s,last_task[j]] <= de_objective[s], \nobjective = sum(s in SCENARIOS)(weights[s]*de_objective[s])`\n\n* Precedence relations: each task must start after its predecessor\n* Duration constraints: the duration of a task is equal to the duration of the selected optional task\n* Optional tasks' constraints: at most one optional task can be executed for each task, and if an optional task is executed, its duration is used\n* Resource constraints: the cumulative duration of tasks on each machine does not exceed the machine's capacity\n* Objective constraint: the makespan of each scenario is the maximum completion time of all tasks\n* Objective function: the expected makespan over all scenarios\n\nobjective: Minimize the expected makespan over all scenarios.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 2005, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86e7382b-31ba-4ff8-97b4-703021fe84cd": {"__data__": {"id_": "86e7382b-31ba-4ff8-97b4-703021fe84cd", "embedding": null, "metadata": {"model_name": "submultisetsum"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "submultisetsum_expert", "node_type": "4", "metadata": {"model_name": "submultisetsum"}, "hash": "0441f0ae7d3065275cee636895ebdeee2ca231511e072a521f39fa1bf0a926c3", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Subset Sum Problem\n\ndescription: The Subset Sum Problem is a classic problem in computer science and mathematics that involves finding a subset of a given set of integers that sums up to a target value.\n\nvariables: selected \u2286 NUMBER\nThe decision variable is a set of indices selected from the set NUMBER, which represents the subset of numbers to be selected.\n\nconstraints: \u2211(i \u2208 selected) number[i] = target\nThe constraint ensures that the sum of the numbers corresponding to the selected indices is equal to the target value.\n\nobjective: satisfy\nThe objective of the problem is to find a feasible solution that satisfies the constraint, i.e., to find a subset of numbers that sums up to the target value.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dd54293-e7e5-41ef-a8e7-a184c1260587": {"__data__": {"id_": "9dd54293-e7e5-41ef-a8e7-a184c1260587", "embedding": null, "metadata": {"model_name": "table_seating"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "table_seating_expert", "node_type": "4", "metadata": {"model_name": "table_seating"}, "hash": "8c58d5c6b88149a2cc8c908eec1efcbaadb2ce466e3367df29160f2619c072e7", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Social Golfers Problem\n\ndescription: The Social Golfers Problem is a classic constraint satisfaction problem that involves assigning golfers to tables of a fixed size, subject to certain constraints. The problem is to find an assignment that minimizes the total sum of table numbers for all couples.\n\nvariables: table[t] (t in TABLE), seat[p] (p in PERSON)\n\nThe decision variables are table[t], which represents the set of people assigned to table t, and seat[p], which represents the table number assigned to person p.\n\nconstraints: \nforall(t in TABLE)(card(table[t]) <= S), \nforall(p in PERSON)(exists(t in TABLE)(p in table[t])), \nforall(c in index_set_1of2(couples))(not_same_table(couples[c,1],couples[c,2])), \nforall(p1,p2 in key where p1 < p2)(not_same_table(p1,p2)), \nforall(t in TABLE, p in PERSON)(p in table[t] <-> seat[p] = t)\n\nThe constraints ensure that each table has at most S people, each person is assigned to a table, couples are not assigned to the same table, people in the key set are not assigned to the same table, and the relationship between table and seat variables is maintained.\n\nobjective: minimize obj\n\nThe objective is to minimize the total sum of table numbers for all couples, where obj is the sum of table numbers for each couple.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1075c261-3954-409c-b72e-c8a40bc614ed": {"__data__": {"id_": "1075c261-3954-409c-b72e-c8a40bc614ed", "embedding": null, "metadata": {"model_name": "teamselect"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "teamselect_expert", "node_type": "4", "metadata": {"model_name": "teamselect"}, "hash": "acc27419888659a1a0efffed9afc8fbe18e77984898238286b691da42061c34a", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Team Selection Problem\n\ndescription: The Team Selection Problem is a classic problem in constraint programming that involves selecting three teams of six players each from a pool of 11 players, such that each team has at least one goalie, two defenders, and two forwards, and the total value of the players in each team is maximized.\n\nvariables: Xavier, Yuri, Zena \u2286 {1, ..., 11} \nThese variables represent the sets of players selected for each of the three teams, Xavier, Yuri, and Zena.\n\nconstraints: \ncard(Xavier) = 6, card(Yuri) = 6, card(Zena) = 6 \nThese constraints ensure that each team has exactly six players.\n\ncard(Xavier \u2229 GOALIE) \u2265 1, card(Yuri \u2229 GOALIE) \u2265 1, card(Zena \u2229 GOALIE) \u2265 1 \nThese constraints ensure that each team has at least one goalie.\n\ncard(Xavier \u2229 DEFENCE) \u2265 2, card(Yuri \u2229 DEFENCE) \u2265 2, card(Zena \u2229 DEFENCE) \u2265 2 \nThese constraints ensure that each team has at least two defenders.\n\ncard(Xavier \u2229 OFFENCE) \u2265 2, card(Yuri \u2229 OFFENCE) \u2265 2, card(Zena \u2229 OFFENCE) \u2265 2 \nThese constraints ensure that each team has at least two forwards.\n\ncard(Xavier \u2229 Yuri) \u2264 2, card(Xavier \u2229 Zena) \u2264 2 \nThese constraints ensure that no more than two players are shared between any two teams.\n\nobjective: maximize \u2211(c in CAPTAIN)(\u2211(p in team[c])(value[c,p])) \nThe objective is to maximize the total value of the players in all three teams.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1435, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3d80f72-a219-46b0-a7fd-a1ec6b831312": {"__data__": {"id_": "b3d80f72-a219-46b0-a7fd-a1ec6b831312", "embedding": null, "metadata": {"model_name": "template_design"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "template_design_expert", "node_type": "4", "metadata": {"model_name": "template_design"}, "hash": "92e1fc822ba7a7483707174571addfcc54815ae7b064ce4eabe231257585d82e", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Template Design Problem\n\ndescription: The Template Design Problem is a classic problem in constraint programming that involves designing templates for printing variations of a product. The goal is to determine the optimal allocation of slots on each template to meet the demand for each variation while minimizing the total production.\n\nvariables: p[i, j], R[j], Production, Surplus\n\np[i, j] represents the number of slots allocated to variation i in template j. R[j] represents the number of pressings of template j. Production represents the total number of pressings. Surplus represents the excess production beyond the total demand.\n\nconstraints: \nProduction = sum(R[j]), \nProduction >= llower /\\ Production <= lupper, \nsum(p[i, j]) = S, \nsum(p[i, j]*R[j]) >= d[i], \nlex_lesseq([p[i,  j] | j in 1..t], [p[i+1,j] | j in 1..t]), \nsum(p[i, j]*R[j]) <= sum(p[i+1, j]*R[j]), \nSurplus = Production*S - sum(d[i]), \nsum(p[k, j]*R[j]-d[k]) <= Surplus, \nsum(p[m, j]*R[j]-d[m]) <= Surplus, \nR[1] <= Production div 2, \nR[2] >= Production div 2, \nR[1] <= Production div 3, \nR[2] <= Production div 2, \nR[3] >= Production div 3\n\nThese constraints ensure that the total production is the sum of the pressings, the production is within the bounds, each template has S slots, the demand for each variation is met, symmetry and pseudo-symmetry constraints are satisfied, the surplus is correctly calculated, and the run length constraints are satisfied.\n\nobjective: minimize Production", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1560, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08267fc1-3060-46f2-8001-7e7319ab7f7c": {"__data__": {"id_": "08267fc1-3060-46f2-8001-7e7319ab7f7c", "embedding": null, "metadata": {"model_name": "toomany"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "toomany_expert", "node_type": "4", "metadata": {"model_name": "toomany"}, "hash": "ee19cf361a2bd061b431a851ba66ebf71b20d7bb9317b491694c5c5ba018225b", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Production Planning Problem\n\ndescription: This problem involves planning the production of different colored items on multiple machines, subject to various constraints on the production capacity of each machine and the total production of each color. The goal is to maximize the total production across all machines and colors.\n\nvariables: produce[m,c] (m \u2208 MACHINE, c \u2208 COLOR)\n\nThe decision variables represent the amount of each color produced on each machine, where produce[m,c] is the amount of color c produced on machine m.\n\nconstraints: \n\u2200m \u2208 MACHINE: \u2211(c \u2208 COLOR)(produce[m,c]) \u2264 k\n\u2200c \u2208 COLOR: \u2211(m \u2208 MACHINE)(produce[m,c]) \u2265 l[c]\n\u2200c \u2208 COLOR: \u2211(m \u2208 MACHINE)(produce[m,c]) \u2264 u[c]\n\u2200m \u2208 MACHINE: produce[m,white] > 0 \u2227 produce[m,black] > 0 \u2192 produce[m,blue] = 0\n\u2200m \u2208 MACHINE: produce[m,blue] \u2264 produce[m,red]\n\u2200m \u2208 MACHINE: produce[m,red] mod 4 = 0\n\u2200m \u2208 MACHINE: produce[m,white] mod 3 = 0\n\nThe constraints ensure that:\n- Each machine does not produce more than k units in total.\n- The total production of each color meets the lower bound l[c] and does not exceed the upper bound u[c].\n- If a machine produces both white and black, it cannot produce blue.\n- The production of blue on a machine does not exceed the production of red on the same machine.\n- The production of red on a machine is a multiple of 4.\n- The production of white on a machine is a multiple of 3.\n\nobjective: Maximize \u2211(m \u2208 MACHINE, c \u2208 COLOR)(produce[m,c])\n\nThe objective is to maximize the total production across all machines and colors.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "557d2fb0-24ef-40e6-aec0-3bd54f02e525": {"__data__": {"id_": "557d2fb0-24ef-40e6-aec0-3bd54f02e525", "embedding": null, "metadata": {"model_name": "traffic_lights_table"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "traffic_lights_table_expert", "node_type": "4", "metadata": {"model_name": "traffic_lights_table"}, "hash": "773768a520182d4a11e86cd79896e18b5506f3e1e20d386a2f7a5ef19b532e3f", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Traffic Lights Problem\n\ndescription: The Traffic Lights Problem is a classic constraint satisfaction problem that involves finding a valid configuration of traffic lights at a four-way junction. The problem consists of eight traffic lights, four for vehicles and four for pedestrians, each with a specific domain of possible states (red, red-yellow, green, and yellow for vehicles, and red and green for pedestrians). The goal is to find an assignment of states to the traffic lights that satisfies certain constraints, ensuring safe and efficient traffic flow.\n\nvariables: V = (V1, V2, V3, V4) \u2208 {r, ry, g, y}\u2074, P = (P1, P2, P3, P4) \u2208 {r, g}\u2074\nThe decision variables V and P represent the states of the traffic lights for vehicles and pedestrians, respectively, at each of the four intersections.\n\nconstraints: \u2200i, j \u2208 {1, 2, 3, 4} where j = (1+i) mod 4, (Vi, Pi, Vj, Pj) \u2208 {(r, r, g, g), (ry, r, y, r), (g, g, r, r), (y, r, ry, r)}\nThe constraints ensure that the traffic lights are configured in a way that allows safe and efficient traffic flow. Specifically, they enforce the rules that when a vehicle light is red, the corresponding pedestrian light is also red, and when a vehicle light is green, the corresponding pedestrian light is also green.\n\nobjective: satisfy\nThe objective of the problem is to find a feasible assignment of states to the traffic lights that satisfies all the constraints, without any specific optimization goal.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73683a10-74dd-4199-b871-fad3976780e3": {"__data__": {"id_": "73683a10-74dd-4199-b871-fad3976780e3", "embedding": null, "metadata": {"model_name": "TTPPV"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "TTPPV_expert", "node_type": "4", "metadata": {"model_name": "TTPPV"}, "hash": "9f9db16c03d0d4354910898c36323631caa557bf70b9902b161f9d28dac58b6c", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Traveling Tournament Problem with Predefined Venues\n\ndescription: The Traveling Tournament Problem with Predefined Venues is a classical problem in constraint programming that involves scheduling a round-robin tournament for a set of teams, where each team plays every other team exactly once, and the venue of each game has already been decided. The goal is to find a schedule that minimizes the total travel distance of all teams.\n\nvariables: opponent[i,k], venue[i,k], travel[i,k]\n\nThe decision variables are:\n- opponent[i,k]: the opponent of team i in round k\n- venue[i,k]: 1 if team i plays at home in round k, 2 otherwise\n- travel[i,k]: the distance travelled by team i to go play in round k (includes travelling back home after the last round)\n\nconstraints: \nopponent[i,k] != i, \nopponent[opponent[i,k],k] = i, \nalldifferent([opponent[i,k] | k in Rounds]), \nalldifferent([opponent[i,k] | i in Teams]), \nregular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States), \nopponent[1,1] < opponent[1,nbRounds], \nvenue[i,k] = pv[i,opponent[i,k]], \ntravel constraints (5 constraints)\n\nThe constraints are:\n- a team cannot play against itself\n- in round k, i plays j means j plays i\n- for each team i, all opponents are different\n- for each round k, all opponents are different\n- for each team i, there can be at most 3 consecutive home games and at most 3 consecutive away games\n- symmetry breaking: distances are symmetric so reversing the rounds yields a schedule of same cost\n- the venue of each game has already been decided\n- the travel variables are defined wrt venues of current- and next-round games\n\nobjective: minimize totalTravel", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cad03a0-c770-439b-813f-b6f92d2dbed9": {"__data__": {"id_": "2cad03a0-c770-439b-813f-b6f92d2dbed9", "embedding": null, "metadata": {"model_name": "vessel-loading"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "vessel-loading_expert", "node_type": "4", "metadata": {"model_name": "vessel-loading"}, "hash": "2bd1d4fb25b57d348b7289c760d4488e28a2fcb95bb5dc0ef91c153b8f0d4c2e", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Vessel Loading Problem\n\ndescription: The Vessel Loading Problem is a classic problem in constraint programming that involves loading a set of containers of different sizes and classes onto a vessel with a fixed deck width and length, subject to certain constraints. The goal is to find an arrangement of containers on the deck that maximizes the use of space while satisfying the constraints.\n\nvariables: \nLeft[c], Right[c], Bottom[c], Top[c] \u2208 {0, ..., deck_width} \u00d7 {0, ..., deck_length}, orientation[c] \u2208 {1, 2}\n\nThese variables represent the position and orientation of each container c on the deck. Left[c] and Right[c] are the leftmost and rightmost points of container c, respectively, while Bottom[c] and Top[c] are the bottommost and topmost points, respectively. The orientation variable determines whether the container is placed horizontally (orientation[c] = 1) or vertically (orientation[c] = 2).\n\nconstraints: \n\u2200c \u2208 Containers, Right[c] = Left[c] + ElemWidth[orientation[c]] \u2227 Top[c] = Bottom[c] + ElemLength[orientation[c]]\n\u2200c, k \u2208 Containers, c < k, Left[c] \u2265 Right[k] + separation[class[c], class[k]] \u2228 ... (three more disjuncts)\n\nThe first constraint ensures that the width and length of each container are correctly calculated based on its orientation. The second constraint ensures that containers of different classes are separated by a minimum distance, specified by the separation matrix.\n\nobjective: \nThere is no explicit objective function in this model. The goal is to find a feasible arrangement of containers that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d45a87f5-f396-432c-a7ca-03a2dab353d7": {"__data__": {"id_": "d45a87f5-f396-432c-a7ca-03a2dab353d7", "embedding": null, "metadata": {"model_name": "warehouses"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "warehouses_expert", "node_type": "4", "metadata": {"model_name": "warehouses"}, "hash": "ae97cb4ca7dc362696ea5ec3375d4148649bcc6b4725180fe13b0ba17c221fd8", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Warehouse Allocation Problem\n\ndescription: The Warehouse Allocation Problem is a classic problem in operations research and logistics. It involves determining the optimal allocation of warehouses to supply stores with goods, while minimizing the overall cost, which includes the construction cost of warehouses and the transportation cost from warehouses to stores.\n\nvariables: \nsupplier[i] \u2208 {1, ..., n_suppliers}, open[i] \u2208 {true, false}, cost[i] \u2208 {1, ..., MaxCost}, tot \u2208 {1, ..., MaxTotal}\n\nThe decision variables are:\n- supplier[i]: the warehouse that supplies store i\n- open[i]: a boolean indicating whether warehouse i is constructed or not\n- cost[i]: the transportation cost from the warehouse that supplies store i to store i\n- tot: the total cost, which is the sum of the construction costs of the warehouses and the transportation costs from the warehouses to the stores\n\nconstraints: \n\u2211(i in 1..n_suppliers) (building_cost * bool2int(open[i])) + \u2211(i in 1..n_stores) (cost[i]) = tot\ncost_matrix[i,supplier[i]] = cost[i]\ncount(supplier,i,use) \u2227 use \u2264 capacity[i]\n(exists (j in 1..n_stores) (supplier[j] == i)) == open[i]\n\nThe constraints are:\n- The total cost is the sum of the construction costs of the warehouses and the transportation costs from the warehouses to the stores\n- The transportation cost from the warehouse that supplies store i to store i is equal to the cost_matrix value at the corresponding row and column\n- The number of stores supplied by warehouse i does not exceed its capacity\n- A warehouse is constructed if and only if it supplies at least one store\n\nobjective: \nminimize tot\n\nThe objective is to minimize the total cost, which is the sum of the construction costs of the warehouses and the transportation costs from the warehouses to the stores.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e3aa236-d73b-475c-ba25-49cd36b103dc": {"__data__": {"id_": "6e3aa236-d73b-475c-ba25-49cd36b103dc", "embedding": null, "metadata": {"model_name": "water_buckets1"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "water_buckets1_expert", "node_type": "4", "metadata": {"model_name": "water_buckets1"}, "hash": "c071eab6a88a47fcb9cce0c7de10653e8b8163372981fddadb41d02b9a5332b5", "class_name": "RelatedNodeInfo"}}, "text": "Description:\n                    ---------\n                    name: Water Buckets Problem\n\ndescription: The Water Buckets Problem is a classic problem in constraint programming. It involves dividing a certain amount of water into two buckets of specific capacities using a series of pouring operations. The goal is to find the minimum number of transfers required to achieve a specific goal configuration of water in the buckets.\n\nvariables: `state[steps, buckets]`, `goal_step`\n\nThe decision variables are `state[steps, buckets]`, which represents the amount of water in each bucket at each time step, and `goal_step`, which represents the minimum number of steps required to reach the goal configuration.\n\nconstraints: \n`start[b] <= capacity[b]`, `goal[b] <= capacity[b]`, \n`sum(b in buckets)(start[b]) = sum(b in buckets)(goal[b])`, \n`state[1,b]=start[b]`, `state[goal_step,b] = goal[b]`, \n`sum(b in buckets)(bool2int(state[step,b] != state[step+1, b])) = 2`, \n`sum(b in buckets)(state[step,b]) = sum(b in buckets)(state[step+1,b])`, \n`((state[step, b1] != state[step+1, b1]) /\\ (state[step, b2] != state[step, b2])) -> (state[step+1,b1] = 0 \\/ state[step+1,b1] = capacity[b1] \\/ state[step+1,b2] = 0 \\/ state[step+1,b2] = capacity[b2])`\n\nThe constraints ensure that the initial and goal configurations are within the capacity of the buckets, the total amount of water is conserved, the initial and goal configurations are reached, exactly two buckets change in each step, the total amount of water is conserved in each step, and the pouring operation is valid (i.e., the source bucket becomes empty or the target bucket becomes full).\n\nobjective: `minimize goal_step`\n\nThe objective is to minimize the number of steps required to reach the goal configuration.", "mimetype": "text/plain", "start_char_idx": 21, "end_char_idx": 1785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"all_interval_expert": {"node_ids": ["a3a6c366-279b-4bea-9f34-1a5e96b9549c"], "metadata": {"model_name": "all_interval"}}, "assign_expert": {"node_ids": ["da8ae75c-4c1e-49dd-93ef-7db8c8909390"], "metadata": {"model_name": "assign"}}, "aust_color_expert": {"node_ids": ["177b2bb3-af08-4886-8c06-dde7a3909f9a"], "metadata": {"model_name": "aust_color"}}, "bibd_expert": {"node_ids": ["316419ba-8fd7-4ac0-9dbe-8bcb610a8bb9"], "metadata": {"model_name": "bibd"}}, "bus_scheduling_csplib_expert": {"node_ids": ["1275375f-0fa1-41c7-bfae-37a9c22a21e8"], "metadata": {"model_name": "bus_scheduling_csplib"}}, "car_expert": {"node_ids": ["c4e72729-51c4-4499-8c2c-3a845a5c8922"], "metadata": {"model_name": "car"}}, "carpet_cutting_expert": {"node_ids": ["71e044cd-639e-4384-9bd3-979866c437e8"], "metadata": {"model_name": "carpet_cutting"}}, "cell_block_expert": {"node_ids": ["a45e488d-47d7-40e0-8e7d-3ee64947f538"], "metadata": {"model_name": "cell_block"}}, "clique_expert": {"node_ids": ["5d6b4b67-f22f-4487-9ab9-e13a9b2ebae9"], "metadata": {"model_name": "clique"}}, "cluster_expert": {"node_ids": ["4ecb19f4-d7dc-4e76-b1ad-52221054affc"], "metadata": {"model_name": "cluster"}}, "compatible_assignment_expert": {"node_ids": ["f6d582a6-620e-4f27-8ac0-108801d9a806"], "metadata": {"model_name": "compatible_assignment"}}, "constrained_connected_expert": {"node_ids": ["b0915c8d-547b-4248-af30-b40c2efb8fde"], "metadata": {"model_name": "constrained_connected"}}, "crazy_sets_expert": {"node_ids": ["143fef9e-1b90-4658-877e-1f594f6c4db8"], "metadata": {"model_name": "crazy_sets"}}, "crossfigure_expert": {"node_ids": ["eb995c65-4a87-4968-816b-65599bd5d113"], "metadata": {"model_name": "crossfigure"}}, "curriculum_expert": {"node_ids": ["d410710b-836a-45d1-b24a-af913ada17ea"], "metadata": {"model_name": "curriculum"}}, "diamond_free_degree_sequence_expert": {"node_ids": ["b49d1cd6-d6c0-4dd7-8978-3423ebf9a31a"], "metadata": {"model_name": "diamond_free_degree_sequence"}}, "doublechannel_expert": {"node_ids": ["c1f7bf8e-7214-4077-ad34-de8d96d61951"], "metadata": {"model_name": "doublechannel"}}, "fractions_expert": {"node_ids": ["f4d63661-be7e-4dde-a5ca-496cf227499f"], "metadata": {"model_name": "fractions"}}, "golfers_expert": {"node_ids": ["3c5e4fa8-8ebd-424e-b656-b5a57cf93815"], "metadata": {"model_name": "golfers"}}, "golomb_expert": {"node_ids": ["87ce9977-f5cc-469e-8bdb-c514d781b570"], "metadata": {"model_name": "golomb"}}, "graph_expert": {"node_ids": ["a7a620bf-22ae-44ff-b70c-aaf48871df5b"], "metadata": {"model_name": "graph"}}, "itemset_mining_expert": {"node_ids": ["77798d32-1e52-47c0-99da-af416ce85b27"], "metadata": {"model_name": "itemset_mining"}}, "jobshop_expert": {"node_ids": ["8b3ef458-0525-4233-939f-a44673431c10"], "metadata": {"model_name": "jobshop"}}, "K4xP2Graceful_expert": {"node_ids": ["bd5e788c-f0bb-4777-b7d0-c03262f38a92"], "metadata": {"model_name": "K4xP2Graceful"}}, "killer_sudoku_expert": {"node_ids": ["3b352137-ccf0-4696-85c6-af6ebec7fa2b"], "metadata": {"model_name": "killer_sudoku"}}, "knapsack_expert": {"node_ids": ["2f611cb5-ab00-4be1-a9f6-d67aef7a926d"], "metadata": {"model_name": "knapsack"}}, "langford_expert": {"node_ids": ["e642b588-645f-4b58-9157-3bea962fe3d5"], "metadata": {"model_name": "langford"}}, "loan_expert": {"node_ids": ["bc55456e-ad0a-4378-b536-649ea8feb467"], "metadata": {"model_name": "loan"}}, "ltsp_expert": {"node_ids": ["fec83baf-7c82-435a-b768-1ead200ba429"], "metadata": {"model_name": "ltsp"}}, "magic_hexagon_expert": {"node_ids": ["7af76126-70ba-400c-bee6-696a9721b1fc"], "metadata": {"model_name": "magic_hexagon"}}, "magic_sequence_expert": {"node_ids": ["b3ed8872-0bb9-4310-a7b2-bbb13a8ce076"], "metadata": {"model_name": "magic_sequence"}}, "maximum_density_still_life_expert": {"node_ids": ["228efb8c-1960-453f-96cd-eb8597e0ca5e"], "metadata": {"model_name": "maximum_density_still_life"}}, "mip_expert": {"node_ids": ["3c39163c-332d-4fb8-8179-f3b70a44ce9a"], "metadata": {"model_name": "mip"}}, "missing_solution_expert": {"node_ids": ["a984c70e-bcf4-428c-831c-4db4d275db55"], "metadata": {"model_name": "missing_solution"}}, "nonogram_create_automaton2_expert": {"node_ids": ["ff00872d-ec23-4f08-8b32-ee95cd89498c"], "metadata": {"model_name": "nonogram_create_automaton2"}}, "nurses_expert": {"node_ids": ["8fe0372c-766b-418b-ac1b-e019ec8d189f"], "metadata": {"model_name": "nurses"}}, "opd_expert": {"node_ids": ["b60d56c5-0b42-47fe-a52a-a5e5c7082892"], "metadata": {"model_name": "opd"}}, "partition_expert": {"node_ids": ["ebce1f6b-30e9-47cf-81f1-d8717ff56822"], "metadata": {"model_name": "partition"}}, "photo_expert": {"node_ids": ["aa5137f0-641e-4056-ace7-0acb693e7ff4"], "metadata": {"model_name": "photo"}}, "project_scheduling_expert": {"node_ids": ["e31b726c-ed91-49da-8e36-0d4f23cc780b"], "metadata": {"model_name": "project_scheduling"}}, "QuasigroupCompletion_expert": {"node_ids": ["2aef254c-87f0-43f2-b06e-31739697841c"], "metadata": {"model_name": "QuasigroupCompletion"}}, "QuasiGroupExistence_expert": {"node_ids": ["ca7363e7-e911-4be0-a777-85090ee3db08"], "metadata": {"model_name": "QuasiGroupExistence"}}, "queens_expert": {"node_ids": ["0bf15221-d9bc-46d0-977c-5dbdd1960785"], "metadata": {"model_name": "queens"}}, "rcpsp_expert": {"node_ids": ["517c0780-9fa6-47af-a703-fc6a3e794448"], "metadata": {"model_name": "rcpsp"}}, "rehearsal_expert": {"node_ids": ["c2ec588f-868a-40ab-bd43-2fefb0b5e4bf"], "metadata": {"model_name": "rehearsal"}}, "restart_expert": {"node_ids": ["a8bf1adf-d2b5-413f-aa1d-d573e43f3992"], "metadata": {"model_name": "restart"}}, "RosteringProblem_expert": {"node_ids": ["121ebeeb-637e-41e6-b316-f650eb95b4cb"], "metadata": {"model_name": "RosteringProblem"}}, "sb_expert": {"node_ids": ["4c521e34-1e88-45ed-8b2b-2f9c254f925b"], "metadata": {"model_name": "sb"}}, "schur_expert": {"node_ids": ["33c286db-cb60-494c-afe6-0273abc3787f"], "metadata": {"model_name": "schur"}}, "setselect_expert": {"node_ids": ["91471fe6-d609-4a10-b7ee-5bcc0bd5c0da"], "metadata": {"model_name": "setselect"}}, "shipping_expert": {"node_ids": ["0ec471c4-0cd9-4759-9564-7513ca8c654b"], "metadata": {"model_name": "shipping"}}, "simple-prod-planning_expert": {"node_ids": ["73ae44f6-c029-4797-91a3-607e464de338"], "metadata": {"model_name": "simple-prod-planning"}}, "sonet_problem_expert": {"node_ids": ["3aace288-cf67-4fc0-b778-216b71a31fc7"], "metadata": {"model_name": "sonet_problem"}}, "square_pack_expert": {"node_ids": ["6f52ea9b-1132-4d64-a70c-afc56ea9e853"], "metadata": {"model_name": "square_pack"}}, "stableroommates_expert": {"node_ids": ["187adeda-c3d7-4b2b-b4d7-42adce76ba6c"], "metadata": {"model_name": "stableroommates"}}, "steiner_expert": {"node_ids": ["ba0f8fee-a6a8-4a33-9efc-c2cb5d5e537c"], "metadata": {"model_name": "steiner"}}, "stoch_fjsp_expert": {"node_ids": ["491dcf3d-dd07-475f-9c4a-22155be95a54"], "metadata": {"model_name": "stoch_fjsp"}}, "submultisetsum_expert": {"node_ids": ["86e7382b-31ba-4ff8-97b4-703021fe84cd"], "metadata": {"model_name": "submultisetsum"}}, "table_seating_expert": {"node_ids": ["9dd54293-e7e5-41ef-a8e7-a184c1260587"], "metadata": {"model_name": "table_seating"}}, "teamselect_expert": {"node_ids": ["1075c261-3954-409c-b72e-c8a40bc614ed"], "metadata": {"model_name": "teamselect"}}, "template_design_expert": {"node_ids": ["b3d80f72-a219-46b0-a7fd-a1ec6b831312"], "metadata": {"model_name": "template_design"}}, "toomany_expert": {"node_ids": ["08267fc1-3060-46f2-8001-7e7319ab7f7c"], "metadata": {"model_name": "toomany"}}, "traffic_lights_table_expert": {"node_ids": ["557d2fb0-24ef-40e6-aec0-3bd54f02e525"], "metadata": {"model_name": "traffic_lights_table"}}, "TTPPV_expert": {"node_ids": ["73683a10-74dd-4199-b871-fad3976780e3"], "metadata": {"model_name": "TTPPV"}}, "vessel-loading_expert": {"node_ids": ["2cad03a0-c770-439b-813f-b6f92d2dbed9"], "metadata": {"model_name": "vessel-loading"}}, "warehouses_expert": {"node_ids": ["d45a87f5-f396-432c-a7ca-03a2dab353d7"], "metadata": {"model_name": "warehouses"}}, "water_buckets1_expert": {"node_ids": ["6e3aa236-d73b-475c-ba25-49cd36b103dc"], "metadata": {"model_name": "water_buckets1"}}}}