{"docstore/metadata": {"all_interval": {"doc_hash": "0f88272555234e5751af43d8694bcf91d6647d4596b7db9278f0fbd99edf750f"}, "all_interval1": {"doc_hash": "32bf4aedb6792afd952234bd8e2adc5919ba54d49f4f39359b0de1457c68d27b"}, "all_interval2": {"doc_hash": "06fe6d3c7cb7430d6ace0b785ed655e38354f8376667d1f6f96cdfc87df9a15b"}, "all_interval3": {"doc_hash": "0cfb46b8d2914fc124883229d89d81035a99f641593013a7366fa92ea465f249"}, "all_interval4": {"doc_hash": "526b20730188f312083952d81fa0d6a14effc0ce7ee7e84dc40136de7c358f17"}, "all_interval5": {"doc_hash": "de7425e8ff4cef0ec5f1db7f0ddfa90adc0d5ae854f198c53c5d3f88ab2db9e6"}, "all_interval6": {"doc_hash": "633a577b7452a246c6df409c9afedc05f0e1ce4f8f753c006c060193c24dcdaa"}, "bibd": {"doc_hash": "04c2303f62b1893049e3927f35251663ba4896c144f907a2c482f2a8351f6162"}, "bus_scheduling_csplib": {"doc_hash": "92dfcd637a3bce5da58005e697bab7611545a4c81e60b49eb5dc1600f4d272d0"}, "car": {"doc_hash": "63900560a017a7ddc5776eb4d6e64f1de81311cb2a16ff6da72088d9570c4963"}, "crossfigure": {"doc_hash": "8cbb3b8782d15de2c62e0bab413a6ee5c9e63f65cb6cf7dc98cd5c5ef224d24c"}, "curriculum": {"doc_hash": "bb94fdb3913378a85d8575d507555dbdc8aa87a12305883db6a974e833fa342b"}, "diamond_free_degree_sequence": {"doc_hash": "760ba9807602827192333771df2ff54c0e773305892c2fcb9fd5ed35401847be"}, "fractions": {"doc_hash": "638ee78ccf71510409b3ce376c15612b339e60264ba3c42b0427cc5477601ba7"}, "golfers1": {"doc_hash": "512d261bd0bbcd0d5049a83098a540b55203714ad7cbbc0e186c20c7f2f17f5a"}, "golfers2": {"doc_hash": "6db1a267028bff6f4a4c1b9babb62aa31aea41bf095c774f72409daab33cab63"}, "golfers3": {"doc_hash": "5ba938076a4fc60a9cef55822949097893e4a1e5a2f4299d1dbf5e7ef0123e55"}, "golomb": {"doc_hash": "6c59365514dc75db8913c950f9cd7fec06011200a8e984ed2ddcf8ab84cac5d4"}, "K4xP2Graceful": {"doc_hash": "8de2cba5f72db279817c804e27ba18ebfe551475d5fab19d0d27872f7d98b93c"}, "killer_sudoku": {"doc_hash": "1b0fea4264e3af2dc51945afc2c9862a40db1d1d0f40ac11c62b28ad2894e1c5"}, "killer_sudoku2": {"doc_hash": "de497adf7931a7826534c20724406fd58d478343af8542ea6efcc38c1affb232"}, "langford2": {"doc_hash": "63547dbdb620e3a166a90f2e8f9778b7383d7f6b65e22a5077aacd942b154d59"}, "magic": {"doc_hash": "1098bdeea274f754555df3058a2619fd6eb76dddeb04a4ba384cfb37534b6927"}, "magic_hexagon": {"doc_hash": "40a0a678a48d1b9da1488988f04240d8eeb4156b7be8b620831faf32a62ccee1"}, "magic_sequence": {"doc_hash": "150f695242ed97a42ea5be702e48cf84a6433f28ebbb593ecd38dad6ed2afe2b"}, "magic_sequence2": {"doc_hash": "1856886ef765fadf7b80d4f5ee73fa22e407ff590cd84b5bd505bf7155d3afec"}, "magic_sequence3": {"doc_hash": "a165be3127eff0789917aa88623b910ba41306ff85df36b5d5d0f9740fb0042a"}, "magic_sequence4": {"doc_hash": "442d63d620204aeb18abd5fb4098ba2bc0f7ff89e20c625f5a91cc1334661469"}, "magic_square": {"doc_hash": "f7206eed703d725279865a06e9a569118ee74677f1f46b3eb5050d71b1403c7a"}, "maximum_density_still_life": {"doc_hash": "a573fd6fb106c5a56d813496ef5dd263e8d771d8a0056b5edef552a929ed584e"}, "naive": {"doc_hash": "a6863749baba4143c6e7a5c76a928b43940ab3dc42f18e53376f134c398c4262"}, "non": {"doc_hash": "cf3f95810f3dc2dcb997c5dd3edc3011e0b141a650f2f02157d999a2573efc63"}, "nonogram_create_automaton2": {"doc_hash": "2c01eab5b469a63dc64420989be7e574b86aae138949c3b4323774b895d6efcd"}, "opd": {"doc_hash": "076c7c243fcdadd5a98e7adb34076583f56f1c6f4c4aab315cdbcb2db36d02d2"}, "partition": {"doc_hash": "4139ecf1449216046a3d1d08e3abde1b5cf4ec2b07901ebdc77ed976672aaaa5"}, "quasiGroup3Idempotent": {"doc_hash": "cc9ca1b65113b58b7f43880a201e02fa19a43959ece8a08c788ce511ca0596c1"}, "quasiGroup3NonIdempotent": {"doc_hash": "f22af96c983fd65628574365ccc67a95a0289e6d70960b8e8cef95ad621df86e"}, "quasiGroup4Idempotent": {"doc_hash": "c4f0591dd4c92575a9e634002641916a192b5bfee4c7c61b271073f6b399ea53"}, "quasiGroup4NonIdempotent": {"doc_hash": "8f71a2c8fcff6c910473e5f176f48d839dceff78a5b30a129ee39275b520c1d8"}, "quasiGroup5Idempotent": {"doc_hash": "b843311b1c84411fb616995c9d025cea72105561895ee95d7e74fb38c3348857"}, "quasiGroup5NonIdempotent": {"doc_hash": "041f0da9db111f6b0f46b5aaeb45c929f01ed0467f7b01994d9946cf85f156f3"}, "quasiGroup7": {"doc_hash": "67cbb273c5d10d19820391af5feaa1a301a46d79048b722eea66a2a29d64bdcf"}, "QuasigroupCompletion": {"doc_hash": "5d304af1ee3a16fe445b8e3ddd99eae468f6624d27b436772f02a3c60e1a85b9"}, "QuasiGroupCompletionOccurrence": {"doc_hash": "4384302a912901df096531b21cf9fd28176c8749a16343ee5a96238c90cce964"}, "queens3": {"doc_hash": "1e427ad1aefdf5d9c7e67946f96c23d77b76f2e172f6a6d8851c80f49ddc86ea"}, "queens5": {"doc_hash": "b54c51527cb1180e523fbd54975c87a52aaa4560d6b84f81b03d6c22ffce654c"}, "rehearsal": {"doc_hash": "d7f0f76d807ce15ba16a72259628b05aa6fe26ea6520cffe1d2b604a600447a0"}, "RosteringProblem": {"doc_hash": "75285a9e5f9edfee5e9c1f242db3d54b83479858b7d1d997369609cc45363c3f"}, "sb": {"doc_hash": "b8fb5cb7f28798609f01ec08499e2ac2cc9da17850e034f1b3b36bcfff7ad70d"}, "schur": {"doc_hash": "3fe02a0d71b3b238b9b9c70b3f7fab3297c8f646010ffb56729253e1aa77186a"}, "set_partition": {"doc_hash": "6614efe4d68004655e0fe3c760c914db3206b2d1096fbfa83e687ec33c463aee"}, "social_golfers1": {"doc_hash": "1b54d74c0e2bb5a67bd643513101abc4cc0ae87a88257a72afbc19aa56a999f6"}, "sonet_problem": {"doc_hash": "8749b0e7226533dff4857fa24c0cec910b9b0d849f433f97a30de15746436742"}, "steiner": {"doc_hash": "f7fad62204a1df8fbfab62a14d884e1d0d8d576ddbf1d205b66232d9dcb62049"}, "stoch_fjsp": {"doc_hash": "42ab695b828ce65f42c235ff6dd4a2682df76aa19072f2a3529aa0382eadcecb"}, "template_design": {"doc_hash": "472289e16bf567203e6fa25b66da8076e8160d56905c86715ba8e8509ea6a626"}, "traffic_lights": {"doc_hash": "9b5f8bd5a881d9104e417e11ca6d1ba0acfba02cfeb9e51ec72aa752b9dd361c"}, "traffic_lights_table": {"doc_hash": "b0b169729ee6a4b59c28743540bbba28a78623c6a5043beb1b3cbe62a26cbdbb"}, "TTPPV": {"doc_hash": "399328ea2136f5a5b6eafbe625b7db8389bd728ac3dd0e1ab753d8226d24b75f"}, "vessel-loading": {"doc_hash": "7b1404c0794639c2711f8a3af867c70a023a4850ff938490a99f988a0bd3d3e5"}, "warehouses": {"doc_hash": "f9664608e31d5c7f7ec0ea93fa6f56f956185a9c1a24709ee764d0a12847c5ec"}, "water_buckets1": {"doc_hash": "87a36deeb9bc227c235256b742f5b3eb7ed3f34ba5b332f3096dae3ec29067c6"}, "water_buckets_regular": {"doc_hash": "641d7a02e0fa1265d1cc193b19c5a5ae7dd48f9e7d2d87ab11aed8ddc0d37899"}}, "docstore/data": {"all_interval": {"__data__": {"id_": "all_interval", "embedding": null, "metadata": {"problem_family": "all_interval", "model_name": "all_interval", "source_code": "% \n% All interval problem in MiniZinc\n% \n% CSPLib problem number 7\n% http://www.csplib.org/Problems/prob007\n% \"\"\"\n% Given the twelve standard pitch-classes (c, c%, d, ...), represented by \n% numbers 0,1,...,11, find a series in which each pitch-class occurs exactly \n% once and in which the musical intervals between neighbouring notes cover \n% the full set of intervals from the minor second (1 semitone) to the major \n% seventh (11 semitones). That is, for each of the intervals, there is a \n% pair of neigbhouring pitch-classes in the series, between which this \n% interval appears. The problem of finding such a series can be easily \n% formulated as an instance of a more general arithmetic problem on Z_n, \n% the set of integer residues modulo n. Given n in N, find a vector \n% s = (s_1, ..., s_n), such that (i) s is a permutation of \n% Z_n = {0,1,...,n-1}; and (ii) the interval vector \n% v = (|s_2-s_1|, |s_3-s_2|, ... |s_n-s_{n-1}|) is a permutation of \n% Z_n-{0} = {1,2,...,n-1}. A vector v satisfying these conditions is \n% called an all-interval series of size n; the problem of finding such \n% a series is the all-interval series problem of size n. We may also be \n% interested in finding all possible series of a given size. \n% \"\"\"\n\n%\n% Compare with the Gecode/R model http://www.hakank.org/gecode_r/all_interval.rb\n%\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n = 12;\n% array[1..n] of var 1..n: x;\narray[1..n] of var 1..n: x;\narray[1..n-1] of var 1..n-1: diffs;\nint: sum_distinct = ((n+1)*n) div 2;\n\n% max_regret seems to be quite good....\nsolve :: int_search(x, max_regret, indomain_split, complete) satisfy;\n\nconstraint      \n  all_different(diffs) :: domain\n  /\\  \n  all_different(x) :: domain\n  /\\ \n  forall(k in 1..n-1) (\n      diffs[k] = abs(x[k+1] - x[k])\n  )\n  /\\ % symmetry breaking\n  x[1] < x[n-1]\n  /\\\n  diffs[1] < diffs[2]\n;\n\n\noutput [\n       show(x) ++ \",\" % , \" \", show(sum_distinct), \" diffs: \", show(diffs)\n]\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All-Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 12 different types of packages to be shipped out. Each package has a specific size and weight, and I need to load them onto 12 trucks in a way that minimizes the total distance traveled by the trucks. The trucks need to be loaded in a specific order to ensure that the packages are delivered efficiently. How can I determine the optimal loading sequence to reduce transportation costs and meet the delivery deadlines?\",\n  \"question2\": \"I'm planning a road trip with my friends and we want to visit 12 different landmarks. We want to make sure that we visit each landmark only once and that the driving distance between each landmark is different from the previous one. How can I plan the route to make sure we see all the landmarks and have a fun and varied trip?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles and games. I have 12 different colored blocks that I want to arrange in a special order. I want each block to be next to a block that is a different color and a different shape from the previous one. How can I arrange the blocks to make a cool and colorful pattern?\",\n  \"question4\": \"I need to schedule 12 meetings with different teams in my company. Each team has a different priority level and I want to schedule the meetings in a way that minimizes the total time spent in meetings. How can I determine the optimal meeting schedule?\",\n  \"question5\": \"I'm a curator at a modern art museum and I'm planning an exhibition with 12 different art pieces. Each piece has a specific size, shape, and theme, and I want to arrange them in a way that creates a visually appealing and cohesive exhibit. The pieces need to be arranged in a specific order to guide the viewer's attention and create a narrative flow. Additionally, I need to ensure that each piece is displayed in a way that highlights its unique features and doesn't clash with the surrounding pieces. How can I determine the optimal arrangement of the art pieces to create a stunning and engaging exhibit?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All-Interval Series Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All-Interval Series Problem\",\n\"description\": \"The All-Interval Series Problem is a classic problem in constraint programming that involves finding a series of pitch-classes such that each pitch-class occurs exactly once and the musical intervals between neighboring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones).\",\n\"variables\": \"x = (x_1, ..., x_n), where x_i \u2208 {1, ..., n} and diffs = (diffs_1, ..., diffs_{n-1}), where diffs_i \u2208 {1, ..., n-1}. x represents the series of pitch-classes, and diffs represents the interval vector between neighboring notes.\",\n\"constraints\": \"all_different(diffs), all_different(x), diffs_k = |x_{k+1} - x_k| for k \u2208 {1, ..., n-1}, x_1 < x_{n-1}, diffs_1 < diffs_2. The constraints ensure that each pitch-class occurs exactly once, each interval occurs exactly once, and the symmetry breaking constraints are used to reduce the search space.\",\n\"objective\": \"Satisfy (i.e., find a feasible solution) - there is no objective function to minimize or maximize.\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval1": {"__data__": {"id_": "all_interval1", "embedding": null, "metadata": {"problem_family": "all_interval1", "model_name": "all_interval1", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n\n% Problem description\n% Given the twelve standard pitch-classes (c, c#, d, ...), represented by numbers 0,1,...,11, this problem amounts to find a series in which each pitch-class occurs exactly once and in which the musical intervals between neighboring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones). That is, for each of the intervals, there is a pair of neighboring pitch-classes in the series, between which this interval appears.\n\n% We consider a generalization of this problem in which the set of numbers is the range from 0 to n-1, for any given positive 'n'. In particular, given such 'n', the problem amounts to find a vector s = (s1, ..., sn) that is a permutation of {0, 1,..., n-1} and such that the interval vector v = (|s2 - s1|, |s3 - s2|, ..., |sn - s(n-1)|) is a permutation of {1, 2,..., n-1}.\n%\n% Problem input\n%\n%     * n, the number of pitch classes \n%\n% Search space\n% The set of permutations of integer range [0..n-1]\n%\n% Constraints\n%\n%     * C1: Each pitch class occurs exactly once\n%     * C2: Differences between neighbouring notes are all different\n\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n%    all_different(series) /\\\n\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i != j)  (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n;\n\noutput\n[  show(series)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 12 different types of pallets, each with a unique size and weight. I need to arrange these pallets in a specific order to maximize storage efficiency and minimize the risk of damage during transportation. The pallets must be arranged in a way that each pallet is adjacent to another pallet with a different size and weight, and no two adjacent pallets can have the same size and weight difference. How can I optimize the arrangement of these pallets to achieve this goal?\",\n  \"question2\": \"I'm planning a road trip with my friends and we want to visit 12 different landmarks. We want to make sure that we visit each landmark only once and that the driving distance between each landmark is different from the previous one. How can we plan our route to make sure we see all the landmarks and have a fun and varied trip?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles and games. I have 12 different colored blocks, and I want to build a tower with them. I want each block to be on top of another block that is a different color, and I want the height difference between each block to be different from the previous one. Can you help me figure out how to build the tower?\",\n  \"question4\": \"I have 12 different flavors of ice cream and I want to serve them in a specific order at a party. I want each flavor to be served only once, and I want the flavor difference between each serving to be different from the previous one. How can I order the flavors to achieve this?\",\n  \"question5\": \"I'm a curator at a modern art museum, and I'm planning an exhibition with 12 different art pieces. Each piece has a unique style, size, and theme, and I want to arrange them in a way that creates a visually appealing and thought-provoking experience for the visitors. I want each piece to be adjacent to another piece that has a different style, size, and theme, and I want the visual contrast between each piece to be different from the previous one. Additionally, I want to ensure that the arrangement takes into account the physical constraints of the exhibition space, including the size and shape of the walls, the location of the doors and windows, and the flow of visitor traffic. How can I optimize the arrangement of the art pieces to achieve this goal?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All Interval Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"All Interval Problem\",\n  \"description\": \"The All Interval Problem is a classic problem in constraint programming that involves finding a permutation of a set of pitch classes such that each pitch class occurs exactly once and the musical intervals between neighboring notes cover the full set of intervals from the minor second to the major seventh.\",\n  \"variables\": \"s = (s1, ..., sn), where si \u2208 {0, 1, ..., n-1} for i = 1, ..., n. These variables represent the pitch classes in the series.\",\n  \"constraints\": \"C1: \u2200i, j \u2208 {0, 1, ..., n-1} where i \u2260 j, si \u2260 sj (each pitch class occurs exactly once), \n                 C2: \u2200i, j \u2208 {0, 1, ..., n-1} where j < n-1 and i \u2260 j, |si+1 - si| \u2260 |sj+1 - sj| (differences between neighboring notes are all different)\",\n  \"objective\": \"The objective is to find a feasible solution that satisfies the constraints, there is no optimization objective to minimize or maximize.\"\n}\n```\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval2": {"__data__": {"id_": "all_interval2", "embedding": null, "metadata": {"problem_family": "all_interval2", "model_name": "all_interval2", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: n= 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   %  C1: Each pitch class occurs exactly once\n   forall(i, j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i!=j) (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput\n[ show(series)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a music theorist studying the properties of musical scales. I want to create a 12-note scale where each note has a unique interval to the next note, and no two intervals are the same. How can I find such a scale that also satisfies the condition that the first note is lower than the last note?\",\n  \"question2\": \"I'm planning a road trip across 12 cities, and I want to visit each city only once. I also want to make sure that the distance between each pair of consecutive cities is unique, so I don't get bored with the same drive every day. How can I plan my route to achieve this?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles! I have 12 different colored blocks, and I want to arrange them in a row so that each block is next to a block that is a different color and a different distance away from the previous block. Can you help me figure out how to do this?\",\n  \"question4\": \"I need to schedule 12 meetings with different teams, and I want to make sure that the time gaps between each meeting are all different. How can I do this?\",\n  \"question5\": \"I'm a logistics manager at a warehouse that receives 12 shipments of different products every day. I want to optimize the unloading process by assigning each shipment to a specific dock, so that the time it takes to unload each shipment is unique and doesn't conflict with the unloading time of any other shipment. The warehouse has a specific layout, and I want to minimize the distance between each dock to reduce transportation time. How can I assign the shipments to the docks to achieve this goal, while also ensuring that the first shipment is unloaded at a dock that is closer to the warehouse entrance than the last shipment?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All Interval Series Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All Interval Series Problem\",\n\"description\": \"The All Interval Series Problem is a classic problem in constraint programming. It involves finding a permutation of a set of pitch classes such that each pitch class occurs exactly once, and the differences between neighbouring notes are all different. The problem is often used as a benchmark for constraint programming solvers.\",\n\"variables\": \"series = [s_0, s_1, ..., s_{n-1}] where s_i \u2208 {0, 1, ..., n-1}. These variables represent the pitch classes in the series.\",\n\"constraints\": \"C1: \u2200i, j \u2208 {0, 1, ..., n-1} where i \u2260 j, s_i \u2260 s_j. This constraint ensures that each pitch class occurs exactly once. C2: \u2200i, j \u2208 {0, 1, ..., n-2} where i \u2260 j, |s_{i+1} - s_i| \u2260 |s_{j+1} - s_j|. This constraint ensures that the differences between neighbouring notes are all different. C3: s_0 < s_{n-1}. This constraint is a symmetry-breaking constraint that ensures the first note is less than the last one.\",\n\"objective\": \"The problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval3": {"__data__": {"id_": "all_interval3", "embedding": null, "metadata": {"problem_family": "all_interval3", "model_name": "all_interval3", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[differ] of var differ: differences;\n\nsolve satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 1..n-2) (\n       differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in differ where i != j) (\n       differences[i] != differences[j]\n   )\n;\n\noutput [\n  show(series)\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a music theorist studying the properties of musical scales. I want to create a 12-note scale where each note has a unique interval to its neighboring notes. How can I generate such a scale while ensuring that each note appears only once?\",\n  \"question2\": \"I'm planning a road trip across 12 cities and I want to visit each city only once. I also want to make sure that the driving distance between each pair of consecutive cities is unique. Can you help me plan the most efficient route?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles! I have 12 different colored blocks and I want to arrange them in a row so that each block has a different 'gap' to its neighboring blocks. How can I do that?\",\n  \"question4\": \"I need to schedule 12 meetings with different clients, each with a unique time gap between them. How can I do that?\",\n  \"question5\": \"I'm a logistics manager at a warehouse that receives 12 shipments of different products every day. I want to optimize the unloading process by assigning each shipment to a specific dock such that the time gap between unloading each pair of consecutive shipments is unique. The warehouse has 12 docks, and each shipment must be unloaded at a different dock. Additionally, I want to prioritize the unloading of perishable goods over non-perishable goods. Can you help me develop a schedule that meets these constraints and priorities?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All Interval Series Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All Interval Series Problem\",\n\"description\": \"The All Interval Series Problem is a classic problem in constraint programming. It involves finding a permutation of a set of pitch classes such that each pitch class occurs exactly once and the differences between neighbouring notes are all different.\",\n\"variables\": \"series: {0, ..., n-1}^n, differences: {1, ..., n-1}^{n-2}\",\n\"variables explanation\": \"The decision variables are two arrays: series and differences. The series array represents a permutation of the pitch classes, where each element is a pitch class. The differences array represents the intervals between neighbouring notes in the series.\",\n\"constraints\": \"\u2200i, j \u2208 {0, ..., n-1} where i \u2260 j, series[i] \u2260 series[j], \u2200i \u2208 {1, ..., n-2}, differences[i] = |series[i+1] - series[i]|, \u2200i, j \u2208 {1, ..., n-1} where i \u2260 j, differences[i] \u2260 differences[j]\",\n\"constraints explanation\": \"The constraints ensure that each pitch class occurs exactly once in the series (C1), the differences between neighbouring notes are calculated correctly (auxiliary predicate), and all these differences are distinct (C2).\",\n\"objective\": \"satisfy\"\n}\n\nNote that the objective is \"satisfy\" because this is a satisfaction problem, where the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval4": {"__data__": {"id_": "all_interval4", "embedding": null, "metadata": {"problem_family": "all_interval4", "model_name": "all_interval4", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_median, complete) satisfy;\n\nconstraint\n  % C1: Each pitch class occurs exactly once\n  % GCAD: Exploitation of alldifferent() global constraint\n  all_different(series)\n  /\\\n\n  % C2: Differences between neighbouring notes are all different\n  % GCAD: Exploitation of alldifferent() global constraint\n  % alldifferent(all (i in classes: i <> n-1) abs(series[i+1] - series[i]));\n  all_different( \n         [ abs(series[i+1] - series[i]) | i in classes where i != n-1]\n  )\n  \n;\n\noutput [\n  show(series)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Series Problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a music composer and I want to create a unique melody that uses all 12 notes of the chromatic scale exactly once. Additionally, I want the melody to have a sense of continuity, so I want the differences between consecutive notes to be all different. Can you help me find a sequence of notes that meets these criteria?\",\n    \"context\": \"Music composition\"\n  },\n  \"question2\": {\n    \"question\": \"I'm planning a road trip across 12 different cities and I want to visit each city only once. I also want to make sure that the driving distances between consecutive cities are all different. Is there a way to plan my trip so that I can achieve this?\",\n    \"context\": \"Travel planning\"\n  },\n  \"question3\": {\n    \"question\": \"I have 12 different flavors of ice cream and I want to create a special sundae with one scoop of each flavor. I want the flavors to be arranged in a way that each scoop is different from the one before it, and the 'distance' between flavors is also different (e.g., if I have chocolate and vanilla next to each other, I don't want strawberry to be right after vanilla). Can you help me figure out the perfect order for my sundae?\",\n    \"context\": \"Food and dessert\"\n  },\n  \"question4\": {\n    \"question\": \"I have 12 tasks to complete and I want to do them in an order that makes sense. Each task should be different from the one before it, and the time it takes to complete each task should also be different. Can you help me find the best order?\",\n    \"context\": \"Task management\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a museum curator and I'm planning an exhibit with 12 different art pieces. I want to arrange the pieces in a way that each piece is visually distinct from the one before it, and the 'distance' between pieces (in terms of style, era, or theme) is also different. Additionally, I want to make sure that the exhibit flows well and visitors can easily move from one piece to the next. Can you help me find an optimal arrangement that meets these criteria? The exhibit will be in a long hallway with 12 pedestals, and I want to make sure that the arrangement is both aesthetically pleasing and easy to navigate.\",\n    \"context\": \"Museum curation\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the All Interval Series Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All Interval Series Problem\",\n\"description\": \"The All Interval Series Problem is a classic problem in constraint programming. It involves finding a permutation of a set of pitch classes such that each pitch class occurs exactly once and the differences between neighboring notes are all different. This problem is often used as a benchmark for constraint programming solvers.\",\n\"variables\": \"series = [x_0, x_1, ..., x_{n-1}], where x_i \u2208 {0, 1, ..., n-1}. These variables represent the permutation of pitch classes.\",\n\"constraints\": \"C1: all_different(series), which ensures that each pitch class occurs exactly once. C2: all_different([|x_{i+1} - x_i| | i \u2208 {0, 1, ..., n-2}]), which ensures that the differences between neighboring notes are all different.\",\n\"objective\": \"The problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval5": {"__data__": {"id_": "all_interval5", "embedding": null, "metadata": {"problem_family": "all_interval5", "model_name": "all_interval5", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\n% solve satisfy;\nsolve :: int_search(series, occurrence, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n      differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in 0..n-2 where i != j) (\n      differences[i] != differences[j]\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\noutput [\n  show(series)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a music composer and I want to create a melody that uses all 12 notes of the chromatic scale exactly once, with the constraint that the intervals between consecutive notes are all different. How can I find a sequence of notes that satisfies these conditions?\",\n  \"question2\": \"I'm planning a road trip across 12 cities and I want to visit each city only once. I also want to make sure that the driving distances between consecutive cities are all different. Is there a way to plan my route to achieve this?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles and I want to create a special sequence of 12 different colors that I can use to paint a picture. I want each color to appear only once and the 'distance' between consecutive colors to be different. Can you help me find a sequence that works?\",\n  \"question4\": \"I need to schedule 12 meetings with different people and I want each meeting to be spaced out differently from the previous one. How can I do this?\",\n  \"question5\": \"I'm a logistics manager at a large warehouse and I need to optimize the storage of 12 different products on 12 shelves. Each product has a specific size and weight, and I want to store them in a way that minimizes the risk of damage during handling. I also want to ensure that the distance between consecutive shelves is different for each product. Additionally, I have a constraint that the first shelf should be stored in a specific location due to accessibility reasons. Can you help me find an optimal storage plan that meets all these conditions?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All Interval Series Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All Interval Series Problem\",\n\"description\": \"The All Interval Series Problem is a classic problem in constraint programming. It involves finding a permutation of a set of notes such that each note appears exactly once and the intervals between consecutive notes are all different. The problem is often used as a benchmark for constraint programming solvers.\",\n\"variables\": \"series[i], i \u2208 {0, ..., n-1} (a permutation of the notes), differences[i], i \u2208 {0, ..., n-2} (the interval between consecutive notes)\",\n\"The variables series[i] represent the notes in the permutation, and the variables differences[i] represent the intervals between consecutive notes.\",\n\"constraints\": \"\u2200i, j \u2208 {0, ..., n-1}, i \u2260 j : series[i] \u2260 series[j] (each note appears exactly once), \u2200i \u2208 {0, ..., n-2} : differences[i] = |series[i+1] - series[i]| (compute the intervals), \u2200i, j \u2208 {0, ..., n-2}, i \u2260 j : differences[i] \u2260 differences[j] (all intervals are different), series[0] < series[n-1] (symmetry breaking)\",\n\"The constraints ensure that each note appears exactly once, the intervals between consecutive notes are computed correctly, all intervals are different, and a symmetry breaking constraint is added to reduce the search space.\",\n\"objective\": \"satisfy (there is no objective function to optimize, the goal is to find a feasible solution)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "all_interval6": {"__data__": {"id_": "all_interval6", "embedding": null, "metadata": {"problem_family": "all_interval6", "model_name": "all_interval6", "source_code": "%\n% All interval problem in MiniZinc.\n% \n% Different approaches inspired by\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=007\n%\n% Also see\n%   http://www.hakank.org/minizinc/all_interval1.mzn\n%   http://www.hakank.org/minizinc/all_interval2.mzn\n%   http://www.hakank.org/minizinc/all_interval3.mzn\n%   http://www.hakank.org/minizinc/all_interval4.mzn\n%   http://www.hakank.org/minizinc/all_interval5.mzn\n%   http://www.hakank.org/minizinc/all_interval6.mzn\n%\n\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\nsolve ::int_search(series, first_fail, indomain_max, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(series)\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n          differences[i] = abs(series[i+1] - series[i])\n   )\n   /\\\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(differences)\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput [\n   \"series: \" ++ show(series) ++ \"\\n\" ++\n   \"differences: \" ++ show(differences) \n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 12 loading docks. I need to schedule 12 trucks to load cargo in a specific order to minimize congestion and maximize efficiency. Each truck has a unique cargo type, and I want to ensure that no two consecutive trucks have the same cargo type. Additionally, I want to minimize the number of times I need to reconfigure the loading equipment between trucks. How can I optimize the loading sequence to meet these constraints?\",\n  \"question2\": \"I'm planning a 12-course tasting menu for a dinner party, and I want to make sure that each dish is unique and complements the ones before and after it. I have a list of 12 ingredients, and I want to create a sequence of dishes that uses each ingredient exactly once. How can I create a menu that meets this requirement and is also delicious?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles and games. I have a set of 12 different colored blocks, and I want to build a tower with them. I want each block to be used exactly once, and I want the colors to change in a special way as I go up the tower. How can I build the tower so that each block is different from the one below it?\",\n  \"question4\": \"I need to schedule 12 meetings with different teams, and I want to minimize the number of times I need to switch between teams. How can I order the meetings to make it most efficient?\",\n  \"question5\": \"I'm a curator at a modern art museum, and I'm planning an exhibition featuring 12 artists from different countries. I want to create a sequence of artworks that showcases each artist's unique style and technique, while also considering the flow and cohesion of the exhibition as a whole. The artworks will be displayed in a long hallway, and I want to ensure that the transition between each piece is visually appealing and thought-provoking. Additionally, I want to prioritize the display of artworks from countries that are underrepresented in the art world. How can I create an exhibition sequence that meets these goals and constraints?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All Interval Series Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"All Interval Series Problem\",\n\"description\": \"The All Interval Series Problem is a classic problem in constraint programming. It involves finding a permutation of a set of notes such that the differences between consecutive notes are all different. The problem has applications in music theory, where it is used to create musical compositions with unique properties.\",\n\"variables\": \"series: {s_0, s_1, ..., s_(n-1)}, differences: {d_0, d_1, ..., d_(n-2)}\",\n\"variables explanation\": \"The decision variables are two arrays: series and differences. The series array represents a permutation of the notes, where s_i is the i-th note in the sequence. The differences array represents the differences between consecutive notes, where d_i is the difference between the (i+1)-th and i-th notes.\",\n\"constraints\": \"all_different(series) \u2227 \u2200i \u2208 0..n-2 (differences[i] = |series[i+1] - series[i]|) \u2227 all_different(differences) \u2227 series[0] < series[n-1]\",\n\"constraints explanation\": \"The constraints are: (1) each note occurs exactly once in the sequence (all_different(series)), (2) the differences between consecutive notes are calculated and stored in the differences array, (3) all differences are different (all_different(differences)), and (4) the first note is less than the last note (series[0] < series[n-1]) to break symmetry.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote that this problem is a feasibility problem, meaning that the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "bibd": {"__data__": {"id_": "bibd", "embedding": null, "metadata": {"problem_family": "bibd", "model_name": "bibd", "source_code": "% bibd.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Tue Oct 23 11:28:06 EST 2007\n%\n% Balanced incomplete block designs.  See the following:\n% http://mathworld.wolfram.com/BlockDesign.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob028/spec.html\n%\n%\n%\n% A BIBD (v, b, r, k, lambda) problem is to find a binary matrix of v rows\n% of b columns such that each row sums to r, each column sums to k, and\n% the dot product beween any pair of distinct rows is lambda.\n\ninclude \"lex_lesseq.mzn\";\n\nint: v;\nint: k;\nint: lambda;\n\nint: b = (lambda * v * (v - 1)) div (k * (k - 1));\nint: r = (lambda * (v - 1)) div (k - 1);\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\narray [rows, cols] of var bool: m;\n\n    % Every row must sum to r.\n    %\nconstraint forall (i in rows) (sum (j in cols) (bool2int(m[i, j])) = r);\n\n    % Every column must sum to k.\n    %\nconstraint forall (j in cols) (sum (i in rows) (bool2int(m[i, j])) = k);\n\n    % The dot product of every pair of distinct rows must be lambda.\n    %\nconstraint\n    forall (i_a, i_b in rows where i_a < i_b) (\n        sum (j in cols) (bool2int(m[i_a, j] /\\ m[i_b, j])) = lambda\n    );\n\n    % Break row symmetry in the incidence matrix.\n    %\nconstraint forall(i in rows diff {max(rows)})(\n        lex_lesseq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    );\n\n    % Break column symmetry in the incidence matrix.\n    %\nconstraint forall(j in cols diff {max(cols)})(\n        lex_lesseq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    );\n\nsolve :: bool_search([m[i, j] | i in rows, j in cols],\n    input_order, indomain_min, complete)\n    satisfy;\n\noutput  [\"bibd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r),\n        \", k = \", show(k), \", lambda = \", show(lambda), \")\\n\\n\"] ++\n        [ ( if j > b then \"\\n\" else show(bool2int(m[i, j])) endif )\n        | i in rows, j in 1..(b + 1)\n        ];\n\n%----------------------------------------------------------------------------%\n%----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Balanced Incomplete Block Design (BIBD) problem:\n\n```\n{\n  \"question1\": \"A conference organizer wants to schedule 15 talks across 5 rooms, ensuring each talk is presented in 3 rooms, each room hosts 9 talks, and each pair of talks is presented together in exactly 2 rooms. How can the organizer allocate the talks to rooms to meet these requirements?\",\n  \"question2\": \"I'm planning a music festival with 12 bands and 8 stages. I want each band to play on 4 stages, each stage to host 6 bands, and each pair of bands to play together on exactly 2 stages. Can you help me figure out the schedule?\",\n  \"question3\": \"I'm organizing a school fair with 10 games and 6 booths. I want each game to be played at 3 booths, each booth to have 5 games, and each pair of games to be played together at exactly 2 booths. How can I set up the fair to make it fun for everyone?\",\n  \"question4\": \"I have 8 projects and 5 teams. Each project needs 3 teams, each team works on 4 projects, and each pair of projects shares 2 teams. Can you help me assign projects to teams?\",\n  \"question5\": \"A large corporation has 18 departments and 12 training sessions. Each department needs to attend 4 training sessions, each training session is attended by 6 departments, and each pair of departments attends exactly 2 training sessions together. The corporation also wants to ensure that the training sessions are scheduled in a way that minimizes conflicts between departments. How can the corporation allocate the departments to training sessions to meet these requirements and minimize conflicts?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the BIBD problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Balanced Incomplete Block Design (BIBD)\",\n\"description\": \"A Balanced Incomplete Block Design (BIBD) is a combinatorial design in which a set of v elements is divided into b blocks, each of size k, such that each element occurs in r blocks and each pair of elements occurs together in \u03bb blocks.\",\n\"variables\": \"m[i, j] for i in {1, ..., v} and j in {1, ..., b}, where m[i, j] is a binary variable indicating whether element i is in block j. These variables represent the incidence matrix of the block design.\",\n\"constraints\": [\n    \"\u2211(j in cols) m[i, j] = r for i in rows, ensuring each element occurs in r blocks.\",\n    \"\u2211(i in rows) m[i, j] = k for j in cols, ensuring each block has k elements.\",\n    \"\u2211(j in cols) (m[i_a, j] \u2227 m[i_b, j]) = \u03bb for i_a, i_b in rows where i_a < i_b, ensuring each pair of elements occurs together in \u03bb blocks.\",\n    \"lex_lesseq([m[i, j] | j in cols], [m[i+1, j] | j in cols]) for i in rows diff {max(rows)}, breaking row symmetry in the incidence matrix.\",\n    \"lex_lesseq([m[i, j] | i in rows], [m[i, j+1] | i in rows]) for j in cols diff {max(cols)}, breaking column symmetry in the incidence matrix.\"\n],\n\"objective\": \"Satisfy all constraints, i.e., find a feasible solution for the BIBD problem.\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "bus_scheduling_csplib": {"__data__": {"id_": "bus_scheduling_csplib", "embedding": null, "metadata": {"problem_family": "bus_scheduling_csplib", "model_name": "bus_scheduling_csplib", "source_code": "% \n% Bus driver scheduling problem (prob022 in CSPLib) in MiniZinc.\n% \n% http://www.csplib.org/Problems/prob022\n% \n% From \n% http://www.csplib.org/Problems/prob022\n% \"\"\"\n% Specification\n% Bus driver scheduling can be formulated as a set paritioning problem. \n% We propose 12 set partitioning problems derived from small bus driver \n% scheduling problems. These consist of a given set of tasks (pieces of \n% work) to cover and a large set of possible shifts, where each shift \n% covers a subset of the tasks and has an associated cost. We must select \n% a subset of possible shifts that covers each piece of work once and \n% only once: this is called a partition. Further,\n% \n% In the driver scheduling (unlike air crew scheduling) the main aim is \n% to reduce the number of shifts used in the solution partition and the \n% total cost of the partition is secondary. To simplify the problem we have \n% made the cost of each shift the same. This means that the goal is to \n% minimise the number of shifts.\n% \n% The problems come from four different bus companies: \n% Reading (r1 to r5a), \n% CentreWest Ealing area (c1, c1a, c2), \n% the former London Transport (t1 and t2). \n%\n% The problems have differing regulations and features (e.g. urban and \n% short distance rural bus schedules can have very different features). Note \n% that r1 and r1a are the same problem, but have different numbers of \n% generated shifts. Similarly with the problems: c1, c1a and r5, r5a. \n% \n% Problems are presented in the same format as the set partitioning \n% examples in ORLIB. The first line gives the number of rows (pieces of work), \n% columns (shifts) and the minimum number of columns need for a partition. \n% Then each line after that corresponds to one column. It starts with \n% the cost (which is always 1 in our case) then the number of rows it \n% covers, followed by the rows it covers. \n% \"\"\"\n\n%\n% Note: This model skips the cost parameter.\n%\n% This is a MIP mode so the MIP solvers may also be used, e.g.\n%  - MiniZinc's MIP solver\n%  - ECLiPSe's eplex\n% \n%\n% Example, for the problem t1 \n% (http://www.hakank.org/minizinc/bus_scheduling_csplib_t1.dzn)\n% minizinc solver gives this solution:\n% \n%  x: [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]\n%\n%  {11, 18, 19, 20}{1, 2, 14, 15}{3, 4, 7}{5, 6, 12, 13}{8, 9, 16, 17}{10, 22, 23}{0, 21}\n% \n\n% Here are all data files:\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_c1.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_c1a.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_c2.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r1.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r1a.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r2.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r3.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r4.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r5.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_r5a.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_t1.dzn\n%  http://www.hakank.org/minizinc/bus_scheduling_csplib_t2.dzn\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\ninclude \"globals.mzn\"; \nint: num_work;\nint: num_shifts;\nint: min_num_shifts;\narray[1..num_shifts] of set of int: shifts;\n\narray[1..num_shifts] of var 0..1: x;\nvar 0..num_shifts: tot_shifts;\n\n% solve minimize tot_shifts;\nsolve :: int_search(\n        x ++ [tot_shifts], \n        first_fail, \n        indomain_min, \n        complete) \n    minimize tot_shifts;\n    % satisfy;\n\nconstraint\n   tot_shifts = sum(x)\n   /\\\n   forall(j in 0..num_work-1) (\n       sum(i in 1..num_shifts) (x[i]*bool2int(j in shifts[i])) = 1\n   )\n   /\\\n   tot_shifts >= min_num_shifts\n\n   % /\\ % for solve satisfy (t1)\n   % tot_shifts = 7\n;\n\n\noutput [\n  \"tot_shifts: \" ++ show(tot_shifts) ++ \"\\n\" ++ \n  \"x: \" ++ show(x) ++ \"\\n\"\n] ++ \n[\n  if fix(x[i]) = 1 then show(shifts[i]) else \"\" endif\n  | i in 1..num_shifts\n] ++ \n[\"\\n\"] ++\n[\n  if fix(x[i]) = 1 then show(i) ++ \" \" else \"\" endif\n  | i in 1..num_shifts\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Bus Driver Scheduling Problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a logistics manager at a large event planning company. We have 50 events happening simultaneously across the city, and each event requires a specific set of equipment and staff. We have 200 staff members and 150 equipment items available. How can I assign the staff and equipment to each event to ensure that every event has exactly what it needs, while minimizing the total number of staff and equipment used?\",\n    \"context\": \"Event Planning\"\n  },\n  \"question2\": {\n    \"question\": \"I'm a volunteer coordinator at a local animal shelter. We have 30 volunteers who can help with dog walking, cat socialization, and administrative tasks. We need to make sure that every dog gets walked, every cat gets socialized, and all administrative tasks are completed. How can I create a schedule that ensures every task is covered, while making sure each volunteer only does one task at a time?\",\n    \"context\": \"Volunteer Management\"\n  },\n  \"question3\": {\n    \"question\": \"I'm a 12-year-old who loves playing with my friends in a big park. We have 15 different games we like to play, and each game requires a specific number of players. We have 25 friends who can play, but some friends can only play certain games. How can we divide the friends into groups to play each game, so that every game has the right number of players, and everyone gets to play their favorite games?\",\n    \"context\": \"Recreational Activity Planning\"\n  },\n  \"question4\": {\n    \"question\": \"I have 10 projects to complete, and each project requires a specific set of skills. I have 15 team members with different skill sets. How can I assign team members to projects to ensure every project is completed, while minimizing the number of team members needed?\",\n    \"context\": \"Project Management\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a hospital administrator responsible for scheduling surgeries at a large hospital. We have 20 surgeons, 30 operating rooms, and 50 patients who need surgeries. Each surgeon has a specific set of specialties, and each operating room has specific equipment requirements. We need to schedule the surgeries to ensure that every patient gets the right surgeon and operating room, while minimizing the total number of surgeries performed in each operating room. Additionally, we need to ensure that each surgeon only performs one surgery at a time, and that each operating room is only used once at a time. How can I create a schedule that meets all these requirements?\",\n    \"context\": \"Healthcare Resource Allocation\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Bus Driver Scheduling Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Bus Driver Scheduling Problem\",\n\"description\": \"The Bus Driver Scheduling Problem is a classical problem in constraint programming that involves finding the minimum number of shifts required to cover all tasks (pieces of work) in a bus company. Each shift covers a subset of tasks and has an associated cost, which is assumed to be the same for all shifts in this model. The goal is to select a subset of possible shifts that covers each task once and only once, while minimizing the total number of shifts used.\",\n\"variables\": \"x = [x_1, x_2, ..., x_n], where x_i is a binary variable indicating whether shift i is selected or not, and tot_shifts is an integer variable representing the total number of shifts selected. x_i \u2208 {0, 1} for i = 1, ..., n, and tot_shifts \u2208 {0, ..., n}.\",\n\"constraints\": \"tot_shifts = \u2211(x), \u2200j \u2208 {0, ..., num_work-1} (\u2211(x_i * (j \u2208 shifts_i)) = 1), tot_shifts \u2265 min_num_shifts. The first constraint sets the total number of shifts to the sum of the x variables. The second constraint ensures that each task is covered by exactly one shift. The third constraint sets a lower bound on the total number of shifts.\",\n\"objective\": \"Minimize tot_shifts, which represents the total number of shifts used to cover all tasks.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "car": {"__data__": {"id_": "car", "embedding": null, "metadata": {"problem_family": "car", "model_name": "car", "source_code": "% \n% Car sequencing in MiniZinc.\n% \n% This is based on the OPL3 model car.mod.\n%\n% Compare with the Comet model\n% http://www.hakank.org/comet/car.co\n%\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n% Model modified to match CSPLib data format by Chris Mears.\n%\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n%\n% include \"globals.mzn\"; \nint: numclasses;\nint: numoptions;\nint: numcars;\nset of int: Classes = 1..numclasses;\nset of int: Options = 1..numoptions;\nset of int: Slots = 1..numcars;\n\narray[Classes] of int: numberPerClass;\n\narray[Classes,Options] of int: optionsRequired;\narray[Options] of int: windowSize;\narray[Options] of int: optMax;\n\narray[Options] of int: optionNumberPerClass = [sum(j in Classes) (numberPerClass[j] * optionsRequired[j,i]) | i in Options];\n\n% decision variables\n\narray[Slots] of var Classes: slot;\narray[Options, Slots] of var 0..1: setup;\n\n\nvar int: z = sum(s in Classes) (s*slot[s]);\n\n% solve minimize z;\nsolve :: int_search(slot, input_order, indomain_min, complete)\n  satisfy;\n\nconstraint\n  forall(c in Classes ) (\n    sum(s in Slots ) (bool2int(slot[s] = c)) = numberPerClass[c]\n  )\n  /\\\n  forall(o in Options, s in 1..numcars - windowSize[o] + 1) (\n    sum(j in s..s + windowSize[o]- 1) (setup[o,j]) <= optMax[o]\n  )\n  /\\\n  forall(o in Options, s in Slots ) (\n    setup[o,s] = optionsRequired[slot[s],o]\n  )\n  /\\\n  forall(o in Options, i in 1..optionNumberPerClass[o]) (\n    sum(s in 1..(numcars - i * windowSize[o])) (setup[o,s]) >=\n           (optionNumberPerClass[o] - i * optMax[o])\n  )\n;\n\n% for solve satisfy\n% constraint z = 82;\n\n\noutput [\n \"z: \" ++ show(z) ++ \"\\n\" ++\n \"slot: \" ++ show(slot) ++ \"\\n\"\n] ++\n[\n  if j = 1 then \"\\n\" else \" \" endif ++ \n    show(setup[i,j])\n  | i in Options, j in Slots\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Car Sequencing Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"As a production planner at a high-tech manufacturing facility, I need to schedule the assembly of 100 custom computers with different configurations. Each computer has a set of components, and each component has a specific installation window and a maximum number of installations per day. I want to minimize the total assembly time while ensuring that all computers are assembled correctly and efficiently. How can I optimize the assembly sequence to meet these constraints?\",\n    \"goal\": \"Minimize total assembly time\",\n    \"constraints\": \"Component installation windows, maximum installations per day, correct assembly of each computer\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 50 bands performing on 5 stages. Each band has a specific setup requirement, and some bands can only play during certain time slots. I want to create a schedule that ensures all bands play at least once, and that the stage transitions are smooth and efficient. How can I create a schedule that works for everyone?\",\n    \"goal\": \"Create a smooth and efficient schedule\",\n    \"constraints\": \"Band setup requirements, time slot constraints, stage transitions\"\n  },\n  \"question3\": {\n    \"description\": \"I'm organizing a school fair with 20 booths, each with a different activity. Some booths require specific equipment, and some activities can only be done during certain times of the day. I want to create a schedule that ensures all booths are open at least once, and that the kids have a fun and varied experience. How can I create a schedule that works for everyone?\",\n    \"goal\": \"Create a fun and varied schedule\",\n    \"constraints\": \"Booth equipment requirements, activity time constraints, kid experience\"\n  },\n  \"question4\": {\n    \"description\": \"I need to schedule 10 meetings with different teams, each with a specific meeting room requirement. How can I minimize the total meeting time while ensuring all teams meet?\",\n    \"goal\": \"Minimize total meeting time\",\n    \"constraints\": \"Meeting room requirements\"\n  },\n  \"question5\": {\n    \"description\": \"As a logistics manager at a large hospital, I need to schedule the delivery of 500 medical devices to 10 different departments. Each device has a specific delivery window, and each department has a limited number of receiving slots. Additionally, some devices require special handling and storage, and some departments have specific receiving times. I want to minimize the total delivery time while ensuring all devices are delivered correctly and efficiently. How can I optimize the delivery sequence to meet these constraints?\",\n    \"goal\": \"Minimize total delivery time\",\n    \"constraints\": \"Device delivery windows, department receiving slots, special handling and storage, receiving times\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Car Sequencing Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Car Sequencing Problem\",\n\"description\": \"The Car Sequencing Problem is a classic problem in constraint programming. It involves sequencing cars of different classes on a production line, subject to certain constraints. Each car has a set of options, and each option has a window size and a maximum number of occurrences. The goal is to find a sequence of cars that satisfies these constraints while minimizing a certain objective function.\",\n\"variables\": \"slot[s] \u2208 {1, ..., numclasses} \u2200s \u2208 {1, ..., numcars}, setup[o, s] \u2208 {0, 1} \u2200o \u2208 {1, ..., numoptions}, s \u2208 {1, ..., numcars}. \nThe decision variables are slot[s], which represents the class of the car in slot s, and setup[o, s], which represents whether option o is set up in slot s.\",\n\"constraints\": \"\u2211(s \u2208 Slots) (bool2int(slot[s] = c)) = numberPerClass[c] \u2200c \u2208 Classes, \n\u2211(j \u2208 s..s + windowSize[o] - 1) (setup[o, j]) \u2264 optMax[o] \u2200o \u2208 Options, s \u2208 {1, ..., numcars - windowSize[o] + 1}, \nsetup[o, s] = optionsRequired[slot[s], o] \u2200o \u2208 Options, s \u2208 Slots, \n\u2211(s \u2208 1..(numcars - i * windowSize[o])) (setup[o, s]) \u2265 (optionNumberPerClass[o] - i * optMax[o]) \u2200o \u2208 Options, i \u2208 {1, ..., optionNumberPerClass[o]}. \nThese constraints ensure that the correct number of cars of each class are produced, that the window size constraints are satisfied, that the setup of options is correct, and that the maximum number of occurrences of each option is not exceeded.\",\n\"objective\": \"minimize z = \u2211(s \u2208 Classes) (s * slot[s]). \nThe objective is to minimize the total 'cost' of the sequence, where the cost of each car is its class number.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "crossfigure": {"__data__": {"id_": "crossfigure", "embedding": null, "metadata": {"problem_family": "crossfigure", "model_name": "crossfigure", "source_code": "% \n% Crossfigure problem in MiniZinc.\n%\n% CSPLib problem 21\n% http://www.csplib.org/Problems/prob021\n% \"\"\"\n% Crossfigures are the numerical equivalent of crosswords. You have a grid and some \n% clues with numerical answers to place on this grid. Clues come in several different \n% forms (for example: Across 1. 25 across times two, 2. five dozen, 5. a square number, \n% 10. prime, 14. 29 across times 21 down ...). \n% \"\"\"\n%\n% Also, see \n% http://en.wikipedia.org/wiki/Cross-figure\n% \n% William Y. Sit: \"On Crossnumber Puzzles and The Lucas-Bonaccio Farm 1998\n% http://scisun.sci.ccny.cuny.edu/~wyscc/CrossNumber.pdf\n% \n% Bill Williams: Crossnumber Puzzle, The Little Pigley Farm\n% http://jig.joelpomerantz.com/fun/dogsmead.html\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n%\n% This model was inspired by the ECLiPSe model written by Warwick Harvey:\n% http://www.csplib.org/Problems/prob021/models\n%\n%\n% Data from \n% http://thinks.com/crosswords/xfig.htm.\n%\n% This problem is 001 from http://thinks.com/crosswords/xfig.htm \n% (\"X\" is the blackbox and is fixed to the value of 0)\n%\n% 1  2  3  4  5  6  7  8  9\n% ---------------------------\n% 1  2  _  3  X  4  _  5  6  % 1\n% 7  _  X  8  _  _  X  9  _  % 2\n% _  X  10 _  X  11 12 X  _  % 3\n% 13 14 _  _  X  15 _  16 _  % 4 \n% X  _  X  X  X  X  X  _  X  % 5 \n% 17 _  18 19 X  20 21 _ 22  % 6\n% _  X  23 _  X  24 _  X  _  % 7\n% 25 26 X  27 _  _  X  28 _  % 8\n% 29 _  _  _  X  30 _  _  _  % 9\n\n%\n% The answer is\n%  1608 9183\n%  60 201 42\n%  3 72 14 1\n%  5360 2866\n%   3     4\n%  4556 1156\n%  9 67 16 8\n%  68 804 48\n%  1008 7332\n\n% Solutions:\n% MiniZinc and Gecode/fz solves the problem in about 8 seconds.\n% ECLiPSe/ic: 35 seconds\n% MiniZinc/fdmip in 14 seconds.\n%\n\n\nint: n = 9;\narray[1..n, 1..n] of var 0..9: M;\n\nset of int: D = 0..9999; % the max length of the numbers in this problem is 4\nvar D: A1;\nvar D: A4;\nvar D: A7;\nvar D: A8;\nvar D: A9;\nvar D: A10;\nvar D: A11;\nvar D: A13;\nvar D: A15;\nvar D: A17;\nvar D: A20;\nvar D: A23;\nvar D: A24;\nvar D: A25;\nvar D: A27;\nvar D: A28;\nvar D: A29;\nvar D: A30;\n\nvar D: D1;\nvar D: D2;\nvar D: D3;\nvar D: D4;\nvar D: D5;\nvar D: D6;\nvar D: D10;\nvar D: D12;\nvar D: D14;\nvar D: D16;\nvar D: D17;\nvar D: D18;\nvar D: D19;\nvar D: D20;\nvar D: D21;\nvar D: D22;\nvar D: D26;\nvar D: D28;\n\n\n%\n% across(Matrix, Across, Len, Row, Col)\n%\tConstrains 'Across' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding across.\n%\npredicate across(array[int, int] of var D: Matrix, var D: Across, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Across)\n   /\\\n   forall(i in 0..Len-1) (\n\n       Matrix[Row,Col+i] = tmp[i+1]\n   )\n;\n\n%\n% down(Matrix, Down, Len, Row, Col):\n%\tConstrains 'Down' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding down.\n%\npredicate down(array[int,int] of var D: Matrix, var D: Down, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Down)\n   /\\\n   forall(i in 0..Len-1) (\n      Matrix[Row+i,Col] = tmp[i+1]\n   )\n;\n\n\n%\n% converts a number <-> array\n%\npredicate toNum10(array[int] of var D: a, var D: n) =\n          let { int: len = length(a) }\n          in\n          n = sum(i in 1..len) (\n            ceil(pow(10.0, int2float(len-i))) * a[i]\n          )\n          /\\ forall(i in 1..len) (a[i] >= 0)\n;\n\n\n%\n% x is a square\n% \npredicate square(var D: x) =\n   exists(y in D) (\n      y*y = x\n   )\n;\n\n\n%\n% very simple primality test\n%\npredicate is_prime(var int: x) =\n   forall(i in 2..ceil(sqrt(9999.0))) ( \n        (i < x) -> (x mod i > 0)\n   )\n;\n\n\nsolve :: int_search(\n         [M[i,j] | i,j in 1..n] ++\n         [A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n         D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28],\n         occurrence,\n         indomain_min,\n         complete\n         ) \n     satisfy;\n\n\nconstraint\n\n   % Set up the constraints between the matrix elements and the\n   % clue numbers.\n   across(M, A1, 4, 1, 1)  /\\ \n   across(M, A4, 4, 1, 6)  /\\ \n   across(M, A7, 2, 2, 1)  /\\ \n   across(M, A8, 3, 2, 4)  /\\ \n   across(M, A9, 2, 2, 8)  /\\ \n   across(M, A10, 2, 3, 3) /\\ \n   across(M, A11, 2, 3, 6) /\\ \n   across(M, A13, 4, 4, 1) /\\ \n   across(M, A15, 4, 4, 6) /\\ \n   across(M, A17, 4, 6, 1) /\\ \n   across(M, A20, 4, 6, 6) /\\ \n   across(M, A23, 2, 7, 3) /\\ \n   across(M, A24, 2, 7, 6) /\\ \n   across(M, A25, 2, 8, 1) /\\ \n   across(M, A27, 3, 8, 4) /\\ \n   across(M, A28, 2, 8, 8) /\\ \n   across(M, A29, 4, 9, 1) /\\ \n   across(M, A30, 4, 9, 6) /\\ \n\n   down(M, D1, 4, 1, 1)  /\\ \n   down(M, D2, 2, 1, 2)  /\\ \n   down(M, D3, 4, 1, 4)  /\\ \n   down(M, D4, 4, 1, 6)  /\\ \n   down(M, D5, 2, 1, 8)  /\\ \n   down(M, D6, 4, 1, 9)  /\\ \n   down(M, D10, 2, 3, 3) /\\ \n   down(M, D12, 2, 3, 7) /\\ \n   down(M, D14, 3, 4, 2) /\\ \n   down(M, D16, 3, 4, 8) /\\ \n   down(M, D17, 4, 6, 1) /\\ \n   down(M, D18, 2, 6, 3) /\\ \n   down(M, D19, 4, 6, 4) /\\ \n   down(M, D20, 4, 6, 6) /\\ \n   down(M, D21, 2, 6, 7) /\\ \n   down(M, D22, 4, 6, 9) /\\ \n   down(M, D26, 2, 8, 2) /\\ \n   down(M, D28, 2, 8, 8) /\\ \n\n\n   % Set up the clue constraints.\n%  Across\n%  1 27 across times two\n%  4 4 down plus seventy-one\n%  7 18 down plus four\n%  8 6 down divided by sixteen\n%  9 2 down minus eighteen\n% 10 Dozen in six gross\n% 11 5 down minus seventy\n% 13 26 down times 23 across\n% 15 6 down minus 350\n% 17 25 across times 23 across\n% 20 A square number\n% 23 A prime number\n% 24 A square number\n% 25 20 across divided by seventeen\n% 27 6 down divided by four\n% 28 Four dozen\n% 29 Seven gross\n% 30 22 down plus 450 \n\n   A1 = 2 * A27         /\\ \n   A4 = D4 + 71         /\\ \n   A7 = D18 + 4         /\\ \n   A8 = D6 div 16       /\\ \n   A9 = D2 - 18         /\\ \n   A10 = 6 * 144 div 12 /\\ \n   A11 = D5 - 70        /\\ \n   A13 = D26 * A23      /\\ \n   A15 = D6 - 350       /\\ \n   A17 = A25 * A23      /\\ \n   square(A20)          /\\ \n   is_prime(A23)        /\\\n   square(A24)          /\\ \n   A25 = A20 div 17     /\\ \n   A27 = D6 div 4       /\\ \n   A28 = 4 * 12         /\\ \n   A29 = 7 * 144        /\\ \n   A30 = D22 + 450      /\\ \n\n   % Down\n   %\n   %  1 1 across plus twenty-seven\n   %  2 Five dozen\n   %  3 30 across plus 888\n   %  4 Two times 17 across\n   %  5 29 across divided by twelve\n   %  6 28 across times 23 across\n   % 10 10 across plus four\n   % 12 Three times 24 across\n   % 14 13 across divided by sixteen\n   % 16 28 down times fifteen\n   % 17 13 across minus 399\n   % 18 29 across divided by eighteen\n   % 19 22 down minus ninety-four\n   % 20 20 across minus nine\n   % 21 25 across minus fifty-two\n   % 22 20 down times six\n   % 26 Five times 24 across\n   % 28 21 down plus twenty-seven \n\n   D1 = A1 + 27     /\\ \n   D2 = 5 * 12      /\\ \n   D3 = A30 + 888   /\\ \n   D4 = 2 * A17     /\\ \n   D5 = A29 div 12  /\\ \n   D6 = A28 * A23   /\\ \n   D10 = A10 + 4    /\\ \n   D12 = A24 * 3    /\\ \n   D14 = A13 div 16 /\\ \n   D16 = 15 * D28   /\\ \n   D17 = A13 - 399  /\\ \n   D18 = A29 div 18 /\\ \n   D19 = D22 - 94   /\\ \n   D20 = A20 - 9    /\\ \n   D21 = A25 - 52   /\\ \n   D22 = 6 * D20    /\\ \n   D26 = 5 * A24    /\\ \n   D28 = D21 + 27\n\n\n   % Fix the blackboxes\n   /\\\n   M[1,5] = 0 /\\\n   M[2,3] = 0 /\\\n   M[2,7] = 0 /\\\n   M[3,2] = 0 /\\\n   M[3,5] = 0 /\\\n   M[3,8] = 0 /\\\n   M[4,5] = 0 /\\\n   M[5,1] = 0 /\\\n   M[5,3] = 0 /\\\n   M[5,4] = 0 /\\\n   M[5,5] = 0 /\\\n   M[5,6] = 0 /\\\n   M[5,7] = 0 /\\\n   M[5,9] = 0 /\\\n   M[6,5] = 0 /\\\n   M[7,2] = 0 /\\\n   M[7,5] = 0 /\\\n   M[7,8] = 0 /\\\n   M[8,3] = 0 /\\\n   M[8,7] = 0 /\\\n   M[9,5] = 0\n;\n\n\noutput [\n show([A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n       D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28]), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(M[i,j])\n  | i,j  in 1..n\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Crossfigure problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to optimize the storage of 81 crates of different sizes and weights. Each crate has a specific label with a numerical code, and I need to arrange them in a 9x9 grid to maximize storage capacity while ensuring that certain crates are adjacent to each other based on their codes. Can you help me find the most efficient arrangement?\",\n  \"question2\": \"I'm planning a music festival with 81 different acts performing on 9 stages. Each act has a specific genre, duration, and equipment requirement. I need to schedule the acts in a way that ensures a smooth transition between performances, minimizes equipment changes, and satisfies the genre and duration constraints. Can you help me create a schedule that works for everyone?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles and games. I have a 9x9 grid of tiles with numbers and symbols on them. I need to arrange the tiles in a way that makes sense, following some secret rules that I don't fully understand. Can you help me figure out the correct arrangement and explain the rules to me?\",\n  \"question4\": \"I have 81 different ingredients for a recipe, and I need to arrange them in a 9x9 grid to create a balanced and harmonious flavor profile. Can you help me find the perfect arrangement?\",\n  \"question5\": \"I'm a urban planner designing a new city district with 81 different zones, each with its own unique characteristics, such as residential, commercial, industrial, and recreational areas. The zones need to be arranged in a way that minimizes traffic congestion, ensures efficient public transportation, and satisfies the needs of different demographics. Additionally, there are specific constraints on the placement of certain zones, such as schools, hospitals, and parks. Can you help me create a master plan that balances the competing demands and priorities of the different stakeholders?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Crossfigure problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem:\n\n```\n{\n  \"name\": \"Crossfigure Problem\",\n  \"description\": \"The Crossfigure problem is a classical constraint satisfaction problem where a set of numerical clues are given to fill a 9x9 grid. The clues are in the form of arithmetic operations and properties of numbers, and the goal is to find the values that satisfy all the clues.\",\n  \"variables\": \"M[i,j], A1, A4, A7, A8, A9, A10, A11, A13, A15, A17, A20, A23, A24, A25, A27, A28, A29, A30, D1, D2, D3, D4, D5, D6, D10, D12, D14, D16, D17, D18, D19, D20, D21, D22, D26, D28. These variables represent the values in the 9x9 grid (M[i,j]) and the answers to the clues (A1-A30 and D1-D28).\",\n  \"constraints\": \"across(M, A, Len, Row, Col), down(M, D, Len, Row, Col), toNum10(a, n), square(x), is_prime(x). These constraints ensure that the values in the grid satisfy the given clues, which involve arithmetic operations and properties of numbers.\",\n  \"objective\": \"The objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to find the values that fill the 9x9 grid and satisfy all the given clues.\"\n}\n```\n\nNote that the objective of the problem is to find a feasible solution, as there is no objective function to minimize or maximize.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "curriculum": {"__data__": {"id_": "curriculum", "embedding": null, "metadata": {"problem_family": "curriculum", "model_name": "curriculum", "source_code": "% The balanced academic curriculum problem: see\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob030/spec.html\n%\n% A curriculum is a set of courses with prerequisites.\n%\n% Each course must be assigned within a set number of periods.\n%\n% A course cannot be scheduled before its prerequisites.\n%\n% Each course confers a number of academic credits (it's \"load\").\n%\n% Students have lower and upper bounds on the number of credits\n% they can study for in a given period.\n%\n% Students have lower and upper bounds on the number of courses\n% they can study for in a given period.\n%\n% The goal is to assign a period to every course satisfying these\n% criteria, minimising the load for all periods.\n\ninclude \"globals.mzn\";\n\nint: n_courses;\nint: n_periods;\nint: load_per_period_lb;\nint: load_per_period_ub;\nint: courses_per_period_lb;\nint: courses_per_period_ub;\narray [1..n_courses] of int: course_load;\nint: max_course_load = sum(c in courses)(course_load[c]);\n\nset of int: courses = 1..n_courses;\nset of int: periods = 1..n_periods;\n\n% period course is assigned to\narray [courses] of var periods: course_period;\n% whether period i has course j assigned\narray [periods, courses] of var 0..1: x;\n% total load for each period\narray [periods] of var load_per_period_lb..load_per_period_ub: load;\n% optimisation target\nvar load_per_period_lb..load_per_period_ub: objective;\n\nconstraint forall(p in periods) (\n    forall(c in courses) (x[p,c] = bool2int(course_period[c] = p)) /\\\n    sum(i in courses) (x[p,i]) >= courses_per_period_lb /\\\n    sum(i in courses) (x[p,i]) <= courses_per_period_ub /\\\n    load[p] = sum(c in courses) (x[p,c] * course_load[c]) /\\\n    load[p] >= load_per_period_lb /\\\n    load[p] <= objective\n);\n\n% prerequisite(a, b) means \"course a has prerequisite course b\".\n\npredicate prerequisite(courses: a, courses: b) =\n    course_period[b] < course_period[a];\n\n% add some redundant linear constraints\n\nconstraint forall(p in 0..n_periods-1) (\n    let {\n\t\tvar 0..max_course_load: l = sum(c in courses) (bool2int(course_period[c] > p) * course_load[c])\n\t} in \n        l >= (n_periods-p) * load_per_period_lb /\\\n        l <= (n_periods-p) * objective\n    );\n\nsolve :: seq_search([\n      int_search([x[i,j] | i in periods, j in courses], input_order, indomain_max, complete),\n      int_search([objective], input_order, indomain_min, complete)\n    ]) minimize objective;\n\noutput \n    [show(c) ++ \"-\" ++ show(course_period[c]) ++ \"\\t\" | c in courses ] ++ [\"\\n\"] ++\n    [\"objective = \", show(objective)];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Balanced Academic Curriculum Problem:\n\n```\n{\n  \"question1\": \"As a logistics manager for a large e-commerce company, I need to allocate warehouse space to different product categories. Each category has a specific storage requirement and some categories have prerequisites (e.g., fragile items need to be stored near the packing area). I want to minimize the total storage capacity required across all warehouses while ensuring that each warehouse has a balanced load of products. How can I optimize the allocation of products to warehouses?\",\n  \"question2\": \"I'm planning a music festival with 10 stages and 50 bands. Each band has a specific sound and equipment requirement, and some bands can only play after certain other bands. I want to create a schedule that ensures each stage has a good mix of bands and that the overall sound and equipment requirements are balanced across all stages. How can I create a schedule that works for everyone?\",\n  \"question3\": \"I'm a 12-year-old who loves playing with my friends in a big park. We have 8 different games we like to play, and each game requires a specific number of players and equipment. We want to play all the games, but we can only play 2 games at a time. How can we create a schedule that lets us play all the games we want while making sure we have enough players and equipment for each game?\",\n  \"question4\": \"I have 5 projects with different resource requirements and dependencies. How can I allocate resources to each project to minimize the total resource usage?\",\n  \"question5\": \"As a manager of a large hospital, I need to allocate operating rooms to different surgical teams. Each team has a specific requirement for equipment, staff, and time, and some teams have prerequisites (e.g., certain surgeries require a specific anesthesiologist). I want to minimize the total number of operating rooms required while ensuring that each room has a balanced load of surgeries and that the hospital's resources are utilized efficiently. The hospital has 10 operating rooms, and each room can accommodate up to 5 surgeries per day. The surgical teams have the following requirements: Team A requires 2 rooms and 10 staff, Team B requires 1 room and 5 staff, Team C requires 1 room and 8 staff, and so on. How can I optimize the allocation of operating rooms to surgical teams?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and they do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Balanced Academic Curriculum Problem\",\n\"description\": \"The Balanced Academic Curriculum Problem is a classic constraint programming problem that involves assigning courses to periods while satisfying various constraints related to course prerequisites, student credit loads, and course loads per period. The goal is to minimize the total load for all periods.\",\n\"variables\": \"course_period[c], x[p,c], load[p], objective\\n\\\ncourse_period[c] represents the period assigned to course c, x[p,c] represents whether course c is assigned to period p, load[p] represents the total load for period p, and objective represents the minimum total load for all periods.\",\n\"constraints\": \"x[p,c] = bool2int(course_period[c] = p), sum(i in courses) (x[p,i]) >= courses_per_period_lb, sum(i in courses) (x[p,i]) <= courses_per_period_ub, load[p] = sum(c in courses) (x[p,c] * course_load[c]), load[p] >= load_per_period_lb, load[p] <= objective, course_period[b] < course_period[a] (prerequisite(a, b)), l >= (n_periods-p) * load_per_period_lb, l <= (n_periods-p) * objective\\n\\\nThese constraints ensure that each course is assigned to a period, the number of courses per period is within bounds, the total load per period is within bounds, the total load per period is calculated correctly, prerequisites are respected, and some redundant linear constraints are added to help the solver.\",\n\"objective\": \"minimize objective\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "diamond_free_degree_sequence": {"__data__": {"id_": "diamond_free_degree_sequence", "embedding": null, "metadata": {"problem_family": "diamond_free_degree_sequence", "model_name": "diamond_free_degree_sequence", "source_code": "% \n% Diamond-free Degree Sequence (CSPLib #50) in MiniZinc.\n% \n% http://www.csplib.org/Problems/prob050/\n% \"\"\"\n%  Proposed by Alice Miller, Patrick Prosser\n%\n% Given a simple undirected graph G=(V,E), where V is the set of vertices and E the set of \n% undirected edges, the edge {u,v} is in E if and only if vertex u is adjacent to vertex v\u2208G. \n% The graph is simple in that there are no loop edges, i.e. we have no edges of the form {v,v}. \n% Each vertex v\u2208V has a degree dv i.e. the number of edges incident on that vertex. Consequently \n% a graph has a degree sequence d1,\u2026,dn, where di>=di+1. A diamond is a set of four vertices \n% in V such that there are at least five edges between those vertices. Conversely, a graph is \n% diamond-free if it has no diamond as an induced subgraph, i.e. for every set of four vertices \n% the number of edges between those vertices is at most four.\n% \n% In our problem we have additional properties required of the degree sequences of the graphs, \n% in particular that the degree of each vertex is greater than zero (i.e. isolated vertices \n% are disallowed), the degree of each vertex is modulo 3, and the sum of the degrees is \n% modulo 12 (i.e. |E| is modulo 6).\n%\n% The problem is then for a given value of n, produce all unique degree sequences d1,\u2026,dn such \n% that\n%\n%  * di\u2265di+1\n%  * each degree di>0 and di is modulo 3\n%  * the sum of the degrees is modulo 12\n%  * there exists a simple diamond-free graph with that degree sequence\n%\n% Below, as an example, is the unique degree sequence forn=10 along with the adjacency matrix of \n% a diamond-free graph with that degree sequence.\n%\n%   n = 10\n%   6 6 3 3 3 3 3 3 3 3\n%\n%   0 0 0 0 1 1 1 1 1 1 \n%   0 0 0 0 1 1 1 1 1 1 \n%   0 0 0 0 0 0 0 1 1 1 \n%   0 0 0 0 1 1 1 0 0 0 \n%   1 1 0 1 0 0 0 0 0 0 \n%   1 1 0 1 0 0 0 0 0 0 \n%   1 1 0 1 0 0 0 0 0 0 \n%   1 1 1 0 0 0 0 0 0 0 \n%   1 1 1 0 0 0 0 0 0 0 \n%   1 1 1 0 0 0 0 0 0 0\n%\n% \"\"\"\n\n%\n% Note: Most FlatZinc solver yields all solutions of x even when  \n%       degree is the only in output.\n% \n% The exception is the Gecode solver, which just prints the \n% distinct degrees proviso:\n%  - only degrees is in the output\n%  - only degrees is in the labeling (or \"solve satisfy\")\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\ninclude \"globals.mzn\"; \n\nint: n = 11;\n\n% decision variables\narray[1..n,1..n] of var 0..1: x;\narray[1..n] of var 1..n: degrees;\n\n\n% solve satisfy;\nsolve :: int_search(degrees, first_fail, indomain_split, complete) satisfy;\n\nconstraint\n  forall(i,j,k,l in 1..n where i < j /\\ j < k /\\ k < l) (\n     x[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4\n  )\n  /\\\n  forall(i in 1..n) (\n     degrees[i] = sum([x[i,j] | j in 1..n])\n     /\\ degrees[i] mod 3 = 0\n     % no loops\n     /\\ x[i,i] = 0\n  ) \n  /\\ % undirected graph\n  forall(i,j in 1..n) (\n    x[i,j] = x[j,i]\n  )\n  /\\ sum(degrees) mod 12 = 0\n\n  % symmetry breaking\n  /\\ decreasing(degrees)\n  /\\ lex2(x)\n;\n\noutput \n[ \"degrees: \", show(degrees), \"\\n\"]\n% ++\n% [\n%   if j = 1 then \"\\n\" else \" \" endif ++\n%     show(x[i,j])\n%   | i,j in 1..n\n% ]\n;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Diamond-free Degree Sequence problem:\n\n```\n{\n  \"question1\": \"I'm a network architect designing a new communication system for a large organization. I need to ensure that the network is robust and efficient, with no bottlenecks or single points of failure. I have 11 nodes to connect, and each node can have a maximum of 6 connections. How can I configure the connections to minimize the risk of network congestion and ensure that the total number of connections is a multiple of 12?\",\n  \"question2\": \"I'm planning a party and I want to make sure that everyone has a good time. I have 11 guests, and I want to arrange the seating so that everyone talks to at least 3 other people, but not more than 6. I also want to make sure that no group of 4 people talks to each other too much. How can I arrange the seating to make this happen?\",\n  \"question3\": \"I'm a kid who loves playing with my friends in a big group. We have 11 kids in our group, and we want to play a game where everyone is connected to at least 3 other kids, but not more than 6. We also don't want any group of 4 kids to be too cliquey. How can we arrange ourselves to make this game work?\",\n  \"question4\": \"Design a social network with 11 users, each with 3-6 friends, and no cliques of 4 users.\",\n  \"question5\": \"I'm a logistics manager responsible for scheduling deliveries for a large e-commerce company. We have 11 warehouses, and each warehouse needs to be connected to at least 3 other warehouses to ensure efficient delivery routes. However, we also need to avoid creating bottlenecks in the system, so we want to limit the number of connections between warehouses to 6. Additionally, we need to ensure that the total number of connections between warehouses is a multiple of 12 to simplify our scheduling process. How can I configure the connections between warehouses to meet these requirements and optimize our delivery routes?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Diamond-free Degree Sequence problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Diamond-free Degree Sequence\",\n\"description\": \"The problem is to find all unique degree sequences of a simple undirected graph that satisfy certain properties. The graph is diamond-free, meaning it does not contain a subgraph with four vertices and at least five edges between them. The degree of each vertex is greater than zero and is a multiple of 3, and the sum of the degrees is a multiple of 12.\",\n\"variables\": \"x[i,j] (i, j = 1..n), degrees[i] (i = 1..n). x[i,j] represents the adjacency matrix of the graph, where x[i,j] = 1 if there is an edge between vertices i and j, and 0 otherwise. degrees[i] represents the degree of vertex i, i.e., the number of edges incident on vertex i.\",\n\"constraints\": \"x[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4 (no diamond subgraph), degrees[i] = sum(x[i,j] for j in 1..n) (degree of vertex i), degrees[i] mod 3 = 0 (degree of vertex i is a multiple of 3), x[i,i] = 0 (no loops), x[i,j] = x[j,i] (undirected graph), sum(degrees) mod 12 = 0 (sum of degrees is a multiple of 12), decreasing(degrees) (symmetry breaking), lex2(x) (symmetry breaking).\",\n\"objective\": \"Satisfy (find all feasible solutions)\"\n}\n\nNote that the objective of this problem is to find all feasible solutions, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "fractions": {"__data__": {"id_": "fractions", "embedding": null, "metadata": {"problem_family": "fractions", "model_name": "fractions", "source_code": "% \n% Fractions problem in MiniZinc.\n%\n% Prolog benchmark problem (BProlog)\n% \"\"\"\n% Find distinct non-zero digits such that the following equation holds:\n%        A        D        G\n%     ------  + ----- + ------  = 1\n%       B*C      E*F      H*I\n% \"\"\"\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n\ninclude \"globals.mzn\"; \n\nvar 1..9: A;\nvar 1..9: B;\nvar 1..9: C;\nvar 1..9: D;\nvar 1..9: E;\nvar 1..9: F;\nvar 1..9: G;\nvar 1..9: H;\nvar 1..9: I;\narray[1..9] of var 1..9: Vars=[A,B,C,D,E,F,G,H,I];\n\nvar 1..81: D1;\nvar 1..81: D2;\nvar 1..81: D3;\n\n\n\n% solve satisfy;\nsolve :: int_search(Vars ++ [D1,D2,D3], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   all_different(Vars) /\\\n   D1 = 10*B+C /\\\n   D2 = 10*E+F /\\\n   D3 = 10*H+I /\\\n   A*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3 /\\\n   % break the symmetry\n   A*D2 >= D*D1 /\\\n   D*D3 >= G*D2 /\\\n   %redundant constraints\n   3*A >= D1 /\\\n   3*G <= D2\n\n;\n\noutput [\n  show(Vars), \"\\n\"\n]\n;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to allocate nine different types of cargo to three ships with distinct capacities. Each cargo has a specific volume and weight, and each ship has its own constraints on volume and weight. How can I allocate the cargo to minimize the number of ships used while ensuring that the total volume and weight of each ship do not exceed its capacity?\",\n  \"question2\": \"I'm planning a party and I want to serve three different types of drinks: juice, soda, and water. I have nine different flavors to choose from, and I want to make sure that each drink has a unique flavor combination. How can I choose the flavors so that each drink is distinct and I don't run out of any flavor?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles! I have nine different toys, and I want to create three teams of toys to play a game together. Each team needs to have a unique combination of toys, and I want to make sure that each toy is used only once. Can you help me figure out how to create the teams?\",\n  \"question4\": \"I have nine ingredients and I want to make three different recipes. Each recipe requires a unique combination of ingredients. How can I choose the ingredients for each recipe?\",\n  \"question5\": \"As a product manager at a manufacturing company, I need to design three new products that require nine different components. Each product has its own specific requirements for the components, and I need to ensure that each component is used only once across all three products. Additionally, I need to minimize the total cost of the components while meeting the product requirements. The components have the following costs: A=$10, B=$8, C=$12, D=$15, E=$9, F=$11, G=$7, H=$14, I=$13. How can I allocate the components to the products to meet the requirements and minimize the total cost?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and they do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n{\n\"name\": \"Fractions Problem\",\n\"description\": \"The Fractions Problem is a classic constraint programming problem that involves finding distinct non-zero digits such that a specific equation holds. The equation represents the sum of three fractions equal to 1, where each fraction has a numerator and a denominator composed of the given digits.\",\n\"variables\": \"A, B, C, D, E, F, G, H, I, D1, D2, D3. These variables represent the digits in the equation, where A, B, C, D, E, F, G, H, I are the digits, and D1, D2, D3 are intermediate variables used to calculate the numerators and denominators of the fractions.\",\n\"constraints\": \"all_different(Vars), D1 = 10*B+C, D2 = 10*E+F, D3 = 10*H+I, A*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3, A*D2 >= D*D1, D*D3 >= G*D2, 3*A >= D1, 3*G <= D2. These constraints ensure that the digits are distinct, the intermediate variables are correctly calculated, the equation holds, and some symmetry-breaking and redundant constraints are satisfied.\",\n\"objective\": \"satisfy (i.e., find a feasible solution that satisfies all the constraints)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golfers1": {"__data__": {"id_": "golfers1", "embedding": null, "metadata": {"problem_family": "golfers1", "model_name": "golfers1", "source_code": "% golfers.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Mon Oct 29 13:56:25 EST 2007\n%\n% The social golfers problem, see\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob001/data.txt\n%\n% A club has a number of golfers that play rounds in groups (the number of\n% golfers is a multiple of the number of groups).  Each round, a golfer\n% plays with a group of different people, such that the same pair of golfers\n% never play together twice.\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\nset of int: places = 1..n_golfers;\n\narray [rounds, places] of var golfers: round_place_golfer;\narray [golfers, golfers] of var 0..n_rounds: golfer_golfer_round;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (p in places) (round_place_golfer[r, p])\n    );\n\n    % Break some symmetry by strictly ordering each group in each round.\n    %\nconstraint\n    forall (r in rounds, p in places) (\n        if p mod n_per_group != 0\n        then round_place_golfer[r, p] < round_place_golfer[r, p + 1]\n        else true\n        endif\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (r in rounds, g in 0..(n_groups - 1), i, j in 1..n_per_group\n            where i < j) (\n        golfer_golfer_round[\n            round_place_golfer[r, n_per_group * g + i],\n            round_place_golfer[r, n_per_group * g + j]\n        ] = r\n    );\n\nsolve\n    :: int_search([round_place_golfer[r, p] | r in rounds, p in places],\n        first_fail, indomain_min, complete)\n    satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if p = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif ) ++\n    ( if p mod n_per_group = 1 then \"   \" else \" \" endif ) ++\n    show_int(2, round_place_golfer[r, p]) | r in rounds, p in places\n];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Social Golfers Problem:\n\n```\n{\n  \"question1\": \"I'm organizing a series of workshops for 24 researchers from 4 different institutions. Each workshop has 6 participants and I want to ensure that each researcher collaborates with a different set of people in each of the 3 workshops. How can I schedule the workshops to maximize collaboration and minimize repetition?\",\n  \"question2\": \"I'm planning a birthday party for my 12-year-old daughter and I want to set up 4 tables with 3 kids at each table. I want to make sure that each kid sits with different friends at each of the 3 rounds of games. Can you help me figure out a seating arrangement that makes everyone happy?\",\n  \"question3\": \"I'm the captain of my school's debate team and we have 15 members. We need to practice debating in teams of 3 for 5 rounds, but I want to make sure that each team member debates with different people in each round. How can I create a schedule that ensures everyone gets to debate with everyone else?\",\n  \"question4\": \"I have 12 friends coming over for dinner and I want to seat them in groups of 3 for 4 courses. How can I arrange the seating so that each friend sits with different people for each course?\",\n  \"question5\": \"I'm the event coordinator for a large conference with 48 attendees from 8 different companies. We have 6 breakout sessions, each with 8 attendees, and I want to ensure that each attendee meets with a different set of people from different companies in each session. The attendees have expressed the following preferences: 20% want to avoid sitting with people from their own company, 30% want to sit with people from companies in the same industry, and 50% have no preferences. How can I create a seating arrangement that satisfies these preferences and ensures that each attendee meets with a diverse group of people in each session?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Social Golfers Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Social Golfers Problem\",\n\"description\": \"The Social Golfers Problem is a classic constraint satisfaction problem that involves scheduling golfers into groups for multiple rounds, such that each golfer plays with a different set of golfers in each round, and no two golfers play together more than once.\",\n\"variables\": \"round_place_golfer[r, p], golfer_golfer_round[g, h]; \nround_place_golfer[r, p] represents the golfer assigned to place p in round r, and golfer_golfer_round[g, h] represents the round in which golfers g and h play together.\",\n\"constraints\": \"alldifferent (p in places) (round_place_golfer[r, p]), \nround_place_golfer[r, p] < round_place_golfer[r, p + 1], \ngolfer_golfer_round[g, h] = r; \nThe first constraint ensures that each group in each round has distinct golfers, the second constraint breaks symmetry by ordering each group in each round, and the third constraint ensures that each pair of golfers plays together at most once.\",\n\"objective\": \"satisfy (there is no objective function to minimize or maximize, the goal is to find a feasible solution)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golfers2": {"__data__": {"id_": "golfers2", "embedding": null, "metadata": {"problem_family": "golfers2", "model_name": "golfers2", "source_code": "% golfers.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Mon Oct 29 13:56:25 EST 2007\n%\n% The social golfers problem, see\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob001/data.txt\n%\n% A club has a number of golfers that play rounds in groups (the number of\n% golfers is a multiple of the number of groups).  Each round, a golfer\n% plays with a group of different people, such that the same pair of golfers\n% never play together twice.\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups, group] of var golfers: round_group_i_golfer;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (g in groups, i in group) (round_group_i_golfer[r, g, i])\n    );\n\n    % We also break some symmetry\n    % here by strictly ordering each group.\n    %\nconstraint\n    forall (r in rounds, g in groups, i in group where i < n_per_group) (\n        round_group_i_golfer[r, g, i] < round_group_i_golfer[r, g, i + 1]\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups, i, j in group where i < j) (\n            bool2int(\n                round_group_i_golfer[r, g, i] = a\n            /\\  round_group_i_golfer[r, g, j] = b\n            )\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if g = 1 /\\ i = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif) ++\n    ( if i = 1 then \"   \" else \" \" endif) ++\n    show_int(2, round_group_i_golfer[r, g, i]) \n    |  r in rounds, g in groups, i in group\n];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Social Golfers Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm organizing a conference with 12 parallel sessions, each with 4 speakers. I want to ensure that each speaker presents in a different session each day, and no two speakers present together more than once. How can I schedule the speakers to achieve this?\",\n    \"context\": \"Academic conference planning\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a dinner party for 16 friends, and I want to seat them in groups of 4 for 3 nights. I want to make sure each guest sits with different people each night, and no two guests sit together more than once. Can you help me figure out the seating arrangements?\",\n    \"context\": \"Social event planning\"\n  },\n  \"question3\": {\n    \"description\": \"I'm in charge of planning a school's club fair, where 12 clubs will have booths. I want to assign 3 students to each booth, and I want to make sure each student works with different people each day, and no two students work together more than once. How can I make this happen?\",\n    \"context\": \"School event planning\"\n  },\n  \"question4\": {\n    \"description\": \"I need to schedule 8 teams of 3 people each for 4 projects. Each team member should work with different people each project, and no two team members should work together more than once. Can you help me with this?\",\n    \"context\": \"Project team assignment\"\n  },\n  \"question5\": {\n    \"description\": \"I'm the manager of a large retail store with 24 sales associates, divided into 4 teams of 6 people each. I want to create a schedule for the next 6 weeks, where each team member works with different people each week, and no two team members work together more than once. Additionally, I want to ensure that each team has a mix of experienced and new associates, and that no team has more than 2 new associates at a time. Can you help me create a schedule that meets these requirements?\",\n    \"context\": \"Workforce scheduling\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Social Golfers Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Social Golfers Problem\",\n  \"description\": \"The Social Golfers Problem is a classic constraint satisfaction problem that involves scheduling golfers into groups for multiple rounds, such that each golfer plays with different people in each round, and no pair of golfers plays together more than once.\",\n  \"variables\": \"round_group_i_golfer[r, g, i], where r \u2208 rounds, g \u2208 groups, i \u2208 group. These variables represent the assignment of golfers to groups in each round.\",\n  \"constraints\": [\n    \"alldifferent (g in groups, i in group) (round_group_i_golfer[r, g, i]), \u2200r \u2208 rounds. This constraint ensures that each group in each round has distinct golfers.\",\n    \"round_group_i_golfer[r, g, i] < round_group_i_golfer[r, g, i + 1], \u2200r \u2208 rounds, g \u2208 groups, i \u2208 group where i < n_per_group. This constraint breaks symmetry by ordering the golfers in each group.\",\n    \"sum (r in rounds, g in groups, i, j in group where i < j) (bool2int(round_group_i_golfer[r, g, i] = a /\\ round_group_i_golfer[r, g, j] = b)) <= 1, \u2200a, b \u2208 golfers where a < b. This constraint ensures that each pair of golfers plays together at most once.\"\n  ],\n  \"objective\": \"satisfy (feasibility problem)\"\n}\n```\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golfers3": {"__data__": {"id_": "golfers3", "embedding": null, "metadata": {"problem_family": "golfers3", "model_name": "golfers3", "source_code": "% golfers.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Mon Oct 29 13:56:25 EST 2007\n%\n% The social golfers problem, see\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob001/data.txt\n%\n% A club has a number of golfers that play rounds in groups (the number of\n% golfers is a multiple of the number of groups).  Each round, a golfer\n% plays with a group of different people, such that the same pair of golfers\n% never play together twice.\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups] of var set of golfers: round_group_golfers;\n\n    % Each group has to have the right size.\n    %\nconstraint\n    forall (r in rounds, g in groups) (\n        card(round_group_golfers[r, g]) = n_per_group\n    );\n\n    % Each group in each round has to be disjoint.\n    %\nconstraint\n    forall (r in rounds) (\n        all_disjoint (g in groups) (round_group_golfers[r, g])\n    );\n\n    % Symmetry breaking.\n    %\n% constraint\n%     forall (r in rounds, g in groups where g < n_groups) (\n%         round_group_golfers[r, g] < round_group_golfers[r, g + 1]\n%     );\n\n    % Each pair may play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups) (\n            bool2int({a, b} subset round_group_golfers[r, g])\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [    ( if   g = 1\n              then \"\\nround \" ++ show(r) ++ \":   \"\n              else \"   \"\n              endif\n            ) ++\n            show(round_group_golfers[r, g])\n       |    r in rounds, g in groups\n       ];\n\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm organizing a series of workshops for 24 researchers, divided into 4 groups of 6 people each, over 3 days. Each researcher should collaborate with different people in each workshop, and no pair of researchers should work together more than once. How can I schedule the workshops to ensure this?\",\n  \"question2\": \"I'm planning a birthday party for my 12-year-old daughter and I want to set up 3 tables with 4 kids at each table. I want to make sure each kid sits with different friends at each table, and no two kids sit together more than once. Can you help me figure out the seating arrangements?\",\n  \"question3\": \"I'm in charge of planning a school event where 18 students will participate in 3 rounds of team-building activities. I want to divide them into 3 groups of 6 students each, and make sure each student works with different teammates in each round. How can I make this happen?\",\n  \"question4\": \"I need to schedule 12 people into 3 groups of 4 people each, over 2 days. No pair of people can be in the same group twice. How do I do this?\",\n  \"question5\": \"I'm the event coordinator for a large conference, and I need to organize a networking session for 36 attendees, divided into 6 groups of 6 people each, over 4 rounds. Each attendee should meet different people in each round, and no pair of attendees should meet more than once. Additionally, I need to ensure that each group has a good mix of people from different industries and backgrounds. Can you help me design a schedule that meets these requirements and also takes into account the attendees' preferences for specific industries and topics?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the Social Golfers Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Social Golfers Problem\",\n\"description\": \"The Social Golfers Problem is a classic constraint satisfaction problem that involves scheduling golfers into groups for multiple rounds, such that each golfer plays with a different set of people in each round, and no pair of golfers plays together more than once.\",\n\"variables\": \"round_group_golfers[r, g] (a set of golfers in group g in round r), where r \u2208 rounds, g \u2208 groups, and golfers \u2208 1..n_golfers. These variables represent the assignment of golfers to groups in each round.\",\n\"constraints\": \"1. \u2200r \u2208 rounds, g \u2208 groups: |round_group_golfers[r, g]| = n_per_group (each group has the right size), 2. \u2200r \u2208 rounds: all_disjoint(g \u2208 groups) round_group_golfers[r, g] (each group in each round is disjoint), 3. \u2200a, b \u2208 golfers, a < b: \u2211(r \u2208 rounds, g \u2208 groups) bool2int({a, b} \u2286 round_group_golfers[r, g]) \u2264 1 (each pair of golfers plays together at most once).\",\n\"objective\": \"satisfy (find a feasible solution that satisfies all constraints)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golomb": {"__data__": {"id_": "golomb", "embedding": null, "metadata": {"problem_family": "golomb", "model_name": "golomb", "source_code": "%-----------------------------------------------------------------------------%\n% Golomb rulers\n% prob006 in csplib\n%-----------------------------------------------------------------------------%\n% From csplib:\n% A Golomb ruler may be defined as a set of m integers 0 = a_1 < a_2 <\n% ... < a_m such that the m(m-1)/2 differences a_j - a_i, 1 <= i < j\n% <= m are distinct. Such a ruler is said to contain m marks and is of\n% length a_m. The objective is to find optimal (minimum length) or\n% near optimal rulers.\n%\n% This is the \"ternary constraints and an alldifferent\" model\n%-----------------------------------------------------------------------------%\n\ninclude \"globals.mzn\";\n\nint: m;\nint: n = m*m;\n\narray[1..m] of var 0..n: mark;\n\narray[1..(m*(m-1)) div 2] of var 0..n: differences =\n    [ mark[j] - mark[i] | i in 1..m, j in i+1..m];\n\nconstraint mark[1] = 0;\n\nconstraint forall ( i in 1..m-1 ) ( mark[i] < mark[i+1] );\n\nconstraint alldifferent(differences);\n\n    % Symmetry breaking\nconstraint differences[1] < differences[(m*(m-1)) div 2];\n\nsolve :: int_search(mark, input_order, indomain, complete)\n    minimize mark[m];\n\noutput [show(mark)];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Golomb Ruler Problem:\n\n```\n{\n  \"question1\": \"I'm a radio frequency engineer designing a new wireless communication system. I need to allocate 10 distinct frequency channels to 10 different devices, ensuring that the frequency differences between all pairs of devices are unique to minimize interference. How can I assign frequencies to minimize the total bandwidth required?\",\n  \"question2\": \"I'm planning a music festival with 8 stages, each featuring a different genre of music. I want to schedule the performances so that no two stages have the same time gap between their performances. How can I create a schedule that minimizes the total duration of the festival?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles! I have 6 friends coming over for a birthday party, and I want to create a scavenger hunt with clues that have different time intervals between them. How can I design the hunt so that no two clues have the same time gap, and the whole hunt takes as little time as possible?\",\n  \"question4\": \"I need to schedule 5 meetings with different teams, ensuring that the time gaps between all pairs of meetings are unique. How can I minimize the total duration of the meetings?\",\n  \"question5\": \"I'm a logistics manager at a large e-commerce company, responsible for scheduling the loading and unloading of cargo ships at our port. We have 12 ships arriving at different times, and each ship requires a unique time gap between its loading and unloading operations to ensure efficient use of resources. The port has a limited number of cranes, and we want to minimize the total time required to process all ships. How can I create a schedule that takes into account the constraints of the cranes, the ships' arrival times, and the unique time gaps required between loading and unloading operations, while minimizing the total processing time?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Golomb Ruler Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Golomb Ruler Problem\",\n\"description\": \"The Golomb Ruler Problem is a classic problem in constraint programming that involves finding a set of integers, called marks, such that the differences between all pairs of marks are distinct. The goal is to find a ruler with a minimum length, which is the maximum mark value.\",\n\"variables\": \"mark[1], ..., mark[m], differences[1], ..., differences[m*(m-1)/2]\",\n\"The variables represent the marks on the ruler and the differences between all pairs of marks. The marks are integers between 0 and n, where n is the square of the number of marks. The differences are also integers between 0 and n, and they represent the distances between all pairs of marks.\",\n\"constraints\": \"mark[1] = 0, mark[i] < mark[i+1] for i in 1..m-1, differences[i] = mark[j] - mark[i] for i in 1..m, j in i+1..m, alldifferent(differences), differences[1] < differences[m*(m-1)/2]\",\n\"The constraints ensure that the first mark is 0, the marks are in increasing order, the differences are correctly calculated, all differences are distinct, and a symmetry breaking constraint to reduce the search space.\",\n\"objective\": \"minimize mark[m]\"\n\"The objective is to minimize the maximum mark value, which represents the length of the ruler.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "K4xP2Graceful": {"__data__": {"id_": "K4xP2Graceful", "embedding": null, "metadata": {"problem_family": "K4xP2Graceful", "model_name": "K4xP2Graceful", "source_code": "% \n% K4P2 Graceful Graph in MiniZinc.\n% \n% Problem from Minion summer_school/examples/K4P2GracefulGraph.eprime\n% \n% This is a more general model than K4P2GracefulGraph.mzn\n% \n% Model created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\ninclude \"globals.mzn\"; \n\nint: m = 16;\nint: n = 8;\narray[1..n] of var 0..m: nodes;\narray[1..m, 1..2] of var 1..n: graph;\narray[1..m] of var 1..m: edges;\n\n\n\nsolve :: int_search(nodes, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..m) (\n    abs(nodes[graph[i,1]] - nodes[graph[i,2]]) = edges[i]  \n  )\n  /\\\n  all_different(edges) \n  /\\ \n  all_different(nodes)\n;\n\ngraph =\narray2d(1..m, 1..2,\n[1, 2,\n1, 3,\n1, 4,\n2, 3,\n2, 4,\n3, 4,\n\n5, 6,\n5, 7,\n5, 8,\n6, 7,\n6, 8,\n7, 8,\n\n1, 5,\n2, 6,\n3, 7,\n4, 8]);\n\noutput\n[\n  \"nodes: \" ++ show(nodes) ++ \"\\n\" ++\n  \"edges: \" ++ show(edges) ++ \"\\n\"\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the K4xP2 Graceful Graph problem:\n\n```\n{\n  \"question1\": \"I'm a network architect designing a communication system for a team of 8 robots working together in a warehouse. Each robot has a unique identifier and can communicate with its neighbors. I need to assign a frequency to each robot such that the difference between the frequencies of adjacent robots is unique and within a range of 0 to 16. How can I assign these frequencies to ensure reliable communication?\",\n  \"question2\": \"I'm planning a music festival with 8 stages and 16 performances. Each stage has a unique sound system, and I want to minimize sound interference between adjacent stages. Can you help me schedule the performances so that the difference in sound levels between adjacent stages is unique and doesn't exceed 16 decibels?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles! I have 8 friends and we want to play a game where we stand in a circle and hold hands. We want to assign a number from 0 to 16 to each friend such that the difference between the numbers of friends holding hands is unique. Can you help us figure out how to do this?\",\n  \"question4\": \"I have 8 sensors and 16 cables to connect them. How can I connect the sensors so that the difference in cable lengths between adjacent sensors is unique and doesn't exceed 16 units?\",\n  \"question5\": \"I'm a logistics manager responsible for scheduling 8 delivery trucks and 16 routes in a metropolitan area. Each truck has a unique identifier, and I want to assign a route to each truck such that the difference in route lengths between adjacent trucks is unique and doesn't exceed 16 miles. Additionally, I need to ensure that all trucks start and end at the same depot, and that no two trucks travel on the same route. Can you help me optimize the route assignments to minimize traffic congestion and reduce delivery times?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the K4xP2 Graceful Graph problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n{\n\"name\": \"K4P2 Graceful Graph\",\n\"description\": \"The K4P2 Graceful Graph problem is a classic problem in graph theory and constraint programming. It involves finding a labeling of the nodes of a graph such that the absolute difference between the labels of adjacent nodes is equal to a unique edge label. The problem is a specific instance of the more general Graceful Graph problem, which is known to be NP-hard.\",\n\"variables\": \"nodes: {n_1, ..., n_8} \u2208 {0, ..., 16}, graph: {(i, j) | i \u2208 {1, ..., m}, j \u2208 {1, 2}}, edges: {e_1, ..., e_m} \u2208 {1, ..., 16}. \nThe variables represent the labels of the nodes, the edges of the graph, and the edge labels, respectively.\",\n\"constraints\": \"\u2200i \u2208 {1, ..., m} : |n_{graph[i,1]} - n_{graph[i,2]}| = e_i, \nall_different(edges), \nall_different(nodes). \nThe constraints ensure that the absolute difference between the labels of adjacent nodes is equal to a unique edge label, and that all edge labels and node labels are distinct.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The problem is a feasibility problem, meaning that the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "killer_sudoku": {"__data__": {"id_": "killer_sudoku", "embedding": null, "metadata": {"problem_family": "killer_sudoku", "model_name": "killer_sudoku", "source_code": "% \n% Killer Sudoku in MiniZinc.\n% \n%   Killer sudoku in Comet.\n\n%   http://en.wikipedia.org/wiki/Killer_Sudoku\n%   \"\"\"\n%   Killer sudoku (also killer su doku, sumdoku, sum doku, addoku, or \n%   samunamupure) is a puzzle that combines elements of sudoku and kakuro. \n%   Despite the name, the simpler killer sudokus can be easier to solve \n%   than regular sudokus, depending on the solver's skill at mental arithmetic; \n%   the hardest ones, however, can take hours to crack.\n\n%   ...\n\n%   The objective is to fill the grid with numbers from 1 to 9 in a way that \n%   the following conditions are met:\n\n%     * Each row, column, and nonet contains each number exactly once.\n%     * The sum of all numbers in a cage must match the small number printed \n%       in its corner.\n%     * No number appears more than once in a cage. (This is the standard rule \n%       for killer sudokus, and implies that no cage can include more \n%       than 9 cells.)\n\n%   In 'Killer X', an additional rule is that each of the long diagonals \n%   contains each number once.\n%   \"\"\"\n\n%   Here we solve the problem from the Wikipedia page, also shown here\n%   http://en.wikipedia.org/wiki/File:Killersudoku_color.svg\n\n%   Note, this model is based on the generalized KenKen model: \n%   http://www.hakank.org/comet/kenken2.co\n%   Killer Sudoku is simpler in that the only mathematical operation is \n%   summation.\n\n%   The output is:\n%     2 1 5 6 4 7 3 9 8\n%     3 6 8 9 5 2 1 7 4\n%     7 9 4 3 8 1 6 5 2\n%     5 8 6 2 7 4 9 3 1\n%     1 4 2 5 9 3 8 6 7\n%     9 7 3 8 1 6 4 2 5\n%     8 2 1 7 3 9 5 4 6\n%     6 5 9 4 2 8 7 1 3\n%     4 3 7 1 6 5 2 8 9\n%\n% Also, see the following models:\n%  Comet: http://www.hakank.org/comet/killer_sudoku.co\n%  MiniZinc: http://www.hakank.org/minizinc/kenken2.mzn\n%  MiniZinc: http://www.hakank.org/minizinc/kakuro.mzn\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \nint: n = 9;\narray[1..n, 1..n] of var 1..9: x;\n\n%\n% state the problem\n%\n% For a better view of the problem, see\n%  http://en.wikipedia.org/wiki/File:Killersudoku_color.svg\n%\nint: num_p = 29; % number of segments\nint: num_hints = 4;  % number of hints per segments (that's max number of hints)\nint: max_val = 100;\narray[1..num_p, 1..2*num_hints+1] of 0..max_val: P =\n  array2d(1..num_p, 1..2*num_hints+1, [\n    1,1,  1,2, 0,0, 0,0,   3,\n    1,3,  1,4, 1,5, 0,0,  15,\n    1,6,  2,5, 2,6, 3,5,  22,\n    1,7,  2,7, 0,0, 0,0,   4,\n    1,8,  2,8, 0,0, 0,0,  16,\n    1,9,  2,9, 3,9, 4,9,  15,\n    2,1,  2,2, 3,1, 3,2,  25,\n    2,3,  2,4, 0,0, 0,0,  17,\n    3,3,  3,4, 4,4, 0,0,   9,\n    3,6,  4,6, 5,6, 0,0,   8,\n    3,7,  3,8, 4,7, 0,0,  20,\n    4,1,  5,1, 0,0, 0,0,   6,\n    4,2,  4,3, 0,0, 0,0,  14,\n    4,5,  5,5, 6,5, 0,0,  17,\n    4,8,  5,7, 5,8, 0,0,  17,\n    5,2,  5,3, 6,2, 0,0,  13,\n    5,4,  6,4, 7,4, 0,0,  20,\n    5,9,  6,9, 0,0, 0,0,  12,\n    6,1,  7,1, 8,1, 9,1,  27,\n    6,3,  7,2, 7,3, 0,0,   6,\n    6,6,  7,6, 7,7, 0,0,  20,\n    6,7,  6,8, 0,0, 0,0,   6,\n    7,5,  8,4, 8,5, 9,4,  10,\n    7,8,  7,9, 8,8, 8,9,  14,\n    8,2,  9,2, 0,0, 0,0,   8,\n    8,3,  9,3, 0,0, 0,0,  16,\n    8,6,  8,7, 0,0, 0,0,  15,\n    9,5,  9,6, 9,7, 0,0,  13,\n    9,8,  9,9, 0,0, 0,0,  17\n   ]);\n\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n \n  forall(i in 1..n) (\n        all_different([x[i,j] | j in 1..n]) /\\\n        all_different([x[j,i] | j in 1..n])\n  )\n  /\\\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n  /\\ % calculate the hints\n  forall(p in 1..num_p) (\n     sum(i in 1..num_hints where P[p,2*(i-1)+1] > 0) (x[  P[p, 2*(i-1)+1], P[p,2*(i-1)+2]  ]) = P[p, 2*num_hints+1]\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Killer Sudoku problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to assign 9 different products to 9 different shelves, each with a specific capacity. The products have different weights, and I need to ensure that the total weight on each shelf doesn't exceed its capacity. Additionally, I need to ensure that each product is stored in a way that minimizes the total distance traveled by the forklifts. Can you help me find an optimal assignment of products to shelves that meets these constraints?\",\n  \"question2\": \"I'm planning a party and I need to seat 9 guests at 9 tables. Each guest has a different favorite food, and I want to make sure that each table has a variety of foods. I also want to make sure that each table has a good mix of guests who get along with each other. Can you help me figure out a seating arrangement that makes everyone happy?\",\n  \"question3\": \"I'm a kid, and I love playing with my 9 different toys! I want to put them away in my 9 different toy boxes, but I need to make sure that each box has a different toy in it. I also want to make sure that the toys are put away in a way that makes it easy for me to find them again. Can you help me figure out a way to put away my toys that makes me happy?\",\n  \"question4\": \"I have 9 different tasks to complete, and I need to assign them to 9 different team members. Each task has a different priority, and I need to make sure that each team member has a mix of high and low priority tasks. Can you help me find an assignment that works?\",\n  \"question5\": \"I'm a manager at a call center, and I need to assign 9 different customer service representatives to 9 different shifts. Each representative has a different skill level, and I need to make sure that each shift has a good mix of skills. Additionally, I need to ensure that each representative works a mix of morning and afternoon shifts, and that no representative works more than 2 consecutive shifts. I also need to ensure that the total number of hours worked by each representative is within a certain range. Can you help me find an assignment that meets all these constraints and ensures that our customers receive excellent service?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Killer Sudoku problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Killer Sudoku\",\n  \"description\": \"Killer Sudoku is a puzzle that combines elements of Sudoku and Kakuro. The objective is to fill a 9x9 grid with numbers from 1 to 9 such that each row, column, and nonet contains each number exactly once, and the sum of all numbers in a cage matches the small number printed in its corner.\",\n  \"variables\": \"x[i, j] for i, j in 1..9, where x[i, j] is the value of the cell at row i and column j\",\n  \"constraints\": [\n    \"all_different([x[i, j] | j in 1..9]) for i in 1..9 (each row contains each number exactly once)\",\n    \"all_different([x[j, i] | j in 1..9]) for i in 1..9 (each column contains each number exactly once)\",\n    \"all_different([x[r, c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3]) for i, j in 0..2 (each nonet contains each number exactly once)\",\n    \"sum(i in 1..num_hints where P[p, 2*(i-1)+1] > 0) (x[P[p, 2*(i-1)+1], P[p, 2*(i-1)+2]]) = P[p, 2*num_hints+1] for p in 1..num_p (the sum of all numbers in a cage matches the small number printed in its corner)\"\n  ],\n  \"objective\": \"satisfy (find a feasible solution)\"\n}\n```\n\nNote that the objective of this problem is to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "killer_sudoku2": {"__data__": {"id_": "killer_sudoku2", "embedding": null, "metadata": {"problem_family": "killer_sudoku2", "model_name": "killer_sudoku2", "source_code": "% \n% Killer Sudoku in MiniZinc.\n% \n%   Killer sudoku in Comet.\n\n%   http://en.wikipedia.org/wiki/Killer_Sudoku\n%   \"\"\"\n%   Killer sudoku (also killer su doku, sumdoku, sum doku, addoku, or \n%   samunamupure) is a puzzle that combines elements of sudoku and kakuro. \n%   Despite the name, the simpler killer sudokus can be easier to solve \n%   than regular sudokus, depending on the solver's skill at mental arithmetic; \n%   the hardest ones, however, can take hours to crack.\n\n%   ...\n\n%   The objective is to fill the grid with numbers from 1 to 9 in a way that \n%   the following conditions are met:\n\n%     * Each row, column, and nonet contains each number exactly once.\n%     * The sum of all numbers in a cage must match the small number printed \n%       in its corner.\n%     * No number appears more than once in a cage. (This is the standard rule \n%       for killer sudokus, and implies that no cage can include more \n%       than 9 cells.)\n\n%   In 'Killer X', an additional rule is that each of the long diagonals \n%   contains each number once.\n%   \"\"\"\n\n%   Here we solve the problem from the Wikipedia page, also shown here\n%   http://en.wikipedia.org/wiki/File:Killersudoku_color.svg\n\n%   Note, this model is based on the generalized KenKen model: \n%   http://www.hakank.org/comet/kenken2.co\n%   Killer Sudoku is simpler in that the only mathematical operation is \n%   summation.\n\n%   The output is:\n%     2 1 5 6 4 7 3 9 8\n%     3 6 8 9 5 2 1 7 4\n%     7 9 4 3 8 1 6 5 2\n%     5 8 6 2 7 4 9 3 1\n%     1 4 2 5 9 3 8 6 7\n%     9 7 3 8 1 6 4 2 5\n%     8 2 1 7 3 9 5 4 6\n%     6 5 9 4 2 8 7 1 3\n%     4 3 7 1 6 5 2 8 9\n%\n% Also, see the following model:\n%  MiniZinc: http://www.hakank.org/minizinc/killer_sudoku.mzn\n\n\n% Note: In this current model there is an alternative \n% way of representing the hints, namely as segments in the \n% segment grid.\n\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \nint: n = 9;\narray[1..n, 1..n] of var 1..9: x;\n\n% For a better view of the problem, see\n%  http://en.wikipedia.org/wiki/File:Killersudoku_color.svg\n%\n\n%\n% segments\n%\nint: num_segments = 29; % number of segments\n\narray[1..n, 1..n] of int: segments =\narray2d(1..n, 1..n,\n[\n  1, 1, 2, 2, 2, 3, 4, 5, 6, % 1\n  7, 7, 8, 8, 3, 3, 4, 5, 6, % 2\n  7, 7, 9, 9, 3,10,11,11, 6, % 3\n 13,14,14, 9,15,10,11,12, 6, % 4\n 13,16,16,17,15,10,12,12,18, % 5\n 19,16,20,17,15,21,22,22,18, % 6\n 19,20,20,17,23,21,21,24,24, % 7\n 19,25,26,23,23,27,27,24,24, % 8\n 19,25,26,23,28,28,28,29,29, % 9\n]);\n\narray[1..num_segments] of int: segment_sums =\n[\n   3, % 1\n  15, % 2\n  22, % 3\n   4, % 4\n  16, % 5\n  15, % 6\n  25, % 7\n  17, % 8\n   9, % 9\n   8, % 10\n  20, % 11\n  17, % 12\n   6, % 13\n  14, % 14\n  17, % 15\n  13, % 16\n  20, % 17\n  12, % 18\n  27, % 19\n   6, % 20\n  20, % 21\n   6, % 22\n  10, % 23\n  14, % 24\n   8, % 25\n  16, % 26\n  15, % 27\n  13, % 28\n  17  % 29\n];\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\n% Standard Sudoku constraints\nconstraint\n  % rows and columns\n  forall(i in 1..n) (\n     all_different([x[i,j] | j in 1..n]) /\\\n     all_different([x[j,i] | j in 1..n])\n  )\n  /\\ % blocks\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n;\n\n% Handle the segments\nconstraint\n  forall(p in 1..num_segments) (\n    segment_sums[p] = sum([x[i,j] | i,j in 1..n where segments[i,j] = p])\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 9 loading docks and 9 trucks arriving daily. Each truck has a specific cargo capacity and I need to allocate the trucks to the docks such that each dock is utilized exactly once and the total cargo capacity of the trucks at each dock matches the dock's capacity. How can I optimize the allocation to minimize delays and maximize efficiency?\",\n  \"question2\": \"I'm planning a party for 9 friends and I want to create a seating arrangement that ensures each friend sits next to someone they get along with. I have 9 tables with different capacities and I need to assign each friend to a table such that each table has the right number of people and everyone is comfortable. Can you help me figure out the perfect seating arrangement?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles and I'm trying to create a treasure hunt for my friends. I have 9 clues hidden in a 9x9 grid and each clue has a specific point value. I want to make sure that each row, column, and 3x3 sub-grid has a unique set of clues and the total point value of each row, column, and sub-grid is the same. Can you help me design the perfect treasure hunt?\",\n  \"question4\": \"I need to assign 9 tasks to 9 employees such that each task is done by one employee and each employee does one task. The tasks have different time requirements and I need to ensure that the total time required for each group of 3 tasks is the same. How can I do this?\",\n  \"question5\": \"I'm a manager at a theme park with 9 attractions and 9 teams of employees. Each attraction has a specific capacity and each team has a specific skill set. I need to assign each team to an attraction such that each attraction is staffed by one team and each team is assigned to one attraction. Additionally, I need to ensure that the total capacity of the attractions staffed by each group of 3 teams is the same, and that the teams are distributed evenly across the park. The teams also have different preferences for which attractions they want to work at, and I need to take those into account. Can you help me create a schedule that meets all these constraints and ensures a smooth operation of the park?\"\n}\n```\n\nEach question/scenario incorporates real-life constraints, preferences, and priorities that reflect the problem's structure, and can be naturally answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Killer Sudoku\",\n\"description\": \"Killer Sudoku is a puzzle that combines elements of Sudoku and Kakuro. The objective is to fill a 9x9 grid with numbers from 1 to 9 such that each row, column, and nonet contains each number exactly once, and the sum of all numbers in a cage (a group of cells) matches the small number printed in its corner.\",\n\"variables\": \"x[i, j] for i, j in 1..9, which represents the value of the cell at row i and column j in the grid. These variables are decision variables that need to be assigned a value from 1 to 9.\",\n\"constraints\": \"1) forall(i in 1..9) (all_different([x[i, j] | j in 1..9]) /\\ all_different([x[j, i] | j in 1..9])), which ensures that each row and column contains each number exactly once. 2) forall(i in 0..2, j in 0..2) (all_different([x[r, c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3])), which ensures that each nonet contains each number exactly once. 3) forall(p in 1..29) (segment_sums[p] = sum([x[i, j] | i, j in 1..9 where segments[i, j] = p])), which ensures that the sum of all numbers in a cage matches the small number printed in its corner.\",\n\"objective\": \"Satisfy all the constraints, i.e., find a feasible solution that satisfies all the constraints.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "langford2": {"__data__": {"id_": "langford2", "embedding": null, "metadata": {"problem_family": "langford2", "model_name": "langford2", "source_code": "% Langford's number problem in MiniZinc.\n%\n% This model is based on the EssencePrime model in the Minion Translator examples:\n%\n% http://www.cs.st-andrews.ac.uk/~andrea/examples/langford/langford.eprime\n% \"\"\"\n% Langford's number problem (CSP lib problem 24)\n%\n% Arrange 2 sets of positive integers 1..k to a sequence,\n% such that, following the first occurence of an integer i, \n% each subsequent occurrence of i, appears i+1 indices later\n% than the last. \n% For example, for k=4, a solution would be 41312432\n% \"\"\"\n% \n% Also see: http://www.csplib.org/Problems/prob024/\n%\n% However, I added a better representation were we see the numbers in their\n% proper positions: the solution array.\n%  \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n%\n% Solution for k = 4:\n% [4, 1, 3, 1, 2, 4, 3, 2]\n%\n\ninclude \"globals.mzn\";\n\nint: k;\nset of int: positionDomain = 1..2*k;\n\narray[positionDomain] of var positionDomain: position;\n% better presentation:\narray[positionDomain] of var 1..k: solution;\n\nsolve :: int_search(position, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..k) (\n     position[i+k] = position[i] + i+1 /\\\n     % hakank: added this\n     solution[position[i]] = i /\\ \n     solution[position[k+i]] = i\n  )\n  /\\   \n  all_different(position)\n  /\\ % symmetry breaking\n  solution[1] < solution[2*k]\n;\n\n\noutput [\n  show(solution), \"\\n\"\n\n];\n\n%\n% data\n%\nk = 4;\n% k = 7;\n% k = 8;\n% k = 10;\n% k = 20;\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Langford's Number Problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to schedule 10 identical trucks to transport goods from a warehouse to 10 different locations. Each truck must visit each location exactly twice, and the second visit must occur exactly 'x' days after the first visit, where 'x' is the location number. How can the company schedule the trucks to minimize delays and ensure that all locations are visited according to the rules?\",\n  \"question2\": \"I'm planning a music festival with 8 stages, and each stage will feature 2 performances by each of 8 different bands. I want to create a schedule where each band plays on a stage, takes a break, and then plays on another stage, but not on the same stage again until 'x' performances later, where 'x' is the number of performances by that band so far. How can I create a schedule that meets these rules and ensures a smooth festival experience?\",\n  \"question3\": \"I have 6 friends coming over for a birthday party, and I want to create a fun scavenger hunt with 2 clues for each friend. Each clue should lead to a new location, and the second clue for each friend should be 'x' locations away from the first clue, where 'x' is the friend's favorite number. How can I create a scavenger hunt that meets these rules and is fun for all my friends?\",\n  \"question4\": \"I need to schedule 4 meetings with 2 attendees each, where each attendee must attend 2 meetings, and the second meeting must be 'x' meetings later, where 'x' is the attendee's ID number. How can I schedule these meetings?\",\n  \"question5\": \"A large hospital has 12 operating rooms, and each room must be used for 2 surgeries by each of 12 different surgeons. Due to sterilization and preparation requirements, each surgeon must perform their second surgery in a room that is 'x' rooms away from the first room, where 'x' is the surgeon's ID number. Additionally, the hospital has a limited number of anesthesiologists, and each anesthesiologist can only work in 2 rooms at a time. How can the hospital schedule the surgeries to minimize delays and ensure that all surgeons can perform their operations according to the rules?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Langford's Number Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Langford's Number Problem\",\n\"description\": \"Arrange two sets of positive integers 1..k to a sequence, such that, following the first occurrence of an integer i, each subsequent occurrence of i appears i+1 indices later than the last.\",\n\"variables\": \"position[1..2k], solution[1..2k]; position[i] and solution[i] represent the position and value of the i-th element in the sequence, respectively.\",\n\"variables_explanation\": \"The decision variables are two arrays, position and solution, each of size 2k. The position array represents the positions of the elements in the sequence, and the solution array represents the values of the elements in the sequence.\",\n\"constraints\": \"forall(i in 1..k) (position[i+k] = position[i] + i+1), solution[position[i]] = i, solution[position[k+i]] = i, all_different(position), solution[1] < solution[2k];\",\n\"constraints_explanation\": \"The constraints ensure that the sequence satisfies the Langford's number problem condition, i.e., each subsequent occurrence of an integer i appears i+1 indices later than the last. The all_different constraint ensures that all positions are distinct, and the symmetry breaking constraint ensures that the solution is lexicographically minimal.\",\n\"objective\": \"satisfy\"\n}\n\nNote that this problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic": {"__data__": {"id_": "magic", "embedding": null, "metadata": {"problem_family": "magic", "model_name": "magic", "source_code": "% \n% Magic square integer programming version in MiniZinc.\n% \n% From GLPK:s example magic.mod\n% \"\"\"\n% MAGIC, Magic Square\n%\n% Written in GNU MathProg by Andrew Makhorin <mao@mai2.rcnet.ru>\n%\n% In recreational mathematics, a magic square of order n is an\n% arrangement of n^2 numbers, usually distinct integers, in a square,\n% such that n numbers in all rows, all columns, and both diagonals sum\n% to the same constant. A normal magic square contains the integers\n% from 1 to n^2.\n%\n% (From Wikipedia, the free encyclopedia.)\n% \"\"\"\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% square order\nint: n = 3; \n\n% integers to be placed\nset of 1..n*n: N = 1..n*n;\n\n% x[i,j,k] = 1 means that cell (i,j) contains integer k\narray[1..n, 1..n, N] of var 0..1: x;\n\narray[1..n, 1..n] of var 1..n*n: square;\n\nvar int: s; % the magic sum\n\nsolve :: int_search(\n        [x[i,j,k] | i,j in 1..n, k in N] ++ \n        [square[i,j] | i,j in 1..n] ++\n        [s],\n        first_fail,\n        indomain_min, \n        complete % \"credit(640, bbs(5))\" % \"complete\"\n      ) \n    satisfy;\n\nconstraint \n  s >= 0 \n  /\\\n  s <= n*n*n\n  /\\\n  % each cell must be assigned exactly one integer\n  forall(i in 1..n, j in 1..n) (\n     sum(k in N) (x[i,j,k]) = 1\n  )\n  /\\\n  % each integer must be assigned exactly to one cell\n  forall(k in N) (\n     sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1\n  )\n\n  /\\\n  % the sum in each row must be the magic sum \n  forall(i in 1..n) (\n     sum(j in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in each column must be the magic sum\n  forall(j in 1..n) (\n     sum(i in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in the diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,i,k]) = s\n\n  /\\\n  % the sum in the co-diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s\n\n  /\\\n  % for output\n  forall(i,j in 1..n) ( square[i,j] = sum(k in N) (k * x[i,j,k]))\n;\n\n\noutput [ \n   \"\\ns: \", show(s)\n] ++\n[\n  if  j = 1 then \"\\n\" else \" \" endif ++\n    show(square[i,j]) \n  | i,j in 1..n\n\n] ++ [\"\\n\"];\n\n% printf \"\\n\";\n% printf \"Magic sum is %d\\n\", s;\n% printf \"\\n\";\n% for{i in 1..n}\n% {  printf{j in 1..n} \"%3d\", sum{k in N} k * x[i,j,k];\n%    printf \"\\n\";\n% }\n% printf \"\\n\";\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Square problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a logistics manager at a warehouse with 3 loading docks, 3 trucks, and 9 packages to be loaded. Each package has a specific weight and each truck has a limited capacity. How can I assign the packages to the trucks and docks to maximize efficiency and minimize delays?\",\n    \"context\": \"Warehouse logistics\"\n  },\n  \"question2\": {\n    \"question\": \"I'm planning a party for my friends and I want to create a seating arrangement that makes everyone happy. I have 9 friends, 3 tables, and each table can fit 3 people. Some friends don't get along, and some have specific seat preferences. Can you help me figure out a seating arrangement that works for everyone?\",\n    \"context\": \"Party planning\"\n  },\n  \"question3\": {\n    \"question\": \"I'm a teacher and I need to create a schedule for my 9 students to work on 3 projects in 3 different rooms. Each student has a specific skill set and each project requires a specific combination of skills. How can I assign the students to the projects and rooms to ensure everyone is working on something they're good at?\",\n    \"context\": \"Classroom management\"\n  },\n  \"question4\": {\n    \"question\": \"I have 9 books, 3 shelves, and each shelf can hold 3 books. Some books are too heavy to be on the top shelf, and some are too big to be on the bottom shelf. How can I arrange the books on the shelves?\",\n    \"context\": \"Home organization\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a manager at a hospital and I need to assign 9 nurses to 3 wards, each with 3 beds. Each nurse has a specific set of skills and each ward has specific patient needs. Additionally, some nurses have scheduling conflicts and some wards have equipment limitations. Can you help me create a schedule that ensures each ward has the right nurses and each nurse is working within their skill set and availability?\",\n    \"context\": \"Hospital management\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Magic Square problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Square\",\n\"description\": \"A magic square of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that n numbers in all rows, all columns, and both diagonals sum to the same constant.\",\n\"variables\": \"x[i,j,k], square[i,j], s; x[i,j,k] is a binary variable indicating whether cell (i,j) contains integer k, square[i,j] is an integer variable representing the value in cell (i,j), and s is an integer variable representing the magic sum.\",\n\"variables_explanation\": \"The variables x[i,j,k] determine the assignment of integers to cells, square[i,j] represents the actual values in the square, and s is the magic sum that all rows, columns, and diagonals should sum up to.\",\n\"constraints\": \"s >= 0, s <= n*n*n, sum(k in N) (x[i,j,k]) = 1, sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1, sum(j in 1..n, k in N) (k * x[i,j,k]) = s, sum(i in 1..n, k in N) (k * x[i,i,k]) = s, sum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s, square[i,j] = sum(k in N) (k * x[i,j,k])\",\n\"constraints_explanation\": \"The constraints ensure that each cell is assigned exactly one integer, each integer is assigned to exactly one cell, the sum of each row, column, and diagonal is equal to the magic sum, and the square matrix is correctly constructed.\",\n\"objective\": \"No objective (satisfaction problem)\"\n}\n\nNote that this problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_hexagon": {"__data__": {"id_": "magic_hexagon", "embedding": null, "metadata": {"problem_family": "magic_hexagon", "model_name": "magic_hexagon", "source_code": "% \n% Magic Hexagon in MiniZinc.\n%\n% Prob023: Magic Hexagon\n% http://www.comp.rgu.ac.uk/staff/ha/ZCSP/prob023/prob023.pdf\n% http://www.cse.unsw.edu.au/~tw/csplib/prob/prob023/\n% \n\n% \n% Model created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\ninclude \"globals.mzn\"; \n\nset of int: N = 1..19;\nvar N: a;\nvar N: b;\nvar N: c;\nvar N: d;\nvar N: e;\nvar N: f;\nvar N: g;\nvar N: h;\nvar N: i;\nvar N: j;\nvar N: k;\nvar N: l;\nvar N: m;\nvar N: n;\nvar N: o;\nvar N: p;\nvar N: q;\nvar N: r;\nvar N: s;\n\narray[N] of var N: LD = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s];\n\nsolve satisfy;\n\nconstraint\n  all_different(LD) /\\\n\n  a + b + c =  38 /\\\n  d + e + f + g =  38 /\\\n  h + i + j + k + l =  38 /\\ \n  m + n + o + p =  38 /\\ \n  q + r + s =  38 /\\ \n  a + d + h =  38 /\\ \n  b + e + i + m =  38 /\\ \n  c + f + j + n + q =  38 /\\ \n  g + k + o + r =  38 /\\ \n  l + p + s =  38 /\\ \n  c + g + l =  38 /\\ \n  b + f + k + p =  38 /\\ \n  a + e + j + o + s =  38 /\\ \n  d + i + n + r =  38 /\\ \n  h + m + q =  38 /\\ \n\n  a < c /\\\n  a < h /\\\n  a < l /\\\n  a < q /\\\n  a < s /\\\n  c < h\n;\n\noutput\n[\n  show(LD)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Hexagon problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to allocate 19 different types of packages to 19 different shelves in a hexagonal storage area. Each shelf has a limited capacity, and I want to ensure that the total weight of packages on each row, column, and diagonal is balanced to prevent structural damage. How can I assign the packages to shelves to meet these constraints?\",\n  \"question2\": \"I'm planning a music festival with 19 different bands, and I want to create a schedule that ensures each stage has a balanced lineup throughout the day. I have some restrictions on which bands can play together, and I want to make sure that each stage has a good mix of genres and energy levels. Can you help me figure out a schedule that works?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles, and I'm trying to create a special birthday party for my friend. I have 19 different games and activities that I want to set up in a hexagonal pattern, and I want to make sure that each station has a good mix of fun and challenging activities. How can I arrange the games to make sure everyone has a blast?\",\n  \"question4\": \"I have 19 different ingredients for a recipe, and I need to portion them out into 19 identical hexagonal containers. How can I divide the ingredients to make sure each container has the same total amount?\",\n  \"question5\": \"I'm a urban planner designing a new public park with 19 different amenities, such as playgrounds, benches, and food vendors. The park will be built in a hexagonal shape, and I want to ensure that each section of the park has a balanced mix of amenities to appeal to different age groups and interests. Additionally, I need to consider accessibility and safety constraints, such as ensuring that playgrounds are not too close to food vendors. Can you help me come up with a layout that meets these requirements and provides a enjoyable experience for park visitors?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Magic Hexagon problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Hexagon\",\n\"description\": \"The Magic Hexagon problem is a classic constraint satisfaction problem where the goal is to find an arrangement of numbers from 1 to 19 in a hexagonal shape such that the sums of the numbers in each row, column, and diagonal are equal to 38.\",\n\"variables\": \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s \u2208 {1, ..., 19}. These variables represent the numbers to be placed in the hexagonal shape.\",\n\"constraints\": \"all_different(LD), a + b + c = 38, d + e + f + g = 38, ..., l + p + s = 38, a < c, a < h, a < l, a < q, a < s, c < h. These constraints ensure that all numbers are distinct, the sums of the numbers in each row, column, and diagonal are equal to 38, and some additional ordering constraints.\",\n\"objective\": \"satisfy (i.e., find a feasible solution)\"\n}\n\nNote that the objective of this problem is to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_sequence": {"__data__": {"id_": "magic_sequence", "embedding": null, "metadata": {"problem_family": "magic_sequence", "model_name": "magic_sequence", "source_code": "% \n% Magic sequence in MiniZinc.\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob019/spec.html\n% \"\"\"\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n% \"\"\"\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n  forall(i in 0..n-1) (\n    s[i] = sum(j in 0..n-1) (bool2int(s[j] = i))\n  )\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Sequence problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a data analyst tasked with creating a survey with 15 questions, where each question has a specific frequency of appearance. For instance, question 1 should appear 5 times, question 2 should appear 3 times, and so on. How can I design the survey to meet these frequency requirements?\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 10 stages, and I want to create a schedule where each stage has a specific number of performances. For example, stage 1 should have 4 performances, stage 2 should have 2 performances, and so on. How can I create a schedule that meets these requirements?\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a kid who loves playing with my 12 favorite toys, and I want to create a toy rotation schedule where each toy is played with a specific number of times. For instance, toy 1 should be played with 5 times, toy 2 should be played with 3 times, and so on. How can I create a schedule that makes sure each toy gets the right amount of playtime?\"\n  },\n  \"question4\": {\n    \"description\": \"I need to create a 10-item to-do list where each item has a specific frequency of occurrence. How can I design the list to meet these frequency requirements?\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a marketing manager responsible for creating a social media campaign with 25 posts, where each post has a specific number of appearances on different platforms. For example, post 1 should appear 7 times on Facebook, 3 times on Twitter, and 2 times on Instagram, while post 2 should appear 5 times on Facebook, 2 times on Twitter, and 1 time on Instagram, and so on. How can I design the campaign to meet these frequency requirements while ensuring that each platform has a balanced number of posts?\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Magic Sequence problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Sequence\",\n\"description\": \"A magic sequence of length n is a sequence of integers between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\",\n\"variables\": \"s = [s0, s1, ..., sn-1], where si is an integer between 0 and n-1, representing the i-th element of the magic sequence.\",\n\"constraints\": \"\u2200i in 0..n-1, s[i] = \u2211(j in 0..n-1) (bool2int(s[j] = i)), which ensures that for each i, the number i occurs exactly si times in the sequence.\",\n\"objective\": \"satisfy, meaning the goal is to find a feasible solution that satisfies all the constraints, without any optimization objective.\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_sequence2": {"__data__": {"id_": "magic_sequence2", "embedding": null, "metadata": {"problem_family": "magic_sequence2", "model_name": "magic_sequence2", "source_code": "% \n% Magic sequence in MiniZinc.\n% Alternative version, see magic_sequence.mzn.\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob019/spec.html\n% \"\"\"\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n% \"\"\"\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n        forall(i in 0..n-1) (\n                s[i] = sum(j in 0..n-1) (bool2int(s[j]=i))\n        )\n        /\\ \n        sum(i in 0..n-1) (s[i])=n \n        /\\\n        sum(i in 0..n-1) (s[i]*i) =n\n;\n\n\noutput [\n       show(s), \"\\n\",\n];\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Sequence Problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to allocate 20 trucks to transport goods from 20 different warehouses to 20 different destinations. Each truck can carry goods from multiple warehouses, but each warehouse can only be served by a specific number of trucks. How can we allocate the trucks to ensure that each warehouse is served by the exact number of trucks it requires, and the total number of trucks used is 20, while also minimizing the total distance traveled by the trucks?\",\n  \n  \"question2\": \"I'm planning a birthday party for my friend and I want to make sure each of the 20 guests gets the right number of party favors. Some guests want 0 favors, some want 1, and others want 2 or more. How can I make sure each guest gets the right number of favors, and I don't run out of favors or have too many left over?\",\n  \n  \"question3\": \"I'm creating a new game where players collect 20 different types of stickers. Each sticker has a point value, and players need to collect a specific number of each sticker to win. How can I design the sticker collection so that each player gets the right number of each sticker, and the total number of stickers is 20, while also making sure the point values add up to a certain total?\",\n  \n  \"question4\": \"I need to distribute 20 tasks among 20 team members, ensuring each task is done by the right number of people. How can I do this?\",\n  \n  \"question5\": \"A large hospital has 20 different medical specialties, and each specialty requires a specific number of doctors to be on call at any given time. The hospital has a total of 20 doctors, and each doctor can be on call for multiple specialties. However, each doctor has a limited number of hours they can work, and some specialties require more hours than others. How can the hospital schedule the doctors to ensure that each specialty has the right number of doctors on call, while also respecting the doctors' work hour limits and minimizing the total number of hours worked by all doctors?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Magic Sequence Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n{\n\"name\": \"Magic Sequence Problem\",\n\"description\": \"The Magic Sequence Problem is a classic problem in constraint programming. It involves finding a sequence of integers between 0 and n-1, such that each integer i occurs exactly xi times in the sequence.\",\n\"variables\": \"s = [s0, s1, ..., sn-1], where si \u2208 {0, 1, ..., n-1}. These variables represent the magic sequence, where si is the number of times the integer i appears in the sequence.\",\n\"constraints\": \"\u2200i \u2208 {0, 1, ..., n-1}, s[i] = \u2211(j \u2208 {0, 1, ..., n-1}) (bool2int(s[j]=i)), \u2211(i \u2208 {0, 1, ..., n-1}) s[i] = n, \u2211(i \u2208 {0, 1, ..., n-1}) s[i]*i = n. The first constraint ensures that each integer i occurs exactly xi times in the sequence. The second constraint ensures that the total number of elements in the sequence is n. The third constraint ensures that the sum of the products of each element and its frequency is equal to n.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The objective is to find a feasible solution that satisfies all the constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_sequence3": {"__data__": {"id_": "magic_sequence3", "embedding": null, "metadata": {"problem_family": "magic_sequence3", "model_name": "magic_sequence3", "source_code": "% \n% Magic sequence in MiniZinc.\n% Alternative version which use the global constraint distribute.\n% See magic_sequence.mzn, magic_sequence2.mzn.\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob019/spec.html\n% \"\"\"\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n% \"\"\"\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n =  10;\narray[0..n-1] of var 0..n-1: s;\narray[0..n-1] of int: value = array1d(0..n-1, [i | i in 0..n-1]); % helper for distribute\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   distribute(s, value, s)         /\\ \n   sum(i in 0..n-1) (s[i])   = n   /\\\n   sum(i in 0..n-1) (s[i]*i) = n\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Sequence problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a data analyst tasked with creating a survey with 10 questions, each with a specific frequency of appearance. I want to ensure that each question appears exactly as many times as its corresponding frequency. How can I design the survey to meet this requirement?\",\n    \"goal\": \"Design a survey with 10 questions, each with a specific frequency of appearance\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a birthday party for my 10-year-old friend. I want to create a scavenger hunt with clues that lead to different prizes. Each prize should be found exactly as many times as its corresponding clue. How can I make sure the clues and prizes match up correctly?\",\n    \"goal\": \"Create a scavenger hunt with clues and prizes that match up correctly\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a kid who loves playing with my toy blocks! I have 10 different blocks, and I want to build a tower with each block appearing exactly as many times as I want. How can I build the tower so that each block is used the right number of times?\",\n    \"goal\": \"Build a tower with toy blocks, each used the right number of times\"\n  },\n  \"question4\": {\n    \"description\": \"I need to create a playlist with 10 songs, each played exactly as many times as its popularity rating. How can I create the playlist?\",\n    \"goal\": \"Create a playlist with 10 songs, each played the right number of times\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a marketing manager for a new product launch. We have 10 different product features, each with a specific importance rating. I want to create a series of 10 advertisements, each highlighting exactly as many features as its corresponding importance rating. The total number of features highlighted across all ads should be 10, and the total importance rating of all features should add up to 10. How can I design the advertisements to meet these requirements?\",\n    \"goal\": \"Design a series of advertisements highlighting product features with specific importance ratings\"\n  }\n}\n```\n\nEach question/scenario incorporates real-life constraints, preferences, and priorities that reflect the structure of the Magic Sequence problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Sequence\",\n\"description\": \"A magic sequence of length n is a sequence of integers x0, ..., xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\",\n\"variables\": \"s = [s0, s1, ..., sn-1], where si is an integer between 0 and n-1, representing the number of times the number i appears in the sequence.\",\n\"constraints\": [\n  \"distribute(s, value, s): ensures that the number of occurrences of each number i in the sequence is equal to the value of si.\",\n  \"sum(i in 0..n-1) (s[i]) = n: ensures that the total number of elements in the sequence is equal to n.\",\n  \"sum(i in 0..n-1) (s[i]*i) = n: ensures that the sum of the products of each number i and its frequency si is equal to n.\"\n],\n\"objective\": \"satisfy: the objective is to find a feasible solution that satisfies all the constraints, without any optimization criterion.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_sequence4": {"__data__": {"id_": "magic_sequence4", "embedding": null, "metadata": {"problem_family": "magic_sequence4", "model_name": "magic_sequence4", "source_code": "% \n% Magic sequence in MiniZinc.\n%\n% Alternative version which use the global constraint global_cardinality.\n% See magic_sequence.mzn, magic_sequence2.mzn, magic_sequence3.mzn.\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob019/spec.html\n% \"\"\"\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n% \"\"\"\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n =  100;\narray[0..n-1] of var 0..n-1: s;\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   global_cardinality(s,array1d(0..n-1, set2array(index_set(s))), s) :: domain\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Sequence problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a data analyst working on a project to allocate tasks to team members. I have 100 tasks to assign, and each task has a specific frequency of occurrence (e.g., task 1 occurs 5 times, task 2 occurs 3 times, etc.). I want to create a schedule where each team member is assigned a task that matches their frequency of occurrence. How can I create a schedule that satisfies this constraint?\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 100 performances. Each performance has a specific number of repeats (e.g., band 1 plays 5 times, band 2 plays 3 times, etc.). I want to create a schedule where each performance is repeated the correct number of times. Can you help me figure out a schedule that works?\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a kid who loves collecting stickers! I have 100 stickers, and each sticker has a specific number of duplicates (e.g., sticker 1 has 5 duplicates, sticker 2 has 3 duplicates, etc.). I want to create a sticker book where each sticker appears the correct number of times. Can you help me create a sticker book that's perfect?\"\n  },\n  \"question4\": {\n    \"description\": \"I need to create a 100-item list where each item appears a specific number of times. How can I do this?\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a logistics manager responsible for shipping 100 different products to customers. Each product has a specific demand frequency (e.g., product 1 is ordered 5 times, product 2 is ordered 3 times, etc.). I want to create a shipping schedule that ensures each product is shipped the correct number of times to meet customer demand. However, I also need to consider the limited storage capacity of our warehouse, which can only hold a maximum of 50 products at a time. Additionally, I need to prioritize shipping products with higher demand frequencies first. Can you help me create a shipping schedule that meets these constraints and priorities?\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Magic Sequence problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Sequence\",\n\"description\": \"A magic sequence of length n is a sequence of integers x0 to xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\",\n\"variables\": \"s = [s0, s1, ..., sn-1], where si is an integer between 0 and n-1. These variables represent the magic sequence, where each element si is the number of times the number i appears in the sequence.\",\n\"constraints\": \"global_cardinality(s, array1d(0..n-1, set2array(index_set(s))), s), which ensures that for each number i in the sequence, it appears exactly si times. In other words, the constraint enforces that the frequency of each number in the sequence matches the value of the corresponding element in the sequence.\",\n\"objective\": \"satisfy, which means the goal is to find a feasible solution that satisfies all the constraints, without any optimization objective.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_square": {"__data__": {"id_": "magic_square", "embedding": null, "metadata": {"problem_family": "magic_square", "model_name": "magic_square", "source_code": "%\n% Magic squares in MiniZinc\n%\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n = 3;\n\nint: total = ( n * (n*n + 1)) div 2;\narray[1..n,1..n] of var 1..n*n: magic;\n\n\n% solve satisfy;\nsolve :: int_search(\n        [magic[i,j] | i in 1..n, j in 1..n], \n        first_fail,\n        indomain_min,\n        complete) \n    satisfy;\n\n\nconstraint\n\n        all_different([magic[i,j] | i in 1..n, j in 1..n]) :: domain\n        /\\\n        forall(k in 1..n) (\n           sum(i in 1..n) (magic[k,i]) = total % :: domain\n           /\\\n           sum(i in 1..n) (magic[i,k]) = total %:: domain\n        )\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,i]) = total  %:: domain\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,n-i+1]) = total %:: domain\n;\n\n% symmetry breaking\n% Activating all these constraints we get the\n% \"standard\" way of counting the number of solutions:\n%    1, 0, 1, 880, 275305224\n% i.e. this sequence: http://oeis.org/A006052\n%\n% Without the constraints the number of solutions are:\n%  N  #solutions\n%  -------------\n%  1     1\n%  2     0\n%  3     8\n%  4  7040\n%  5  many... \n%\n% constraint\n%    magic[1,1] < magic[1,n]\n%    /\\ magic[1,n] < magic[n,1]\n%    /\\ magic[1,1] < magic[n,n]\n% ;\n\n\noutput [\n  \"Total: \" ++ show(total) ++ \"\\n\"\n] ++\n[\n    %   show(magic)\n  if j = 1 then \"\\n\" else \"\" endif ++\n    if fix(magic[i,j]) < 10 then \" \" else \"\" endif ++\n    show(magic[i,j]) ++ \" \"\n  | i,j in 1..n\n] \n++ \n[\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Square problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to assign 9 different trucks to 9 different routes, each with a specific capacity. The company wants to ensure that each route has a total capacity of 15 units, and no two routes have the same set of trucks. Additionally, the company wants to balance the workload of each truck, so that each truck is assigned to a route with a total capacity of 15 units. How can the company assign the trucks to the routes to meet these requirements?\",\n  \"question2\": \"I'm planning a party and I want to seat 9 guests at 3 tables with 3 chairs each. I want each table to have a mix of guests with different personalities, and I want to make sure that each guest is seated with people they get along with. How can I arrange the seating so that everyone has a good time?\",\n  \"question3\": \"I'm creating a new game where players have to collect 9 different items, each with a point value from 1 to 9. I want to create a 3x3 grid where each row, column, and diagonal adds up to the same total points. How can I arrange the items in the grid to make the game more exciting?\",\n  \"question4\": \"I need to schedule 9 meetings with 9 different teams, each with a specific duration. I want to ensure that each team has a meeting with a total duration of 15 minutes, and no two teams have the same set of meetings. How can I schedule the meetings?\",\n  \"question5\": \"A hospital is planning to allocate 9 different medical devices to 9 different wards, each with a specific capacity. The hospital wants to ensure that each ward has a total capacity of 15 units, and no two wards have the same set of devices. Additionally, the hospital wants to balance the workload of each device, so that each device is allocated to a ward with a total capacity of 15 units. The hospital also has specific requirements for the allocation of devices, such as device A cannot be allocated to ward 1, and device B must be allocated to ward 3. How can the hospital allocate the devices to the wards to meet these requirements and ensure efficient use of resources?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Magic Square problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Magic Square\",\n\"description\": \"A magic square is a square grid filled with distinct positive integers in the range 1 to n^2 such that each cell contains a different integer and the sum of the integers in each row, column, and diagonal is equal to the same value, called the magic constant.\",\n\"variables\": \"magic[i, j] (i, j = 1, ..., n), where magic[i, j] is the value of the cell at row i and column j of the magic square. It is an integer between 1 and n^2.\",\n\"constraints\": \"1. all_different(magic[i, j] for i, j = 1, ..., n): all values in the magic square are distinct. \\n\n2. sum(magic[k, i] for i = 1, ..., n) = total for k = 1, ..., n: the sum of the values in each row is equal to the magic constant. \\n\n3. sum(magic[i, k] for i = 1, ..., n) = total for k = 1, ..., n: the sum of the values in each column is equal to the magic constant. \\n\n4. sum(magic[i, i] for i = 1, ..., n) = total: the sum of the values in the main diagonal is equal to the magic constant. \\n\n5. sum(magic[i, n-i+1] for i = 1, ..., n) = total: the sum of the values in the secondary diagonal is equal to the magic constant.\",\n\"objective\": \"satisfy: the objective is to find a feasible solution that satisfies all the constraints, i.e., to find a magic square.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "maximum_density_still_life": {"__data__": {"id_": "maximum_density_still_life", "embedding": null, "metadata": {"problem_family": "maximum_density_still_life", "model_name": "maximum_density_still_life", "source_code": "% \n% Maximum density still life in MiniZinc.\n% \n% \n% CSPLib 032: http://www.csplib.org/Problems/prob032\n%\n%\n% This model was inspired by the OPL model from\n% Toni Mancini, Davide Micaletto, Fabio Patrizi, Marco Cadoli: \n% \"Evaluating ASP and commercial solvers on the CSPLib\"\n% http://www.dis.uniroma1.it/~tmancini/index.php?problemid=032&solver=OPL&spec=BASE&currItem=research.publications.webappendices.csplib2x.problemDetails#listing\n%\n%\n% Compare with the Comet model:\n% http://www.hakank.org/comet/maximum_density_still_life_cp.co\n%\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% include \"globals.mzn\"; \nint: size = 7; % to change\n\nset of int: objFunctionBoardCoord      = 2..size+1;\nset of int: checkConstraintsBoardCoord = 1..size+2;\nset of int: augmentedBoardCoord        = 0..size+3;\n\n% Search space: The set of all possible assignments of 0s (dead) and 1s (live) \n% to the cells of the board section. However, to be able to easily express \n% constraints on \"boundary\" cells, we take as search space the set of 0/1 \n% boards of size n+4 by n+4: the actual stable pattern appears in the sub-board \n% defined by ignoring the first/last two rows/columns.\narray[augmentedBoardCoord,augmentedBoardCoord] of var 0..1: grid;\n\nvar int: z = sum(r in objFunctionBoardCoord, c in objFunctionBoardCoord) (grid[r,c]);\n\n% Objective function: Maximize the number of live cells in the sub-board defined \n% by ignoring the first/last two/ rows/columns.\n\n\n% solve maximize z;\nsolve :: int_search(\n        [grid[i,j] | i,j in augmentedBoardCoord], \n        smallest, \n        indomain_max, \n        complete) \n    maximize z;\n\nconstraint\n\n  % C1: Cells in the first/last two rows/columns are all 0 (dead)\n  forall(x in augmentedBoardCoord) (\n    grid[0,x] = 0 /\\\n    grid[1,x] = 0 /\\\n    grid[size+2,x] = 0 /\\  \n    grid[size+3,x] = 0 /\\\n    grid[x,0] == 0 /\\       \n    grid[x,1] == 0 /\\\n    grid[x,size+2] = 0 /\\  \n    grid[x,size+3] = 0 \n  )\n  /\\\n  forall(r in checkConstraintsBoardCoord,c in checkConstraintsBoardCoord) (\n    % C2: Each cell of the board (except those of the first/last row/column) \n    %     that has exactly three live neighbors is alive. \n    %     Together with constraint C1, this implies that cells in the\n    %     second/last-but-one row/column cannot have three live neighbors.\n    (\n      ( ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + \n          grid[r,c-1] + grid[r,c+1] + \n          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1]\n          ) = 3 \n       ) -> (grid[r,c] = 1)\n    )\n    /\\    \n\n    % C3: Each live cell must have 2 or 3 live neighbors (cells of the first/last \n    % row/column may be ignored by this constraint)\n    (\n       (grid[r,c] = 1) -> \n                      (\n                        2 <= \n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          )\n                        /\\\n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          ) <= 3\n                      )\n    )\n  )\n  \n  /\\\n  % SBSO: Symmetry-breaking by selective ordering\n  % The assignment is forced to respect an ordering on the values that occur in corner entries\n  % of the board. In particular:  \n  % - if the NW-corner cell is dead, the SE-corner cell\n  % must be dead too \n  % - if the NE-corner cell is dead, the SW-corner cell must be dead too\n  % \n  grid[2,2] >= grid[size+1,size+1] /\\\n  grid[2,size+1] >= grid[size+1,2]\n;\n\n\noutput [\n  if j = 0 then \"\\n\" else \" \" endif ++\n    show(grid[i,j])\n  | i,j in augmentedBoardCoord\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Maximum Density Still Life problem:\n\n```\n{\n  \"question1\": \"As a urban planner, I need to design a high-density residential area with a maximum of 1000 residents. The area is divided into 7x7 blocks, and each block can accommodate either a residential unit or a green space. To ensure a healthy living environment, each residential unit should have at least 2 and at most 3 adjacent green spaces. Additionally, the blocks on the perimeter of the area should be reserved for green spaces. How can I allocate the blocks to maximize the number of residential units while meeting these constraints?\",\n  \"question2\": \"I'm planning a garden party and I want to set up a seating area with a mix of chairs and tables. The area is 7x7 meters, and I want to fit as many chairs as possible while leaving some space for tables. Each chair needs to be surrounded by at least 2 and at most 3 other chairs or tables. How can I arrange the chairs and tables to fit the most guests?\",\n  \"question3\": \"I'm designing a new level for a popular puzzle game where players need to rotate a grid to create a stable pattern of blocks. The grid is 7x7, and each block can be either active or inactive. To make the level challenging, I want to create a pattern that has the maximum number of active blocks while ensuring that each active block has either 2 or 3 adjacent active blocks. How can I create such a pattern?\",\n  \"question4\": \"I need to pack a 7x7 grid with as many 'active' cells as possible while ensuring each active cell has 2-3 active neighbors. How can I do this?\",\n  \"question5\": \"As a materials scientist, I'm working on designing a new type of nanomaterial with a 7x7 lattice structure. The material's properties depend on the arrangement of atoms in the lattice, and I want to maximize the number of atoms in the lattice while ensuring that each atom has either 2 or 3 adjacent atoms. The lattice has a boundary condition where the atoms on the perimeter are fixed in place. How can I optimize the arrangement of atoms in the lattice to achieve this goal?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Maximum Density Still Life problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Maximum Density Still Life\",\n\"description\": \"The Maximum Density Still Life problem is a classic problem in constraint programming. It involves finding a pattern of live and dead cells in a grid such that the density of live cells is maximized, while ensuring that the pattern is stable according to the rules of Conway's Game of Life.\",\n\"variables\": \"grid[r,c] for r in augmentedBoardCoord, c in augmentedBoardCoord, where grid[r,c] is a binary variable indicating whether the cell at position (r,c) is live (1) or dead (0). These variables represent the possible assignments of live and dead cells in the grid.\",\n\"constraints\": \"C1: grid[0,x] = 0, grid[1,x] = 0, grid[size+2,x] = 0, grid[size+3,x] = 0, grid[x,0] = 0, grid[x,1] = 0, grid[x,size+2] = 0, grid[x,size+3] = 0 for all x in augmentedBoardCoord (cells in the first/last two rows/columns are dead), C2: (grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + grid[r,c-1] + grid[r,c+1] + grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] = 3) -> grid[r,c] = 1 for all r,c in checkConstraintsBoardCoord (each cell with exactly three live neighbors is alive), C3: (grid[r,c] = 1) -> (2 <= grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + grid[r,c-1] + grid[r,c+1] + grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] <= 3) for all r,c in checkConstraintsBoardCoord (each live cell has 2 or 3 live neighbors), SBSO: grid[2,2] >= grid[size+1,size+1] and grid[2,size+1] >= grid[size+1,2] (symmetry-breaking constraint). These constraints ensure that the pattern is stable and the density of live cells is maximized.\",\n\"objective\": \"Maximize the number of live cells in the grid, represented by the variable z = sum(r in objFunctionBoardCoord, c in objFunctionBoardCoord) (grid[r,c]).\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "naive": {"__data__": {"id_": "naive", "embedding": null, "metadata": {"problem_family": "naive", "model_name": "naive", "source_code": "% Maximum Clique Problem (CSPLib 074)\n% Very naive model. This is not a good way of solving it, but it is easy to\n% understand.\n%\n% Ciaran McCreesh, c.mccreesh.1@research.gla.ac.uk\n% 2015-09-05\n\n% --- instance, specified as an adjacency matrix, which must be symmetric, using ---\n% --- 0s and 1s rather than true and false because it looks prettier             ---\nint: n = 5;\narray[1..n, 1..n] of int: adj =\n    [| 0, 1, 0, 1, 0\n     | 1, 0, 1, 0, 0\n     | 0, 1, 0, 1, 1\n     | 1, 0, 1, 0, 1\n     | 0, 0, 1, 1, 0 |];\n\n% --- naive model ---\n\n% decision variables: which vertices are in the clique?\narray[1..n] of var bool: c;\nvar int: size;\n\n% how many vertices have we selected?\nconstraint size = sum(c);\n\n% we can only pick one of any non-adjacent pair of vertices\nconstraint forall (i, j in 1..n where i < j /\\ 0 == adj[i,j]) (bool2int(c[i]) + bool2int(c[j]) <= 1);\n\nsolve maximize size;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Maximum Clique Problem:\n\n```\n{\n  \"question1\": \"I'm a social media influencer with 10 close friends, and I want to create a private online community for us to share exclusive content. However, I know that some of my friends don't get along with each other, so I need to find the largest group of friends that can coexist peacefully in the community. How can I do this?\",\n  \"question2\": \"I'm planning a big party and I want to invite all my friends, but I know some of them don't get along. How can I figure out the largest group of friends that can hang out together without any drama?\",\n  \"question3\": \"I'm in a big class at school and we have to work on a group project. There are 15 of us, but some people don't like working with each other. How can I find the biggest group of people that can work together without any problems?\",\n  \"question4\": \"I have 8 friends and I want to create a team for a game night. Some of them don't get along, so how can I find the largest team that can play together?\",\n  \"question5\": \"I'm the manager of a large retail store with 20 employees, and I need to create teams for a company-wide competition. However, I know that some employees have conflicts with each other, and I want to minimize the drama. Additionally, I want to make sure that each team has a good mix of skills and expertise. How can I find the largest teams that can work together effectively, considering the skills and expertise of each employee, as well as their personal conflicts?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Maximum Clique Problem, but do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Maximum Clique Problem\",\n\"description\": \"The Maximum Clique Problem is a classic problem in graph theory and computer science. It involves finding the largest subset of vertices in a graph such that every pair of vertices in the subset is connected by an edge. In other words, it is a clique of maximum size.\",\n\"variables\": \"c = {c_1, c_2, ..., c_n} where c_i \u2208 {true, false} for i = 1, ..., n; size \u2208 \u2124\",\n\"variables explanation\": \"The decision variables c_i represent whether vertex i is included in the clique or not. The variable size represents the total number of vertices in the clique.\",\n\"constraints\": \"size = \u2211_{i=1}^n c_i; \u2200i, j \u2208 {1, ..., n} where i < j and adj[i, j] = 0, c_i + c_j \u2264 1\",\n\"constraints explanation\": \"The first constraint ensures that the size of the clique is equal to the sum of the vertices included. The second constraint ensures that if two vertices are not adjacent, at most one of them can be included in the clique.\",\n\"objective\": \"maximize size\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "non": {"__data__": {"id_": "non", "embedding": null, "metadata": {"problem_family": "non", "model_name": "non", "source_code": "include \"globals.mzn\";\nint: X;\nint: Y;\n\nint: maxlen;\n\narray [1..Y,1..maxlen] of int: rows;\n\narray [1..X,1..maxlen] of int: cols;\n\narray[1..2, 1..2, 1..2] of 0..1: nonmul = \n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 1, 1,\n         1, 0, 0, 1]\n    );\n\narray[1..2, 1..2, 1..2] of 0..1: nonadd =\n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 0, 1,\n         1, 0, 0, 1]\n    );\n\n% variables\n%\narray[1..Y, 1..X] of var 1..2: A;\n\n% All variables in a region must be different\n% Ordering to ensure each variable is handled exactly once\npredicate nonogram_row(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: row) =\n    nonogram([A[row, v] | v in 1..X], cons);\n\npredicate nonogram_col(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: col) = \n    nonogram([A[v,col] | v in 1..Y], cons);\n\npredicate nonogram(array[int] of var 1..2: A, array [int] of int: cons) = \n    let {\n          int: n = if cons[1] = 0 then 0 else max(index_set(cons)) endif,\n          array [1..n + 1, 1..2] of int: consarr =\n              if cons[1] = 0 then [|1, 0|] \n              else array2d(1..n + 1, 1..2,\n                [1, 2] ++\n                [    i * nonmul[cons[i - 1] + 1, cons[i] + 1, s] + \n                     nonadd[cons[i - 1] + 1, cons[i] + 1, s] \n                     | i in 2..n, s in 1..2 \n                ] ++ \n                [n+1,0]\n              )\n              endif\n     } in (\n         regular(A, n + 1, 2, consarr, 1, {n + 1})\n     );\n\nconstraint forall(i in 1..Y) (\n    nonogram_row(A, [rows[i, j] | j in 1..maxlen where rows[i, j] >= 0], i)\n);\n\nconstraint forall(i in 1..X) (\n    nonogram_col(A, [cols[i, j] | j in 1..maxlen where cols[i, j] >= 0], i)\n);\n\nsolve :: int_search(array1d(1..X*Y,A),input_order,indomain_max,complete) satisfy;\n\noutput [\n    if fix(A[r, c]) = 1 then \" \" else \".\" endif ++ \n    if c = Y then \"\\n\" else \" \" endif\n    | r in 1..X, c in 1..Y\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Nonogram problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a urban planner designing a new public park. I need to allocate different zones for recreational activities, such as playgrounds, picnic areas, and walking trails. The park has a rectangular shape with 10 rows and 8 columns. I have constraints on the sequence of zones in each row and column, such as '3 playgrounds, 2 picnic areas, 1 walking trail' in a row, and '2 picnic areas, 1 playground, 1 walking trail' in a column. How can I allocate the zones to satisfy all the constraints and create a functional and enjoyable park?\",\n    \"goal\": \"Find a feasible allocation of zones that satisfies all the constraints\"\n  },\n  \"question2\": {\n    \"description\": \"I'm a event planner organizing a music festival with 5 stages and 8 time slots. I need to schedule 10 bands to perform on each stage, but I have some restrictions. For example, band A can't play on stage 1, band B can't play on stage 2, and band C can only play on stage 3 or 4. I also have some preferences, like band D should play on stage 1 or 2, and band E should play on stage 4 or 5. How can I create a schedule that satisfies all the restrictions and preferences?\",\n    \"goal\": \"Find a schedule that satisfies all the restrictions and preferences\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a 10-year-old who loves Legos! I have a Lego base plate with 8 rows and 10 columns, and I want to build a city with different types of buildings, such as houses, schools, and shops. My mom gave me some rules, like 'no two houses can be next to each other' and 'every school must be near a house'. How can I build my city to follow all the rules and make it look cool?\",\n    \"goal\": \"Find a way to build the city that follows all the rules\"\n  },\n  \"question4\": {\n    \"description\": \"I need to pack 5 boxes of different sizes into a 3x4 grid. Each box has a specific sequence of colors on its sides. How can I pack the boxes to satisfy the color sequences?\",\n    \"goal\": \"Find a packing arrangement that satisfies the color sequences\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a logistics manager at a warehouse that stores 10 types of products, each with its own storage requirements. The warehouse has 12 rows and 15 columns of shelves. I need to allocate the products to the shelves to minimize storage costs and satisfy the following constraints: product A requires 3 consecutive shelves in a row, product B requires 2 shelves in a column, product C can only be stored on shelves 1-3 or 10-12, and product D can only be stored on shelves 4-6 or 13-15. Additionally, I want to prioritize the storage of products E and F, which are high-demand products. How can I allocate the products to the shelves to minimize storage costs and satisfy all the constraints?\",\n    \"goal\": \"Find an allocation of products to shelves that minimizes storage costs and satisfies all the constraints\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Nonogram problem, but in different contexts and with varying levels of complexity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Nonogram\",\n  \"description\": \"A Nonogram is a puzzle where you have to fill in a grid with black and white cells according to given constraints. The constraints are given as sequences of lengths of consecutive black cells in each row and column.\",\n  \"variables\": \"A[r, c] for r in 1..Y, c in 1..X, A[r, c] in {1, 2}, where A[r, c] = 1 represents a black cell and A[r, c] = 2 represents a white cell. These variables represent the cells in the grid that need to be filled in.\",\n  \"constraints\": \"nonogram_row(A, rows, i) for i in 1..Y, nonogram_col(A, cols, i) for i in 1..X, where nonogram_row and nonogram_col ensure that the sequences of consecutive black cells in each row and column match the given constraints.\",\n  \"objective\": \"The objective is to find a feasible solution that satisfies all the constraints, i.e., to find a valid filling of the grid according to the given constraints.\"\n}\n```\n\nNote that the objective of a Nonogram problem is typically to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "nonogram_create_automaton2": {"__data__": {"id_": "nonogram_create_automaton2", "embedding": null, "metadata": {"problem_family": "nonogram_create_automaton2", "model_name": "nonogram_create_automaton2", "source_code": "% \n% Nonoram solver using regular and is written in all-MiniZinc.\n% \n% This version uses the regular constraint with the following features:\n%\n%  * Compared to http://www.hakank.org/nonogram_regular.mzn\n%    It calculated all the finite states given a Nonogram pattern,\n%    instead of relying on an external program for doing this.\n%\n%  * Compared to http://www.hakank.org/nonogram_create_automaton.mzn\n%    It calculates the states as par int (not var int), which\n%    makes it possible to use some optimal regular constraints,\n%    for example the one in Gecode/FlatZinc.\n%\n% Warning: the calculation of the states is quite ugly.\n%\n%\n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: rows;\nint: row_rule_len;\narray[1..rows, 1..row_rule_len] of int: row_rules;\nint: cols;\nint: col_rule_len;\narray[1..cols, 1..col_rule_len] of int: col_rules;\n\n\narray[1..rows, 1..cols] of var 1..2: x;\n\nsolve :: int_search(\n     [x[i,j] | j in 1..cols, i in 1..rows], \n     first_fail, \n     indomain_min, \n     complete) \nsatisfy;\n\n%\n% The approach is rather simple:\n%  - zero_positions is a set of the positions in the state table where the \n%    state 0 should be, which also correspond to the state of the pattern \"0\"\n%  - when this have been identified everything else comes to rest\n%\n% On the other hand, the calculation of the states is hairy, very hairy.\n%\npredicate make_automaton(array[int] of var int: x, array[int] of int: pattern) =\n    let {\n        int: n = length(pattern),\n        % fix for \"zero clues\"\n        int: len = max(length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern),1),\n        int: leading_zeros = sum(i in 1..n) (bool2int(pattern[i] = 0)),\n        set of int: zero_positions = {sum(j in 1..i) (pattern[j]+1) -leading_zeros | i in 1..n where pattern[i] > 0},\n       array[1..2*len] of 0..len*2: states = \n     if (length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern)) = 0 then \n       [1,1]  % fix for \"zero clues\"\n     else \n    [1, 2] ++\n    [\n       if i div 2 in zero_positions then\n           if i mod 2 = 0 then\n            0\n           else\n            (i div 2) + 1\n           endif\n       elseif (i-1) div 2 in zero_positions then\n           if i mod 2 = 0 then\n            (i div 2)+1\n           else\n            (i div 2)+2\n           endif\n       else\n         if not( (((i-1) div 2) - 1) in zero_positions) then\n            if i mod 2 = 0 then\n               (i div 2) + 1\n            else \n              if (i div 2) + 1 in zero_positions then\n                  (i div 2) + 2\n              else \n                  0\n              endif\n            endif\n          else\n             if i mod 2 = 0 then\n                 (i div 2) + 1\n             else \n                if not((i div 2) + 1 in zero_positions) then\n                   0\n                else \n                   (i div 2) + 2 \n                endif\n             endif\n          endif\n       endif\n    | i in 3..2*(len-1)]\n    ++\n    [len, 0]\n    endif\n    } \n    in\n    regular(\n       x,\n       len, \n       2, \n       array2d(1..len, 1..2, states),\n       1, \n       {len}) % :: domain\n;\n\nconstraint\n\n      forall(j in 1..cols) (\n        make_automaton([x[i,j] | i in 1..rows], [col_rules[j,k] | k in 1..col_rule_len])\n      )\n      /\\\n      forall(i in 1..rows) (\n        make_automaton([x[i,j] | j in 1..cols], [row_rules[i,k] | k in 1..row_rule_len])\n      )\n\n;\n\noutput \n[\n  if j = 1 then \"\\n\" else \"\" endif ++\n     if fix(x[i,j]) = 1 then \" \" else \"#\" endif\n    \n  | i in 1..rows, j in 1..cols\n] \n++ \n[\n  \"\\n\"\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Nonogram problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to optimize the loading of cargo containers on a ship. Each container has a specific sequence of items that need to be loaded in a particular order, and each row and column of containers has a limited capacity. How can I determine the optimal arrangement of containers to maximize the use of space and minimize the risk of damage during transport?\",\n  \"question2\": \"I'm planning a garden party and I want to create a beautiful seating arrangement. I have 10 tables and 15 chairs, and each table needs to have a specific number of chairs. Some tables need to be close together, while others need to be far apart. How can I arrange the tables and chairs to fit all my guests comfortably and make the party look nice?\",\n  \"question3\": \"I'm designing a new video game level and I want to create a challenging puzzle. I have a grid of 10x10 squares, and each square can be either a wall, a floor, or a special power-up. I have a set of clues that describe the sequence of squares in each row and column. How can I use these clues to create a fun and solvable puzzle for the player?\",\n  \"question4\": \"I need to pack 5 boxes of different sizes into a small storage room. Each box has a specific sequence of items that need to be packed in a particular order. How can I fit all the boxes in the room?\",\n  \"question5\": \"As a urban planner, I'm designing a new public transportation system for a city. I have 20 bus routes and 15 train stations, and each route needs to pass through a specific sequence of stations in a particular order. The city has limited resources, so I need to minimize the number of buses and trains used while still providing efficient transportation to all areas of the city. Additionally, some routes need to be prioritized over others due to high demand. How can I optimize the transportation system to meet the city's needs while staying within budget?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Nonogram problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Nonogram\",\n\"description\": \"A Nonogram is a puzzle where a grid of pixels is divided into rows and columns, and each row and column has a set of clues indicating the sequence of black and white pixels in that row or column. The goal is to find the correct configuration of black and white pixels in the grid that satisfies all the clues.\",\n\"variables\": \"x[i, j] \u2208 {1, 2} for i = 1 to rows and j = 1 to cols. These variables represent the state of each pixel in the grid, where 1 represents a white pixel and 2 represents a black pixel.\",\n\"constraints\": \"make_automaton constraints for each row and column, which ensure that the sequence of pixels in each row and column matches the corresponding clue. The make_automaton predicate is a regular constraint that checks if the sequence of pixels in a row or column is consistent with the given clue.\",\n\"objective\": \"Satisfy all the constraints, i.e., find a feasible solution that satisfies all the clues. There is no objective function to minimize or maximize.\"\n}\n\nNote that the objective of a Nonogram problem is typically to find a feasible solution that satisfies all the clues, rather than to optimize a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "opd": {"__data__": {"id_": "opd", "embedding": null, "metadata": {"problem_family": "opd", "model_name": "opd", "source_code": "%% Design of Collateralised Debt Obligations Squared (CDO^2) Transactions\n%%\n%% Problem described in:\n%%   Pierre Flener, Justin Pearson, Luis G. Reyna, Olof Sivertsson:\n%%   Design of Financial CDO Squared Transactions Using Constraint Programming.\n%%   Constraints 12(2):179-205, 2007\n%%   http://dx.doi.org/10.1007/s10601-006-9014-4\n%%   \n%% Also solved with:\n%%   LS with VNS: http://dx.doi.org/10.1016/j.endm.2014.11.017\n%%   CBLS with set variables: http://dx.doi.org/10.1007/11564751_7\n%%\n%% Authors: Pierre Flener and Jean-Noel Monette\n%% License: CC-BY-4.0\n%% \n%% Model loosely based on Ralph Becket's BIBD model at\n%%   https://github.com/MiniZinc/minizinc-benchmarks/blob/master/bibd/bibd.mzn\n\n% An OPD (v, b, r) problem is to find a binary matrix of v rows\n% and b columns such that each row sums to r, and\n% the dot product beween any pair of distinct rows is minimal.\n\n\n%Requires MiniZinc >= 2.0.2 for the symmetry_breaking_constraint predicate\n\ninclude \"lex_greatereq.mzn\";\n\n%instance data\nint: v;\nint: b;\nint: r;\n\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\n\n%computing a lower bound for lambda\nint: rv = r*v;\nint: rvmodb = rv mod b;\nint: floorrv = rv div b;\nint: ceilrv = rv div b + bool2int(rv mod b != 0);\nint: num = (ceilrv*ceilrv*rvmodb+floorrv*floorrv*(b-rvmodb)-rv);\nint: denom = v*(v-1);\nint: lb_lambda = num div denom + bool2int( num mod denom !=0);\n\n% This line is there for debugging purposes, it can be safely removed\nint: tmp = trace(\"Computed lower bound for lambda: \"++show(lb_lambda)++\"\\n\",lb_lambda);\n\n\n% lambda is called objective for the MiniZinc Challenge\nvar lb_lambda..b: objective;\n\n\narray [rows, cols] of var 0..1: m;\n\n\n% Every row must sum to r.\nconstraint forall (i in rows) (sum (j in cols) (m[i, j]) = r);\n\n% The dot product of every pair of distinct rows must be at most lambda for an OPD and a PD, and equal to lambda for a BIBD\nconstraint forall (i_a, i_b in rows where i_a < i_b) (\n    sum (j in cols) (m[i_a, j] * m[i_b, j]) <= objective\n);\n\n\n% Break row symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(i in rows diff {max(rows)})(\n        lex_greatereq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    )\n);\n% Break column symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(j in cols diff {max(cols)})(\n        lex_greatereq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    )\n);\n\n\nsolve \n    :: seq_search([int_search([m[i, j] | i in rows, j in cols], input_order, indomain_max, complete),\n       \t\t   int_search([objective], input_order,indomain_min,complete)])\n    minimize objective; \n\n\n% Disabled the full solution. Printing only the objective value, lower bound, and parameters.\noutput  [\"opd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r), \"). Found lambda = \", show(objective),\"\\tlb: \", show(lb_lambda)]\n%       ++[\"\\n\\n\"] ++ \n%\t[ ( if j > b then \"\\n\" else \n%\t        if fix(m[i,j])=1 then \"*\" else \" \" endif\n%\t    endif )\n%       | i in rows, j in 1..(b + 1) ]\n;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a data scientist working on a project to design a recommender system for a music streaming platform. I need to create a matrix of user preferences where each row represents a user and each column represents a song. The goal is to minimize the similarity between users while ensuring each user has a diverse set of recommended songs. Can you help me find the optimal matrix that satisfies these constraints?\",\n    \"constraints\": \"Each user should have a fixed number of recommended songs, and the similarity between users should be minimized.\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a party and I want to create a seating arrangement that ensures everyone gets along. I have 10 guests and 5 tables, and I want to seat people in a way that minimizes conflicts. Can you help me figure out the best seating arrangement?\",\n    \"constraints\": \"Each table should have a fixed number of guests, and I want to minimize the number of conflicts between guests.\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a teacher and I need to create a seating chart for my classroom. I have 25 students and 5 tables, and I want to seat students in a way that promotes collaboration and minimizes distractions. Can you help me find the best seating arrangement?\",\n    \"constraints\": \"Each table should have a fixed number of students, and I want to minimize the number of distractions between students.\"\n  },\n  \"question4\": {\n    \"description\": \"I need to create a team of 5 people with diverse skills to work on a project. Can you help me find the best team composition?\",\n    \"constraints\": \"Each person should have a fixed number of skills, and I want to minimize the overlap between skills.\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a manager at a hospital and I need to create a schedule for 15 nurses to work on 3 shifts over 5 days. Each nurse has a specific set of skills and preferences, and I need to ensure that each shift has the right mix of skills and expertise. Additionally, I want to minimize the number of times nurses work together to reduce the risk of burnout. Can you help me find the optimal schedule?\",\n    \"constraints\": \"Each shift should have a fixed number of nurses, each nurse should work a fixed number of shifts, and I want to minimize the number of times nurses work together.\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Design of Collateralised Debt Obligations Squared (CDO^2) Transactions\",\n\"description\": \"The problem of designing a Collateralised Debt Obligations Squared (CDO^2) transaction, which involves finding a binary matrix of v rows and b columns such that each row sums to r, and the dot product between any pair of distinct rows is minimal.\",\n\"variables\": \"m[i, j] (i \u2208 {1, ..., v}, j \u2208 {1, ..., b}) - a binary matrix where m[i, j] = 1 if the j-th asset is included in the i-th tranche, and 0 otherwise. objective (\u03bb) - the minimum dot product between any pair of distinct rows.\",\n\"constraints\": \"\u2200i \u2208 {1, ..., v} (\u2211j \u2208 {1, ..., b} m[i, j] = r) - each row must sum to r. \u2200i_a, i_b \u2208 {1, ..., v} where i_a < i_b (\u2211j \u2208 {1, ..., b} m[i_a, j] * m[i_b, j] \u2264 \u03bb) - the dot product of every pair of distinct rows must be at most \u03bb. symmetry_breaking_constraint - breaks row and column symmetry in the incidence matrix.\",\n\"objective\": \"minimize \u03bb (the minimum dot product between any pair of distinct rows)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "partition": {"__data__": {"id_": "partition", "embedding": null, "metadata": {"problem_family": "partition", "model_name": "partition", "source_code": "%-----------------------------------------------------------------------------%\n% Partitioning problem\n%\n% Guido Tack\n% 05/2009\n%\n%\n% Partition 2*n numbers into two groups, each of size n, such that\n% their sums are equal and the sums of their squares are equal.\n%\n\ninclude \"globals.mzn\";\n\n%-----------------------------------------------------------------------------%\n% Instance\n%-----------------------------------------------------------------------------%\n\nn = 32;\n\n%-----------------------------------------------------------------------------%\n% Model\n%-----------------------------------------------------------------------------%\n\nint: n;\n\narray[1..n] of var 1..2*n: x;\narray[1..n] of var 1..2*n: y;\n\nconstraint true\n    %   Break symmetries by ordering numbers in each group\n    /\\  forall (i in 2..n) (x[i-1] < x[i] /\\ y[i-1] < y[i])\n    %   Break symmetries by ordering the groups\n    /\\  x[1] < y[1]\n    \n    %   Partition the numbers\n    /\\  (alldifferent(x++y)) :: bounds\n    \n    %   The sums are equal\n    /\\  sum (x) = 2*n*(2*n+1) div 4\n    /\\  sum (y) = 2*n*(2*n+1) div 4\n    \n    %   The sums of the squares are equal\n    /\\  let {\n            array[1..n] of var 1..4*n*n: sx,\n            array[1..n] of var 1..4*n*n: sy\n        } in\n        forall (i in 1..n) (sx[i]=x[i]*x[i] /\\ sy[i] = y[i]*y[i])\n    /\\  sum (sx) = 2*n*(2*n+1)*(4*n+1) div 12\n    /\\  sum (sy) = 2*n*(2*n+1)*(4*n+1) div 12\n;\n\nsolve ::int_search(x++y,first_fail,indomain_min,complete) satisfy;\n\noutput\n    [\"x = \",show(x),\"\\n\",\"y = \",show(y),\"\\n\",\n     \"sum = \",show(2*n*(2*n+1) div 4),\"\\n\",\n     \"sum of squares = \", show(2*n*(2*n+1)*(4*n+1) div 12), \"\\n\"\n     ];\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the partitioning problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to allocate 64 packages of different weights to 2 trucks, each with a capacity of 32 units. The packages need to be loaded in a way that the total weight on each truck is the same, and the total weight squared (to account for stability) is also the same. How can I allocate the packages to achieve this?\",\n  \"question2\": \"I'm planning a party and I have 64 guests with different food preferences. I want to divide them into 2 groups of 32, so that each group has the same total number of guests with each food preference, and the same total 'food preference score' (a measure of how much each guest likes each food). How can I divide the guests into groups to make this happen?\",\n  \"question3\": \"I'm a teacher, and I need to divide my class of 64 students into 2 groups for a project. Each student has a different skill level, and I want to make sure each group has the same total skill level, and the same total 'skill level squared' (to account for teamwork dynamics). How can I divide the students into groups to achieve this?\",\n  \"question4\": \"I have 64 items of different values, and I need to divide them into 2 groups of 32, with the same total value and total value squared. How can I do this?\",\n  \"question5\": \"I'm a manager at a call center, and I need to allocate 64 customer service representatives to 2 shifts, each with 32 representatives. The representatives have different levels of experience, and I want to make sure each shift has the same total experience level, and the same total experience level squared (to account for team cohesion). Additionally, I want to ensure that representatives with similar experience levels are not in the same shift. How can I allocate the representatives to achieve this, while also considering the constraints of the call center's operations?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the partitioning problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Partitioning Problem\",\n\"description\": \"This problem involves partitioning 2n numbers into two groups, each of size n, such that the sums of the numbers in each group are equal and the sums of the squares of the numbers in each group are also equal.\",\n\"variables\": \"x = (x1, x2, ..., xn), y = (y1, y2, ..., yn), where xi, yi \u2208 {1, 2, ..., 2n}. These variables represent the numbers in each group.\",\n\"constraints\": [\n    \"x1 < x2 < ... < xn, y1 < y2 < ... < yn (ordering constraints)\",\n    \"x1 < y1 (symmetry breaking constraint)\",\n    \"alldifferent(x ++ y) (partitioning constraint)\",\n    \"sum(x) = sum(y) = 2n(2n+1) div 4 (sum equality constraint)\",\n    \"sum(xi^2) = sum(yi^2) = 2n(2n+1)(4n+1) div 12 (sum of squares equality constraint)\"\n],\n\"objective\": \"Satisfy all constraints (no optimization objective)\"\n}\n\nNote that this problem is a classic example of a constraint satisfaction problem, where the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing an objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup3Idempotent": {"__data__": {"id_": "quasiGroup3Idempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup3Idempotent", "model_name": "quasiGroup3Idempotent", "source_code": "% \n% Quasigroup problem in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup3Idempotent.eprime\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m, \n% where each element occurrs exactly once in each row and column and certain \n% multiplication axioms hold (in this case, we want axiom 3 to hold). \n% \"\"\"\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html:\n% \"\"\"\n% QG3.m problems are order m quasigroups for which (a*b)*(b*a) = a. \n% \"\"\"\n%\n\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n;\nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n\n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i] \n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different\t       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n\t    quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n\n     % Idempotency\n     % forall i : nDomain . \n     %     (quasiGroup[i,i] = i), \n\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     % allDifferent(qgDiagonal) %,\n\n     % anti-Abelian\n     % forall i : nDomain .\n     %   forall j : nDomain .\n     %     (i != j) =>\n     %     (quasiGroup[i,j] != quasiGroup[j,i]),\n\n     % if (i*i)=j then (j*j) = i\n     % forall i : nDomain .\n     %  forall j : nDomain .\n     %    (quasiGroup[i,i]=j) => (quasiGroup[j,j]=i),\n\n\n     % Symmetry-breaking constraints\t\n     % forall i : nDomain .\n     %      quasiGroup[i,n-1] + 2 >= i\n\n;\n\noutput \n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\n\n\n%\n% data\n%\nn = 4; % 4 works\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to schedule 5 trucks to deliver packages to 5 different locations. Each truck can visit each location only once, and each location must receive a package from exactly one truck. Additionally, the company wants to ensure that if truck A delivers a package to location B, then the package delivered to location A by truck B is the same as the one delivered to location B by truck A. How can the company schedule the trucks to meet these constraints?\",\n  \"question2\": \"I'm planning a dinner party for 4 friends and I want to seat them at a square table. I want each friend to sit next to a different person at each course, and I want to make sure that if friend A sits next to friend B at one course, then friend B sits next to friend A at another course. How can I arrange the seating to make this work?\",\n  \"question3\": \"I'm creating a puzzle game for kids where they have to swap tiles to create a square pattern. Each tile has a different symbol on it, and I want to make sure that each symbol appears exactly once in each row and column. Additionally, I want to make sure that if tile A swaps with tile B, then tile B swaps with tile A in a different part of the pattern. How can I design the puzzle to meet these constraints?\",\n  \"question4\": \"5 friends want to play a game of musical chairs, but with a twist. Each friend wants to sit in a different chair at each round, and if friend A sits in chair B's chair, then friend B wants to sit in friend A's chair. How can they arrange the seating to make this work?\",\n  \"question5\": \"A hospital is scheduling surgeries for 6 patients, and each patient needs to be operated on by a different surgeon. Each surgeon can only perform one surgery per day, and each patient needs to be operated on by a different surgeon each day. Additionally, the hospital wants to ensure that if surgeon A operates on patient B on day X, then surgeon B operates on patient A on day Y. How can the hospital schedule the surgeries to meet these constraints, taking into account the availability of surgeons and operating rooms, as well as the priority of each patient's surgery?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classical problem in constraint programming, which involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n\"variables\": \"quasiGroup[i, j], qgDiagonal[i], where i, j \u2208 {0, ..., n-1}. quasiGroup[i, j] represents the element at row i and column j in the quasigroup table, and qgDiagonal[i] represents the element on the diagonal of the quasigroup table at position i.\",\n\"constraints\": \"1. \u2200i \u2208 {0, ..., n-1}, qgDiagonal[i] = quasiGroup[i, i] (accessor for diagonal), \n2. \u2200row \u2208 {0, ..., n-1}, allDifferent([quasiGroup[row, col] | col \u2208 {0, ..., n-1}]) (all rows have to be different), \n3. \u2200col \u2208 {0, ..., n-1}, allDifferent([quasiGroup[row, col] | row \u2208 {0, ..., n-1}]) (all columns have to be different), \n4. \u2200i, j \u2208 {0, ..., n-1}, quasiGroup[quasiGroup[i, j], quasiGroup[j, i]] = i (axiom 3 of quasigroup), \n5. (implied) allDifferent(qgDiagonal) (all-different diagonal), \n6. (commented out) additional constraints for idempotency, anti-Abelian, and symmetry-breaking.\",\n\"objective\": \"satisfy (find a feasible solution)\"\n}\n\nNote that the objective of this problem is to find a feasible solution, i.e., a quasigroup table that satisfies all the constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup3NonIdempotent": {"__data__": {"id_": "quasiGroup3NonIdempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup3NonIdempotent", "model_name": "quasiGroup3NonIdempotent", "source_code": "% \n% Quasigroup problem in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup3NonIdempotent.eprime\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m, \n% where each element occurrs exactly once in each row and column and certain \n% multiplication axioms hold (in this case, we want axiom 3 to hold). \n% \"\"\"\n% \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html:\n%\n\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n = 4;\nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n\n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i] \n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different\t       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n\t    quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n\n     /\\\n\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (i != j) ->\n         (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n\n     % Symmetry-breaking constraints\t\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\noutput \n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to optimize the assignment of warehouses to delivery routes. I have 4 warehouses and 4 routes, and each warehouse can only be assigned to one route. However, I want to ensure that each route has a unique set of warehouses, and that the assignment satisfies certain operational constraints. Can I find an assignment that meets these requirements?\",\n  \"question2\": \"I'm planning a music festival with 4 stages and 4 bands. Each band can only play on one stage, and each stage can only have one band. I want to create a schedule that ensures each stage has a unique lineup, and that certain bands don't play at the same time. Is there a way to create a schedule that meets these requirements?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles! I have a 4x4 grid, and I want to fill it with numbers from 1 to 4, so that each row and column has each number only once. However, I also want to make sure that certain numbers don't appear in the same row or column. Can I find a way to fill the grid that meets these rules?\",\n  \"question4\": \"I need to assign 4 teams to 4 projects, with each team working on only one project. How can I ensure each project has a unique team, and certain teams don't work together?\",\n  \"question5\": \"I'm a researcher studying the behavior of 4 different species of birds in a forest ecosystem. I want to create a 4x4 matrix that represents the interactions between these species, where each species interacts with each other species in a unique way. However, I also want to ensure that certain species don't interact with each other, and that the matrix satisfies certain ecological constraints. Can I find a matrix that meets these requirements, and what insights can I gain from it?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. It involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n\"variables\": \"quasiGroup[i, j] (i, j \u2208 {0, ..., n-1}), qgDiagonal[i] (i \u2208 {0, ..., n-1})\\nquasiGroup is an m x m matrix representing the quasigroup, and qgDiagonal is an array representing the diagonal elements of the quasigroup.\",\n\"constraints\": \"\u2200i \u2208 {0, ..., n-1}: qgDiagonal[i] = quasiGroup[i, i]\\n\u2200row \u2208 {0, ..., n-1}: all_different([quasiGroup[row, col] | col \u2208 {0, ..., n-1}])\\n\u2200col \u2208 {0, ..., n-1}: all_different([quasiGroup[row, col] | row \u2208 {0, ..., n-1}])\\n\u2200i, j \u2208 {0, ..., n-1}: quasiGroup[quasiGroup[i, j], quasiGroup[j, i]] = i\\nall_different(qgDiagonal)\\n\u2200i, j \u2208 {0, ..., n-1}: (i \u2260 j) \u2192 (quasiGroup[i, j] \u2260 quasiGroup[j, i])\\n\u2200i, j \u2208 {0, ..., n-1}: (quasiGroup[i, i] = j) \u2192 (quasiGroup[j, j] = i)\\n\u2200i \u2208 {0, ..., n-1}: quasiGroup[i, n-1] + 2 \u2265 i\\nThese constraints ensure that the quasigroup satisfies certain properties, such as each element occurring exactly once in each row and column, and certain multiplication axioms holding.\",\n\"objective\": \"satisfy (find a feasible solution)\"\n}\n\nNote that the objective of this problem is to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup4Idempotent": {"__data__": {"id_": "quasiGroup4Idempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup4Idempotent", "model_name": "quasiGroup4Idempotent", "source_code": "% \n% Quasigroup problem 4 Idempotent in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup4Idempotent.eprime\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m,\n% where each element occurrs exactly once in each row and column and certain\n% multiplication axioms hold (in this case, we want axiom 4 to hold).\n% \"\"\"\n% See\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/index.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n = 9; % solutions for n=5, n=9...\nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n\n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n\n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\n\noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem with Idempotency:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to design a warehouse layout that minimizes congestion and ensures efficient package handling. I have 9 different package types, and each type needs to be processed in a specific sequence to avoid delays. How can I assign processing stations to each package type such that each station handles a unique sequence of packages, and the sequence of stations is consistent across all packages of the same type?\",\n  \"question2\": \"I'm planning a music festival with 9 different stages, and I want to create a schedule that ensures each stage has a unique lineup of bands. I also want to make sure that each band plays at a different stage each day, and that the schedule is fair and balanced across all stages. Can you help me figure out a schedule that meets these requirements?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles and games! I have a set of 9 different puzzle pieces, and I want to create a puzzle board that uses each piece exactly once. The catch is that each piece has a specific shape and color, and I need to arrange them in a way that makes a beautiful and symmetrical design. Can you help me find a solution that uses all the pieces and looks super cool?\",\n  \"question4\": \"I have 9 friends coming over for dinner, and I want to seat them at a table such that each person sits next to someone they haven't met before. How can I arrange the seating to make this happen?\",\n  \"question5\": \"I'm a researcher studying the behavior of 9 different species of birds in a forest ecosystem. I want to design an experiment that observes the interactions between each species, but I need to ensure that each species interacts with every other species exactly once, and that the interactions are balanced across all species. Additionally, I need to account for the fact that some species are more aggressive than others, and I want to minimize the number of aggressive interactions. Can you help me design an experiment that meets these requirements and ensures the safety of the birds?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem with Idempotency. They also demonstrate a range of user backgrounds and levels of expertise, from a skilled logistics manager to a curious 12-year-old."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Quasigroup Existence Problem with Idempotency\",\n  \"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. It involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold. In this specific problem, we want to find a quasigroup that satisfies the idempotency axiom, i.e., the product of an element with itself is the element itself.\",\n  \"variables\": \"quasiGroup[i, j], qgDiagonal[i], where i, j \u2208 {0, ..., n-1}. The quasiGroup variables represent the elements of the quasigroup table, and the qgDiagonal variables represent the diagonal elements of the table.\",\n  \"constraints\": [\n    \"\u2200i \u2208 {0, ..., n-1}, qgDiagonal[i] = quasiGroup[i, i] (accessor for diagonal)\",\n    \"\u2200row \u2208 {0, ..., n-1}, allDifferent([quasiGroup[row, col] | col \u2208 {0, ..., n-1}]) (all rows have to be different)\",\n    \"\u2200col \u2208 {0, ..., n-1}, allDifferent([quasiGroup[row, col] | row \u2208 {0, ..., n-1}]) (all columns have to be different)\",\n    \"\u2200i, j \u2208 {0, ..., n-1}, quasiGroup[quasiGroup[j, i], quasiGroup[i, j]] = i (axiom 4)\",\n    \"\u2200i \u2208 {0, ..., n-1}, quasiGroup[i, i] = i (idempotency)\",\n    \"allDifferent(qgDiagonal) (all-different diagonal)\",\n    \"\u2200i, j \u2208 {0, ..., n-1}, i \u2260 j \u2192 quasiGroup[i, j] \u2260 quasiGroup[j, i] (anti-Abelian)\",\n    \"\u2200i, j \u2208 {0, ..., n-1}, quasiGroup[i, i] = j \u2192 quasiGroup[j, j] = i (implied constraint)\",\n    \"\u2200i \u2208 {0, ..., n-1}, quasiGroup[i, n-1] + 2 \u2265 i (symmetry-breaking constraint)\"\n  ],\n  \"objective\": \"satisfy (find a feasible solution)\"\n}\n```\n\nNote that the objective of this problem is to find a feasible solution, i.e., a quasigroup that satisfies all the constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup4NonIdempotent": {"__data__": {"id_": "quasiGroup4NonIdempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup4NonIdempotent", "model_name": "quasiGroup4NonIdempotent", "source_code": "% \n% Quasigroup problem 4 NonIdempotent in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup4NonIdempotent.eprime\n% from the Minion Translator examples. \n% \"\"\"\n%\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m,\n% where each element occurrs exactly once in each row and column and certain\n% multiplication axioms hold (in this case, we want axiom 4 to hold).\n%\n% \"\"\"\n% See\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/index.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n = 5; \nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n\n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n\n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\n\noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a logistics manager at a large e-commerce company, and I need to optimize the assignment of warehouses to delivery routes. I have 5 warehouses and 5 routes, and each warehouse can only be assigned to one route. However, I want to ensure that each route has a unique set of warehouses, and that the assignment is non-symmetric (i.e., if warehouse A is assigned to route B, then warehouse B is not assigned to route A). How can I find an optimal assignment that satisfies these constraints?\",\n    \"context\": \"Logistics and Supply Chain Management\"\n  },\n  \"question2\": {\n    \"question\": \"I'm planning a music festival with 5 stages and 5 bands. I want to create a schedule where each band plays on a different stage, and each stage has a different band playing at each time slot. However, I also want to make sure that if band A plays on stage B, then band B doesn't play on stage A. Is there a way to create a schedule that meets these requirements?\",\n    \"context\": \"Event Planning and Scheduling\"\n  },\n  \"question3\": {\n    \"question\": \"I'm a 10-year-old who loves puzzles! I have 5 friends and 5 different colored hats. I want to give each friend a hat, but I want to make sure that each friend gets a different hat, and that if my friend Emma gets the red hat, then my friend Max doesn't get the red hat. Can you help me figure out how to give out the hats so that everyone gets a different one?\",\n    \"context\": \"Puzzle Solving and Critical Thinking\"\n  },\n  \"question4\": {\n    \"question\": \"5 people, 5 tasks. Each person can do one task. How can I assign tasks so that each person does a different task, and each task is done by a different person?\",\n    \"context\": \"Task Assignment and Resource Allocation\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a researcher studying the behavior of 5 different species of birds in a forest ecosystem. I want to design an experiment where I observe each species interacting with each other, but I want to ensure that each species interacts with a different species, and that if species A interacts with species B, then species B doesn't interact with species A. Additionally, I want to make sure that each species is observed interacting with a different species at each time point. Can you help me design an experiment that meets these requirements, taking into account the constraints of the forest ecosystem and the behavior of the birds?\",\n    \"context\": \"Experimental Design and Wildlife Research\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem, but in different contexts and scenarios."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. A quasigroup is a mathematical structure that satisfies certain properties, similar to a group, but without the requirement of having an identity element or inverse elements. The problem is to find a quasigroup of a given order, which is represented by an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n\"variables\": \"quasiGroup[i, j], qgDiagonal[i], where i, j \u2208 {0, ..., n-1}. The variable quasiGroup[i, j] represents the element at row i and column j of the quasigroup multiplication table, and qgDiagonal[i] represents the diagonal element at row i.\",\n\"variables_explanation\": \"The variables represent the elements of the quasigroup multiplication table, where each element is an integer between 0 and n-1, and the diagonal elements are also stored separately.\",\n\"constraints\": \"\u2200i \u2208 {0, ..., n-1}, qgDiagonal[i] = quasiGroup[i, i]; \u2200row \u2208 {0, ..., n-1}, all_different([quasiGroup[row, col] | col \u2208 {0, ..., n-1}]); \u2200col \u2208 {0, ..., n-1}, all_different([quasiGroup[row, col] | row \u2208 {0, ..., n-1}]); \u2200i, j \u2208 {0, ..., n-1}, quasiGroup[quasiGroup[j, i], quasiGroup[i, j]] = i; all_different(qgDiagonal); \u2200i, j \u2208 {0, ..., n-1}, i \u2260 j \u2192 quasiGroup[i, j] \u2260 quasiGroup[j, i]; \u2200i, j \u2208 {0, ..., n-1}, quasiGroup[i, i] = j \u2192 quasiGroup[j, j] = i; \u2200i \u2208 {0, ..., n-1}, quasiGroup[i, n-1] + 2 \u2265 i;\",\n\"constraints_explanation\": \"The constraints ensure that the quasigroup multiplication table satisfies the required properties: the diagonal elements are correctly stored, each row and column contains each element exactly once, the multiplication axiom (j*i)*(i*j) = i holds, the diagonal elements are all different, the quasigroup is non-Abelian (i.e., the multiplication is not commutative), and the symmetry-breaking constraints are satisfied.\",\n\"objective\": \"satisfy (i.e., find a feasible solution)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup5Idempotent": {"__data__": {"id_": "quasiGroup5Idempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup5Idempotent", "model_name": "quasiGroup5Idempotent", "source_code": "% \n% Quasigroup problem in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup5Idempotent.cm\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m, \n% where each element occurrs exactly once in each row and column and certain \n% multiplication axioms hold (in this case, we want axiom 5 to hold). \n% \"\"\"\n% See \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html:\n\n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n = 7;\nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\n\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different\t       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n\t        quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\t\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a logistics manager at a large e-commerce company. I need to assign 7 warehouses to 7 delivery zones in a way that each warehouse serves each zone exactly once, and each zone is served by exactly one warehouse. Additionally, I want to ensure that the assignment is idempotent, meaning that if warehouse A serves zone B, then zone B serves warehouse A. How can I find an optimal assignment that satisfies these constraints?\",\n    \"context\": \"Logistics and Supply Chain Management\"\n  },\n  \"question2\": {\n    \"question\": \"I'm planning a music festival with 7 stages and 7 bands. I want to create a schedule where each band plays on each stage exactly once, and each stage has exactly one band playing at a time. I also want to make sure that if band A plays on stage B, then stage B has band A playing on it. Is there a way to create a schedule that meets these requirements?\",\n    \"context\": \"Event Planning\"\n  },\n  \"question3\": {\n    \"question\": \"I'm a 12-year-old who loves puzzles! I have 7 friends and 7 different games we like to play. I want to create a schedule where each friend plays each game exactly once, and each game is played by exactly one friend. Can you help me find a way to make this happen?\",\n    \"context\": \"Puzzle Solving\"\n  },\n  \"question4\": {\n    \"question\": \"I need to assign 7 tasks to 7 people in a way that each task is done by exactly one person, and each person does exactly one task. How can I do this?\",\n    \"context\": \"Task Assignment\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a researcher studying the behavior of 7 different species of birds in 7 different habitats. I want to design an experiment where each species is observed in each habitat exactly once, and each habitat has exactly one species being observed. Additionally, I want to ensure that if species A is observed in habitat B, then habitat B has species A being observed. I also need to consider the fact that some species are more aggressive than others and may not coexist peacefully. How can I design an experiment that meets these constraints and minimizes the risk of conflicts between species?\",\n    \"context\": \"Ecological Research\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem. They are designed to be practical and realistic, and to reflect different contexts and levels of expertise."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. It involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold. In this specific model, axiom 5 is required to hold.\",\n\"variables\": \"quasiGroup[row, col] for row, col in nDomain, where nDomain = 0..n-1. These variables represent the elements of the quasigroup multiplication table.\",\n\"variables_explanation\": \"The variables quasiGroup[row, col] represent the element at row and column in the quasigroup multiplication table. The table has size n x n, where n is a given integer.\",\n\"constraints\": [\n\"all_different([quasiGroup[row,col] | col in nDomain]) for row in nDomain,\",\n\"all_different([quasiGroup[row,col] | row in nDomain]) for col in nDomain,\",\n\"quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i for i, j in nDomain,\",\n\"quasiGroup[i,i] = i for i in nDomain,\",\n\"(quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i) for i, j in nDomain,\",\n\"quasiGroup[i,n-1] + 2 >= i for i in nDomain\"\n],\n\"constraints_explanation\": [\n\"All rows have to be different, i.e., each element occurs exactly once in each row.\",\n\"All columns have to be different, i.e., each element occurs exactly once in each column.\",\n\"The multiplication axiom 5 holds, i.e., ((i*j)*j)*j = a.\",\n\"The quasigroup is idempotent, i.e., i*i = i.\",\n\"The quasigroup has a certain symmetry property, i.e., i*j = i if and only if j*i = i.\",\n\"Symmetry-breaking constraints to reduce the search space.\"\n],\n\"objective\": \"The objective of this problem is to find a feasible solution, i.e., a quasigroup multiplication table that satisfies all the constraints. There is no objective function to minimize or maximize.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup5NonIdempotent": {"__data__": {"id_": "quasiGroup5NonIdempotent", "embedding": null, "metadata": {"problem_family": "quasiGroup5NonIdempotent", "model_name": "quasiGroup5NonIdempotent", "source_code": "% \n% Quasigroup problem in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup5Idempotent.cm\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m, \n% where each element occurrs exactly once in each row and column and certain \n% multiplication axioms hold (in this case, we want axiom 5 to hold). \n% \"\"\"\n% See \n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html:\n\n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n = 7;\nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\n\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different\t       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n\t        quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\t\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": {\n    \"question\": \"I'm a logistics manager at a large e-commerce company. I need to assign 7 warehouses to 7 different shipping routes, ensuring that each warehouse is assigned to a unique route and each route is assigned to a unique warehouse. Additionally, I want to ensure that the assignment satisfies certain operational constraints, such as avoiding conflicts between warehouses and routes. Can I find an optimal assignment that meets these requirements?\",\n    \"context\": \"Logistics and Supply Chain Management\"\n  },\n  \"question2\": {\n    \"question\": \"I'm planning a music festival with 7 stages and 7 bands. I want to create a schedule where each band plays on a different stage and each stage has a different band playing at the same time. I also want to make sure that certain bands don't play on the same stage, and certain stages don't have the same band playing. Is there a way to create a schedule that meets these requirements?\",\n    \"context\": \"Event Planning and Scheduling\"\n  },\n  \"question3\": {\n    \"question\": \"I'm a 10-year-old who loves puzzles! I have 7 friends and 7 different games we like to play. I want to create a schedule where each friend plays a different game and each game is played by a different friend. Can I find a way to make this schedule work?\",\n    \"context\": \"Recreational Puzzles and Games\"\n  },\n  \"question4\": {\n    \"question\": \"I need to assign 7 tasks to 7 people, ensuring each person does a unique task and each task is done by a unique person. Can I find a way to do this?\",\n    \"context\": \"Task Assignment and Resource Allocation\"\n  },\n  \"question5\": {\n    \"question\": \"I'm a researcher studying the behavior of 7 different species of birds in a forest ecosystem. I want to design an experiment where each species is paired with a unique habitat and each habitat is paired with a unique species. Additionally, I want to ensure that certain species don't co-occur in the same habitat, and certain habitats don't have the same species. I also need to consider the spatial distribution of the habitats and the species' preferences for certain environmental conditions. Can I find a way to design this experiment that meets all these requirements?\",\n    \"context\": \"Ecological Research and Experimental Design\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. It involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold. In this specific model, the axiom 5 is considered.\",\n\"variables\": \"quasiGroup[row, col] for row, col in 0..n-1, where n = 7. These variables represent the elements of the quasigroup multiplication table.\",\n\"constraints\": [\n\"all_different([quasiGroup[row,col] | col in nDomain]) for row in nDomain: Each row must contain all different elements.\",\n\"all_different([quasiGroup[row,col] | row in nDomain]) for col in nDomain: Each column must contain all different elements.\",\n\"quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i for i, j in nDomain: The multiplication axiom 5 must hold.\",\n\"(quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i) for i, j in nDomain: Implied constraint from Colton,Miguel 01.\",\n\"quasiGroup[i,n-1] + 2 >= i for i in nDomain: Symmetry-breaking constraints.\"\n],\n\"objective\": \"satisfy: The objective is to find a feasible solution that satisfies all the constraints, there is no optimization objective.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "quasiGroup7": {"__data__": {"id_": "quasiGroup7", "embedding": null, "metadata": {"problem_family": "quasiGroup7", "model_name": "quasiGroup7", "source_code": "% \n% Quasigroup problem in MiniZinc.\n% \n% This model is a translation of the EssencePrime model quasiGroup7.eprime\n% from the Minion Translator examples. \n% \"\"\"\n% The quasiGroup existence problem (CSP lib problem 3)\n%\n% An m order quasigroup  is an mxm multiplication table of integers 1..m, \n% where each element occurrs exactly once in each row and column and certain \n% multiplication axioms hold (in this case, we want axiom 7 to hold). \n% \"\"\"\n\n% See\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/index.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob003/spec.html\n% Axiom 7:\n% \"\"\"\n% QG7.m problems are order m quasigroups for which (b*a)*b = a*(b*a).\n% \"\"\"\n% \n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\nint: n; \nset of int: nDomain = 0..n-1;\n\narray[nDomain, nDomain] of var nDomain: quasiGroup;\n\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], \n        first_fail, indomain_min, complete) satisfy;\n% solve satisfy;\n\nconstraint\n     \n     % assign the \"reflected\" quasigroup to qGColumns to access its columns\n     %  forall row,col : nDomain .\n     %    quasiGroupColumns[col,row] = quasiGroup[row,col],\n\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % all values in the diagonals\n     forall( i in nDomain ) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n\n     % All columns have to be different\t       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row, col] | row in nDomain])\n     )\n     /\\\n\n     % this strange constraint\n     % corresponds to:\n     % quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i], j]\t\n     forall(i,j in nDomain) (\n              quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i],j]\n     )\n     /\\\n     % some implied? constraint\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n\noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\n%\n% data\n%\nn = 5;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Existence Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager at a large e-commerce company. I need to design a system to assign 5 warehouses to 5 different shipping zones, ensuring that each warehouse serves each zone exactly once and each zone is served by each warehouse exactly once. Additionally, I want to ensure that the assignment satisfies certain operational constraints, such as minimizing transportation costs and meeting delivery deadlines. Can you help me find an optimal assignment that meets these requirements?\",\n    \"goal\": \"Find an optimal warehouse-zone assignment that minimizes transportation costs and meets delivery deadlines.\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 5 stages and 5 bands. I want to create a schedule where each band plays on each stage exactly once, and each stage has a different band playing at each time slot. I also want to make sure that the schedule is fair and doesn't favor any particular band or stage. Can you help me create a schedule that works for everyone?\",\n    \"goal\": \"Create a fair and balanced schedule for the music festival.\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a 10-year-old who loves puzzles! I have 5 friends and 5 different games we like to play together. I want to create a schedule where each friend plays each game exactly once, and each game is played by each friend exactly once. Can you help me figure out a schedule that makes everyone happy?\",\n    \"goal\": \"Create a fun and fair schedule for playing games with friends.\"\n  },\n  \"question4\": {\n    \"description\": \"I need to assign 5 tasks to 5 people, ensuring each task is done by each person exactly once and each person does each task exactly once. Can you help me find a way to do this?\",\n    \"goal\": \"Find an assignment of tasks to people that meets the constraints.\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a chef at a busy restaurant with 5 kitchen stations and 5 different dishes to prepare. I need to create a schedule where each station prepares each dish exactly once, and each dish is prepared by each station exactly once. Additionally, I want to ensure that the schedule takes into account the cooking time and skill level required for each dish, as well as the availability of ingredients and equipment. Can you help me create a schedule that meets these complex constraints and ensures a smooth kitchen operation?\",\n    \"goal\": \"Create an efficient and effective kitchen schedule that meets the complex constraints.\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Quasigroup Existence Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Quasigroup Existence Problem\",\n\"description\": \"The Quasigroup Existence Problem is a classic problem in constraint programming. It involves finding an m x m multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold. In this specific problem, we want axiom 7 to hold, which states that (b*a)*b = a*(b*a).\",\n\"variables\": \"quasiGroup[row, col] for row, col in 0..n-1. These are the decision variables representing the elements of the quasigroup multiplication table.\",\n\"constraints\": [\n\"all_different([quasiGroup[row,col] | col in nDomain]) for row in nDomain: Each row must contain all different elements.\",\n\"quasiGroup[i,i] = i for i in nDomain: The diagonal elements must be equal to their indices.\",\n\"all_different([quasiGroup[row, col] | row in nDomain]) for col in nDomain: Each column must contain all different elements.\",\n\"quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i],j] for i, j in nDomain: Axiom 7 of the quasigroup, which states that (b*a)*b = a*(b*a).\",\n\"quasiGroup[i,n-1] + 2 >= i for i in nDomain: An implied constraint to help the solver.\"\n],\n\"objective\": \"Satisfy: The objective is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific value.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "QuasigroupCompletion": {"__data__": {"id_": "QuasigroupCompletion", "embedding": null, "metadata": {"problem_family": "QuasigroupCompletion", "model_name": "QuasigroupCompletion", "source_code": "% Quasigroup with Holes (aka Latin Square Completion)\n\ninclude \"alldifferent.mzn\";\n\nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n\narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N] of var PuzzleRange: puzzle;\n\n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j] = start[i,j] else true endif );\n\n% All different in rows\nconstraint forall (i in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | j in PuzzleRange ] ) );\n\n% All different in columns.\nconstraint forall (j in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | i in PuzzleRange ] ) );\n\nsolve satisfy;\n\noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Latin Square Completion problem:\n\n```\n{\n  \"question1\": \"I'm a conference organizer and I need to schedule 5 parallel sessions with 5 speakers each. Each speaker can only present once, and each session should have a diverse set of speakers. I have some speakers already assigned to specific sessions, but I need to fill in the remaining slots. How can I create a schedule that meets these constraints and ensures a smooth conference experience?\",\n  \"question2\": \"I'm planning a dinner party for 8 friends and I want to seat them at a square table with 8 chairs. I have some friends who don't get along, so I need to make sure they're not sitting next to each other. I also want to make sure each friend is sitting next to someone they've never met before. Can you help me figure out a seating arrangement that works?\",\n  \"question3\": \"I'm a 10-year-old and I love playing with my 5 best friends at recess. We want to play a game where we take turns doing different activities, like soccer, tag, and jump rope. We need to make sure each of us does each activity only once, and we don't want to do the same activity twice in a row. Can you help us create a schedule for our game?\",\n  \"question4\": \"I have 4 teams of 4 people each, and I need to assign them to 4 different projects. Each team member should work on a different project, and each project should have a different team member. How can I make this assignment?\",\n  \"question5\": \"I'm a manager at a large retail store with 12 departments, each with 12 employees. I need to create a schedule for employee training sessions, where each employee attends one session per month, and each session has 12 employees from different departments. I have some employees who are already assigned to specific sessions, but I need to fill in the remaining slots. Additionally, I want to ensure that each department has an equal number of employees attending each session, and that no employee attends the same session twice in a row. Can you help me create a schedule that meets these constraints and ensures our employees receive the training they need?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Latin Square Completion problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Latin Square Completion\",\n\"description\": \"The Latin Square Completion problem, also known as Quasigroup with Holes, is a classic problem in constraint programming. It involves completing a partially filled N x N grid with numbers from 1 to N, such that each row and each column contains each number exactly once.\",\n\"variables\": \"puzzle[i, j] for i, j in PuzzleRange, where PuzzleRange = 1..N. These are the decision variables representing the values to be assigned to each cell in the grid.\",\n\"constraints\": \"1. forall(i, j in PuzzleRange), if start[i, j] > 0 then puzzle[i, j] = start[i, j] else true endif (fill initial board with given values), \n2. forall(i in PuzzleRange), alldifferent([puzzle[i, j] | j in PuzzleRange]) (all different in rows), \n3. forall(j in PuzzleRange), alldifferent([puzzle[i, j] | i in PuzzleRange]) (all different in columns).\",\n\"objective\": \"satisfy (find a feasible solution)\"\n}\n\nNote: The objective of this problem is to find a feasible solution, i.e., a completion of the Latin Square that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "QuasiGroupCompletionOccurrence": {"__data__": {"id_": "QuasiGroupCompletionOccurrence", "embedding": null, "metadata": {"problem_family": "QuasiGroupCompletionOccurrence", "model_name": "QuasiGroupCompletionOccurrence", "source_code": "% Quasigroup with Holes (aka Latin Square Completion)\n \nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n \narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N, 1..N] of var 0..1: puzzle;\n \n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j, start[i,j]] = 1 else true endif );\n \n% All different in rows\nconstraint forall (i,k in PuzzleRange) (\n        sum(j in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% All different in columns\nconstraint forall (j,k in PuzzleRange) (\n        sum(i in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% Each cell must have a number assigned\nconstraint forall (i,j in PuzzleRange) (\n        sum(k in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\nsolve satisfy;\n \noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Latin Square Completion problem:\n\n```\n{\n  \"question1\": \"I'm a tournament organizer for a chess club with 8 players. I want to schedule a round-robin tournament where each player plays every other player exactly once. However, some players have already played each other in previous tournaments, and I want to avoid repeating those matches. I have a table showing which players have already played each other. How can I create a schedule that ensures each player plays every other player exactly once, while avoiding repeat matches?\",\n  \n  \"question2\": \"I'm planning a dinner party for 9 friends, and I want to seat them at a square table with 9 chairs on each side. I have some friends who don't get along, so I want to make sure they're not sitting next to each other. I also want to make sure each friend sits next to someone they've never met before. How can I arrange the seating so that everyone has a new conversation partner and no one is sitting next to someone they dislike?\",\n  \n  \"question3\": \"I'm a 12-year-old who loves playing with my friends at recess. We have a game where we take turns playing different roles, like 'tagger' or 'runner'. I want to create a schedule so that each of my 7 friends plays each role exactly once, and no one plays the same role twice in a row. How can I make a schedule that's fair and fun for everyone?\",\n  \n  \"question4\": \"I need to assign 5 tasks to 5 team members, making sure each task is done by someone with the right skills. How can I ensure each task is assigned to only one person, and each person is assigned only one task?\",\n  \n  \"question5\": \"I'm a manager at a call center with 12 agents, and I need to create a schedule for the next 12 hours. Each agent has a specific skill set and can only handle certain types of calls. I have 12 different call types, and I want to ensure that each call type is handled by exactly one agent per hour. Additionally, I want to make sure that each agent handles a different call type each hour, and no agent handles the same call type twice in a row. I also need to consider that some agents are only available for certain hours, and some call types require specific language skills. How can I create a schedule that meets all these constraints and ensures that our call center runs smoothly?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Latin Square Completion problem. They are designed to be practical and relatable, while also highlighting the problem's key features, such as assigning unique values to each cell in a matrix, ensuring each row, column, and cell has a unique value, and satisfying specific constraints."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Latin Square Completion\",\n\"description\": \"The Latin Square Completion problem, also known as Quasigroup with Holes, is a classic problem in constraint programming. It involves completing a partially filled Latin square, which is an N x N matrix where each row, column, and cell contains each number from 1 to N exactly once. The problem is to fill in the missing values in the matrix such that the resulting matrix is a valid Latin square.\",\n\"variables\": \"puzzle[i, j, k], where i, j \u2208 {1, ..., N}, k \u2208 {1, ..., N}. These variables represent the assignment of a number k to the cell at row i and column j in the Latin square.\",\n\"constraints\": [\n  \"\u2200i, j \u2208 {1, ..., N}: if start[i, j] > 0 then puzzle[i, j, start[i, j]] = 1 else true endif. (Fill in the initial board with given values)\",\n  \"\u2200i, k \u2208 {1, ..., N}: \u2211j \u2208 {1, ..., N} puzzle[i, j, k] = 1. (All different in rows)\",\n  \"\u2200j, k \u2208 {1, ..., N}: \u2211i \u2208 {1, ..., N} puzzle[i, j, k] = 1. (All different in columns)\",\n  \"\u2200i, j \u2208 {1, ..., N}: \u2211k \u2208 {1, ..., N} puzzle[i, j, k] = 1. (Each cell must have a number assigned)\"\n],\n\"objective\": \"Satisfy all constraints (i.e., find a feasible solution)\"\n}\n\nNote that the objective of this problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "queens3": {"__data__": {"id_": "queens3", "embedding": null, "metadata": {"problem_family": "queens3", "model_name": "queens3", "source_code": "% \n% n queens problem in MiniZinc.\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n;\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail, \n        indomain_min, \n        complete) \n    satisfy;\n\n% solve satisfy;\n\nconstraint all_different(queens);\n\nconstraint\n    forall(i, j in 1..n where i < j) (\n         queens[i] != queens[j] /\\\n         queens[i] + i != queens[j] + j /\\\n         queens[i] - i != queens[j] - j\n    ) \n ;\n\noutput [\n  show(queens) ++ \"\\n\"\n\n];\n\n% data\nn = 8;\n\n\n\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the N-Queens Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager at a warehouse with 8 loading docks. I need to assign 8 trucks to these docks in a way that no two trucks are parked in the same row or diagonal, to ensure safe and efficient loading and unloading of cargo. How can I allocate the trucks to minimize congestion and maximize productivity?\",\n    \"context\": \"Warehouse logistics\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a birthday party for my 8-year-old daughter and I want to seat her friends at 8 tables. I want to make sure that each table has only one kid and that no two kids are sitting in the same row or diagonal, so they can all have fun and not feel left out. Can you help me figure out how to seat them?\",\n    \"context\": \"Party planning\"\n  },\n  \"question3\": {\n    \"description\": \"I'm designing a new theme park with 8 roller coasters. I want to place them in a way that no two coasters are in the same row or diagonal, so visitors can enjoy the rides without feeling overwhelmed. How can I arrange the coasters to create the best experience for my visitors?\",\n    \"context\": \"Theme park design\"\n  },\n  \"question4\": {\n    \"description\": \"I have 8 people attending a dinner party and I want to seat them at a table with 8 chairs. How can I arrange them so that no two people are sitting next to each other or in the same diagonal?\",\n    \"context\": \"Dinner party planning\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a urban planner designing a new city with 8 main streets. I want to place 8 fire stations along these streets in a way that no two stations are in the same row or diagonal, to ensure that the entire city is covered in case of an emergency. Additionally, I want to prioritize the stations to be close to the city center and major landmarks. How can I allocate the fire stations to achieve this goal?\",\n    \"context\": \"Urban planning\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the N-Queens Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the required format:\n\n{\n\"name\": \"N-Queens Problem\",\n\"description\": \"The N-Queens Problem is a classic problem in constraint programming where the goal is to place N queens on an NxN chessboard such that no queen attacks another queen. A queen attacks another queen if they are in the same row, column, or diagonal.\",\n\"variables\": \"queens = [x1, x2, ..., xn], where xi \u2208 {1, 2, ..., n} for i = 1, 2, ..., n. These variables represent the positions of the queens on the chessboard, where xi is the column number of the queen in row i.\",\n\"constraints\": \"all_different(queens), \u2200i, j \u2208 {1, 2, ..., n} where i < j: (xi \u2260 xj) \u2227 (xi + i \u2260 xj + j) \u2227 (xi - i \u2260 xj - j). The first constraint ensures that all queens are in different columns. The second constraint ensures that no two queens are in the same diagonal.\",\n\"objective\": \"The objective of the problem is to find a feasible solution, i.e., to satisfy all the constraints. There is no objective function to minimize or maximize.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "queens5": {"__data__": {"id_": "queens5", "embedding": null, "metadata": {"problem_family": "queens5", "model_name": "queens5", "source_code": "% \n% n queens problem in MiniZinc.\n% \n% Using alldifferent. \n%\n \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n%\ninclude \"globals.mzn\";\n\nint: n;\n\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail,\n        indomain_median,\n        complete\n       )\n     satisfy;\n\n% solve satisfy;\nconstraint all_different(queens); %  :: domain;\nconstraint all_different([queens[i]+i | i in 1..n]) :: domain;\nconstraint all_different([queens[i]-i | i in 1..n]) :: domain;\n\noutput \n[\n  \"queens: \" ++ show(queens)\n] ++ \n% [\n%   if j = 1 then \"\\n\" else \"\" endif ++\n%      if fix(queens[i]) = j then          \n%         show_int(2,j)\n%      else\n%         \"__\"\n%      endif\n%   | i in 1..n, j in 1..n\n% ] ++\n[\"\\n\"]\n;\n\n% data\nn = 8;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the N-Queens Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 8 loading docks. I need to assign 8 trucks to these docks in a way that no two trucks are parked in the same row or diagonal, to ensure safe and efficient loading and unloading of cargo. How can I allocate the trucks to minimize congestion and maximize productivity?\",\n  \"question2\": \"I'm planning a birthday party for my 8-year-old daughter and I want to set up 8 tables with 8 chairs each. I need to seat the kids in a way that no two kids are sitting in the same row or diagonal, so they can all see the birthday cake and have fun. Can you help me figure out the best seating arrangement?\",\n  \"question3\": \"I'm a 12-year-old who loves playing with my 8 pet hamsters. I want to build a hamster agility course with 8 tubes and 8 tunnels. I need to place the tubes and tunnels in a way that no two hamsters can run into each other or get stuck in the same tunnel. Can you help me design the best course for my hamsters?\",\n  \"question4\": \"I have 8 friends coming over for dinner and I need to set the table with 8 chairs. How can I seat them so no two friends are sitting next to each other or across from each other?\",\n  \"question5\": \"I'm the event coordinator for a large conference with 8 parallel sessions and 8 speakers per session. I need to assign the speakers to the sessions in a way that no two speakers from the same company or with the same expertise are presenting in the same session or adjacent sessions, to ensure a diverse and engaging program. Additionally, I need to consider the speakers' preferences for morning or afternoon sessions, and the availability of the conference rooms. Can you help me create a schedule that meets all these constraints and ensures a successful conference?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the N-Queens Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n{\n\"name\": \"N-Queens Problem\",\n\"description\": \"The N-Queens Problem is a classic problem in constraint programming where we need to place N queens on an NxN chessboard such that no queen attacks another queen. A queen attacks another queen if they are in the same row, column, or diagonal.\",\n\"variables\": \"queens = [x1, x2, ..., xn], where xi \u2208 {1, 2, ..., n} for i = 1, 2, ..., n. These variables represent the positions of the queens on the chessboard, where xi is the column number of the queen in the ith row.\",\n\"constraints\": \"all_different(queens), all_different([xi + i | i in 1..n]), all_different([xi - i | i in 1..n]). The first constraint ensures that no two queens are in the same column. The second and third constraints ensure that no two queens are in the same diagonal.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The objective of the N-Queens Problem is to find a feasible solution, i.e., a configuration of queens that satisfies all the constraints, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "rehearsal": {"__data__": {"id_": "rehearsal", "embedding": null, "metadata": {"problem_family": "rehearsal", "model_name": "rehearsal", "source_code": "% \n% Scheduling a Rehearsal in MiniZinc.\n% \n% From Barbara M. Smith: \n% \"Constraint Programming in Practice: Scheduling a Rehearsal\"\n% http://www.dcs.st-and.ac.uk/~apes/reports/apes-67-2003.pdf\n% \"\"\"\n% A concert is to consist of nine pieces of music of different durations \n% each involving a different combination of the five members of the orchestra. \n% Players can arrive at rehearsals immediately before the first piece in which \n% they are involved and depart immediately after the last piece in which \n% they are involved. The problem is to devise an order in which the pieces \n% can be rehearsed so as to minimize the total time that players are waiting \n% to play, i.e. the total time when players are present but not currently \n% playing. In the table below, 1 means that the player is required for \n% the corresponding piece, 0 otherwise. The duration (i.e. rehearsal time) \n% is in some unspecified time units.\n%\n%    Piece       1    2   3    4    5  6    7   8    9\n%    Player 1    1    1   0    1    0  1    1   0    1\n%    Player 2    1    1   0    1    1  1    0   1    0\n%    Player 3    1    1   0    0    0  0    1   1    0\n%    Player 4    1    0   0    0    1  1    0   0    1\n%    Player 5    0    0   1    0    1  1    1   1    0\n%    Duration    2    4   1    3    3  2    5   7    6\n%\n% For example, if the nine pieces were rehearsed in numerical order as \n% given above, then the total waiting time would be:\n%       Player 1: 1+3+7=11\n%       Player 2: 1+5=6\n%       Player 3: 1+3+3+2=9\n%       Player 4: 4+1+3+5+7=20\n%       Player 5: 3\n% giving a total of 49 units. The optimal sequence, as we shall see, \n% is much better than this.\n%\n% ...\n% \n% The minimum waiting time for the rehearsal problem is 17 time units, and \n% an optimal sequence is 3, 8, 2, 7, 1, 6, 5, 4, 9.\n%\n% \"\"\"\n\n%\n% The data above is in \n%   http://www.hakank.org/minizinc/rehearsal_smith.dzn\n%\n\n% Here are all optimal sequences for Barbara M. Smith's problem\n% (total_waiting_time: 17)\n% \n% order: [9, 4, 6, 5, 1, 7, 2, 8, 3]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [9, 4, 6, 5, 1, 2, 7, 8, 3]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [9, 4, 5, 6, 1, 7, 2, 8, 3]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [9, 4, 5, 6, 1, 2, 7, 8, 3]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [3, 8, 7, 2, 1, 6, 5, 4, 9]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [3, 8, 7, 2, 1, 5, 6, 4, 9]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [3, 8, 2, 7, 1, 6, 5, 4, 9]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n% order: [3, 8, 2, 7, 1, 5, 6, 4, 9]\n% waiting_time: [3, 5, 0, 3, 6]\n% total_waiting_time: 17\n% ----------\n%\n% Note that all waiting times are the same for \n% all sequences, i.e. player 1 always wait 3 units, etc.\n%\n% With symmetry breaking rule that order[1] < order[num_pieces] \n% there are 4 solutions where piece 2 and 7 can change place and \n% 5 and 6 can change place.\n% \n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\"; \n\n\nint: num_pieces;\nint: num_players;\narray[1..num_pieces] of int: duration;\narray[1..num_players, 1..num_pieces] of 0..1: rehearsal;\n\n\n%\n% Decision variables\n%\narray[1..num_pieces] of var 1..num_pieces: rehearsal_order;\narray[1..num_players] of var 0..sum(duration): waiting_time; % waiting time for players\narray[1..num_players] of var 1..num_pieces: p_from; % first rehearsal\narray[1..num_players] of var 1..num_pieces: p_to;   % last rehearsal\nvar 0..sum(duration): total_waiting_time = sum(waiting_time); % objective\n\nsolve :: int_search(\n         rehearsal_order % ++ waiting_time% ++ p_from ++ p_to ++ [total_waiting_time]\n         , \n         first_fail, % occurrence, % max_regret, % first_fail, \n         indomain_max, % indomain_max, \n         complete) \n     minimize total_waiting_time;\n     % satisfy;\n\n% solve :: labelling_ff minimize total_waiting_time;\n\nconstraint\n  all_different(rehearsal_order) :: domain\n  /\\\n\n  % This solution is my own without glancing at Smith's models...\n  forall(p in 1..num_players) (\n     % This versions is much faster than using exists (see below)\n     % fix the range from..to, i.e. don't count all that start with 0 \n     % or ends with 0.\n     % This means that we collect the rehearsals with many 0 at the ends\n     %\n     p_from[p] < p_to[p]\n     /\\\n     % skipping rehearsal at start (don't come yet)\n     forall(i in 1..num_pieces) (\n        i < p_from[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\\n     % skipping rehearsal at end (go home after last rehearsal)\n     forall(i in 1..num_pieces) (\n        i > p_to[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\ % and now: count the waiting time for from..to\n     waiting_time[p] = \n         sum(i in 1..num_pieces) (\n              duration[rehearsal_order[i]] * bool2int(\n                                             i >= p_from[p] /\\ i <= p_to[p] \n                                             /\\\n                                             rehearsal[p,rehearsal_order[i]] = 0\n                                )\n     ) \n\n%      % alternative solution with exists. \n%      %  More elegant (= declarative) in my book but slower.\n%      exists(from, to in 1..num_pieces) ( \n%         % skipping rehearsal at start (don't come yet)\n%         forall(i in 1..from-1) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\\n%         % skipping rehearsal at end (go home after last rehearsal)\n%         forall(i in to+1..num_pieces) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\ % and now: count the waiting time for from..to\n%         waiting_time[p] = \n%             sum(i in from..to) (\n%                  duration[rehearsal_order[i]]*\n%                                  bool2int(\n%                                       rehearsal[p,rehearsal_order[i]] = 0\n%                                   )\n%          ) \n%      )\n\n\n  )\n\n  /\\ % symmetry breaking\n  rehearsal_order[1] < rehearsal_order[num_pieces]\n\n  % for all solutions\n  % /\\ total_waiting_time = 17\n;\n\n\n%\n% data\n%\n%\n% This is the problem from Barbara M. Smith's Rehearsal paper cited above:\n% (see rehearsal_smith.dta)\n% num_pieces = 9;\n% num_players = 5;\n% duration = [2, 4, 1, 3, 3, 2, 5, 7, 6];\n% rehearsal = array2d(1..num_players, 1..num_pieces, \n%     [\n%      1,1,0,1,0,1,1,0,1,\n%      1,1,0,1,1,1,0,1,0,\n%      1,1,0,0,0,0,1,1,0,\n%      1,0,0,0,1,1,0,0,1,\n%      0,0,1,0,1,1,1,1,0\n%   ]);\n\n%\n% This is the problem from the Choco v 2.1 example \n% sample.scheduling.Rehearsal, the one defined in main() .\n% (see rehearsal_choco.dta)\n% num_pieces = 5;\n% num_players = 3;\n% duration = [4,6,3,5,7];\n% rehearsal =  array2d(1..num_players, 1..num_pieces, \n%         [\n%         1,1,0,1,0,\n%         0,1,1,0,1,\n%         1,1,0,1,1   \n%   ]);\n\n\noutput[\n  \"order: \" , show(rehearsal_order), \"\\n\",\n  \"waiting_time: \", show(waiting_time), \"\\n\",\n  \"total_waiting_time: \" , show(total_waiting_time), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(rehearsal[p, rehearsal_order[j]]) ++ \" \"\n  | p in 1..num_players, j in 1..num_pieces, \n] ++ \n[\"\\n\"]\n;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large warehouse, and I need to schedule a series of product demos for our sales team. We have 9 products to demo, each with a different duration, and 5 sales representatives with varying availability. How can I minimize the total time our reps spend waiting for their next demo, while ensuring each product is demoed exactly once and each rep arrives and departs at the correct times?\",\n  \"question2\": \"I'm planning a birthday party for my 5-year-old and I want to make sure all the kids have a blast. I have 9 fun activities planned, but each one takes a different amount of time and requires a different number of adults to supervise. How can I schedule the activities so that the kids have the most fun and the adults aren't stuck waiting around for too long?\",\n  \"question3\": \"I'm a high school student and I need to plan a school event with 9 performances, each with a different duration. We have 5 teachers who will be supervising the event, but they all have different availability. How can I schedule the performances so that the teachers aren't stuck waiting around for too long and the event runs smoothly?\",\n  \"question4\": \"I have 9 tasks to complete and 5 team members to help me. Each task takes a different amount of time and requires a different number of team members. How can I schedule the tasks to minimize downtime for my team?\",\n  \"question5\": \"I'm the manager of a large call center and I need to schedule a series of training sessions for our 5 teams of customer service representatives. We have 9 modules to cover, each with a different duration, and each team has varying availability. The teams will be arriving and departing at different times, and I need to ensure that each module is covered exactly once and each team has minimal downtime. Additionally, I need to prioritize the modules based on their importance and schedule them accordingly. How can I optimize the training schedule to minimize downtime and ensure our teams are adequately trained?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Rehearsal Scheduling\",\n  \"description\": \"This problem involves scheduling a rehearsal for a concert with 9 pieces of music and 5 players. Each piece has a different duration and requires a different combination of players. The goal is to find an order for rehearsing the pieces that minimizes the total time that players are waiting to play.\",\n  \"variables\": \"rehearsal_order: array[1..num_pieces] of var 1..num_pieces, waiting_time: array[1..num_players] of var 0..sum(duration), p_from: array[1..num_players] of var 1..num_pieces, p_to: array[1..num_players] of var 1..num_pieces, total_waiting_time: var 0..sum(duration). These variables represent the order in which the pieces are rehearsed, the waiting time for each player, the first and last piece each player is involved in, and the total waiting time for all players.\",\n  \"constraints\": \"all_different(rehearsal_order), p_from[p] < p_to[p], skipping rehearsal at start and end for each player, counting waiting time for each player, symmetry breaking constraint. These constraints ensure that each piece is rehearsed exactly once, each player arrives and departs at the correct times, and the waiting time is correctly calculated.\",\n  \"objective\": \"minimize total_waiting_time\"\n}\n```\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "RosteringProblem": {"__data__": {"id_": "RosteringProblem", "embedding": null, "metadata": {"problem_family": "RosteringProblem", "model_name": "RosteringProblem", "source_code": "include \"all_equal.mzn\";\ninclude \"global_cardinality.mzn\";\n\n% load parameters\ninclude \"parameters.dzn\";\n\nint: daysPerWeek = 7;\n\n% the number of weeks\nint: numberOfWeeks;\n\nint: numberOfDays = numberOfWeeks * daysPerWeek;\n\n% the minimum number of days in a row with the same shift\nint: s_min;\n\n% the maximum number of days in a row with the same shift\nint: s_max; \n\n% 3 shifts: early = 1, late = 2 and night shift = 3 + day off (rest day) = 0\nint: numberOfShifts = 3;\n\n% the shift requirement matrix, including at M_{i,j} the needed employees for day i and shift j\narray[1..daysPerWeek, 1..numberOfShifts+1] of int: shiftRequirements;\n\n\n% the variables X \narray[1..numberOfWeeks * daysPerWeek] of var 0..numberOfShifts: plan1d;\narray[1..numberOfWeeks,1..daysPerWeek] of var 0..numberOfShifts: plan2d;\narray[1..daysPerWeek,1..numberOfWeeks] of var 0..numberOfShifts: plan2dT;\n\n% helper arrays\narray[1..s_min,1..s_min] of var 0..numberOfShifts: s_min_arrays;\narray[1..s_max,1..s_max] of var 0..numberOfShifts: s_max_arrays;\n\n% convert the 2D plan into 1D\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan1d[(week-1) * daysPerWeek + day]\n           );  \n\n% transpose the 2D plan\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan2dT[day, week]\n           );\n\n% C_equalDays: constrains that weekend days (Saturday and Sunday) always have the same shift\nconstraint forall(week in 1..numberOfWeeks) (\n               plan2d[week, daysPerWeek - 1] == plan2d[week, daysPerWeek]\n           );                        \n\n                                                                                                                                \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_min, j in 1..s_min) (\n                 s_min_arrays[i, j] == plan1d[((numberOfDays - s_min - 1 + i + j) mod numberOfDays) + 1]\n           );                                            \n                                            \n% C_shiftRepetitions:for every shift type a minimum number of consecutive assignments to this shift is given\nconstraint forall(day in 1..numberOfDays - s_min) (\n               plan1d[day] != plan1d[day+1] -> all_equal(plan1d[day+1..day+s_min])\n           );     \n% the constraints over the array bounds           \nconstraint forall(d in 1..s_min) (\n               plan1d[d + numberOfDays - s_min] != plan1d[((d + numberOfDays - s_min) mod numberOfDays) +1] -> all_equal(s_min_arrays[d,1..s_min])\n           );                     \n\n           \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_max, j in 1..s_max) (\n                 s_max_arrays[i, j] == plan1d[((numberOfDays - s_max - 2 + i + j) mod numberOfDays) + 1]\n           );                      \n                                            \n% C_shiftRepetitions:for every shift type a maximum number of consecutive assignments to this shift is given           \nconstraint forall(day in 1..numberOfWeeks * daysPerWeek - s_max) (\n               (all_equal(plan1d[day..day+s_max])) -> (plan1d[day] != plan1d[day + s_max])\n           );               \n% the constraints over the array bounds             \nconstraint forall(d in 1..s_max) (\n               (all_equal(s_max_arrays[d, 1..s_max])) -> (plan1d[d + numberOfDays - s_max] != plan1d[d])\n           );                     \n\n                               \n                                                                                                   \n% C_restDays: at least 2 days must be rest days every 2 weeks.\nconstraint forall(day in 1..(numberOfWeeks - 2) * daysPerWeek) (\n               count(j in plan1d[day..day + daysPerWeek * 2])(j=0) >= 2                   \n           );            \nconstraint forall(i in 1..2 * daysPerWeek-1) (\n               count(j in plan1d[numberOfWeeks * daysPerWeek-i .. numberOfWeeks * daysPerWeek] ++ plan1d[1..2*daysPerWeek-i])(j=0) >= 2    \n           );         \n                                            \n% C_shiftOrder: restricts the order of shifts. There is a forward rotating principle. This means, that after an early shift there can only follow a shift with the same or a higher value, or a rest shift.\nconstraint forall(day in 2..numberOfWeeks * daysPerWeek - 1) (\n               plan1d[day] <= plan1d[day + 1] \\/ plan1d[day+1] == 0\n           );         \nconstraint plan1d[1] >= plan1d[numberOfDays] \\/ plan1d[1] == 0;\n                      \n% C_shiftRequirements: for every weekday for each shift the number of required staff is provided (e.g. usually less staff is required on the weekend) \nconstraint forall(day in 1..daysPerWeek) (\n              (global_cardinality(row(plan2dT,day),[0,1,2,3],row(shiftRequirements,day)))   \n           );    \n           \n% solve the problem           \nsolve :: int_search(plan1d, input_order, indomain_min, complete)\n      satisfy;           \n      \n% print the problem      \noutput [ show(row(plan2d,j)) ++ \"\\n\" | j in 1..numberOfWeeks ] ++ [\"\\n\"];      ", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to create a schedule for our warehouse staff. We have 3 shifts per day (morning, afternoon, and night) and 7 days a week. Each shift requires a different number of staff, and we need to ensure that each staff member works a minimum of 3 consecutive days and a maximum of 5 consecutive days. Additionally, we need to ensure that each staff member gets at least 2 rest days every 2 weeks. How can I create a schedule that meets these requirements and ensures that we have the right number of staff on each shift?\",\n  \"question2\": \"I'm a camp director, and I need to create a schedule for our counselors. We have 3 types of activities (arts, sports, and outdoor adventures) and 7 days a week. Each activity requires a different number of counselors, and we need to make sure that each counselor gets a break from their usual activity every few days. We also need to make sure that each counselor gets at least 2 days off every 2 weeks. Can you help me create a schedule that makes sure we have enough counselors for each activity and gives them the breaks they need?\",\n  \"question3\": \"I'm a teacher, and I need to create a schedule for our school's after-school program. We have 3 types of activities (homework help, sports, and arts) and 5 days a week. Each activity requires a different number of teachers, and we need to make sure that each teacher gets a break from their usual activity every few days. We also need to make sure that each teacher gets at least 1 day off every week. Can you help me create a schedule that makes sure we have enough teachers for each activity and gives them the breaks they need?\",\n  \"question4\": \"I need to schedule 10 employees across 3 shifts (morning, afternoon, night) for 7 days a week. Each shift requires a different number of employees, and I need to ensure that each employee works a minimum of 3 consecutive days and a maximum of 5 consecutive days. How can I create a schedule that meets these requirements?\",\n  \"question5\": \"I'm the manager of a large hotel, and I need to create a schedule for our housekeeping staff. We have 3 types of shifts (morning, afternoon, evening) and 7 days a week. Each shift requires a different number of staff, and we need to ensure that each staff member works a minimum of 4 consecutive days and a maximum of 6 consecutive days. Additionally, we need to ensure that each staff member gets at least 2 rest days every 2 weeks. We also need to take into account the following constraints: Monday and Tuesday are our busiest days, so we need at least 15 staff members on those days; Wednesday and Thursday are our slowest days, so we can have a minimum of 10 staff members on those days; and Friday, Saturday, and Sunday are our peak days, so we need at least 12 staff members on those days. Can you help me create a schedule that meets these requirements and ensures that we have the right number of staff on each shift?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are written in a way that is easy to understand for users with varying levels of expertise in constraint problem solving."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Nurse Rostering Problem\",\n\"description\": \"This problem involves creating a schedule for nurses to work in a hospital. The schedule must satisfy certain constraints such as ensuring that each nurse works a minimum and maximum number of consecutive days, has at least two rest days every two weeks, and follows a specific order of shifts. The problem also takes into account the number of nurses required for each shift and day of the week.\",\n\"variables\": \"plan1d, plan2d, plan2dT, s_min_arrays, s_max_arrays. \nplan1d, plan2d, and plan2dT are arrays of decision variables representing the shift assignments for each day and week. s_min_arrays and s_max_arrays are helper arrays used to model the minimum and maximum consecutive days constraints.\",\n\"constraints\": \"C_equalDays, C_shiftRepetitions, C_restDays, C_shiftOrder, C_shiftRequirements. \nC_equalDays ensures that weekend days have the same shift. \nC_shiftRepetitions ensures that each nurse works a minimum and maximum number of consecutive days. \nC_restDays ensures that each nurse has at least two rest days every two weeks. \nC_shiftOrder ensures that the shifts follow a specific order (early, late, night, rest). \nC_shiftRequirements ensures that the number of nurses required for each shift and day is satisfied.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The objective of this problem is to find a feasible solution that satisfies all the constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "sb": {"__data__": {"id_": "sb", "embedding": null, "metadata": {"problem_family": "sb", "model_name": "sb", "source_code": "% new zinc file SolitaireBattleships.mzn\n% At attempt to build a solution entirely within the IDE\n% By Peter Stuckey August 2009\n% Solitaire Battleships is a puzzle where\n% we are given a partially filled in board and the number\n% of ships in each row and column and have to fill it with ships\n\n% \"Improved\" version does not introduce reified set_in\n\nint: width;   % height of board (usually 10)\nint: height;  % width of board (usually 10)\nint: maxship; % maximal length of ship (usually 4)\n\n\nset of int: ROWS = 1..width;\nset of int: COLS = 1..height;\nset of int: XROWS = 0..width+1;    % extended rows\nset of int: XCOLS = 0..height+1;   % extended cols\n\n%% ship types enumerated type\nset of int: SHIPS = 1..maxship;  % different ship types\nint: submarine = 1;\nint: destroyer = 2;\nint: cruiser = 3;\nint: battleship = 4;\n\n\n%% the PIECES enumerated type!\nset of int: PIECES = 1..7;\nint: w = 1; % water\nint: c = 2; % circle (submarine)\nint: l = 3; % left end of ship\nint: r = 4; % right end of ship\nint: t = 5; % top of ship\nint: b = 6; % bottom of ship\nint: m = 7; % middle of ship\narray[PIECES] of string: code = [\".\",\"c\",\"l\",\"r\",\"t\",\"b\",\"m\"];\n\narray[ROWS,COLS] of 0..7: hint; % the initial board configuration\narray[ROWS] of int: rowsum;     % sums for each row\narray[COLS] of int: colsum;     % sums for each col\narray[SHIPS] of int: ship; % the number of each type of ship (usually [4,3,2,1]).\n\n\n\n% variables \narray[XROWS,XCOLS] of var PIECES: board;  % the board\n \narray[XROWS,XCOLS] of var 0..1: fill;     % which pieces are ships\n\narray[PIECES] of var 0..width*height: npiece; % number of pieces of each type\n\n\n% model\n\n% ensure hints are respected\nconstraint forall(i in ROWS, j in COLS)(\n\t\t\t   if hint[i,j] != 0 then\n\t\t\t   \t\tboard[i,j] == hint[i,j]\n\t\t\t   else true endif\n\t       ); \n\n% make extended rows and cols empty\nconstraint forall(i in XROWS)(board[i,0] == w /\\ board[i,width+1] == w);\nconstraint forall(j in COLS)(board[0,j] == w /\\ board[height+1,j] == w);\n\n% ensure that the fill array matches the board\nconstraint forall(i in XROWS, j in XCOLS)(\n\t\t\t   fill[i,j] = bool2int(board[i,j] != w)\n\t       ); \n\n% spacing constraints: gaps betwen ships\nconstraint forall(i in ROWS, j in COLS)(\n\t   (board[i,j] == w \\/ board[i+1,j+1] == w)\n\t/\\ (board[i,j] == w \\/ board[i+1,j-1] == w)   % diagonal constraints\n            /\\ (board[i,j] in {c,l,r,t} -> board[i-1,j] == w)\n            /\\ (board[i,j] in {c,l,r,b} -> board[i+1,j] == w)\n            /\\ (board[i,j] in {c,l,t,b} -> board[i,j-1] == w)\n            /\\ (board[i,j] in {c,r,t,b} -> board[i,j+1] == w)\n           );\n               \t\t\t                       \n% ship shape constraints\nconstraint forall(i in ROWS, j in COLS)(\n               %% a left piece needs a right piece or middle to the right\n\t\t\t   (board[i,j] == l -> (board[i,j+1] == r \\/ board[i,j+1] == m))\n\t\t\t/\\ (board[i,j] == r -> (board[i,j-1] == l \\/ board[i,j-1] == m))\n\t\t\t/\\ (board[i,j] == t -> (board[i+1,j] == b \\/ board[i+1,j] == m))\n\t\t\t/\\ (board[i,j] == b -> (board[i-1,j] == t \\/ board[i-1,j] == m))\n\t\t\t   %% a middle piece has to have two opposite sides filled\n\t\t\t/\\ (board[i,j] == m -> (   fill[i-1,j] == fill[i+1,j]\n\t\t\t                        /\\ fill[i,j-1] == fill[i,j+1]\n\t\t\t                        /\\ fill[i-1,j] + fill[i,j-1] == 1))\n\t\t   );\n\t\t   \n% sum up pieces\nconstraint forall(p in PIECES)(\n\t\t\t   sum(i in ROWS, j in COLS)(bool2int(board[i,j] == p)) == npiece[p]\n\t\t   );\n\n% piece sum constraints\nconstraint npiece[c] == ship[submarine]; % submarines\nconstraint npiece[l] == npiece[r]; % left right (probably redundant)\nconstraint npiece[t] == npiece[b]; % top bottom\nconstraint npiece[l] + npiece[t] == sum(s in destroyer..maxship)(ship[s]); \n                                   % no of ends\nconstraint npiece[m] == sum(s in cruiser..maxship)(ship[s] * (s - 2)); \n                                   % no of middles \t\t   \n\t\t    \n% count number of bigger ships\n% at least for standard battleships you can probably simply\n% enforce this constraint for s in destroyer..destroyer\t\t\n% and still be guaranteed a correct solution    \nconstraint forall(s in destroyer..maxship)(\n\t           sum(i in ROWS,j in COLS)(bool2int(\n\t\t\t       if j + s - 1 <= width then\n\t\t\t          board[i,j] == l /\\ board[i,j+s-1] == r     % ship length s lr\n\t\t\t       /\\ forall(k in j+1..j+s-2)(board[i,k] == m)\n\t\t\t       else false endif\n\t\t\t    \\/\n\t\t\t       if i + s - 1 <= height then\n\t\t\t          board[i,j] == t /\\ board[i+s-1,j] == b     % ship length s tb\n\t\t\t       /\\ forall(k in i+1..i+s-2)(board[k,j] == m)\n\t\t\t       else false endif\n\t\t       )) = ship[s]\n\t\t   );\t\t    \n\t\t    \t\t    \n\n% row sums respected\nconstraint forall(i in ROWS)(\n               sum(j in COLS)(fill[i,j]) == rowsum[i]\n           );\n           \n% column sums respected           \nconstraint forall(j in COLS)(\n               sum(i in ROWS)(fill[i,j]) == colsum[j]\n           );           \n\n\nsolve :: int_search([ fill[i,j] | i in ROWS, j in COLS], \n      \t\t  input_order, indomain_min, complete)\n      satisfy;\n\noutput [ code[fix(board[i,j])] ++ \n\t\t if j == width then \" \" ++ show(rowsum[i]) ++ \"\\n\"\n\t\t else \"\" endif\n\t   | i in ROWS, j in COLS ]  ++\n\t   [ show(colsum[j]) | j in COLS ] ++ [\"\\n\"];\n\t   \n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Solitaire Battleships problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to optimize the storage of containers of different sizes. The warehouse has 10 rows and 10 columns of storage spaces, and I have 4 large containers, 3 medium containers, and 2 small containers to store. Each container has a specific shape and size, and I need to ensure that they are stored in a way that maximizes storage capacity while leaving enough space between them for easy access. How can I arrange the containers to meet these constraints?\",\n  \"question2\": \"I'm planning a garden party and I want to set up a bunch of tables and chairs in a way that looks nice and is easy to navigate. I have 10 tables of different shapes and sizes, and I need to fit them into a 10x10 grid. Some tables need to be next to each other, and some need to have space around them. Can you help me figure out how to arrange the tables so that everything fits and looks good?\",\n  \"question3\": \"I'm designing a new level for a video game, and I need to create a puzzle where the player has to fit different shaped blocks into a grid. The grid is 10x10, and I have 4 long blocks, 3 medium blocks, and 2 short blocks to fit in. The blocks have to fit together in a specific way, and I need to make sure that the player can solve the puzzle. Can you help me design the puzzle?\",\n  \"question4\": \"I have 10 rows and 10 columns of squares, and I need to fit in 4 long rectangles, 3 medium rectangles, and 2 short rectangles. How can I do it?\",\n  \"question5\": \"I'm an urban planner designing a new neighborhood, and I need to fit in different types of buildings (residential, commercial, and recreational) into a 10x10 grid of city blocks. The buildings have different shapes and sizes, and I need to ensure that they are arranged in a way that is efficient, accessible, and aesthetically pleasing. I also need to consider factors like traffic flow, pedestrian access, and emergency services access. Can you help me design the neighborhood to meet these constraints and priorities?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Solitaire Battleships problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n```\n{\n  \"name\": \"Solitaire Battleships\",\n  \"description\": \"Solitaire Battleships is a puzzle where we are given a partially filled in board and the number of ships in each row and column, and have to fill it with ships.\",\n  \"variables\": \"board[i,j], fill[i,j], npiece[p]\",\n  \"variables_description\": \"board[i,j] represents the type of piece at position (i,j) on the board, fill[i,j] is a binary variable indicating whether the piece at position (i,j) is part of a ship, and npiece[p] is the number of pieces of type p on the board.\",\n  \"constraints\": \"hints are respected, extended rows and cols are empty, fill array matches the board, spacing constraints, ship shape constraints, piece sum constraints, row sums respected, column sums respected\",\n  \"constraints_description\": \"The constraints ensure that the initial hints are respected, the extended rows and columns are empty, the fill array matches the board, there are gaps between ships, ships have the correct shape, the number of pieces of each type is correct, and the row and column sums are respected.\",\n  \"objective\": \"satisfy (find a feasible solution)\"\n}\n```\n\nNote that this problem is a satisfaction problem, meaning that the goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "schur": {"__data__": {"id_": "schur", "embedding": null, "metadata": {"problem_family": "schur", "model_name": "schur", "source_code": "%% schurs numbers\n%%\n%% determine if n balls labelled 1..n \n%% can be placed in c boxes with no box containing a triple {x,y,z} where x+y=z\n\nint: n; %% number of balls\nint: c; %% number of boxes\n\narray[1..n] of var 1..c: box;\n\nconstraint forall(i in 1..n-1, j in i+1 .. n - i)(\n\t   \t    box[i] != box[j] \\/ \n\t\t    box[i] != box[i+j] \\/ \n\t\t    box[j] != box[i+j]);\n\nsolve satisfy;\n\noutput [\"n = \", show(n), \";\\nc = \", show(c), \";\\nbox = \",show(box),\";\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Schur's Numbers problem:\n\n```\n{\n  \"question1\": \"A logistics company has 15 trucks and 5 warehouses. Each truck has a unique cargo capacity, and the company wants to assign trucks to warehouses such that no warehouse receives a combination of trucks whose cargo capacities add up to another truck's capacity. How can the company assign trucks to warehouses to meet this condition?\",\n  \"question2\": \"I'm planning a music festival with 12 bands and 4 stages. I want to schedule the bands so that no stage has a band that plays at the same time as another band that has a similar sound to a band already playing on that stage. How can I schedule the bands to avoid this?\",\n  \"question3\": \"I have 10 friends coming over for a birthday party, and I want to divide them into 3 groups for a game. Each friend has a unique favorite color, and I don't want any group to have friends whose favorite colors add up to another friend's favorite color (e.g., if one friend likes red, another likes blue, and another likes purple, I don't want them in the same group). How can I divide my friends into groups for the game?\",\n  \"question4\": \"Assign 8 employees to 2 teams such that no team has employees whose work hours add up to another employee's work hours.\",\n  \"question5\": \"A hospital has 18 medical residents and 6 teams for a training program. Each resident has a unique set of skills and availability, and the hospital wants to assign residents to teams such that no team has residents whose skills and availability add up to another resident's skills and availability. The hospital also wants to ensure that each team has a diverse set of skills and availability. How can the hospital assign residents to teams to meet these conditions, considering that Dr. Smith is only available on Mondays and Wednesdays, Dr. Johnson has expertise in pediatrics, and Dr. Lee has a conflict with Dr. Patel?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Schur's Numbers problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Schur's Numbers\",\n\"description\": \"This problem is a classic constraint satisfaction problem, known as Schur's Numbers. It involves placing n balls, labelled 1 to n, into c boxes such that no box contains a triple {x, y, z} where x + y = z. The goal is to find an assignment of balls to boxes that satisfies this condition.\",\n\"variables\": \"box = (box[1], ..., box[n]) \u2208 {1, ..., c}^n; These are the decision variables representing the box assignment for each ball.\",\n\"constraints\": \"\u2200i \u2208 {1, ..., n-1}, \u2200j \u2208 {i+1, ..., n-i}, (box[i] \u2260 box[j] \u2228 box[i] \u2260 box[i+j] \u2228 box[j] \u2260 box[i+j]); These constraints ensure that no box contains a triple {x, y, z} where x + y = z.\",\n\"objective\": \"Satisfy; The objective is to find a feasible assignment of balls to boxes that satisfies all the constraints, rather than optimizing a specific value.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "set_partition": {"__data__": {"id_": "set_partition", "embedding": null, "metadata": {"problem_family": "set_partition", "model_name": "set_partition", "source_code": "% \n% Set partition problem in Minizinc.\n%\n% Problem formulation from\n%   http://www.koalog.com/resources/samples/PartitionProblem.java.html\n% \"\"\"\n%  This is a partition problem.\n%  Given the set S = {1, 2, ..., n}, \n%  it consists in finding two sets A and B such that:\n%  <ul>\n%  <li>A U B = S,</li>\n%  <li>|A| = |B|,</li>\n%  <li>sum(A) = sum(B),</li>\n%  <li>sum_squares(A) = sum_squares(B).</li>\n%  </ul>\n% \"\"\"\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% \ninclude \"globals.mzn\"; \n\nint: n = 16;\nset of 1..n: S = 1..n;\nint: num_sets = 2;\narray[1..num_sets] of var set of S: a;\narray[1..num_sets] of var 0..n*n: sums;\narray[1..num_sets] of var 0..n*n*n*n: sum_squared;\n\n\n%\n% set_sum\n% sums the elements in the set s\n% \npredicate set_sum(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i)\n;\n\npredicate set_sum_squared(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i*i)\n;\n\n\nsolve :: set_search(a, first_fail, indomain_min, complete) satisfy;\n% solve maximize sums[1];\n\nconstraint\n  assert(n mod 4 == 0, \"n must be a multiple of 4\")\n;\n\n% (\n%  20080419: \n%  eclipse gives the following error\n%  instantiation fault in dvar_remove_smaller(_18602{0 .. 20}, 1)\n% )\nconstraint\n   % use all the elements in S and it should be disjoint sets\n   partition_set(a, S)\n   /\\\n   forall(i in 1..num_sets) (   \n     a[i] `set_sum` sums[i] \n     /\\ a[i] `set_sum_squared` sum_squared[i]\n   )\n   /\\\n   forall(i in 2..num_sets) (\n     card(a[i]) > 0 /\\ % this is needed by eclipse\n     card(a[i]) = card(a[i-1]) /\\\n     sums[i] = sums[i-1] \n     /\\ sum_squared[i] = sum_squared[i-1] \n   )\n\n  % symmetry breaking\n  /\\ 1 in a[1]\n\n;\n\noutput [\n   \"a: \" ++ show(a) ++ \"\\n\" ++\n   \"sums: \" ++ show(sums) ++ \"\\n\" ++ \n   \"sum_squared: \" ++ show(sum_squared) ++ \"\\n\" \n];\n\n% For model seeker\n% output [\n%    show(set2array(fix(a[i]))) ++ \",\"\n%   | i in 1..num_sets\n% ];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the set partition problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager at a warehouse that receives daily shipments of 16 different products. I need to allocate these products into two trucks for delivery, ensuring that each truck carries an equal number of products, an equal total weight, and an equal total value. How can I optimize the allocation to minimize transportation costs and ensure efficient delivery?\",\n    \"constraints\": \"16 products, 2 trucks, equal number of products, equal total weight, equal total value\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a birthday party for my 8-year-old son and I want to divide 16 kids into two teams for games and activities. I want to make sure each team has an equal number of kids, and that the teams are balanced in terms of age and energy level. How can I divide the kids into teams to ensure everyone has fun?\",\n    \"constraints\": \"16 kids, 2 teams, equal number of kids, balanced age and energy level\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a student and I need to divide 16 classmates into two groups for a project. We need to make sure each group has an equal number of people, and that the groups are balanced in terms of skills and strengths. How can I divide the class into groups to ensure we all work well together?\",\n    \"constraints\": \"16 classmates, 2 groups, equal number of people, balanced skills and strengths\"\n  },\n  \"question4\": {\n    \"description\": \"Divide 16 items into two boxes so that each box has an equal number of items and an equal total value.\",\n    \"constraints\": \"16 items, 2 boxes, equal number of items, equal total value\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a manager at a call center and I need to allocate 16 customer service representatives into two teams to handle incoming calls. The teams need to be balanced in terms of language skills, product knowledge, and experience. Additionally, I want to ensure that each team has an equal number of representatives, and that the total handling time for each team is equal. How can I allocate the representatives to optimize customer service and reduce wait times?\",\n    \"constraints\": \"16 representatives, 2 teams, balanced language skills, product knowledge, and experience, equal number of representatives, equal total handling time\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the set partition problem. They are designed to be answered by solving the problem, but do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Set Partition Problem\",\n\"description\": \"The set partition problem is a classic problem in constraint programming. Given a set S of n elements, the problem consists in finding two sets A and B such that A and B form a partition of S, |A| = |B|, sum(A) = sum(B), and sum_squares(A) = sum_squares(B).\",\n\"variables\": \"a = [A, B], sums = [sum_A, sum_B], sum_squared = [sum_squares_A, sum_squares_B]. \na is an array of two sets, where A and B are the two partitions of S. sums is an array of two integers, where sum_A and sum_B are the sums of the elements in A and B, respectively. sum_squared is an array of two integers, where sum_squares_A and sum_squares_B are the sums of the squares of the elements in A and B, respectively.\",\n\"constraints\": \"partition_set(a, S), a[i] `set_sum` sums[i], a[i] `set_sum_squared` sum_squared[i], card(a[i]) = card(a[i-1]), sums[i] = sums[i-1], sum_squared[i] = sum_squared[i-1], 1 in a[1].\nThe constraints ensure that A and B form a partition of S, the sums and sums of squares of A and B are equal, and the cardinalities of A and B are equal. The last constraint is a symmetry breaking constraint.\",\n\"objective\": \"satisfy (no objective function)\"\n}\n\nNote that the objective of the problem is to find a feasible solution that satisfies all the constraints, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "social_golfers1": {"__data__": {"id_": "social_golfers1", "embedding": null, "metadata": {"problem_family": "social_golfers1", "model_name": "social_golfers1", "source_code": "%\n% Social golfer in Minizinc.\n% \n% Translated from OPL code from\n%\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=010\n%\n% \"\"\"\n% Problem description\n% In a golf club there are 32 social golfers who play once a week in 8 groups of 4. The problem amounts to find a schedule for as many as possible weeks, such that no two golfers play in the same group more than once.\n\n% Here we consider the decisional version of the problem (wrt the number of weeks 'weeks'), where the number of players and the group size are given as input.\n% \n% Problem input\n% \n% * groups, the number of groups to be formed each week\n% * groupSize, the size of each group\n% * weeks, the number of weeks for which a scheduling is requested \n% \n% Search space\n% The set of all possible group assignments to all players in each of the weeks weeks.\n% \n% Constraints\n%\n% * C1: Each group has exactly groupSize players\n% * C2: Each pair of players only meets at most once\n% \"\"\"\n%\n% Model created by Hakan Kjellerstrand, hakank@bonetmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n%\nint: weeks = 4;\nint: groups = 3;\nint: groupSize = 3;\nint: golfers = groups * groupSize;\n\nset of int: Golfer = 1..golfers;\nset of int: Week = 1..weeks;\nset of int: Group = 1..groups;\n\n% Search space: The set of all possible group assignments to all \n% players in each of the weeks\narray[Golfer, Week] of var Group: assign;\n\n% solve satisfy;\n% solve :: int_search([assign[i,j] | i in Golfer, j in Week ], \"first_fail\", \"indomain\", \"complete\") satisfy;\nsolve :: int_search([assign[i,j] | i in Golfer, j in Week ], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each group has exactly groupSize players\n   forall (gr in Group, w in Week)( % c1\n     sum (g in Golfer) (bool2int(assign[g,w] = gr)) = groupSize\n   )\n   /\\\n   % C2: Each pair of players only meets at most once\n   forall (g1, g2 in Golfer, w1, w2 in Week  where g1 != g2 /\\ w1 != w2) (\n     (bool2int(assign[g1,w1] = assign[g2,w1]) + bool2int(assign[g1,w2] = assign[g2,w2])) <= 1\n   )\n  /\\\n  % SBSA: Symmetry-breaking by selective assignment\n  % On the first week, the first groupSize golfers play in group 1, the \n  % second groupSize golfers play in group 2, etc. On the second week, \n  % golfer 1 plays in group 1, golfer 2 plays in group 2, etc.\n  forall(g in Golfer) (\n    assign[g,1]=((g-1) div groupSize) + 1 % \n  )\n  /\\\n  forall(g in Golfer where g <= groupSize)(\n    assign[g,2]=g\n  )\n\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n  show(assign[i,j])\n  | i in Golfer, j in Week\n] ++ [\"\\n\"];\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Social Golfer Problem:\n\n```\n{\n  \"question1\": \"I'm organizing a series of workshops for 24 researchers across 4 days, with 4 sessions per day. Each session can accommodate 3 researchers. How can I schedule the researchers to ensure that each researcher attends each session only once, and no two researchers attend the same session more than once?\",\n  \"question2\": \"I'm planning a birthday party for my 12-year-old son and want to organize a fun activity where his 12 friends can play together in small groups. I want to divide them into groups of 3 for 4 different games, but I don't want any two friends to play together more than once. Can you help me figure out a schedule for this?\",\n  \"question3\": \"I'm the captain of my school's debate team, and we have 15 members who need to participate in 3 debates per week for 5 weeks. Each debate requires 3 team members. How can I create a schedule that ensures each team member participates in each debate only once, and no two team members debate together more than once?\",\n  \"question4\": \"Schedule 12 people into 3 groups of 4 for 3 meetings, ensuring no one meets the same person twice.\",\n  \"question5\": \"I'm the event coordinator for a large conference with 36 attendees from different companies. We need to organize 3 networking sessions, each with 3 groups of 4 attendees, across 3 days. The attendees have expressed preferences for not wanting to network with the same person more than once, and we want to ensure that each group has a diverse set of companies represented. Can you help me create a schedule that meets these requirements and ensures that each attendee has a unique set of networking partners across the 3 days?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Social Golfer Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Social Golfer Problem\",\n\"description\": \"The Social Golfer Problem is a classic constraint satisfaction problem that involves scheduling golf games for a group of golfers. The problem requires assigning golfers to groups of a fixed size for a specified number of weeks, such that no two golfers play in the same group more than once.\",\n\"variables\": \"assign[i, j] \u2208 {1, ..., groups} for i \u2208 {1, ..., golfers} and j \u2208 {1, ..., weeks}. These variables represent the group assignment of each golfer in each week.\",\n\"constraints\": \"C1: \u2211(g \u2208 Golfer) (bool2int(assign[g, w] = gr)) = groupSize for gr \u2208 Group and w \u2208 Week. This constraint ensures that each group has exactly groupSize players.\\nC2: (bool2int(assign[g1, w1] = assign[g2, w1]) + bool2int(assign[g1, w2] = assign[g2, w2])) \u2264 1 for g1, g2 \u2208 Golfer and w1, w2 \u2208 Week where g1 \u2260 g2 and w1 \u2260 w2. This constraint ensures that each pair of players only meets at most once.\\nSBSA: assign[g, 1] = ((g-1) div groupSize) + 1 for g \u2208 Golfer, and assign[g, 2] = g for g \u2208 Golfer where g \u2264 groupSize. These constraints are used for symmetry-breaking by selective assignment.\",\n\"objective\": \"Satisfy (i.e., find a feasible solution that satisfies all constraints)\"\n}\n\nNote that the objective of this problem is to find a feasible solution that satisfies all constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "sonet_problem": {"__data__": {"id_": "sonet_problem", "embedding": null, "metadata": {"problem_family": "sonet_problem", "model_name": "sonet_problem", "source_code": "%\n% The SONET problem in MiniZinc.\n% \n% Translation of the EssencePrime model in the Minion Translator examples:\n% http://www.cs.st-andrews.ac.uk/~andrea/examples/sonet/sonet_problem.eprime\n% \"\"\"\n% The SONET problem is a network design problem: set up a network between\n% n nodes, where only certain nodes require a connection.\n% Nodes are connected by putting them on a ring, where all nodes\n% on a ring can communicate. Putting a node on a ring requires a so-called\n% ADM, and each ring has a capacity of nodes, i.e. ADMs. There is a certain \n% amount of rings, r, that is available. The objective is to set up a network\n% by using a minimal amount of ADMs.\n%\n%\n% About the problem model\n%\n% The problem model has the amount of rings ('r'), amount of nodes('n'),\n% the 'demand' (which nodes require communication) and node-capacity of each \n% ring ('capacity_nodes') as parameters.\n% The assignement of nodes to rings is modelled by a 2-dimensional matrix 'rings',\n% indexed by the amnount of rings and nodes. The matrix-domain is boolean:\n% If the node in column j is assigned to the ring in row i, then rings[i,j] = 1 \n% and 0 otherwise. So all the '1's in the matrix 'rings' stand for an ADM.\n% Hence the objective is to minimise the sum over all columns and rows of matrix\n% 'rings'.\n% \"\"\"\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n%\n% The Minion solution is:\n% \"\"\"\n% Sol: 0 1 1 0 1\n% Sol: 1 0 0 1 0\n% Sol: 1 1 0 0 0\n% Sol: 0 0 0 0 0\n% \"\"\"\n%\n% Which is the same solution that fz gives for the minimizing\n% objective. The problem has 6 solutions with z = 7.\n% \n% z: 7\n% 0 1 1 0 1\n% 1 0 0 1 0\n% 1 1 0 0 0\n% 0 0 0 0 0\n\n\nint: r;  % upper bound for amount of rings\nint: n;  % amount of clients\n\n\n% original comment: \n% we have double entries here because of the symmetric structure!\narray[1..n, 1..n] of 0..1: demand;\narray[1..r] of 1..n: capacity_nodes;\n\narray[1..r, 1..n] of var 0..1: rings;\nvar int: z =  sum(ring in 1..r, client in 1..n) (rings[ring, client]);\n\nsolve minimize z;\n% solve satisfy;\n\n\nconstraint\n%   z <= 7 % for solve satisfy\n%   /\\\n\n   % original comment:\n   % if there is a demand between 2 nodes, then there has to exist \n   % a ring, on which they are both installed\n   forall(client1,client2 in 1..n where client1 < client2) (\n      (demand[client1,client2] = 1) ->\n           exists(ring in 1..r) (\n                 rings[ring,client1] + rings[ring, client2] >= 2\n           )\n   )   \n   /\\\n   % original comment:\n   % capacity of each ring must not be exceeded     \n   forall(ring in 1..r) (\n        sum(client in 1..n) (\n              rings[ring, client]\n              ) <= capacity_nodes[ring] \n   )\n;\n\n\n%\n% data\n% (sonet_problem1nu.param)\n%\nr = 4;\nn = 5;\n\ndemand =\narray2d(1..n, 1..n,\n        [0,1,0,1,0,\n         1,0,1,0,0,\n         0,1,0,0,1,\n         1,0,0,0,0,\n         0,0,1,0,0])\n;\n\ncapacity_nodes = [3,2,2,1];\n\n\noutput \n[\n  \"z: \", show(z)\n] ++\n[\n  if client = 1 then \"\\n\" else \" \" endif ++\n    show(rings[ring, client])\n  | ring in 1..r, client in 1..n\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the SONET problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to design a delivery network for 10 warehouses and 15 distribution centers. Each warehouse requires a specific number of trucks to be assigned to it, and each distribution center has a limited capacity for trucks. The company wants to minimize the total number of trucks used while ensuring that all warehouses are connected to at least one distribution center. How can the company optimize its delivery network?\",\n  \"question2\": \"I'm planning a music festival with 5 stages and 20 bands. Each band needs to be assigned to a stage, but some bands can only play on certain stages due to equipment requirements. The festival organizers want to minimize the number of stages used while ensuring that all bands are assigned to a stage. Can you help me figure out the best way to schedule the bands?\",\n  \"question3\": \"I'm planning a school dance and I need to set up tables for 10 groups of friends. Each group has a specific number of people, and each table can only fit a certain number of people. I want to make sure that all groups are seated together, but I also want to use the fewest number of tables possible. How can I set up the tables to make everyone happy?\",\n  \"question4\": \"Assign 12 people to 4 teams, each with a limited capacity, to minimize the total number of teams used while ensuring everyone is on a team.\",\n  \"question5\": \"A large corporation is planning a company-wide retreat and needs to assign 50 employees to 10 different recreational activities, such as hiking, rock climbing, and team-building exercises. Each activity has a limited capacity, and some employees have specific preferences for which activities they want to participate in. The company wants to minimize the total number of activities used while ensuring that all employees are assigned to at least one activity. Additionally, the company wants to prioritize assigning employees to their preferred activities whenever possible. How can the company optimize its activity assignments to maximize employee satisfaction?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the SONET problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"SONET Problem\",\n\"description\": \"The SONET problem is a network design problem where a network needs to be set up between n nodes, where only certain nodes require a connection. Nodes are connected by putting them on a ring, where all nodes on a ring can communicate. The objective is to set up a network by using a minimal amount of ADMs (Add-Drop Multiplexers).\",\n\"variables\": \"rings[i, j] (i = 1..r, j = 1..n), z\\nThe decision variables rings[i, j] represent whether node j is assigned to ring i (1 if assigned, 0 otherwise). The variable z represents the total number of ADMs used.\",\n\"constraints\": \"\u2200 client1, client2 \u2208 {1..n} where client1 < client2, (demand[client1, client2] = 1) \u2192 \u2203 ring \u2208 {1..r} (rings[ring, client1] + rings[ring, client2] \u2265 2)\\n\u2200 ring \u2208 {1..r}, \u2211(client \u2208 {1..n}) (rings[ring, client]) \u2264 capacity_nodes[ring]\\nThe first constraint ensures that if there is a demand between two nodes, they must be on the same ring. The second constraint ensures that the capacity of each ring is not exceeded.\",\n\"objective\": \"Minimize z (the total number of ADMs used)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "steiner": {"__data__": {"id_": "steiner", "embedding": null, "metadata": {"problem_family": "steiner", "model_name": "steiner", "source_code": "% \n% Steiner triplets in MiniZinc.\n% \n% http://www.probp.com/examples/clpset/steiner.pl \n% The ternary Steiner problem of order n is to find n(n-1)/6 sets of elements in {1,2,...,n} \n% such that each set contains three elements and any two sets have at most one element in common. \n% For example, the following shows a solution for size n=7:\n%\n%      {1,2,3}, {1,4,5}, {1,6,7}, {2,4,6}, {2,5,7}, {3,4,7}, {3,5,6}\n%\n% Problem taken from:\n%  C. Gervet: Interval Propagation to Reason about Sets: Definition and Implementation of a Practical \n%  Language,  Constraints, An International Journal, vol.1, pp.191-246, 1997.\n% \n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% include \"globals.mzn\"; \n\n\ninclude \"globals.mzn\";\n\nint: N = 7; \nint: NB = N *(N-1) div 6;\narray[1..NB] of var set of 1..N: Sets;\n\n% solve satisfy;\nsolve::set_search(Sets, first_fail, indomain_min, complete) satisfy;\n\n\n\nconstraint\n   forall(i in index_set(Sets)) (\n      card(Sets[i]) = 3\n   )\n   /\\ \n   forall(i,j in index_set(Sets) where i < j) (\n      card( Sets[i] intersect Sets[j]) <= 1\n   )\n   /\\ % symmetry breaking\n   decreasing(Sets)\n\n;\n\noutput [\n       \"N: \", show(N), \" NB: \", show(NB), \"\\n\",\n       \"Sets: \", show(Sets)\n];\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Steiner Triplets Problem:\n\n```\n{\n  \"question1\": \"A conference organizer wants to schedule 7 parallel sessions with 3 speakers each, ensuring that no speaker is assigned to more than one session at the same time. How can the organizer create a schedule that maximizes the number of sessions while avoiding conflicts?\",\n  \"question2\": \"I'm planning a party and I want to create teams of 3 people each to play games. I have 7 friends coming, and I want to make sure that no two teams have more than one person in common. How can I create the teams so that everyone has fun?\",\n  \"question3\": \"I'm a teacher and I want to create groups of 3 students each to work on a project. I have 7 students in my class, and I want to make sure that each group has a good mix of skills and personalities. How can I create the groups so that everyone learns from each other?\",\n  \"question4\": \"How can I divide 7 people into teams of 3 for a scavenger hunt, ensuring that no two teams have more than one person in common?\",\n  \"question5\": \"A marketing firm wants to create focus groups of 3 customers each to test new products. They have 7 customer segments, and they want to ensure that each focus group represents a diverse range of opinions and demographics. The firm also wants to minimize the overlap between groups to avoid biased results. How can they create the focus groups to maximize the diversity of opinions while minimizing the overlap?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Steiner Triplets Problem, but in different contexts and with varying levels of complexity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Steiner Triplets Problem\",\n\"description\": \"The Steiner triplets problem is a classical problem in constraint programming that involves finding a collection of sets, each containing three elements, such that any two sets have at most one element in common. The goal is to find the maximum number of such sets.\",\n\"variables\": \"Sets = {S_1, S_2, ..., S_NB}, where S_i \u2286 {1, 2, ..., N} for i = 1, 2, ..., NB. These are the decision variables representing the sets of elements.\",\n\"constraints\": \"1) \u2200i \u2208 {1, 2, ..., NB}, |S_i| = 3 (each set has exactly 3 elements), \n2) \u2200i, j \u2208 {1, 2, ..., NB} where i < j, |S_i \u2229 S_j| \u2264 1 (any two sets have at most one element in common), \n3) decreasing(Sets) (symmetry breaking constraint to ensure that the sets are in decreasing order of their minimum element).\",\n\"objective\": \"satisfy (find a feasible solution that satisfies all constraints)\"\n}\n\nNote that the objective of this problem is to find a feasible solution that satisfies all constraints, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "stoch_fjsp": {"__data__": {"id_": "stoch_fjsp", "embedding": null, "metadata": {"problem_family": "stoch_fjsp", "model_name": "stoch_fjsp", "source_code": "%-----------------------------------------------------------------------------%\n% Copyright (C) 2013 National ICT Australia and Monahsh University 2017\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n%-----------------------------------------------------------------------------%\n%\n% Author(s): \n%   Original model, Flexible Job Shop Scheduling: \n%   Andreas Schutt <andreas.schutt@nicta.com.au>\n%   Changes, Stochastic Assignment and Scheduling Problem: \n%   David Hemmi <david.hemmi@monash.edu>\n%\n%-----------------------------------------------------------------------------%\n% Stochastic General Assignment Problem  \n% First stage: \n%    assign task to machines  \n% Second stage: \n%    based on observed processign times, schedule taks on respective machines \n% Objective: \n%    minimise expected makespan \n%-----------------------------------------------------------------------------%\n% Including files\n\ninclude \"globals.mzn\";\n\n%-----------------------------------------------------------------------------%\n% Parameters\n\nint: no_mach;   % Number of machines\nint: no_jobs;   % Number of jobs\nint: no_task;   % Number of total tasks\nint: no_optt;   % Number of total optional tasks\n\nset of int: Mach  = 1..no_mach;\nset of int: Jobs  = 1..no_jobs;\nset of int: Tasks = 1..no_task;\nset of int: OptTs = 1..no_optt;\n\narray [Jobs] of set of int: tasks;\narray [Tasks] of set of int: optts;\n\narray [OptTs] of int: optt_mach;\narray [SCENARIOS1,OptTs] of int: optt_dur;\n\n\narray [Jobs] of int: last_task = [ max(tasks[j]) | j in Jobs ];\n%---------implications for multi scenarion solving ---------------\nint: nbScenarios;\nset of int: SCENARIOS1 = 1..nbScenarios;\nint: first_scen;\nint: last_scen;\nset of int: SCENARIOS = first_scen..last_scen;\narray[SCENARIOS1] of int: weights;\n\n%-------end of multi scenario addons ----------------\narray [Tasks] of int: task_job = \n    [ min(j in Jobs where t in tasks[j])(j) | t in Tasks ];\narray [SCENARIOS,Tasks] of int: task_mins =\n    array2d(SCENARIOS,Tasks,[ sum(k in tasks[task_job[t]])(if k < t then task_mind[s,k] else 0 endif)\n    |   s in SCENARIOS, t in Tasks ]);\narray [SCENARIOS,Tasks] of int: task_maxs =\n    array2d(SCENARIOS,Tasks,[ t_max[s] -\n        sum(k in tasks[task_job[t]])(if k < t then 0 else task_mind[s,k] endif)\n    |   s in SCENARIOS,  t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_mind =\n    array2d(SCENARIOS,Tasks,[ min(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS,t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_maxd = \n    array2d(SCENARIOS,Tasks,[ max(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS, t in Tasks ]);\n\n    % Additional deirved parameters for optional tasks\n    %\narray [OptTs] of int: optt_task =\n    [ min(t in Tasks where o in optts[t])(t) | o in OptTs ];\n\narray[SCENARIOS1] of int: min_dur = [ min([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\narray[SCENARIOS1] of int: max_dur = [ max([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\nset of int: Durs = min(min_dur)..max(max_dur);\n\n    % Parameters related to the planning horizon\n    %\narray[SCENARIOS1] of int: t_max = [sum(t in Tasks)(max(o in optts[t])(optt_dur[s,o])) | s in SCENARIOS1];\n\nset of int: Times = 0..max(t_max);\n\n%-----------------------------------------------------------------------------%\n% Variables\n\n    % Start time variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Times: start =\n    array2d(SCENARIOS,Tasks,[ let { var task_mins[s,t]..task_maxs[s,t]: k } in k | s in SCENARIOS, t in Tasks ]);\n\n    % Duration variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Durs: dur =\n    array2d(SCENARIOS,Tasks,[ if task_mind[s,t] = task_maxd[s,t] then task_mind[s,t] else\n        let { var task_mind[s,t]..task_maxd[s,t]: d } in d endif\n    |   s in SCENARIOS,t in Tasks ]);\n\n    % Variables whether an optional task is executed\n    %\narray [OptTs] of var bool: b;\n\narray[SCENARIOS] of var Times: de_objective;\n\nset of int: StochTimes = 0..sum(t_max);\nvar StochTimes: objective;\n%-----------------------------------------------------------------------------%\n% Constraints\n\n    % Precedence relations\n    %\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs, i in tasks[j] where i < last_task[j])(\n            start[s,i] + dur[s,i] <= start[s,i + 1]\n        )    \n    );\n\n    % Duration constraints\n    %\nconstraint\n    forall(o in OptTs,s in SCENARIOS)(\n        let { int: t = optt_task[o] } in (\n            if card(optts[t]) = 1 then\n                b[o] = true\n            else\n                b[o] -> dur[s,t] = optt_dur[s,o]\n            endif\n        )\n    );\n\n    % Optional tasks' constraints\n    %\nconstraint\n    forall(t in Tasks where card(optts[t]) > 1)(\n        ( sum(o in optts[t])(bool2int(b[o])) <= 1     )\n    /\\  ( exists(o in optts[t])(b[o])                 )\n    );\n\nconstraint\n    forall(t in Tasks where card(optts[t]) = 2)(\n        let {\n            int: o1 = min(optts[t]),\n            int: o2 = max(optts[t])\n        } in ( b[o1] <-> not(b[o2]) )\n    );\n\n    % Resource constraints\n    %\nconstraint\n    forall(m in Mach,s in SCENARIOS)(\n        let {\n            set of int: MTasks = { o | o in OptTs where optt_mach[o] = m }\n        } in (\n            cumulative(\n                [ start[s,optt_task[o]] | o in MTasks ],\n                [ optt_dur[s,o]         | o in MTasks ],\n                [ bool2int(b[o])      | o in MTasks ],\n                1\n            )\n        )\n    );\n\n% Objective constraint\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs)(start[s,last_task[j]] + dur[s,last_task[j]] <= de_objective[s])\n    );\nconstraint \n        objective = sum(s in SCENARIOS)(weights[s]*de_objective[s]);\n%-----------------------------------------------------------------------------%\n% Solve item\n\nsolve \n    :: search\n    minimize objective;\n\n%------------------------------------------------------------------------------%\n% Searches\n\nann: s_mindur   = int_search([dur[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_minstart = int_search([start[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_bool     = bool_search(b, input_order, indomain_max, complete);\nann: s_obj      = int_search(de_objective, input_order, indomain_min, complete);\n\nann: search = seq_search([s_mindur, s_bool, s_minstart, s_obj]);\n\n%-----------------------------------------------------------------------------%\n% Output\n\noutput \n[   \"objective = \", show(de_objective), \";\\n\",\n    \"stoch obj = \", show(objective), \";\\n\",\n    \"start = \", show(start), \";\\n\",\n    \"dur = \", show(dur), \";\\n\",\n    \"b = \", show(b), \";\\n\",\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to allocate tasks to different warehouses to fulfill customer orders. Each task has a specific processing time, and I have multiple scenarios for the processing times due to uncertainty in the supply chain. I want to minimize the expected time it takes to fulfill all orders while ensuring that each warehouse has the necessary resources to complete the tasks assigned to it. How can I optimize the task allocation and scheduling to achieve this goal?\",\n  \"question2\": \"I'm planning a music festival with multiple stages and bands. Each band has a specific setup and teardown time, and I need to schedule them to minimize downtime between performances. Some bands have optional sound checks that take extra time, and I want to make sure that each stage has enough time for all the performances. How can I create a schedule that minimizes the overall duration of the festival while ensuring that all bands get their desired stage time?\",\n  \"question3\": \"I'm a high school student, and I need to plan a school event with multiple activities, such as a talent show, a bake sale, and a photo booth. Each activity has a specific duration, and I need to schedule them to minimize conflicts and ensure that each activity has enough time to set up and tear down. Some activities have optional components, like a special guest performer, that take extra time. How can I create a schedule that fits all the activities into a single day while making sure everything runs smoothly?\",\n  \"question4\": \"I have 5 tasks to complete, and each task has a different processing time. I want to minimize the total time it takes to complete all tasks. How can I schedule the tasks to achieve this goal?\",\n  \"question5\": \"I'm a production manager at a manufacturing plant that produces customized furniture. We have 10 machines, each with a different capacity and processing time for different tasks. We receive orders with varying processing times and optional features, such as custom engravings or special finishes. I need to allocate tasks to machines and schedule them to minimize the expected production time while ensuring that each machine has the necessary resources to complete the tasks assigned to it. Additionally, I need to consider the priority of each order and the availability of raw materials. How can I optimize the task allocation and scheduling to achieve this goal while meeting the customer's expectations and minimizing production costs?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and they do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem:\n\n{\n\"name\": \"Stochastic General Assignment Problem\",\n\"description\": \"This problem involves assigning tasks to machines and scheduling them to minimize the expected makespan. The problem has two stages: in the first stage, tasks are assigned to machines, and in the second stage, the tasks are scheduled on the machines based on observed processing times. The problem is stochastic because the processing times are uncertain and are represented by multiple scenarios.\",\n\"variables\": \"start[s,t], dur[s,t], b[o], de_objective[s], objective\",\n\"variables_description\": \"start[s,t] represents the start time of task t in scenario s, dur[s,t] represents the duration of task t in scenario s, b[o] represents whether optional task o is executed, de_objective[s] represents the makespan in scenario s, and objective represents the expected makespan.\",\n\"constraints\": \"precedence relations, duration constraints, optional tasks' constraints, resource constraints, objective constraint\",\n\"constraints_description\": \"The constraints ensure that tasks are executed in the correct order, that the duration of each task is within a certain range, that at most one optional task is executed for each task, that the resources are not exceeded, and that the objective is to minimize the expected makespan.\",\n\"objective\": \"minimize objective\"\n}\n\nLet me know if you need any further clarification!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "template_design": {"__data__": {"id_": "template_design", "embedding": null, "metadata": {"problem_family": "template_design", "model_name": "template_design", "source_code": "%-----------------------------------------------------------------------------%\n% Template design\n% Problem 002 in CSPLib\n%-----------------------------------------------------------------------------%\n% Based on \"ILP and Constraint Programming Approaches to a Template\n% Design Problem\", Les Proll and Barbara Smith, School of Computing\n% Research Report 97.16, University of Leeds, May 1997.\n%-----------------------------------------------------------------------------%\n\ninclude \"globals.mzn\";\n\nint: S;   \t\t% Number of slots per template.\nint: t;   \t\t% Number of templates.\nint: n;   \t\t% Number of variations.\narray[1..n] of int: d; \t% How much of each variation we must print?\n\n% Lower and upper bounds for the total production.\n%\nint: llower = ceil(sum(i in 1..n)(int2float(d[i]))/int2float(S));\nint: lupper = 2*llower; % If t>1, this should be the optimal Production_{t-1}-1.\n\n% # Slots allocated to variation i in template j\narray[1..n,1..t] of var 0..S: p;\n\n% # Pressings of template j.\narray[1..t] of var 1..lupper: R;\n\n% Sum of all Rj.\nvar llower..lupper: Production;\n\n% Production x S - sum(d[i])\nvar 0..lupper-llower: Surplus;\n\n% First, set up Production to be the sum of the Rj\nconstraint\n\tProduction = sum(i in 1..t)(R[i]);\n\n% the limits on production\nconstraint\n\tProduction >= llower /\\ Production <= lupper;\n\n% The number of slots occupied in each template is S.\nconstraint\n\tforall(j in 1..t)\n\t\t (sum(i in 1..n)(p[i,j]) = S);\n\n% Enough of each variation is printed.\nconstraint\n\tforall(i in 1..n)\n\t\t (sum(j in 1..t)(p[i,j]*R[j]) >= d[i]);\n\n% Symmetry constraints.\n% Variations with the same demand are symmetric.\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] == d[i+1] then\n\t\t\tlex_lesseq([p[i,  j] | j in 1..t],\n\t\t\t\t[p[i+1,j] | j in 1..t])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% pseudo symmetry\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] < d[i+1] then\n\t\t       sum (j in 1..t) (p[i,j]*R[j])\n\t\t     <= sum (j in 1..t) (p[i+1,j]*R[j])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% implied constraints on the surplus\n\n% These are presented in the paper as necessary to get good\n% performance for this model, but I think bounds consistency on the\n% sum(R[i]) constraint would produce the same amount of propagation\n\n% Set up surplus, which is bounded as production is bounded.\nconstraint\n\tSurplus = Production*S - sum(i in 1..n)(d[i]);\n\n% The surplus of each variation is also limited by the surplus.\nconstraint\n\tforall(k in 1..n)\n\t\t (sum(j in 1..t)(p[k,j]*R[j]-d[k]) <= Surplus);\n\n% The surplus of the first k variations is limited by the surplus.\nconstraint\n\tforall(k in 2..n-1)\n\t\t (sum(j in 1..t, m in 1..k)( p[m,j]*R[j]-d[m] ) <= Surplus);\n\n% Implied constraints on the run length.\nconstraint\n\tif t=2 then (\n\t\tR[1] <= Production div 2\n\t/\\\tR[2] >= Production div 2\n\t) else true endif;\n\nconstraint\n\tif t=3 then (\n\t\tR[1] <= Production div 3\n\t/\\\tR[2] <= Production div 2\n\t/\\\tR[3] >= Production div 3\n\t) else true endif;\n\n% Minimize the production.\nsolve :: int_search(array1d(1..n*t,p) ++ R, input_order, indomain_min, complete)\n    minimize Production;\n\noutput [\n    if v = 1 then \"template #\" ++ show(i) ++ \": [\" else \"\" endif ++\n    show(p[v, i]) ++\n    if v = n then \"], pressings: \" ++ show(R[i]) ++ \"\\n\" else \", \" endif\n\t| i in 1..t, v in 1..n]\n    ++ [\"Total pressings: \", show(Production), \"\\n%\\n\"];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Template Design Problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to transport 5000 units of 5 different products from a warehouse to a distribution center. Each truck has a capacity of 200 units and can make multiple trips. The company wants to minimize the total number of trips while ensuring that each product meets its demand. How can they allocate the products to the trucks to achieve this goal?\",\n  \"question2\": \"I'm planning a music festival and I need to schedule 10 different bands on 3 stages. Each stage can hold a maximum of 5 bands, and each band has a specific number of fans that need to be accommodated. I want to minimize the total number of stage changes while making sure each band gets to play to their fans. Can you help me figure out the best schedule?\",\n  \"question3\": \"I'm planning a birthday party for my friend and I need to make goodie bags for 20 kids. I have 5 different toys and 3 different types of candy that I want to include in each bag. Each bag can hold a maximum of 5 items, and I want to make sure each kid gets at least one of each toy and candy. How can I fill the bags to make sure everyone gets what they want?\",\n  \"question4\": \"A bakery needs to package 1000 cookies into boxes of 20. They have 5 different types of cookies and want to minimize the number of boxes used. How can they allocate the cookies to the boxes?\",\n  \"question5\": \"A hospital is planning to conduct a large-scale vaccination campaign and needs to allocate vaccines to 10 different vaccination centers. Each center has a limited capacity of 500 doses per day, and the hospital wants to minimize the total number of days required to complete the campaign. The vaccines come in 5 different types, and each type has a specific demand at each center. Additionally, the hospital wants to ensure that each center receives a balanced allocation of vaccines to minimize waste. How can they allocate the vaccines to the centers to achieve this goal?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Template Design Problem. They are designed to be practical and relatable, and can be answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Template Design Problem\",\n\"description\": \"The Template Design Problem is a classic problem in constraint programming that involves designing templates to print a set of variations in a way that minimizes the total production. Each template has a fixed number of slots, and each variation has a certain demand that must be met. The goal is to allocate the slots in each template to the variations in a way that minimizes the total number of pressings required to meet the demand.\",\n\"variables\": \"p[i, j], R[j], Production, Surplus\",\n\"variables explanation\": \"p[i, j] represents the number of slots allocated to variation i in template j, R[j] represents the number of pressings of template j, Production represents the total number of pressings, and Surplus represents the surplus production beyond the minimum required to meet the demand.\",\n\"constraints\": \"Production = sum(R[j]), Production >= llower, Production <= lupper, sum(p[i, j]) = S, sum(p[i, j]*R[j]) >= d[i], lex_lesseq(p[i, :], p[i+1, :]), sum(p[i, j]*R[j]) <= sum(p[i+1, j]*R[j]), Surplus = Production*S - sum(d[i]), sum(p[k, j]*R[j]-d[k]) <= Surplus, sum(p[m, j]*R[j]-d[m]) <= Surplus, R[1] <= Production div 2, R[2] >= Production div 2, R[1] <= Production div 3, R[2] <= Production div 2, R[3] >= Production div 3\",\n\"constraints explanation\": \"The constraints ensure that the total production is the sum of the pressings of each template, the production is within the bounds, each template has S slots, each variation meets its demand, symmetric variations are treated equally, the surplus is calculated correctly, and the run length is limited.\",\n\"objective\": \"minimize Production\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "traffic_lights": {"__data__": {"id_": "traffic_lights", "embedding": null, "metadata": {"problem_family": "traffic_lights", "model_name": "traffic_lights", "source_code": "% \n% Traffic lights problem in MiniZinc.\n% \n% CSPLib problem 16\n% http://www.csplib.org/Problems/prob016\n% \"\"\"\n% Specification:\n% Consider a four way traffic junction with eight traffic lights. Four of the traffic \n% lights are for the vehicles and can be represented by the variables V1 to V4 with domains \n% {r,ry,g,y} (for red, red-yellow, green and yellow). The other four traffic lights are \n% for the pedestrians and can be represented by the variables P1 to P4 with domains {r,g}.\n% \n% The constraints on these variables can be modelled by quaternary constraints on \n% (Vi, Pi, Vj, Pj ) for 1<=i<=4, j=(1+i)mod 4 which allow just the tuples \n% {(r,r,g,g), (ry,r,y,r), (g,g,r,r), (y,r,ry,r)}.\n%\n% It would be interesting to consider other types of junction (e.g. five roads \n% intersecting) as well as modelling the evolution over time of the traffic light sequence. \n% ...\n%\n% Results\n% Only 2^2 out of the 2^12 possible assignments are solutions.\n% \n% (V1,P1,V2,P2,V3,P3,V4,P4) = \n%    {(r,r,g,g,r,r,g,g), (ry,r,y,r,ry,r,y,r), (g,g,r,r,g,g,r,r), (y,r,ry,r,y,r,ry,r)}\n%    [(1,1,3,3,1,1,3,3), ( 2,1,4,1, 2,1,4,1), (3,3,1,1,3,3,1,1), (4,1, 2,1,4,1, 2,1)}\n%\n%\n% The problem has relative few constraints, but each is very tight. Local propagation \n% appears to be rather ineffective on this problem.\n%   \n% \"\"\"\n% \n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\nint: n = 4;\nint: r = 1; % red\nint: ry = 2; % red-yellow\nint: g = 3; % green\nint: y = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V; % ;\narray[1..n] of var Pedestrians: P; %;\n\npredicate cp1d(array[int] of var int: x, array[int] of var int: y) =\n  assert(index_set(x) = index_set(y),\n           \"cp1d: x and y have different sizes\",\n     forall(i in index_set(x)) ( x[i] = y[i] ))\n; \n\n% solve satisfy;\nsolve :: int_search(V ++ P, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   exists(a in 1..4) (\n      cp1d([V[i], P[i], V[j], P[j]], [allowed[a,k] | k in 1..4])\n   )\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\noutput [\n  show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the traffic lights problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to coordinate the loading and unloading of cargo ships at a busy port. There are four berths, each with its own crane and loading/unloading schedule. The cranes can be in one of four states: idle, loading, unloading, or maintenance. The pedestrians in this scenario represent the dockworkers who need to access the berths. How can I schedule the cranes and dockworkers to ensure safe and efficient operations, considering the constraints that each berth can only be accessed by one crane and one dockworker at a time, and that certain combinations of crane and dockworker states are not allowed?\",\n  \"question2\": \"I'm planning a music festival with four stages, each with its own sound and lighting system. The systems can be in one of four states: off, sound-check, performance, or intermission. The pedestrians in this scenario represent the stagehands who need to access the stages. How can I schedule the systems and stagehands to ensure a smooth and safe festival, considering that certain combinations of system and stagehand states are not allowed?\",\n  \"question3\": \"I'm designing a theme park with four roller coasters, each with its own safety protocols and ride schedules. The coasters can be in one of four states: idle, testing, operating, or maintenance. The pedestrians in this scenario represent the ride operators who need to access the coasters. How can I schedule the coasters and ride operators to ensure a fun and safe experience for visitors, considering that certain combinations of coaster and operator states are not allowed?\",\n  \"question4\": \"I have four machines that can be in one of four states: off, idle, working, or broken. How can I schedule the machines to ensure efficient production, considering certain combinations of machine states are not allowed?\",\n  \"question5\": \"As a hospital administrator, I need to manage the scheduling of four operating rooms, each with its own anesthesia and surgical teams. The rooms can be in one of four states: idle, preparation, surgery, or recovery. The pedestrians in this scenario represent the hospital staff who need to access the rooms. How can I schedule the rooms and staff to ensure efficient and safe surgical operations, considering that certain combinations of room and staff states are not allowed, and that each room requires a specific configuration of anesthesia and surgical teams? Additionally, I need to prioritize the scheduling of emergency surgeries and ensure that the hospital's infection control protocols are followed.\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the traffic lights problem, but in different contexts. They require finding a feasible solution that satisfies the constraints, rather than optimizing a specific objective."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested JSON-like format:\n\n{\n\"name\": \"Traffic Lights Problem\",\n\"description\": \"This problem models a four-way traffic junction with eight traffic lights, four for vehicles and four for pedestrians. The goal is to find a valid configuration of traffic lights that satisfies certain constraints.\",\n\"variables\": \"V = (V1, V2, V3, V4) \u2208 {r, ry, g, y}\u2074, P = (P1, P2, P3, P4) \u2208 {r, g}\u2074, where Vi represents the state of the i-th vehicle traffic light and Pi represents the state of the i-th pedestrian traffic light.\",\n\"constraints\": \"\u2200i, j \u2208 {1, 2, 3, 4} where j = (1+i) mod 4, \u2203a \u2208 {1, 2, 3, 4} such that (Vi, Pi, Vj, Pj) = (allowed[a, k] | k \u2208 {1, 2, 3, 4}), where allowed is a 4x4 array of allowed tuples.\",\n\"objective\": \"Satisfy (i.e., find a feasible solution)\"\n}\n\nNote: The variables and constraints are written in a mathematical notation, with explanations in English. The objective is to find a feasible solution, as this is a satisfaction problem rather than an optimization problem.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "traffic_lights_table": {"__data__": {"id_": "traffic_lights_table", "embedding": null, "metadata": {"problem_family": "traffic_lights_table", "model_name": "traffic_lights_table", "source_code": "% \n% Traffic lights problem in MiniZinc.\n% \n% CSPLib problem 16\n% http://www.csplib.org/Problems/prob016\n% \"\"\"\n% Specification:\n% Consider a four way traffic junction with eight traffic lights. Four of \n% the traffic lights are for the vehicles and can be represented by the \n% variables V1 to V4 with domains \n% {r,ry,g,y} (for red, red-yellow, green and yellow). \n%  The other four traffic lights are for the pedestrians and can be \n%  represented by the variables P1 to P4 with domains {r,g}.\n% \n% The constraints on these variables can be modelled by quaternary \n% constraints on \n% (Vi, Pi, Vj, Pj ) for 1<=i<=4, j=(1+i)mod 4 which allow just the tuples \n% {(r,r,g,g), (ry,r,y,r), (g,g,r,r), (y,r,ry,r)}.\n%\n% It would be interesting to consider other types of junction (e.g. five roads \n% intersecting) as well as modelling the evolution over time of the \n% traffic light sequence. \n% ...\n%\n% Results\n% Only 2^2 out of the 2^12 possible assignments are solutions.\n% \n% (V1,P1,V2,P2,V3,P3,V4,P4) = \n%    {(r,r,g,g,r,r,g,g), (ry,r,y,r,ry,r,y,r), (g,g,r,r,g,g,r,r), (y,r,ry,r,y,r,ry,r)}\n%    [(1,1,3,3,1,1,3,3), ( 2,1,4,1, 2,1,4,1), (3,3,1,1,3,3,1,1), (4,1, 2,1,4,1, 2,1)}\n%\n%\n% The problem has relative few constraints, but each is very tight. \n% Local propagation appears to be rather ineffective on this problem.\n%   \n% \"\"\"\n% \n% Note: This is the same as http://www.hakank.org/minizinc/taffic_lights.mzn\n% except that it use the global constraint table.\n\n% \n% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\ninclude \"globals.mzn\";\n\nint: n = 4;\nint: r  = 1; % red\nint: ry = 2; % red-yellow\nint: g  = 3; % green\nint: y  = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V;\narray[1..n] of var Pedestrians: P;\n\n\nsolve satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   table([V[i], P[i], V[j], P[j]], allowed)\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\n% output [\n%  \"V: \", show(V), \"\\nP: \", show(P), \"\\n\"\n% ];\noutput [\n show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Traffic Lights Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"As a logistics manager, I need to optimize the loading and unloading of cargo ships at a busy port. There are four berths, each with its own crane and loading/unloading schedule. I want to ensure that the cranes are configured to minimize congestion and maximize efficiency. How can I assign the cranes to the berths to meet these goals?\",\n    \"constraints\": \"Each berth can only have one crane, and each crane can only be assigned to one berth. Additionally, certain crane-berth combinations are not allowed due to safety and logistical reasons.\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with four stages, each with its own sound and lighting system. I want to make sure that the systems are configured so that the music and lights don't interfere with each other. How can I set up the systems to ensure a great experience for the festival-goers?\",\n    \"constraints\": \"Some sound and lighting combinations are not compatible, and I need to make sure that the systems are set up in a way that doesn't cause any conflicts.\"\n  },\n  \"question3\": {\n    \"description\": \"I'm designing a new theme park with four roller coasters, each with its own safety and operational requirements. I want to make sure that the coasters are configured so that they can operate safely and efficiently. How can I assign the safety and operational settings to each coaster to meet these goals?\",\n    \"constraints\": \"Certain safety and operational settings are not compatible with each other, and I need to make sure that the coasters are set up in a way that meets all the safety and operational requirements.\"\n  },\n  \"question4\": {\n    \"description\": \"Four friends want to share four different colored pens. How can they share the pens so that each friend gets a pen that they like?\",\n    \"constraints\": \"Some pen-color combinations are not allowed due to personal preferences.\"\n  },\n  \"question5\": {\n    \"description\": \"As a hospital administrator, I need to assign four surgeons to four operating rooms, each with its own specific equipment and staffing requirements. The surgeons have different specialties and preferences, and the operating rooms have different layouts and capacities. How can I assign the surgeons to the operating rooms to maximize efficiency and minimize conflicts?\",\n    \"constraints\": \"Some surgeon-operating room combinations are not allowed due to the surgeons' specialties and preferences, and the operating rooms' equipment and staffing requirements. Additionally, certain combinations may lead to conflicts or inefficiencies.\"\n  }\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Traffic Lights Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Traffic Lights Problem\",\n  \"description\": \"This problem models a four-way traffic junction with eight traffic lights, four for vehicles and four for pedestrians. The goal is to find a valid configuration of traffic lights that satisfies certain safety constraints.\",\n  \"variables\": \"V = (V1, V2, V3, V4) \u2208 {r, ry, g, y}\u2074, P = (P1, P2, P3, P4) \u2208 {r, g}\u2074. V represents the traffic lights for vehicles, and P represents the traffic lights for pedestrians.\",\n  \"constraints\": \"\u2200i, j \u2208 {1, 2, 3, 4} where j = (1+i) mod 4, (Vi, Pi, Vj, Pj) \u2208 {(r, r, g, g), (ry, r, y, r), (g, g, r, r), (y, r, ry, r)}. These constraints ensure that the traffic lights are configured in a safe and valid way.\",\n  \"objective\": \"Satisfy all constraints (i.e., find a feasible solution)\"\n}\n```\n\nNote that this problem is a feasibility problem, meaning that the goal is to find a solution that satisfies all constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "TTPPV": {"__data__": {"id_": "TTPPV", "embedding": null, "metadata": {"problem_family": "TTPPV", "model_name": "TTPPV", "source_code": "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Traveling Tournament Problem with Predefined Venues\n%\n% Compact single round robin schedule minimizing total travel distance\n% The venue of each game has already been decided\n% Specialized for CIRC instances (circular distances)\n%\n% Author: Gilles Pesant\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\ninclude \"globals.mzn\";\n\nint: nbTeams;\nint: nbRounds = nbTeams-1;\n\nset of int: Teams = 1..nbTeams;\nset of int: Rounds = 1..nbRounds;\nset of int: Travels = 1..nbRounds+1;\n\n% predefined venue: pv[i][j] = 1 iff i is playing at home against j\narray[Teams,Teams] of 1..2: pv; \n\n% circular distances: for i>=j, distance[i][j]=min{i-j,j-i+nbTeams}\narray[Teams,Teams] of int: distance = \n  array2d(Teams,Teams,[ if i>=j then (if i-j < j-i+nbTeams then i-j else j-i+nbTeams endif) \n                                else (if j-i < i-j+nbTeams then j-i else i-j+nbTeams endif) \n                                endif | i,j in Teams]);\n\n% output related\nint: digs = ceil(log(10.0,int2float(nbTeams)));\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% decision variables: in round k, team i plays against team opponent[i,k]\narray[Teams,Rounds] of var Teams: opponent;\n\n% auxiliary variables: venue[i,k] = 1 iff team i plays at home in round k\narray[Teams,Rounds] of var 1..2: venue;\nconstraint forall (i in Teams, k in Rounds) (venue[i,k] = pv[i,opponent[i,k]]);\n\n% auxiliary variables: travel[i,k] is the distance travelled by team i to go play in round k (includes travelling back home after last round)\narray[Teams,Travels] of var 0..(nbTeams div 2): travel;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n% a team cannot play against itself\nconstraint forall (i in Teams, k in Rounds) (opponent[i,k] != i);\n\n% in round k, i plays j means j plays i\nconstraint forall (i in Teams, k in Rounds) (opponent[opponent[i,k],k] = i);\n\n% for each team i, all opponents are different\nconstraint forall (i in Teams) (alldifferent([opponent[i,k] | k in Rounds]));\n\n% for each round k, all opponents are different (implied constraint)\nconstraint forall (k in Rounds) (alldifferent([opponent[i,k] | i in Teams]));\n\n% for each team i, there can be at most 3 consecutive home games and at most 3 consecutive away games\nint: nbStates = 7;\nset of int: States = 1..nbStates;\narray[States,1..2] of int: delta = \n  [| 2, 5\n   | 3, 5\n   | 4, 5\n   | 0, 5\n   | 2, 6\n   | 2, 7\n   | 2, 0 |];\nconstraint forall (i in Teams) (regular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States));\n\n% symmetry breaking: distances are symmetric so reversing the rounds yields a schedule of same cost\nconstraint (opponent[1,1] < opponent[1,nbRounds]);\n\n% define travel variables wrt venues of current- and next-round games\nconstraint forall (i in Teams) (\n\t(venue[i,1]=1 -> travel[i,1] = 0) /\\\n\t(venue[i,1]=2 -> travel[i,1] = distance[i,opponent[i,1]]) );\nconstraint forall (i in Teams, k in 1..nbRounds-1) (\n\t((venue[i,k]=1 /\\ venue[i,k+1]=1) -> travel[i,k+1] = 0) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=1) -> travel[i,k+1] = distance[opponent[i,k],i]) /\\\n\t((venue[i,k]=1 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[i,opponent[i,k+1]]) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[opponent[i,k],opponent[i,k+1]]) );\nconstraint forall (i in Teams) (\n\t(venue[i,nbRounds]=1 -> travel[i,nbRounds+1] = 0) /\\\n\t(venue[i,nbRounds]=2 -> travel[i,nbRounds+1] = distance[opponent[i,nbRounds],i]) );\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nvar int: totalTravel;\nconstraint totalTravel = sum (i in Teams, k in Travels) (travel[i,k]);\nsolve minimize totalTravel;\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\noutput [\"SCHEDULE\\n\"] ++ \n       [ if fix(venue[i,k]) == 1 then \" \" else \"@\" endif ++\n\t show_int(digs,opponent[i,k]) ++ \" \" ++ \n         if k == nbRounds /\\ i != nbTeams then \"\\n\" else \"\" endif\n         | i in Teams, k in Rounds ] ++ [\"\\n\"] ++\n       [\"total travel = \"] ++ [show(totalTravel)] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Traveling Tournament Problem with Predefined Venues:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager for a company that operates a fleet of delivery trucks. We have 8 trucks that need to visit 8 different warehouses exactly once, with each warehouse having a predetermined location. I want to minimize the total distance traveled by the trucks while ensuring that each truck visits each warehouse exactly once. How can I optimize the delivery schedule?\",\n    \"goal\": \"Minimize total distance traveled\",\n    \"constraints\": \"Each truck visits each warehouse exactly once, predetermined warehouse locations\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a road trip with my friends to visit 7 different cities. We want to make sure we visit each city only once and return to our starting point. We've already booked our accommodations in each city, so we know where we'll be staying. How can we plan our trip to minimize the total distance we drive?\",\n    \"goal\": \"Minimize total distance driven\",\n    \"constraints\": \"Visit each city only once, return to starting point, predetermined accommodations\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a camp counselor and I need to plan a hike for 9 campers to visit 9 different scenic spots. Each spot has a predetermined location and we want to make sure each camper visits each spot only once. How can we plan the hike to minimize the total distance walked?\",\n    \"goal\": \"Minimize total distance walked\",\n    \"constraints\": \"Each camper visits each spot only once, predetermined spot locations\"\n  },\n  \"question4\": {\n    \"description\": \"I need to visit 5 different offices in a day. Each office has a predetermined location. How can I minimize my travel time?\",\n    \"goal\": \"Minimize travel time\",\n    \"constraints\": \"Visit each office only once, predetermined office locations\"\n  },\n  \"question5\": {\n    \"description\": \"I'm the operations manager for a company that provides medical services to 12 different clinics. We have 12 medical professionals who need to visit each clinic exactly once to provide services. Each clinic has a predetermined location and we need to ensure that each medical professional visits each clinic only once. We also need to consider the travel time and distance between clinics to minimize the total travel time and distance. Additionally, we need to ensure that each medical professional has at least one day off during the week. How can we optimize the schedule to minimize the total travel time and distance while ensuring each medical professional has a day off?\",\n    \"goal\": \"Minimize total travel time and distance\",\n    \"constraints\": \"Each medical professional visits each clinic only once, predetermined clinic locations, at least one day off per week\"\n  }\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Traveling Tournament Problem with Predefined Venues\",\n\"description\": \"This problem involves scheduling a single round-robin tournament where each team plays every other team exactly once, with the added constraint that the venue of each game has already been decided. The goal is to find a schedule that minimizes the total travel distance of all teams.\",\n\"variables\": \"opponent[i,k], venue[i,k], travel[i,k], totalTravel\\n\"\n             + \"opponent[i,k]: the opponent of team i in round k\\n\"\n             + \"venue[i,k]: 1 if team i plays at home in round k, 2 otherwise\\n\"\n             + \"travel[i,k]: the distance travelled by team i to go play in round k\\n\"\n             + \"totalTravel: the total travel distance of all teams\",\n\"constraints\": \"opponent[i,k] != i, opponent[opponent[i,k],k] = i, alldifferent([opponent[i,k] | k in Rounds]),\\n\"\n             + \"alldifferent([opponent[i,k] | i in Teams]), regular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States),\\n\"\n             + \"opponent[1,1] < opponent[1,nbRounds], travel constraints\\n\"\n             + \"The constraints ensure that each team plays every other team exactly once, with the correct venue, and that the travel distances are correctly calculated.\",\n\"objective\": \"minimize totalTravel\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "vessel-loading": {"__data__": {"id_": "vessel-loading", "embedding": null, "metadata": {"problem_family": "vessel-loading", "model_name": "vessel-loading", "source_code": "% prob008.mzn: Vessel Loading\n% Problem details available at\n% http://www.csplib.org/Problems/prob008/\n\n% Author: Frej Knutar Lewander\n\nint: deck_width; % width of deck\nint: deck_length; % height of deck\nint: n_containers; % number of containers\nint: n_classes; % number of container classes\n\narray[int] of int: width;\n% width[c] = width of container c\narray[int] of int: length;\n% length[c] = length of container c\narray[int] of int: class;\n% class[c] = class of container c\narray[int, int] of int: separation;\n% separation[a, b] = the minimum allowed separation between\n%                    containers of classes a and b\n\nset of int: Containers = 1..n_containers;\n\narray[Containers] of var 0..deck_width: Left;\n% Left[c] = leftmost point of container c\narray[Containers] of var 0..deck_width: Right;\n% Right[c] = rightmost point of container c\narray[Containers] of var 0..deck_length: Bottom;\n% Bottom[c] = bottommost point of container c\narray[Containers] of var 0..deck_length: Top;\n% Top[c] = topmost point of container c\n\narray[Containers] of var 1..2: orientation;\n% orientation[c] = 2 if container c is turned 90 degrees, else 1.\n\nconstraint\n  forall (c in Containers) (\n    let {\n      array[1..2] of int: ElemWidth = [width[c], length[c]];\n      array[1..2] of int: ElemLength = [length[c], width[c]]\n    }\n    in \n      Right[c] = Left[c] + ElemWidth[orientation[c]] /\\\n      Top[c] = Bottom[c] + ElemLength[orientation[c]]\n  )\n;\n\nconstraint\n  forall(c, k in Containers where c < k) (\n    Left[c] >= Right[k] + separation[class[c], class[k]] \\/\n    Right[c] + separation[class[c], class[k]] <= Left[k] \\/\n    Bottom[c] >= Top[k] + separation[class[c], class[k]] \\/\n    Top[c] + separation[class[c], class[k]] <= Bottom[k]\n  )\n;\n\n% Excessive (pretty) output\noutput [\"\u250c\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2510\\n\"] ++\n       [if x == 0 then \"\u2502\" else \"\" endif ++\n        let {\n          bool: l = exists([fix(Left[c])   = x | c in Containers]);\n          bool: r = exists([fix(Right[c])  = x | c in Containers]);\n          bool: b = exists([fix(Bottom[c]) = y | c in Containers]);\n          bool: t = exists([fix(Top[c])    = y | c in Containers])\n        } in\n          if     l /\\ r /\\ b /\\ t then \"\u253c\"\n          elseif l /\\ r /\\ b      then \"\u252c\"\n          elseif l /\\ r /\\      t then \"\u2534\"\n          elseif l /\\      b /\\ t then \"\u251c\"\n          elseif      r /\\ b /\\ t then \"\u2524\"\n          elseif l /\\      b      then \"\u250c\"\n          elseif l /\\           t then \"\u2514\"\n          elseif      r /\\ b      then \"\u2510\"\n          elseif      r /\\      t then \"\u2518\"\n          elseif l \\/ r           then \"\u2502\"\n          elseif           b \\/ t then \"\u2500\" \n          else \" \" endif ++\n        if x == deck_width then \"\u2502\\n\" else \"\" endif\n        | y in 0..deck_length, x in 0..deck_width] ++\n        [\"\u2514\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2518\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Vessel Loading problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a furniture company, and I need to load a shipment of 15 different pieces of furniture onto a truck with a deck width of 8 feet and a length of 20 feet. Each piece of furniture has a specific width, length, and class (e.g., fragile, heavy, etc.), and I need to ensure that certain pieces are not placed adjacent to each other due to safety and damage concerns. How can I optimize the loading of the truck to minimize wasted space and ensure a safe and efficient delivery?\",\n  \"question2\": \"I'm planning a backyard party and I need to set up a bunch of tables and chairs for my guests. I have 10 tables of different sizes and 20 chairs, and I want to fit them all in my backyard, which is 15 feet by 20 feet. Some tables need to be kept away from each other because they're for different activities, and I want to make sure there's enough space for people to move around. Can you help me figure out how to arrange everything so it fits and looks nice?\",\n  \"question3\": \"I'm 12 years old and I love playing with my LEGO sets. I have a bunch of different LEGO bases and pieces, and I want to build a big city on my desk, which is 3 feet by 2 feet. Some of the bases are really big and some are small, and I want to make sure I have enough space for all of them. Can you help me figure out how to fit all my LEGO pieces on my desk so it looks like a cool city?\",\n  \"question4\": \"I have 5 boxes of different sizes and I need to fit them in a 4x4 foot storage unit. How can I do it?\",\n  \"question5\": \"I'm the event coordinator for a large music festival, and I need to set up a VIP area with 20 luxury tents, 15 food and beverage stations, and 10 merchandise booths. The area is 100 feet by 50 feet, and each tent, station, and booth has specific size and class requirements (e.g., some tents need to be near the stage, while others need to be near the food). Additionally, I need to ensure that there are at least 5 feet of separation between each tent, station, and booth for safety and accessibility reasons. Can you help me design a layout that meets all these requirements and ensures a great experience for our VIP guests?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Vessel Loading problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n```\n{\n  \"name\": \"Vessel Loading\",\n  \"description\": \"The Vessel Loading problem is a classic constraint satisfaction problem that involves loading containers of different sizes and classes onto a vessel with a fixed deck width and length, while ensuring that certain separation constraints between containers of different classes are satisfied.\",\n  \"variables\": \"Left[c], Right[c], Bottom[c], Top[c], orientation[c] for c in Containers. \n                These variables represent the leftmost and rightmost points, bottommost and topmost points, and orientation (0 or 90 degrees) of each container c, respectively.\",\n  \"constraints\": \"Right[c] = Left[c] + ElemWidth[orientation[c]] and Top[c] = Bottom[c] + ElemLength[orientation[c]] for all c in Containers. \n                  Left[c] >= Right[k] + separation[class[c], class[k]] or Right[c] + separation[class[c], class[k]] <= Left[k] or \n                  Bottom[c] >= Top[k] + separation[class[c], class[k]] or Top[c] + separation[class[c], class[k]] <= Bottom[k] for all c, k in Containers where c < k. \n                  These constraints ensure that each container is placed within the deck boundaries and that the separation constraints between containers of different classes are satisfied.\",\n  \"objective\": \"Not specified (this is a constraint satisfaction problem, not an optimization problem)\"\n}\n```\n\nNote that the objective is not specified because this is a constraint satisfaction problem, where the goal is to find a feasible solution that satisfies all the constraints, rather than to optimize a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "warehouses": {"__data__": {"id_": "warehouses", "embedding": null, "metadata": {"problem_family": "warehouses", "model_name": "warehouses", "source_code": "% RUNS ON mzn_mer_fd\n% RUNS ON mzn_mer_lp\n% RUNS ON zinc_fdic_mznlib\n% RUNS ON minizinc_cpx\n% RUNS ON minizinc_fd\n%-----------------------------------------------------------------------------\n% Warehouse allocation\n% (Problem 034 in CSPLib)\n% vim: ft=zinc ts=2 sw=2 et tw=0\n%\n% Guido Tack, tack@gecode.org\n% 2007-02-22\n%\n% Ported from the Gecode example\n%-----------------------------------------------------------------------------\n% A company needs to construct warehouses to supply stores with goods.  Each\n% warehouse possibly to be constructed has a certain capacity defining how many\n% stores it can supply.  Constructing a warehouse incurs a fixed cost.  Costs\n% for transportation from warehouses to stores depend on the locations of\n% warehouses and stores.\n%\n% Determine which warehouses should be constructed and which warehouse should\n% supply which store such that overall cost (transportation cost plus\n% construction cost) is smallest.\n%-----------------------------------------------------------------------------\n\ninclude \"globals.mzn\";\n\n%-----------------------------------------------------------------------------\n% Instance\n\nn_suppliers = 5;\nn_stores = 10;\nbuilding_cost = 30;\n\ncapacity = [1,4,2,1,3];\n\ncost_matrix =\n [|20, 24, 11, 25, 30\n  |28, 27, 82, 83, 74\n  |74, 97, 71, 96, 70\n  | 2, 55, 73, 69, 61\n  |46, 96, 59, 83,  4\n  |42, 22, 29, 67, 59\n  | 1,  5, 73, 59, 56\n  |10, 73, 13, 43, 96\n  |93, 35, 63, 85, 46\n  |47, 65, 55, 71, 95|]; \n\n%-----------------------------------------------------------------------------\n% Model\n\nint: n_suppliers;\nint: n_stores;\nint: building_cost;\narray[1..n_suppliers] of int: capacity;\narray[1..n_stores,1..n_suppliers] of int: cost_matrix;\n\nint: MaxCost = max(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]);\nint: MaxTotal =   (n_suppliers * building_cost) \n                + sum(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]); \n\narray[1..n_stores] of var 1..n_suppliers: supplier;\narray[1..n_suppliers] of var bool: open;\narray[1..n_stores] of var 1..MaxCost: cost;\nvar 1..MaxTotal: tot;\n\nconstraint\n  sum (i in 1..n_suppliers) (building_cost * bool2int(open[i])) +\n  sum (i in 1..n_stores) (cost[i])\n  = tot;\n\nconstraint\n  forall (i in 1..n_stores) (\n    cost_matrix[i,supplier[i]] = cost[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    let {\n      var int: use\n     } in\n    count(supplier,i,use) /\\ use <= capacity[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    (exists (j in 1..n_stores) (supplier[j] == i)) == open[i]\n  );\n\nsolve\n  :: int_search(\n    supplier ++ cost ++ [bool2int(open[i]) | i in 1..n_suppliers],\n    first_fail,\n    indomain_split,\n    complete\n  )\n  minimize tot;\n\noutput\n  [ \"warehouses:\" ]\n  ++\n  [ \"\\ntot = \", show(tot) ]\n  ++\n  [ \"\\nsupplier = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(supplier[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\ncost = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(cost[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\nopen = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(open[i]) ++\n    if i = n_suppliers then \"\\n]\\n\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_suppliers\n  ]\n\n%-----------------------------------------------------------------------------\n%-----------------------------------------------------------------------------\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to allocate distribution centers to serve a network of retail stores. Each distribution center has a limited capacity to serve stores, and the company wants to minimize the total cost of transportation and distribution center setup. How can the company determine the optimal allocation of distribution centers to stores, considering the capacity constraints and transportation costs?\",\n  \"question2\": \"I'm planning a music festival and need to set up food and drink stalls to serve the attendees. I have a limited budget and want to make sure that each stall can serve a certain number of people. How can I decide which stalls to set up and where, so that everyone gets served and I stay within my budget?\",\n  \"question3\": \"Imagine you're the principal of a new school and need to assign teachers to classrooms. Each teacher has a limited number of students they can teach, and you want to make sure that each student is assigned to a teacher. How can you figure out which teachers to assign to which classrooms, so that every student has a teacher and you don't waste any resources?\",\n  \"question4\": \"Coffee shop chain wants to open new locations. How to allocate stores to warehouses to minimize costs?\",\n  \"question5\": \"A large hospital network is expanding its services to rural areas and needs to allocate medical equipment and staff to different locations. Each piece of equipment has a limited capacity to serve patients, and the hospital wants to minimize the total cost of transportation, equipment setup, and staff salaries. The hospital also has to consider the varying distances between locations and the different types of medical equipment required at each location. How can the hospital determine the optimal allocation of medical equipment and staff to locations, considering the capacity constraints, transportation costs, and staff salaries, while ensuring that each location has the necessary resources to provide quality care to patients?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the Warehouse Allocation Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the requested format:\n\n{\n\"name\": \"Warehouse Allocation Problem\",\n\"description\": \"A company needs to construct warehouses to supply stores with goods. Each warehouse has a certain capacity defining how many stores it can supply. Constructing a warehouse incurs a fixed cost. Costs for transportation from warehouses to stores depend on the locations of warehouses and stores. Determine which warehouses should be constructed and which warehouse should supply which store such that overall cost (transportation cost plus construction cost) is smallest.\",\n\"variables\": \"supplier[i] \u2208 {1, ..., n_suppliers} for i \u2208 {1, ..., n_stores}, open[j] \u2208 {true, false} for j \u2208 {1, ..., n_suppliers}, cost[i] \u2208 {1, ..., MaxCost} for i \u2208 {1, ..., n_stores}, tot \u2208 {1, ..., MaxTotal}. \nsupplier[i] represents the warehouse that supplies store i, open[j] represents whether warehouse j is constructed, cost[i] represents the transportation cost from the warehouse to store i, and tot represents the total cost.\",\n\"constraints\": \"\u2211(i=1 to n_suppliers) (building_cost * bool2int(open[i])) + \u2211(i=1 to n_stores) (cost[i]) = tot, \ncost_matrix[i,supplier[i]] = cost[i] for i \u2208 {1, ..., n_stores}, \ncount(supplier,j,use) \u2227 use \u2264 capacity[j] for j \u2208 {1, ..., n_suppliers}, \n(exists j \u2208 {1, ..., n_stores} (supplier[j] == i)) == open[i] for i \u2208 {1, ..., n_suppliers}. \nThe first constraint ensures that the total cost is the sum of construction costs and transportation costs. The second constraint ensures that the transportation cost from the warehouse to each store is correctly calculated. The third constraint ensures that the capacity of each warehouse is not exceeded. The fourth constraint ensures that a warehouse is constructed if and only if it supplies at least one store.\",\n\"objective\": \"minimize tot\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "water_buckets1": {"__data__": {"id_": "water_buckets1", "embedding": null, "metadata": {"problem_family": "water_buckets1", "model_name": "water_buckets1", "source_code": "% \n% Water buckets problem in Minizinc\n%\n% Inpiration from the OPL code at\n% http://www.dis.uniroma1.it/~tmancini/index.php?currItem=research.publications.webappendices.csplib2x.problemDetails&problemid=018\n\n% \"\"\"\n% Problem description\n% This is a generalization of the CSPLib specification, which is as follows: Given an 8 pint bucket of water, and two empty buckets which can contain 5 and 3 pints respectively, the problem requires to divide the water into two by pouring water between buckets (that is, to end up with 4 pints in the 8 pint bucket, and 4 pints in the 5 pint bucket) in the smallest number of transfers.\n%\n% The generalization consists in making the specification parametric with respect to the start and goal configurations, which are now inputs to the problem.\n%\n% Problem input\n%\n% * Function start, assigning an initial amount of water to each bucket\n% * Function goal, assigning the goal amount of water to each bucket \n%\n% Search space\n% The set of all possibile sequences of configurations (states), where a configuration is a triple encoding the amount of water in each bucket at a given time-step\n%\n% Constraints\n%\n% * C1: At beginning, buckets contain the amount of water specified by function start\n% * C2: At the end, buckets contain the amount of water specified by function goal\n% * C3: The configuration at each step differs from that of the next one in that the amount of water of exactly 2 buckets changes (that in the others remain the same)\n% * C4: The overall amount of water is the same at each time step\n% * C5: After each transition (involving buckets b1 and b2), either the source bucket becomes empty, or the target becomes full\n% \"\"\"\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc/\n%\n\n% Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/\n\nint: nb_buckets = 3;\nint: max_step = 10; % 8 for satisfy\nset of int: buckets = 1..nb_buckets;\nset of int: steps = 1..max_step;\narray[buckets] of int: capacity = [8,5,3];\narray[buckets] of int: start = [8,0,0];\narray[buckets] of int: goal = [4,4,0];\n\n% Search space: The set of all possibile sequences of configurations (states), \n% where a configuration is a triple encoding the amount of water in each \n% bucket at a given time-step\narray[steps, buckets] of var int: state;\nvar 1..max_step: goal_step;\n\n% Objective function\nsolve minimize goal_step;\n% solve :: int_search( [ state[i,j] | i in steps, j in buckets ] , \"first_fail\", \"indomain\", \"complete\")  minimize goal_step;\n\nconstraint\n%   goal_step <= 8 % for solve satisfy\n%   /\\\n   % assertions\n   forall(b in buckets) (\n      (start[b] <= capacity[b]) /\\ (goal[b] <= capacity[b])\n   )\n   /\\\n   sum(b in buckets)(start[b]) = sum(b in buckets)(goal[b])\n   /\\\n   forall(s in steps, b in buckets) (\n      state[s,b] >= 0 /\\\n      state[s,b] <= capacity[b]\n   )\n   /\\\n   forall(b in buckets) (\n      % C1: At beginning, buckets contain the amount of water specified by function start\n      state[1,b]=start[b]\n      /\\\n      % C2: At the end, buckets contain the amount of water specified by function goal\n      state[goal_step,b] = goal[b]\n   )\n   /\\\n   forall(step in 1..max_step-1) (\n      % C3: The configuration at each step differs from that of the next one in that the amount of\n      % water of exactly 2 buckets changes (that in the others remain the same)\n      sum(b in buckets)( bool2int(state[step,b] != state[step+1, b])) = 2\n      /\\\n      % C4: The overall amount of water is the same at each time step\n      sum(b in buckets)(state[step,b]) = sum(b in buckets)(state[step+1,b])\n      /\\\n\n      % C5: After each transition (involving buckets b1 and b2), either the source\n      % bucket becomes empty, or the target becomes full\n      forall(b1, b2 in buckets where b1 != b2) (\n         ((state[step, b1] != state[step+1, b1]) /\\ (state[step, b2] != state[step+1, b2])) ->\n            (state[step+1,b1] = 0 \\/ state[step+1,b1] = capacity[b1] \\/\n             state[step+1,b2] = 0 \\/ state[step+1,b2] = capacity[b2])\n     )\n   )\n;\n\n\noutput [\n  if s = 1 /\\ b = 1 then \n    \"goal_step: \" ++ show(goal_step)\n  else \"\" endif ++\n  if b = 1 then \"\\n\" else \" \" endif ++\n  show(state[s, b])\n  | s in steps, b in buckets\n\n] \n++ [\"\\n\"];\n\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Water Buckets Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to transfer 800 units of inventory from a large storage container to two smaller containers with capacities of 500 and 300 units, respectively. The goal is to achieve a specific distribution of inventory in the smaller containers (400 units in one and 400 units in the other) in the minimum number of transfers possible, while ensuring that the total inventory remains the same at each step. How can I achieve this?\",\n  \"question2\": \"I'm planning a party and I need to serve 8 liters of juice to my guests. I have three containers with capacities of 8, 5, and 3 liters, respectively. I want to divide the juice into two containers with 4 liters each, but I'm not sure how to do it. Can you help me figure out the minimum number of pours I need to make to achieve this?\",\n  \"question3\": \"I'm playing a game where I need to move 8 tokens from a big bucket to two smaller buckets with capacities of 5 and 3 tokens, respectively. The goal is to get 4 tokens in each of the smaller buckets. I can move tokens from one bucket to another, but I need to do it in the fewest moves possible. Can you help me win the game?\",\n  \"question4\": \"Minimize pours to divide 8 units into 2 containers with 4 units each, using 3 containers with capacities 8, 5, and 3 units.\",\n  \"question5\": \"I'm a production planner at a manufacturing plant, and I need to allocate 800 kilograms of raw material to two production lines with capacities of 500 and 300 kilograms, respectively. The goal is to achieve a specific distribution of raw material in the production lines (400 kilograms in one and 400 kilograms in the other) in the minimum number of transfers possible, while ensuring that the total raw material remains the same at each step. The production lines have different processing rates, and I need to minimize the number of transfers to reduce production downtime. Additionally, I need to ensure that the raw material is transferred in a way that minimizes waste and maximizes efficiency. How can I achieve this?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Water Buckets Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Water Buckets Problem\",\n\"description\": \"The Water Buckets Problem is a classic problem in constraint programming. It involves dividing a certain amount of water into two buckets of different capacities using a series of pouring operations. The goal is to find the minimum number of transfers required to achieve the desired distribution of water.\",\n\"variables\": \"state[s, b], goal_step; s \u2208 {1, ..., max_step}, b \u2208 {1, ..., nb_buckets}. state[s, b] represents the amount of water in bucket b at step s, and goal_step is the minimum number of steps required to achieve the goal configuration.\",\n\"constraints\": \"C1: state[1, b] = start[b] \u2200b; C2: state[goal_step, b] = goal[b] \u2200b; C3: \u2211(b \u2208 buckets)(state[step, b] \u2260 state[step+1, b]) = 2 \u2200step; C4: \u2211(b \u2208 buckets)(state[step, b]) = \u2211(b \u2208 buckets)(state[step+1, b]) \u2200step; C5: (state[step, b1] \u2260 state[step+1, b1] \u2227 state[step, b2] \u2260 state[step+1, b2]) \u2192 (state[step+1, b1] = 0 \u2228 state[step+1, b1] = capacity[b1] \u2228 state[step+1, b2] = 0 \u2228 state[step+1, b2] = capacity[b2]) \u2200step, b1, b2. These constraints ensure that the initial and goal configurations are respected, and that the water is poured between buckets in a valid way.\",\n\"objective\": \"Minimize goal_step\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "water_buckets_regular": {"__data__": {"id_": "water_buckets_regular", "embedding": null, "metadata": {"problem_family": "water_buckets_regular", "model_name": "water_buckets_regular", "source_code": "% \n% MiniZinc model for the water buckets problem\n%\n% Model created by Hakan Kjellerstrand, hakank@gmail.com\n% See also my MiniZinc page: http://www.hakank.org/minizinc\n\n%\n% Solution should be\n%   x: [1, 9, 10, 11, 12, 13, 14, 15]\n%   8,0,0 -> 3,5,0\n%   3,5,0 -> 3,2,3\n%   3,2,3 -> 6,2,0\n%   6,2,0 -> 6,0,2\n%   6,0,2 -> 1,5,2\n%   1,5,2 -> 1,4,3\n%   1,4,3 -> 4,4,0\n% \ninclude \"globals.mzn\";\n\nint: n_states = 15;\nint: input_max = 15;\nint: initial_state = 1;\nset of int: accepting_states = {15};\n\n\n% distance\narray[1..n_states, 1..n_states] of 0..input_max: transition_fn =\narray2d(1..n_states, 1..n_states,\n[%1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n  0, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 1\n  0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 2 \n  0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 3\n  0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 4\n  0, 0, 0, 0, 0, 6, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 5\n  0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, % 6\n  0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, % 7\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, % 8 \n  0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 0, 0, 0, 0, % 9\n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0, %10\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0, 0, 0, %11 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,13, 0, 0, %12\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14, 0, %13 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %14\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %15\n]);\n\n\narray[1..n_states] of string:  nodes = [\n        \"8,0,0\", % 1 start\n        \"5,0,3\", % 2\n        \"5,3,0\", % 3 \n        \"2,3,3\", % 4 \n        \"2,5,1\", % 5\n        \"7,0,1\", % 6\n        \"7,1,0\", % 7\n        \"4,1,3\", % 8\n        \"3,5,0\", % 9\n        \"3,2,3\", % 10\n        \"6,2,0\", % 11\n        \"6,0,2\", % 12\n        \"1,5,2\", % 13\n        \"1,4,3\", % 14\n        \"4,4,0\"  % 15 goal\n        ];\n\n\narray[1..input_max] of var 0..input_max: x;\nvar 0..input_max: cost;\n\n% solve satisfy;\nsolve minimize cost;\n\nconstraint\nregular(x, n_states, input_max, transition_fn,\n        initial_state, accepting_states)\n;\n\nconstraint\n   cost = 2+sum([bool2int(x[i-1] != x[i] ) | i in 2..input_max])\n;\n\noutput \n[\"cost: \" ++ show(cost) ++ \"\\n\"] ++\n[show(initial_state) ++ \" \"] ++\n[\n  if fix(x[i]) < input_max then show(x[i]) ++ \" \" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(input_max) ++ \"\\n\"] ++ \n[\"\\n\\n\"] ++\n\n[show(nodes[initial_state]) ++ \"\\n\"] ++\n[\n  if fix(x[i]) < input_max then show(nodes[fix(x[i])]) ++ \"\\n\" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(nodes[input_max]) ++ \"\\n\"] ++ \n[\"\\n\"];\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to optimize the movement of goods between different storage areas. I have 15 possible locations, and each location has a specific capacity. I need to find the shortest sequence of moves to transfer goods from one location to another while respecting the capacity constraints. Can you help me model and solve this problem?\",\n  \"question2\": \"I'm planning a road trip with my friends, and we want to visit 15 different attractions. We have a limited amount of time and fuel, and we need to make sure we don't visit the same attraction twice. Can you help me figure out the best order to visit the attractions so we can see as many as possible while minimizing our travel time?\",\n  \"question3\": \"I'm a kid, and I love playing with my toy blocks! I have 15 different blocks of different shapes and sizes, and I want to build a tower that reaches the ceiling. But, I can only move one block at a time, and I need to make sure the tower doesn't fall. Can you help me find the best way to build the tower by moving the blocks in the right order?\",\n  \"question4\": \"I need to schedule 15 tasks on a machine, but the machine can only do one task at a time. How can I minimize the number of task switches to maximize efficiency?\",\n  \"question5\": \"I'm a production planner at a manufacturing plant, and I need to optimize the production sequence of 15 different products. Each product has a specific production time, and I need to minimize the total production time while respecting the production capacity constraints. Additionally, I need to ensure that the production sequence is feasible given the availability of raw materials and equipment. Can you help me model and solve this complex problem to maximize our production efficiency?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and they do not necessarily use the traditional or classical context of the Water Buckets Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Water Buckets Problem\",\n\"description\": \"The Water Buckets Problem is a classic problem in constraint programming. It involves finding a sequence of states to measure exactly 4 liters of water using three buckets of capacities 8, 5, and 3 liters. The goal is to find the shortest sequence of states to achieve this.\",\n\"variables\": \"x = [x1, x2, ..., xn], where xi \u2208 {0, 1, ..., 15}, and cost \u2208 {0, 1, ..., 15}. x represents the sequence of states, and cost represents the total number of steps required to achieve the goal.\",\n\"variables_explanation\": \"The decision variables x represent the sequence of states, where each state is a configuration of the three buckets. The variable cost represents the total number of steps required to achieve the goal of measuring exactly 4 liters of water.\",\n\"constraints\": \"regular(x, n_states, input_max, transition_fn, initial_state, accepting_states), cost = 2 + \u2211[bool2int(xi-1 != xi) | i in 2..input_max]\",\n\"constraints_explanation\": \"The regular constraint ensures that the sequence of states x follows the transition function defined by the problem. The second constraint calculates the cost of the sequence, which is the total number of steps required to achieve the goal. The cost is calculated as 2 plus the sum of the number of times the state changes.\",\n\"objective\": \"minimize cost\"\n}\n\nNote: The problem is actually a variation of the Water Buckets Problem, where the goal is to measure exactly 4 liters of water using three buckets of capacities 8, 5, and 3 liters. However, the model provided does not exactly represent this problem. It seems to be a more general model for finding a sequence of states that satisfies certain transition rules, and the goal is to find the shortest sequence.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}}}