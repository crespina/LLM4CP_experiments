{"docstore/metadata": {"flattening10": {"doc_hash": "a334250d29bd37869857ad1d75c82ad594a33ee3b3929e37878f3d433ee3812e"}, "domwdeg": {"doc_hash": "bc601b7e3121674b9d160e01a89155410ef9843ddcf1a6e7c2acd5a47b1c986d"}, "table_seating_gcc": {"doc_hash": "a370ed8067e9334856388ed3733f41e6ca20824dac85cf409e91607bd28709af"}, "langford": {"doc_hash": "0edbf8352d840a0c81a24ff6f047fb5082adbff0ff94ded205f9e078c1f6c188"}, "setselectr2": {"doc_hash": "c0517895cb3b0b2995de5a786cc6324a83fad0aca1dee857017006003168868e"}, "mip3": {"doc_hash": "9d248560bd68b35bb7cbce6bfcbbcb4a495ca63ee860cd9de3b1d8a39ebb7173"}, "carpet_cutting": {"doc_hash": "3f66eac7b3fbc94177c656527e395ee84e6d9b0c495676abb3d96f8edf5192ef"}, "flattening6": {"doc_hash": "0bce7942df806b62c2a91e904d75eca99649a644b43c6c28edb6b2521e5fbc66"}, "jobshop3": {"doc_hash": "fceaf4588956174c7529490bba0344985dd6cc968ba1b3bc8289319f23ec76bc"}, "flattening2": {"doc_hash": "c1aaee913304c5a32865c67a9589e530bb506948a9908a41f58ec256428e8090"}, "flattening13": {"doc_hash": "5956ae9066e16c99d9099fa1df74a995369415fc9fc73899c521c9b8c777adea"}, "jobshop": {"doc_hash": "3cb53a34a1e47b521096d31b16c20cfb19f273de11a450b7c88fdc4005101c73"}, "toy_problem": {"doc_hash": "05771f052febfba8c5394554bbe83a3a66ea13fd8d4084f20e43236cf68edbed"}, "assign": {"doc_hash": "2172d2eca99fd615336e10ec830aef3e6840cd56f1580816d074ab0593637d9b"}, "toomany": {"doc_hash": "9694850e6190172c15af927e176586952d58e8bfedce5497490222d1fa7fd239"}, "constrained_connected": {"doc_hash": "0c808cd5b84890f8b91aa5073d4ab096dac35fa1a3d1107052fc3baba66fd011"}, "teamselect": {"doc_hash": "085a35a33d66c5d82e1d66b1012cb544dcd50d3058a3b2245d8590afbd2d90d3"}, "knapsack01set": {"doc_hash": "dea47e50d7ccba23538a797310304618f2a9baa909a7770ca06543eeebbe498c"}, "itemset_mining": {"doc_hash": "63d19b9eb2ab5c28967253eedcbd122d999b3b2f159028a5983858e71ec87e6a"}, "restarta": {"doc_hash": "f76410fa24c7e0baa2aa9527f9c4ee04b4b41339c816aca3506003479099c00b"}, "flattening1": {"doc_hash": "5a3719503c6b5259b21918e3205c47753382c544c38450b6bedf6a5d2aa33d36"}, "rel_sem": {"doc_hash": "5936654f6b8c3585f1ce60e5deba9aed8355f2a664b04c314619ef090086fa35"}, "test": {"doc_hash": "01037e998cd13b4377c9d70ba289bc2800ecb19158051afbc054f849957f532a"}, "flattening9": {"doc_hash": "6e494a3fa831d22002e4bb7e936263d60d1d1b70ff3b326ce01074a1af15c2c7"}, "ltsp": {"doc_hash": "3f54794391bf6f0f774087354f06c6c151a2c07847481795b79217f10df07bc3"}, "cell_block_func": {"doc_hash": "7c852660b8fd415ef8a616e8a4c7fdbc7c5596c83f25571dd1e8c9cc5f0fc336"}, "flattening3": {"doc_hash": "75f5a5706285993084b503175c8423ffc4b51a8479d3a05a40ef05ca606f3a29"}, "setselectr": {"doc_hash": "4e80c1dd1535904d6d85a5e46af03829237d695e91f6387f36586cbdd9d0b2e6"}, "compatible_assignment": {"doc_hash": "6d2f6dea76aec3c929dccfc0ea70911bd3da9705c5f68ba83909a0040a53b9ff"}, "evenproblem": {"doc_hash": "0621909425977c9591299c6b1fc142fa4a8eae4420b81755442c822d8437f75b"}, "debug1": {"doc_hash": "5e374dfcf8d0c2dcc25d8b62fd66be6d85dc2e46b815a375a64c9ff17d14867a"}, "cc_geost": {"doc_hash": "92d14980e162492616c7d4234ef2e198ca0e408f43a804ab4bb50dc530e0ad50"}, "mip5": {"doc_hash": "bd003eb260106f2a86382f4a052152db62a5c295ced87f833134c5305aef9e2d"}, "flattening14": {"doc_hash": "4c0edd2f3fb7e5eb8a5a6f7f21a2b13ceb4a7546213b5c44833ea9043934061b"}, "shipping": {"doc_hash": "21c9f78f14d497fbe7fe060f0ec5f6f933d6d7cee0aecb8217b22fbb778b5519"}, "setselectr3": {"doc_hash": "43825755c945984394398e927856a032ae044eb75699daff2f594bf548bb771a"}, "division": {"doc_hash": "cf747ef9bda0581b1d0ce58164270ab25d180c417ea60fa4d753fd87ca799f5f"}, "cluster": {"doc_hash": "e4072f1e3c478a6ca3ba054d694ad3b92ec0a21a63ae2ee3b6ca06bdf8ff3fd9"}, "table_seating": {"doc_hash": "7632313de9368d47d04ad399d007c86855543c9d5de9ec9e431a2ae4bf81b844"}, "project_scheduling_nonoverlap": {"doc_hash": "48766dc72933b4c20b3294ee37cfa16c999e0c67de39fa9c7dc432e25afce14c"}, "lots": {"doc_hash": "fdab89a4b11a5b11f2a39b0e979e929b0fa986d148465dc681bcd5ec873cc082"}, "inverselangford": {"doc_hash": "a0ffaabe0d5d1ada9f3f567e61a30c892e76b59c8b3d82c4d6dabcde2c8cd0cc"}, "flattening12": {"doc_hash": "b9cacbfe5eb6d1d28285d6ecf2dc6dc1b6e521a58488b7710ba227ae268e3699"}, "aust_colord": {"doc_hash": "aa27a29280ad3c2956b00d980eb37a979691f16e03cee3f6c00d634ff58ea2a0"}, "debug3": {"doc_hash": "ab73913444f68f3cebf8bc5d4a41b9e0bd9de001356fb7c13fa44afeb7c94d28"}, "nurses_let": {"doc_hash": "9093e83122cd544a73880438c1ec657db9893d877e593b191a72946bc51e8c8d"}, "project_scheduling": {"doc_hash": "008cf55a5057e8a2a376ff60306a7b54f66d0487dd449d6269c1f7766df97388"}, "combinedlangford": {"doc_hash": "503830fba520765a49d352cb8a888481c89ffe511449d635283f7c13c25017de"}, "flattening11": {"doc_hash": "312e94ffc62b0e571bb2c229fb790918e4cf2afaeadd7301e441cc931e00b9c4"}, "knapsack": {"doc_hash": "f8af0bc0474c7ba33351c875a812f3bfa56ca60b4e379c3a5daa553377d5a080"}, "knapsack01set_concise": {"doc_hash": "cb6c711db5710a3a35ff2ace5e1ee56f1ad8cf79deb9e2908ba61ad1f0626f7c"}, "rcpsp": {"doc_hash": "043796b2626b33a9b6541d8214fb3f9d18b31dd173615f20fbdfef229961c756"}, "jobshop2": {"doc_hash": "defe72a28a342b4ae221c405ddd176d85e26f23c8a5c20732f64b48f7a2a8751"}, "loan": {"doc_hash": "cacf59044a2e20e588db0f1523cf261e46ef5fb82981b8fac0e234980fcd237e"}, "flattening4": {"doc_hash": "6ef648d3b62926685cc9c4c779c7c02412f235726f9fae1dabb1f75107bfe20b"}, "debug2": {"doc_hash": "17b2ba90c0eb6dab39636260dd269f7ea48587565f5bdfaf20374aa41f334d56"}, "context": {"doc_hash": "31097188170448ccd3d32c6196b704b8022b72d55eb0978f7b2b8e133b62efb9"}, "mip2": {"doc_hash": "1588128bff7fb0d4bd97009dc75f544748abc60e89d5b45c6e859fefac9d656d"}, "mip1": {"doc_hash": "d6fa44ace0e9dcc372ba679b3eb540e6fcc61e02abc41562a582c766fb89e52c"}, "flattening7": {"doc_hash": "e9937cc4c500fb0ba1af32698b9cdc84f6b67bdbe91c1d7765c79f8022137d73"}, "assign_dual": {"doc_hash": "7dad3ebd8e39029c83c87bcfaeeeaa33935627d6a7b295a0bf5e9b25a2717523"}, "stableroommates_func": {"doc_hash": "c55305626b945da5e83c335d3b9eb5b289798e08283f55772658f9397f8c13a3"}, "simple-prod-planning": {"doc_hash": "f2fa130b99e29ae5cc1bf523cc68a13742309b00f89696e5249fb80947d2da4b"}, "missingsolution": {"doc_hash": "00ce069c7fb483369fb93e43ec80b37fdb6d1db6fc44141994758354aadf35e8"}, "knapsack01": {"doc_hash": "ae7e271d21de8e74c983965d9aa02f05354a617dd349045770f793d11572c75f"}, "submultisetsum": {"doc_hash": "38e19643d366fe744ec0288e0dc4f6da8aaa3b6e79726c2a1142032595d9eaca"}, "missing_solution": {"doc_hash": "a7c8e8ed5cfbeb408a98bf9203be5e4aee50d4fbe479b5abbd028e2c00bf252a"}, "flattening8": {"doc_hash": "085258b53fed6502530786752d750c0320855bd447105cb2e8c5c2ba1acc3400"}, "aust_color": {"doc_hash": "55dcf8b49c607d85e3105d7b62c6c181e310d1c2e36ac5de9de3b2313ba7478a"}, "queens": {"doc_hash": "cacc7ceda62b1428864f9a95c55799dae417f59c403315f153c058a03f3e5c30"}, "setselect": {"doc_hash": "82074fa19252ed131e9bf66eddfaa5e908ef5c996b898b054e22ba30ee64c04b"}, "assign_inverse": {"doc_hash": "e739c0e60f2156ca5ecb5c8564654fcb7db619fc3d5d3bf71c659b3ac3f6d1d9"}, "crazy_sets_global": {"doc_hash": "dc456261a291b168009c6a24b5a2a7308558fcb34fe563259bba8b5433058d7e"}, "doublechannel": {"doc_hash": "3278dc3ddba54489e1375d576672ebac082c392ba20b39ce83ab0f9da2c400d2"}, "rel_sem2": {"doc_hash": "dc15ea7ee213c33cd8136663b0b54059a90edbd3a0bf84a906104229b0939306"}, "table_example": {"doc_hash": "23e15ed9f6959da012fb95af12e679be3f3bdf0ff54044f80b7880ca91780ce2"}, "teamselect_advanced": {"doc_hash": "ca1b2e199d98dff9bf057b4fdab13fba60bf579d08bff1718f1c490b884b69b9"}, "knapsack01bool": {"doc_hash": "c79e59494a66db8b0877c1ea592f3e54adfcb186be4d681ff02ce8736ecd7f44"}, "trace": {"doc_hash": "2423c67aeb43ce250bb51e9f404e5b1727094f7362864e67cf1f4209e31d78f8"}, "photo": {"doc_hash": "f883bcf9e1f299f276c010fbb2d5dcc857773701a4cd8cc19e1a2951c51bdaab"}, "cell_block": {"doc_hash": "5fef94dcabab5304b83119d3f9ad4712e785001b77aed9389a5a732e7645959b"}, "mip4": {"doc_hash": "86ca8d04a0db87f14a57295878a16f55d00529dfdbbd204c63c030024b17f873"}, "compatible_assignment_opt": {"doc_hash": "3496fbfb2c0f3cfcdc6018e2d756e1c590bbe0f2654a7aa892e96040dcd59684"}, "carpet_cutting_geost": {"doc_hash": "4351351c06a1a12f05d0dfd1481290c2c2f1752ef016da2f4bf20aa40b134768"}, "flattening5": {"doc_hash": "5daca476f3eed5f30f1cd443ad245a9647f01b2ec2ad482a43cbc307a443aaf1"}, "mydiv": {"doc_hash": "17723e16c9657cfce827cc9bd9965d14fdd5f4b918eecb07f5bf2f497a5625a5"}, "restart": {"doc_hash": "8c647ad144fc9994f6874edf641e99dfe35318b444a5fcffb13394157c6ce2d9"}, "restart2": {"doc_hash": "283e7d60713c25d9341412f63feffd0b0022822bc8fdf209170bea8c74d58e4a"}, "square_pack": {"doc_hash": "b980dc0099b121140ed24c6f39e3c06c00e66c2257b6f0f80f5ff7e88c2f1aef"}, "array_quest": {"doc_hash": "d81c2d950b8dbb52f6a07a52eeffecbe48b9db7107936a3b24c612ef1140fd99"}, "graph": {"doc_hash": "e76ea5aff618973e443aafc57da12d0993e44196f52a9e9315a25cb859d1be18"}, "myabs": {"doc_hash": "62d5165adc38d1877bd3bddcbdac5fae9c096dbe7e38b017147fbbcf1a2f0fb2"}, "crazy_sets": {"doc_hash": "2f48943b962d8e0d4ee62e6b9737a83393d4d9f418f3e54a2ff1714cfa355fe1"}, "nurses": {"doc_hash": "d492dbd403aacc64fe843c40d8dcbb2e3de65b2c6b3a0921b5ca705d3dab98ac"}, "stableroommates": {"doc_hash": "994c37f10658340308f3cc1469fcdcb27e4eef957a6102a6dea1307616a41f23"}}, "docstore/data": {"flattening10": {"__data__": {"id_": "flattening10", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening10", "source_code": "predicate far_or_equal(var int:x1, var int:y1,\n                       var int:x2, var int:y2)=\n          man_dist(x1,y1,x2,y2) >= 4 \\/ \n         (x1 = x2 /\\ y1 = y2);\n\nfunction var int: man_dist(var int:u1, \n         var int:v1, var int:u2, var int:v2) =\n         abs(u1 - u2) + abs(v1 - v2);\n\nvar 0..4: a;  var 0..4: b;  var 0..4: c;  var 0..4: d;  \nconstraint far_or_equal(a,b,c,d);\n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a warehouse layout for a new e-commerce fulfillment center. I have two high-priority storage areas that need to be placed on a 5x5 grid. The areas are 1 unit in size and cannot be adjacent to each other. However, if they are in the same location, it's acceptable. How can I place these areas to minimize congestion and optimize workflow?\",\n  \"question2\": \"I'm planning a party and I want to put two tables in a small room. The room is 5x5 feet and I want the tables to be at least 4 feet away from each other. But if I can put them in the same spot, that's okay too. Where should I put the tables so my guests have enough space to move around?\",\n  \"question3\": \"I'm playing a game where I have to place two characters on a grid. The grid is 5x5 squares and my characters can't be too close to each other. They need to be at least 4 squares away from each other. But if I can put them in the same square, that's cool too. Where should I put my characters to win the game?\",\n  \"question4\": \"Place two objects on a 5x5 grid so they're at least 4 units apart or in the same spot.\",\n  \"question5\": \"I'm a urban planner designing a new public park. The park will have a 5x5 grid layout with various amenities such as playgrounds, picnic areas, and walking trails. I want to place two high-priority amenities, a playground and a picnic area, on the grid. The playground and picnic area are 1 unit in size and need to be placed in a way that minimizes congestion and optimizes accessibility. However, if they can be placed in the same location, it's acceptable. The park will also have a walking trail that runs along the perimeter of the grid, so I need to ensure that the playground and picnic area are not placed too close to the trail. Additionally, I want to prioritize the placement of the playground and picnic area in a way that maximizes visibility and accessibility from the park entrance. How can I place these amenities to achieve these goals and create a safe and enjoyable public space?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Social Golfer Problem ( variant )\",\n  \"description\": \"The problem is a variant of the Social Golfer Problem, which is a classic problem in constraint programming. In this variant, we have two golfers who want to play golf on a 5x5 grid. The goal is to place the two golfers on the grid such that they are either at least 4 units away from each other (using Manhattan distance) or they are in the same position.\",\n  \"variables\": \"a, b, c, d\",\n  \"variables_explanation\": \"The variables a and b represent the x and y coordinates of the first golfer, while the variables c and d represent the x and y coordinates of the second golfer. All variables are integers between 0 and 4, representing the possible positions on the 5x5 grid.\",\n  \"constraints\": \"far_or_equal(a, b, c, d)\",\n  \"constraints_explanation\": \"The constraint far_or_equal(a, b, c, d) ensures that the two golfers are either at least 4 units away from each other (using Manhattan distance) or they are in the same position. This is achieved by using the man_dist function to calculate the Manhattan distance between the two golfers and then applying the constraint.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "domwdeg": {"__data__": {"id_": "domwdeg", "embedding": null, "metadata": {"problem_family": "search", "model_name": "domwdeg", "source_code": "array[1..15] of var 0..1: b;\narray[1..4] of var 1..4: x;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(x);\nconstraint sum(x) <= 9;\n\nsolve  \n       :: int_search(b ++ x, first_fail, indomain_min, complete)\n   %   :: int_search(b ++ x, dom_w_deg, indomain_min, complete)\n      satisfy;\n\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a research project with 15 collaborators and need to divide them into 4 teams. Each team should have a distinct number of members, and the total number of team members should not exceed 9. How can I assign the collaborators to teams while satisfying these constraints?\",\n  \n  \"question2\": \"I have 15 friends and I want to put them into groups for a game night. I want each group to have a different number of people, and I don't want more than 9 people playing in total. Can you help me figure out how to do this?\",\n  \n  \"question3\": \"I'm planning a school project and I need to divide my class of 15 students into groups for a science fair. We have 4 tables available, and each table should have a different number of students working on a project. The teacher said we can't have more than 9 students working on projects at the same time. How can I make the groups?\",\n  \n  \"question4\": \"15 people, 4 groups, different sizes, total 9 or less. How do I do it?\",\n  \n  \"question5\": \"I'm the event coordinator for a large music festival, and I need to assign 15 volunteers to 4 different information booths. Each booth should have a distinct number of volunteers, and due to safety regulations, we can't have more than 9 volunteers working at the booths at the same time. Additionally, we have a limited number of radios available for communication, so we need to make sure that each booth has a unique number of volunteers to ensure that we can keep track of everyone. The festival is expected to attract a large crowd, and we need to make sure that our volunteers are assigned efficiently to provide the best possible experience for our attendees. Can you help me come up with a plan to assign the volunteers to the booths while satisfying these constraints?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Social Golfer Problem\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. It involves scheduling golfers into groups such that no two golfers play together more than once. In this specific model, we have 15 golfers and 4 groups. The problem is to assign the golfers to groups such that the total number of golfers in all groups does not exceed 9 and each group has a distinct number of golfers.\",\n  \"variables\": \"b = [b_1, ..., b_15], x = [x_1, ..., x_4]\", \n  \"variables_explanation\": \"b_i is a binary variable indicating whether golfer i is assigned to a group (1) or not (0). x_i is an integer variable representing the number of golfers in group i.\",\n  \"constraints\": \"\u2200i \u2208 {1, ..., 4} : x_i \u2208 {1, ..., 4}, \u2200i \u2208 {1, ..., 15} : b_i \u2208 {0, 1}, \u2211_{i=1}^{4} x_i \u2264 9, alldifferent(x)\",\n  \"constraints_explanation\": \"The constraints ensure that each group has a distinct number of golfers (alldifferent(x)), the total number of golfers in all groups does not exceed 9 (\u2211_{i=1}^{4} x_i \u2264 9), and each golfer is either assigned to a group or not (b_i \u2208 {0, 1}).\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "table_seating_gcc": {"__data__": {"id_": "table_seating_gcc", "embedding": null, "metadata": {"problem_family": "table_seating", "model_name": "table_seating_gcc", "source_code": "int: n;\nset of int: PERSON = 1..n;\nint: T; % number of tables\nset of int: TABLE = 1..T;\nint: S; % tables size\narray[int,1..2] of PERSON: couples;\nset of PERSON: key;\n\narray[TABLE] of var set of PERSON: table;\narray[PERSON] of var TABLE: seat;\n\n\npredicate not_same_table(PERSON:p1, PERSON: p2) =\n                        seat[p1] != seat[p2];\n\nconstraint global_cardinality_low_up(seat, [t|t in TABLE], [0|t in TABLE], [S|t in TABLE]);\n\nconstraint forall(c in index_set_1of2(couples))\n                 (not_same_table(couples[c,1],couples[c,2]));\n\nconstraint forall(p1,p2 in key where p1 < p2)\n                 (not_same_table(p1,p2));\n\nvar int: obj = sum(c in index_set_1of2(couples))(seat[couples[c,1]] + seat[couples[c,2]]);\n\nconstraint forall(t in TABLE, p in PERSON)(p in table[t] <-> seat[p] = t);    \n\nsolve minimize obj;\n\noutput [show(table), \" = \", show(obj)];\n\n\nn = 20;\nT = 5;\nS = 5;\ncouples = [| 1, 2 | 4, 5 | 6, 7 | 8, 10\n           | 11, 12 | 13, 14 | 17, 18 |];\nkey = {1, 6, 7, 8};\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm organizing a conference with 20 attendees and 5 breakout rooms, each with a capacity of 5 people. I have 8 pairs of attendees who are collaborators and should not be in the same room. Additionally, I have 4 attendees who are keynote speakers and should also not be in the same room. How can I assign attendees to rooms to minimize the total 'distance' between collaborators, assuming each room is numbered from 1 to 5 and the distance between two rooms is the absolute difference between their numbers?\",\n\n  \"question2\": \"I'm planning a party and I have 20 friends coming over. I have 5 tables and I want to seat people at the tables. Some of my friends are couples and I don't want them to sit together. Also, I have a few friends who are really loud and I don't want them to sit together either. How can I seat everyone so that the couples and the loud friends are not together?\",\n\n  \"question3\": \"I'm in charge of seating for the school dance and we have 20 students coming. We have 5 tables and each table can fit 5 people. Some of the students are friends and they don't want to sit together. Also, we have a few students who are on the school council and they don't want to sit together either. How can I seat everyone so that the friends and the school council members are not together?\",\n\n  \"question4\": \"Seat 20 people at 5 tables of 5, keeping 8 couples and 4 VIPs apart.\",\n\n  \"question5\": \"I'm the event coordinator for a large music festival and I'm in charge of assigning attendees to different stages. We have 20 different artists performing and 5 stages, each with a capacity of 5 artists. However, some of the artists are part of the same record label and we don't want them to perform on the same stage. Additionally, we have 4 headlining artists who are very popular and we don't want them to perform on the same stage either. We want to assign the artists to stages in a way that minimizes the total 'distance' between artists from the same record label, assuming each stage is numbered from 1 to 5 and the distance between two stages is the absolute difference between their numbers. We also want to make sure that each stage has a good mix of genres and that no stage is too crowded. How can we assign the artists to stages to meet these requirements?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Social Golfer Problem with Couples and Key Persons\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. In this variant, we have a set of persons that need to be seated at tables of a fixed size. The problem has additional constraints: some persons are couples and should not be seated at the same table, and some key persons should also not be seated at the same table. The objective is to minimize the sum of the table numbers of all persons in couples.\",\n  \"variables\": \"table[t] (t in TABLE), seat[p] (p in PERSON), obj\",\n  \"variables_explanation\": \"The decision variables are: table[t], which represents the set of persons seated at table t, seat[p], which represents the table number where person p is seated, and obj, which is the sum of the table numbers of all persons in couples.\",\n  \"constraints\": \"not_same_table(p1, p2) (p1, p2 in key or p1, p2 in couples), global_cardinality_low_up(seat, [t|t in TABLE], [0|t in TABLE], [S|t in TABLE]), p in table[t] <-> seat[p] = t (p in PERSON, t in TABLE)\",\n  \"constraints_explanation\": \"The constraints are: not_same_table(p1, p2), which ensures that two persons p1 and p2 are not seated at the same table if they are either in the key set or in the same couple, global_cardinality_low_up(seat, [t|t in TABLE], [0|t in TABLE], [S|t in TABLE]), which ensures that each table has exactly S persons, and p in table[t] <-> seat[p] = t, which ensures that a person p is in the set of persons seated at table t if and only if p is seated at table t.\",\n  \"objective\": \"minimize obj\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "langford": {"__data__": {"id_": "langford", "embedding": null, "metadata": {"problem_family": "langford", "model_name": "langford", "source_code": "% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\narray[DIG,COPY] of var POS: x;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent([x[d,c] | d in DIG, c in COPY]);\n\nconstraint forall(d in DIG, c in 1..m-1)\n                 (x[d,c+1] = x[d,c] + d + 1);\n\nsolve satisfy;\n\noutput [show(x),\"\\n\"]\n       ++ [ if fix(x[d,c]) = p then show(d) ++ \" \" else \"\" endif\n          | p in POS, d in DIG, c in COPY ]\n       ;\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"A logistics company needs to schedule the loading of 5 identical containers (A) and 3 identical containers (B) onto a ship with 40 available slots. The containers must be loaded in a way that any two containers of type A are separated by at least 3 other containers, and any two containers of type B are separated by at least 2 other containers. How can the company optimize the loading process to minimize the number of empty slots on the ship?\",\n\n  \"question2\": \"I have 8 boxes of different sizes and I want to put them on a shelf. I have 2 big boxes, 2 medium boxes, and 4 small boxes. I don't want to put two big boxes next to each other, and I don't want to put two medium boxes next to each other. I also don't want to put two small boxes next to each other. Can you help me figure out how to put the boxes on the shelf so they fit and look nice?\",\n\n  \"question3\": \"Imagine you're planning a music festival with 3 stages. You have 4 bands that play rock music, 2 bands that play pop music, and 2 bands that play electronic music. You want to schedule the bands so that no two rock bands play on the same stage at the same time, and no two pop bands play on the same stage at the same time. You also want to make sure that no two electronic bands play on the same stage at the same time. Can you help me figure out the schedule for the music festival?\",\n\n  \"question4\": \"Arrange 3 sets of 4 items so that no two identical items are next to each other.\",\n\n  \"question5\": \"A large hospital is planning to schedule the use of its 12 operating rooms for the next 24 hours. The hospital has 4 surgeons who specialize in heart surgery, 2 surgeons who specialize in brain surgery, and 2 surgeons who specialize in orthopedic surgery. Each surgeon needs to perform 2 operations, and each operation requires a specific type of operating room. The hospital has 4 operating rooms that are equipped for heart surgery, 2 operating rooms that are equipped for brain surgery, and 2 operating rooms that are equipped for orthopedic surgery. The hospital wants to schedule the operations so that no two heart surgeries are performed in the same operating room at the same time, and no two brain surgeries are performed in the same operating room at the same time. The hospital also wants to make sure that no two orthopedic surgeries are performed in the same operating room at the same time. Additionally, the hospital wants to minimize the number of operating rooms that are left unused during the 24-hour period. Can you help the hospital develop a schedule for the use of its operating rooms?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Langford's Problem\",\n  \"description\": \"Langford's Problem is a classic problem in constraint programming. It involves arranging m copies of the digits 1 to n in a sequence of length m*n, such that any two consecutive copies of digit k are separated by k other digits. The problem is named after C. Dudley Langford, who first proposed it in 1958.\",\n  \"variables\": \"x[d,c], d \u2208 {1..n}, c \u2208 {1..m}\",\n  \"variables_explanation\": \"The decision variables x[d,c] represent the position in the sequence where the c-th copy of digit d is placed.\",\n  \"constraints\": \"alldifferent([x[d,c] | d in DIG, c in COPY]), x[d,c+1] = x[d,c] + d + 1, \u2200d \u2208 {1..n}, \u2200c \u2208 {1..m-1}\",\n  \"constraints_explanation\": \"The constraints are: (1) all positions in the sequence are distinct (alldifferent), and (2) for each digit d, the c+1-th copy of d is placed d+1 positions after the c-th copy of d.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "setselectr2": {"__data__": {"id_": "setselectr2", "embedding": null, "metadata": {"problem_family": "setselect", "model_name": "setselectr2", "source_code": "% setselect revised\nint: n; % number of elements\nint: u; % cardinality of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\narray[1..u] of var 1..n: x;\n%constraint forall(i in 1..u-1)(x[i] < x[i+1]);\nconstraint forall(i,j in 1..u where i < j)(x[i] != x[j]);\n\nconstraint forall(i in 1..k)(sum(j in 1..u)(x[j] in s[i]) <= 1);\n\nsolve maximize sum(x);\n\noutput [\"x = \", show(x), \";\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 10 stages and 50 bands. Each band has a specific set of stages they can perform on, and I want to schedule the performances such that each stage has at most one band performing at a time. How can I maximize the total popularity of the bands performing at the festival, given that each band has a unique popularity score and I can only schedule 20 bands in total?\",\n\n  \"question2\": \"I have a bunch of different groups of friends and we all like to hang out together, but some of my friends don't get along with each other. I want to plan a party and invite a group of friends, but I don't want to invite anyone who doesn't get along with someone else who's already invited. How can I invite the most friends possible without any drama?\",\n\n  \"question3\": \"I'm planning a sleepover with my friends and we want to play different games. We have 10 games to choose from, but some of my friends don't like to play certain games. I want to pick a group of games that everyone will like, but I can only pick 5 games. How can I pick the games that will make the most people happy?\",\n\n  \"question4\": \"I have 10 boxes and 20 items to pack. Some items can only go in certain boxes. How can I pack the most valuable items?\",\n\n  \"question5\": \"I'm a curator at a museum and I'm planning a new exhibit with 15 display cases. I have 50 artifacts to choose from, but some artifacts are too fragile to be displayed together and some artifacts are too valuable to be displayed in certain cases. I want to create an exhibit that showcases the most valuable and historically significant artifacts, but I can only display 10 artifacts in total. Additionally, I want to make sure that each display case has at most one artifact that is extremely fragile. How can I create an exhibit that maximizes the historical significance and value of the artifacts on display, while also ensuring the safety and security of the artifacts?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Set Packing Problem\",\n  \"description\": \"The Set Packing Problem is a classic problem in combinatorial optimization and constraint programming. Given a collection of sets, the goal is to select a subset of these sets such that each element is contained in at most one set in the subset. The objective is to maximize the sum of the elements in the selected subset.\",\n  \"variables\": \"x = (x_1, x_2, ..., x_u), where x_i is the i-th element in the selected subset\",\n  \"constraints\": \"x_i != x_j for i != j, and |{j | x_j in s_i}| <= 1 for all i in 1..k\",\n  \"objective\": \"maximize sum(x)\"\n}\n```\n\nExplanation:\n\n- The problem is a Set Packing Problem, where we have a collection of sets `s` and we want to select a subset of these sets such that each element is contained in at most one set in the subset.\n- The decision variables `x` represent the elements in the selected subset. The constraint `x_i != x_j for i != j` ensures that each element is unique in the subset.\n- The constraint `|{j | x_j in s_i}| <= 1 for all i in 1..k` ensures that each set `s_i` contains at most one element from the selected subset.\n- The objective is to maximize the sum of the elements in the selected subset.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mip3": {"__data__": {"id_": "mip3", "embedding": null, "metadata": {"problem_family": "mip", "model_name": "mip3", "source_code": "var int: B;\nvar int: C;\nvar int: D;\n\nconstraint 2.0*B + 2.0*C + 1.0*D <= 30.0;\nconstraint 1.5*B + 2.0*C + 3.0*D <= 25.0;\nconstraint 2.0*B + 1.0*C + 1.0*D <= 20.0;\nsolve maximize 3.0*B + 1.0*C + 3.0*D;\n\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning to launch a new product line with three different variants, each requiring a specific combination of manufacturing resources. The production capacity for each resource is limited: 30 units of Resource A, 25 units of Resource B, and 20 units of Resource C. Each variant requires 2 units of Resource A, 2 units of Resource B, and 1 unit of Resource C for Variant 1; 1.5 units of Resource A, 2 units of Resource B, and 3 units of Resource C for Variant 2; and 2 units of Resource A, 1 unit of Resource B, and 1 unit of Resource C for Variant 3. The profit margins for each variant are $3, $1, and $3, respectively. How can I allocate the resources to maximize the total profit?\",\n\n  \"question2\": \"I want to plan a party with three types of food: burgers, sandwiches, and salads. I have a budget for ingredients, and I want to make sure I don't run out of anything. Each burger needs 2 cups of ingredient A, 2 cups of ingredient B, and 1 cup of ingredient C. Each sandwich needs 1.5 cups of ingredient A, 2 cups of ingredient B, and 3 cups of ingredient C. Each salad needs 2 cups of ingredient A, 1 cup of ingredient B, and 1 cup of ingredient C. I have 30 cups of ingredient A, 25 cups of ingredient B, and 20 cups of ingredient C. How many of each food can I make to use up all the ingredients and make the party the best it can be?\",\n\n  \"question3\": \"I'm planning a school event, and I want to set up three different gaming stations. Each station needs a certain number of gaming consoles, controllers, and headsets. Station 1 needs 2 consoles, 2 controllers, and 1 headset. Station 2 needs 1.5 consoles, 2 controllers, and 3 headsets. Station 3 needs 2 consoles, 1 controller, and 1 headset. I have a limited budget to buy the equipment, and I want to make sure I don't run out of anything. The budget is 30 consoles, 25 controllers, and 20 headsets. How can I set up the gaming stations to make the event the most fun for everyone?\",\n\n  \"question4\": \"I have 3 projects with limited resources. Project 1 needs 2A, 2B, 1C. Project 2 needs 1.5A, 2B, 3C. Project 3 needs 2A, 1B, 1C. Resources available: 30A, 25B, 20C. How to allocate resources to maximize value?\",\n\n  \"question5\": \"I'm the manager of a large-scale event planning company, and I'm responsible for organizing a high-profile conference with three different types of attendees: VIP guests, speakers, and regular attendees. Each type of attendee requires a specific combination of amenities, including luxury accommodations, catering services, and audio-visual equipment. The VIP guests require 2 units of luxury accommodations, 2 units of catering services, and 1 unit of audio-visual equipment. The speakers require 1.5 units of luxury accommodations, 2 units of catering services, and 3 units of audio-visual equipment. The regular attendees require 2 units of luxury accommodations, 1 unit of catering services, and 1 unit of audio-visual equipment. The conference has a limited budget for amenities, with 30 units of luxury accommodations, 25 units of catering services, and 20 units of audio-visual equipment available. The profit margins for each type of attendee are $3,000 for VIP guests, $1,000 for speakers, and $3,000 for regular attendees. Additionally, the conference has a limited number of staff members available to manage the amenities, with a maximum of 10 staff members available to manage luxury accommodations, 8 staff members available to manage catering services, and 6 staff members available to manage audio-visual equipment. How can I allocate the amenities to maximize the total profit from the conference, while also ensuring that the limited staff members are utilized efficiently?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Resource Allocation Problem\",\n  \"description\": \"This problem involves allocating resources to different activities in order to maximize the total value obtained. The resources are limited, and the activities have different requirements and values.\",\n  \"variables\": \"B, C, D. These variables represent the amounts of resources allocated to three different activities.\",\n  \"constraints\": \"2.0B + 2.0C + 1.0D \u2264 30.0, 1.5B + 2.0C + 3.0D \u2264 25.0, 2.0B + 1.0C + 1.0D \u2264 20.0. These constraints represent the limited availability of three different resources. Each activity requires a certain amount of each resource, and the total amount of each resource used cannot exceed the available amount.\",\n  \"objective\": \"maximize 3.0B + 1.0C + 3.0D. The objective is to maximize the total value obtained by allocating resources to the activities. Each activity has a different value, and the goal is to allocate resources in a way that maximizes the total value.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "carpet_cutting": {"__data__": {"id_": "carpet_cutting", "embedding": null, "metadata": {"problem_family": "carpet_cutting", "model_name": "carpet_cutting", "source_code": "int: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\narray[ROOM] of var ROT: rot;\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\nconstraint forall(i in ROOM)(shape[i,rot[i]] != {});\n\nconstraint forall(i in ROOM)(forall(r in ROFF)\n  (r in shape[i,rot[i]] -> \n  (x[i] + d[r,1] + d[r,3] <= l /\\\n   y[i] + d[r,2] + d[r,4] <= h)));\n\nconstraint forall(i,j in ROOM where i < j)\n  (forall(r1,r2 in ROFF)\n (r1 in shape[i,rot[i]] /\\ \n  r2 in shape[j,rot[j]] -> \n(x[i] + d[r1,1] + d[r1,3] <= x[j] + d[r2,1]\n                   \\/\n x[j] + d[r2,1] + d[r2,3] <= x[i] + d[r1,1]\n                   \\/\n y[i] + d[r1,2] + d[r1,4] <= y[j] + d[r2,2]\n                   \\/\ny[j] + d[r2,2] + d[r2,4] <= y[i] + d[r1,2])\n   ));\n\noutput [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nrot = \\(rot);\\n\"];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a modular exhibition stand for a trade show. I have 3 modules with different shapes and sizes, and I need to fit them into a rectangular space with a fixed height of 7 meters and a variable length. Each module has 4 possible orientations, and I want to minimize the length of the space used while ensuring that the modules don't overlap. Can you help me find the optimal arrangement and length of the space?\",\n  \"question2\": \"I'm moving into a new apartment and I have a bunch of weirdly shaped boxes that I need to fit into a long hallway. The hallway is really narrow, but it's really long. I want to fit all the boxes in without them touching each other. Can you help me figure out how to do it?\",\n  \"question3\": \"I'm playing with my LEGO blocks and I want to build a really cool castle. I have 3 different types of blocks with different shapes and sizes, and I want to fit them all into a big rectangle. The rectangle has to be as small as possible, but all the blocks have to fit inside without overlapping. Can you help me build my castle?\",\n  \"question4\": \"How can I fit 3 irregularly shaped objects into a rectangular space with a fixed height and minimum length?\",\n  \"question5\": \"I'm a logistics manager for a shipping company, and I need to pack a set of irregularly shaped containers into a standard shipping container. The containers have different sizes and shapes, and they need to be packed in a way that minimizes the length of the shipping container used. The shipping container has a fixed height of 7 meters, and the containers can be rotated to fit into the space. However, there are some constraints on how the containers can be packed: no two containers can overlap, and each container must be fully contained within the shipping container. Additionally, some containers have specific requirements for their orientation, and some containers cannot be packed next to each other. Can you help me find the optimal packing arrangement and length of the shipping container used, taking into account these constraints and requirements? The containers have the following dimensions: Container 1: 3x4 meters, Container 2: 4x3 meters, Container 3: 1x1 meter. The containers can be rotated to fit into the space, but they must be packed in a way that minimizes the length of the shipping container used.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Rectangle Packing Problem with Rotation\",\n  \"description\": \"The Rectangle Packing Problem with Rotation is a classic problem in constraint programming and operations research. The problem involves packing a set of rectangles of different sizes and shapes into a larger rectangle (the carpet) of fixed height and minimum length. The rectangles can be rotated to fit into the carpet. The goal is to minimize the length of the carpet used to pack all the rectangles.\",\n  \"variables\": \"x, y, rot, l\",\n  \"variables_explanation\": \"x is an array of variables representing the x-coordinate of the bottom-left corner of each rectangle, y is an array of variables representing the y-coordinate of the bottom-left corner of each rectangle, rot is an array of variables representing the rotation of each rectangle (1, 2, 3, or 4), and l is a variable representing the length of the carpet used.\",\n  \"constraints\": \"\u2200i \u2208 ROOM (shape[i,rot[i]] \u2260 {}), \u2200i \u2208 ROOM (\u2200r \u2208 ROFF (r \u2208 shape[i,rot[i]] \u2192 (x[i] + d[r,1] + d[r,3] \u2264 l \u2227 y[i] + d[r,2] + d[r,4] \u2264 h))), \u2200i,j \u2208 ROOM (i < j \u2192 (\u2200r1,r2 \u2208 ROFF (r1 \u2208 shape[i,rot[i]] \u2227 r2 \u2208 shape[j,rot[j]] \u2192 (x[i] + d[r1,1] + d[r1,3] \u2264 x[j] + d[r2,1] \u2228 x[j] + d[r2,1] + d[r2,3] \u2264 x[i] + d[r1,1] \u2228 y[i] + d[r1,2] + d[r1,4] \u2264 y[j] + d[r2,2] \u2228 y[j] + d[r2,2] + d[r2,4] \u2264 y[i] + d[r1,2]))))\",\n  \"constraints_explanation\": \"The constraints ensure that each rectangle is assigned a valid shape and rotation, that each rectangle fits within the carpet, and that no two rectangles overlap. The first constraint ensures that each rectangle is assigned a valid shape and rotation. The second constraint ensures that each rectangle fits within the carpet. The third constraint ensures that no two rectangles overlap.\",\n  \"objective\": \"minimize l\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening6": {"__data__": {"id_": "flattening6", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening6", "source_code": "array[0..2,0..2] of var 0..2: x;\nconstraint sum(i in 0..2)(x[i,i]) <= 1;\nconstraint x[x[1,1],1] = 2;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has a 3x3 grid of warehouses, each with a capacity of 0-2 trucks. The company wants to allocate trucks to warehouses such that the total number of trucks on the diagonal (top-left to bottom-right) does not exceed 1. Additionally, the warehouse at the second row and second column has a special requirement that the warehouse at the row indexed by the number of trucks allocated to the second row and second column must have exactly 2 trucks. How can the company allocate the trucks to meet these requirements?\",\n\n  \"question2\": \"Imagine you have a 3x3 puzzle with numbers 0, 1, and 2. You want to fill in the numbers so that the numbers on the diagonal (from top-left to bottom-right) add up to 1 or less. Also, there's a special rule that says the number in the second row and second column tells you which row to look at, and that row should have the number 2 in the second column. Can you figure out how to fill in the numbers?\",\n\n  \"question3\": \"I'm planning a school dance and I have a 3x3 grid of tables, each with a capacity of 0-2 friends. I want to seat my friends such that the total number of friends on the diagonal tables does not exceed 1. Also, my best friend is sitting at the second row and second column, and I want to make sure that the table at the row where my best friend is sitting has exactly 2 friends. How can I seat my friends to make this happen?\",\n\n  \"question4\": \"3x3 grid, 0-2 items per cell. Diagonal sum <= 1. Special cell [1,1] indexes row with 2 items in column 1. How to fill?\",\n\n  \"question5\": \"A large music festival is being organized, and the event planners want to allocate a limited number of VIP passes to a 3x3 grid of VIP areas, each with a capacity of 0-2 passes. The planners want to ensure that the total number of VIP passes allocated to the areas on the diagonal (from top-left to bottom-right) does not exceed 1, as these areas are closest to the main stage and need to be kept exclusive. Additionally, the area at the second row and second column has a special requirement that the area at the row indexed by the number of VIP passes allocated to the second row and second column must have exactly 2 VIP passes, as this area is reserved for a special guest. The planners also need to consider the following constraints: the areas in the first row have limited accessibility, the areas in the second column have limited parking, and the areas in the third row have limited food and beverage options. How can the planners allocate the VIP passes to meet these requirements and ensure a successful event?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Self-Referential Constraint Problem\",\n  \"description\": \"This problem is a self-referential constraint problem, where the value of a variable is used to index another variable. It is a classic example of a constraint programming problem that can be challenging to solve due to its self-referential nature.\",\n  \"variables\": \"x[i, j], i in {0, 1, 2}, j in {0, 1, 2}\",\n  \"variables_explanation\": \"The decision variables x[i, j] represent a 3x3 matrix, where each element can take a value between 0 and 2. The variables are used to represent a self-referential relationship between the elements of the matrix.\",\n  \"constraints\": \"\u2211(x[i, i]) \u2264 1, x[x[1, 1], 1] = 2\",\n  \"constraints_explanation\": \"The first constraint states that the sum of the diagonal elements of the matrix is less than or equal to 1. The second constraint is a self-referential constraint that states that the value of the element at position (x[1, 1], 1) is equal to 2. This constraint is self-referential because the value of x[1, 1] is used to index another element in the matrix.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "jobshop3": {"__data__": {"id_": "jobshop3", "embedding": null, "metadata": {"problem_family": "jobshop", "model_name": "jobshop3", "source_code": "int: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\ninclude \"disjunctive.mzn\";\n\nconstraint forall(ma in MACH)\n                 ( let { array[int] of var int: ss = [ s[j,t] | j in JOB, t in TASK where mc[j,t] = ma ];\n                         array[int] of int:     dd = [ d[j,t] | j in JOB, t in TASK where mc[j,t] = ma ]; } in\n                   disjunctive(ss,dd));\n\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve  \n%      ::\n%      seq_search([ int_search([s[i,j]| i in JOB, j in TASK],\n%                             smallest, indomain_min, complete),\n%                  int_search([makespan], input_order, indomain_min, complete)])\n%      seq_search([ int_search([makespan], input_order, indomain_min, complete),\n%                   int_search([s[i,j]| i in JOB, j in TASK],\n%                             smallest, indomain_min, complete)])\n         minimize makespan;\n\noutput [ \"makespan = \", show(makespan), \"\\n\"] ++\n       [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK]; \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale conference with 10 parallel sessions, each consisting of 5 talks. The talks have varying durations and require specific audio-visual equipment. I want to allocate the talks to the sessions in a way that minimizes the total duration of the conference, while ensuring that no two talks requiring the same equipment are scheduled at the same time. Can you help me find an optimal allocation?\",\n  \"question2\": \"I have a bunch of tasks I need to do for my school project, like writing, designing, and printing. Each task takes a different amount of time and needs a specific tool, like a computer or a printer. I want to do all the tasks in the right order, so I don't mess up the project. Can you help me figure out when to start each task so I can finish the project as quickly as possible?\",\n  \"question3\": \"I'm planning a birthday party for my friend and we want to play different games, like laser tag, bowling, and video games. Each game takes a different amount of time and needs a specific room or equipment. We want to play all the games in the right order, so we don't run out of time. Can you help us make a schedule so we can have the most fun?\",\n  \"question4\": \"I have 5 projects with 3 tasks each. Each task takes 1-3 hours and requires a specific tool. How can I schedule the tasks to finish all projects as quickly as possible?\",\n  \"question5\": \"I'm the manager of a large-scale event production company, responsible for setting up and tearing down events across the country. We have a team of 10 technicians, each with their own set of skills and equipment. We're currently working on a 5-event contract, with each event requiring a specific set of tasks, such as stage setup, lighting installation, and sound check. Each task has a varying duration and requires specific equipment and technicians. We want to allocate the tasks to the technicians in a way that minimizes the total setup and teardown time, while ensuring that no two tasks requiring the same equipment or technician are scheduled at the same time. Additionally, we have some constraints on the order of tasks, such as the fact that the stage setup must be completed before the lighting installation can begin. We also have some preferences, such as the fact that we want to minimize the number of technicians working on each event. Can you help us find an optimal allocation of tasks to technicians that meets all these constraints and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Job Shop Scheduling Problem\",\n  \"description\": \"The Job Shop Scheduling Problem is a classic problem in operations research and computer science. It involves scheduling a set of jobs on a set of machines, where each job consists of a sequence of tasks that must be executed in a specific order. Each task requires a specific machine and has a specific processing time. The goal is to find a schedule that minimizes the makespan, which is the maximum completion time of all jobs.\",\n  \"variables\": \"s[j,t], makespan\",\n  \"variables_explanation\": \"s[j,t] represents the start time of task t in job j, and makespan represents the maximum completion time of all jobs.\",\n  \"constraints\": \"s[j,t] + d[j,t] <= s[j,t+1], disjunctive(ss,dd)\",\n  \"constraints_explanation\": \"The first constraint ensures that tasks in a job are executed in order, i.e., the start time of task t+1 in job j is greater than or equal to the completion time of task t in job j. The second constraint ensures that tasks that require the same machine are executed non-overlapping, i.e., the start time of a task is greater than or equal to the completion time of the previous task on the same machine.\",\n  \"objective\": \"minimize makespan\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening2": {"__data__": {"id_": "flattening2", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening2", "source_code": "int: i = 3; int: j = 3;\nvar 0..5: x; var 0..2: y; var 0..3: z;\nconstraint (x - i) * (x - j) + y + z + i + j >= 0;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"A logistics company has 5 trucks (x) with varying capacities, 2 warehouses (y) with limited storage space, and 3 distribution centers (z) with different demand levels. Given the company's operational costs and constraints, how can they optimize their logistics network to minimize costs while meeting demand, assuming the cost function is (x - 3) * (x - 3) + y + z + 3 + 3 >= 0?\",\n  \n  \"question2\": \"I'm planning a party and I want to make sure I have enough food and drinks for my guests. I have 5 tables (x) that can hold different amounts of food, 2 coolers (y) for drinks, and 3 serving dishes (z) for snacks. How can I make sure I have enough for everyone without running out of space or food, considering the party is going to be pretty big?\",\n  \n  \"question3\": \"Imagine you're a game developer and you're creating a new game where players have to collect resources (x) to build their own village. The village has 2 types of buildings (y) that require different amounts of resources, and 3 types of decorations (z) that also need resources. How can you make sure the players have enough resources to build and decorate their village without running out, assuming the game's resource system is based on the equation (x - 3) * (x - 3) + y + z + 3 + 3 >= 0?\",\n  \n  \"question4\": \"How can I allocate 5 resources (x), 2 tools (y), and 3 materials (z) to meet a project's requirements, given the constraint (x - 3) * (x - 3) + y + z + 3 + 3 >= 0?\",\n  \n  \"question5\": \"A renewable energy company is planning to build a new solar farm with 5 rows of solar panels (x) that can generate different amounts of electricity, 2 energy storage systems (y) with limited capacity, and 3 power transmission lines (z) with varying transmission rates. The company wants to optimize the solar farm's design to maximize energy production while minimizing costs and meeting the local energy demand. However, the company's engineers have determined that the solar farm's performance is affected by a complex constraint that can be modeled by the equation (x - 3) * (x - 3) + y + z + 3 + 3 >= 0. Given this constraint, how can the company determine the optimal configuration for the solar farm to meet its energy production goals while staying within budget and meeting local regulations?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Unconstrained Non-Linear Problem\",\n  \"description\": \"This problem is a simple non-linear constraint satisfaction problem. It does not have a clear real-world interpretation, but it can be used as a test case for constraint solvers. The goal is to find values for the variables x, y, and z that satisfy the given constraint.\",\n  \"variables\": \"x \u2208 [0, 5], y \u2208 [0, 2], z \u2208 [0, 3]\", \n  \"variables_explanation\": \"The variables x, y, and z are decision variables that can take integer values within their respective ranges. The values of x, y, and z are to be determined in order to satisfy the given constraint.\",\n  \"constraints\": \"(x - i) * (x - j) + y + z + i + j \u2265 0\", \n  \"constraints_explanation\": \"The constraint is a non-linear inequality that involves the variables x, y, and z, as well as the constants i and j. The constraint must be satisfied for the solution to be valid.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening13": {"__data__": {"id_": "flattening13", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening13", "source_code": "array[1..2] of var 0..25: a;\n\nconstraint 8 < sum(i in 1..2)(sqrt(a[i]));\nfunction var int:sqrt(var int: x) :: promise_total =\n    let { var int: y; \n    constraint y * y = x /\\ y >= 0 } in y;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A financial analyst wants to allocate investments in two assets with returns that are not directly proportional to their values. The analyst has a budget of $25,000 to invest in each asset and wants to ensure that the total return, calculated as the square root of the product of the investment and the asset's return rate, exceeds $8,000. What are the optimal investment amounts for each asset?\",\n\n  \"question2\": \"I'm planning a garden with two types of flowers that grow at different rates. I have space for up to 25 flowers of each type and want to make sure that the total 'beauty' of my garden, which is calculated by adding up the square roots of the number of each type of flower, is more than 8. How many of each type of flower should I plant?\",\n\n  \"question3\": \"Imagine you're playing a game where you have two characters, each with a special power that grows stronger as you level them up. The powers are measured by a special number that gets bigger as you level up, but it doesn't get bigger at the same rate. You have 25 levels to spend on each character and want to make sure that the total power of both characters is more than 8. How many levels should you give to each character?\",\n\n  \"question4\": \"Two machines produce items with square-root-proportional quality. Each machine can produce up to 25 items. What's the minimum production to exceed a total quality of 8?\",\n\n  \"question5\": \"A theme park is designing a new area with two thrill rides, each with a unique 'thrill factor' that is calculated based on the square root of the ride's intensity. The park has a budget of $25 million to spend on each ride and wants to ensure that the total thrill factor of the two rides exceeds 8, which is the minimum required to attract a certain demographic of visitors. However, the park also has to consider the safety constraints of each ride, which limit the maximum intensity to 25. Additionally, the park wants to minimize the cost of maintenance, which is directly proportional to the intensity of each ride. What are the optimal intensity levels for each ride to maximize the total thrill factor while staying within the budget and safety constraints?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Square Root Sum Problem\",\n  \"description\": \"The Square Root Sum Problem is a classic problem in constraint programming. It involves finding values for two variables such that the sum of their square roots exceeds a certain threshold. This problem is often used to demonstrate the capabilities of constraint programming solvers in handling non-linear constraints.\",\n  \"variables\": \"a_1, a_2 \u2208 [0, 25]\", \n  \"variables_explanation\": \"The decision variables a_1 and a_2 represent two non-negative integers between 0 and 25.\",\n  \"constraints\": \"8 < \u221aa_1 + \u221aa_2\", \n  \"constraints_explanation\": \"The constraint states that the sum of the square roots of a_1 and a_2 must be greater than 8. This is a non-linear constraint, as it involves the square root function.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "jobshop": {"__data__": {"id_": "jobshop", "embedding": null, "metadata": {"problem_family": "jobshop", "model_name": "jobshop", "source_code": "int: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\n% only one task on any machine at one time\n%constraint forall(ma in MACH)\n%                 (forall(j1,j2 in JOB where j1 < j2)\n%                       (forall(t1,t2 in TASK where mc[j1,t1] = ma /\\ mc[j2,t2] = ma)\n%                              (nonoverlap(s[j1,t1],d[j1,t1],s[j2,t2],d[j2,t2]))));\n\nconstraint forall(j1, j2 in JOB, t1, t2 in TASK \n       where j1 < j2 /\\ mc[j1,t1] = mc[j2,t2])\n      (nonoverlap(s[j1,t1],d[j1,t1],\n                  s[j2,t2],d[j2,t2]));\n\npredicate nonoverlap(var int:s1, var int:d1,\n                     var int:s2, var int:d2)=\n          s1 + d1 <= s2 \\/ s2 + d2 <= s1;\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve :: int_search([s[j,t] | j in JOB, t in TASK], input_order, indomain_min, complete)\n      minimize makespan;\n\noutput [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK]; \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale conference with 10 parallel sessions, each with 5 talks. The talks have varying durations and some speakers have specific requirements for the timing of their talks. I want to minimize the overall duration of the conference while ensuring that no speaker is scheduled to give two talks at the same time. How can I optimize the schedule to achieve this?\",\n  \"question2\": \"I have a bunch of tasks to do at home, like laundry, cleaning, and cooking. Some tasks take longer than others and some need to be done in a specific order. I only have a few machines, like the washing machine and the stove, and I don't want to do two things at the same time on the same machine. How can I make a plan to get everything done as quickly as possible?\",\n  \"question3\": \"I'm planning a birthday party for my friend and we want to have a bunch of games and activities. Some games take longer than others and some need to be played in a specific order. We only have a few tables and we don't want to play two games at the same time on the same table. How can we make a schedule to fit in all the games and have the most fun?\",\n  \"question4\": \"5 projects, 3 machines, minimize total time. Go.\",\n  \"question5\": \"I'm the manager of a large-scale manufacturing facility that produces custom furniture. We have 15 different products, each with 5 stages of production, and 10 machines that can perform these stages. Each product has a specific production time at each stage and some products require specific machines. We also have some constraints on the order in which the stages can be performed. For example, the sanding stage must come before the painting stage. We want to minimize the total production time while ensuring that all products are produced according to their specifications. Additionally, we have some priority products that need to be produced as soon as possible. How can we optimize the production schedule to achieve this? We have the following production times and machine requirements for each product:\n\nProduct 1: Stage 1 (10 minutes, Machine A), Stage 2 (20 minutes, Machine B), Stage 3 (15 minutes, Machine C), Stage 4 (10 minutes, Machine A), Stage 5 (20 minutes, Machine B)\nProduct 2: Stage 1 (15 minutes, Machine C), Stage 2 (10 minutes, Machine A), Stage 3 (20 minutes, Machine B), Stage 4 (15 minutes, Machine C), Stage 5 (10 minutes, Machine A)\n...\nProduct 15: Stage 1 (20 minutes, Machine B), Stage 2 (15 minutes, Machine C), Stage 3 (10 minutes, Machine A), Stage 4 (20 minutes, Machine B), Stage 5 (15 minutes, Machine C)\n\nWe also have the following priority products:\n\nProduct 1, Product 3, Product 5, Product 7, Product 9\n\nHow can we optimize the production schedule to minimize the total production time while ensuring that all products are produced according to their specifications and that the priority products are produced as soon as possible?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Job Shop Scheduling Problem\",\n  \"description\": \"The Job Shop Scheduling Problem is a classic problem in Operations Research and Computer Science. It involves scheduling a set of jobs on a set of machines, where each job consists of a sequence of tasks that must be executed in a specific order. Each task requires a specific machine and has a specific processing time. The goal is to find a schedule that minimizes the makespan, which is the maximum completion time of all jobs.\",\n  \"variables\": \"s[j,t] (start time of task t of job j), makespan (maximum completion time of all jobs)\",\n  \"variables_explanation\": \"The decision variables s[j,t] represent the start time of task t of job j. The variable makespan represents the maximum completion time of all jobs, which is the objective to be minimized.\",\n  \"constraints\": \"s[j,t] + d[j,t] <= s[j,t+1] (tasks in a job are executed in order), nonoverlap(s[j1,t1],d[j1,t1],s[j2,t2],d[j2,t2]) (no overlap between tasks on the same machine)\",\n  \"constraints_explanation\": \"The first constraint ensures that tasks in a job are executed in order. The second constraint ensures that there is no overlap between tasks on the same machine. This is achieved through the nonoverlap predicate, which checks that either task 1 is completed before task 2 starts, or task 2 is completed before task 1 starts.\",\n  \"objective\": \"minimize makespan\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "toy_problem": {"__data__": {"id_": "toy_problem", "embedding": null, "metadata": {"problem_family": "toy_problem", "model_name": "toy_problem", "source_code": "var 0..6000: B;\nvar 0..4000: T;\n\nconstraint 140*B+200*T <= 40*200*140;\n\nsolve maximize 25*B + 30*T;\n\noutput  [\"B=\\(B) T=\\(T)\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event and need to allocate resources between two types of catering services, A and B. Each unit of A requires 140 staff hours and each unit of B requires 200 staff hours. I have a total of 40 teams, each with 200 staff hours available, and a budget of 140 staff hours per team. The profit per unit of A is $25 and the profit per unit of B is $30. How can I maximize my profit while staying within my resource constraints?\",\n\n  \"question2\": \"I want to make some money by selling two types of things online. One thing takes 140 minutes to make and the other takes 200 minutes. I only have 40 days with 200 minutes available each day. If I sell the first thing for $25 and the second thing for $30, how many of each thing should I make to get the most money?\",\n\n  \"question3\": \"Imagine you're the manager of a lemonade stand and you have two types of lemonade, 'Berry Blast' and 'Citrus Frenzy'. It takes 140 cups to make a big batch of Berry Blast and 200 cups to make a big batch of Citrus Frenzy. You have 40 big containers that can hold 200 cups each. If you sell Berry Blast for $25 per big batch and Citrus Frenzy for $30 per big batch, how many big batches of each should you make to get the most money? You can't make more than 6000 cups of Berry Blast or 4000 cups of Citrus Frenzy.\",\n\n  \"question4\": \"Maximize profit from selling two products, A and B, with limited resources (140A + 200B \u2264 1120000). Profit per unit: A=$25, B=$30. How many units of A and B should I produce?\",\n\n  \"question5\": \"As the director of a non-profit organization focused on disaster relief, I'm planning a large-scale fundraising campaign to support the victims of a recent hurricane. We're considering two types of fundraising events: charity runs and benefit concerts. Each charity run requires 140 volunteers to organize and execute, while each benefit concert requires 200 volunteers. We have a total of 40 teams of volunteers, each with 200 available volunteer hours. Additionally, we have a limited budget of 140 staff hours per team. The charity runs are expected to raise $25 per participant, while the benefit concerts are expected to raise $30 per attendee. However, we're also limited by the number of charity runs we can organize (up to 6000) and the number of benefit concerts we can host (up to 4000). How can we maximize our fundraising efforts while staying within our resource constraints and ensuring that we're making the most efficient use of our volunteers' time?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Two-Product Production Planning Problem\",\n  \"description\": \"This problem involves planning the production of two products, B and T, given certain constraints on the resources available. The goal is to maximize the total profit from the production of these two products.\",\n  \"variables\": \"B \u2208 {0, ..., 6000}, T \u2208 {0, ..., 4000}. B and T represent the quantities of products B and T to be produced, respectively.\",\n  \"constraints\": \"140B + 200T \u2264 40 * 200 * 140. This constraint represents the limitation on the total amount of resources (e.g., labor, materials, equipment) available for production. The coefficients 140 and 200 represent the amount of resources required to produce one unit of products B and T, respectively. The right-hand side of the constraint represents the total amount of resources available.\",\n  \"objective\": \"Maximize 25B + 30T. The objective is to maximize the total profit from the production of products B and T, where the profit per unit of products B and T is $25 and $30, respectively.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "assign": {"__data__": {"id_": "assign", "embedding": null, "metadata": {"problem_family": "search", "model_name": "assign", "source_code": "int: n;\nset of int: WORK = 1..n;\nint: m;\nset of int: TASK = 1..m;\narray[WORK,TASK] of int: profit;\narray[WORK] of var TASK: x;\n% new\narray[WORK] of var int: px =\n     [ profit[w,x[w]] | w in WORK ];\nvar int: obj = sum(w in WORK)(px[w]);\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(x);\n\nann: varselect;\nann: valselect;\n\nsolve :: int_search(px, varselect, valselect, complete)\n      maximize obj;\n\noutput [\"obj = \\(obj); x = \\(x);\\n\"];\n\n\nvarselect = largest;\nvalselect = indomain_min;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A university has 10 professors and 10 courses to be taught. Each professor has a different level of expertise in each course, measured by a score from 1 to 10. The university wants to assign professors to courses in a way that maximizes the total expertise score. However, due to scheduling constraints, no two professors can be assigned to the same course. How can the university make the optimal assignment?\",\n  \"question2\": \"Imagine you're planning a party and you have 8 friends who want to help with different tasks like music, decorations, food, and games. Each friend has a different level of enthusiasm for each task, and you want to assign them in a way that makes everyone happy. But, you can't have two friends doing the same task. How do you decide who does what?\",\n  \"question3\": \"I'm the captain of my school's sports teams, and we have 12 players who want to participate in 12 different events. Each player has a different level of skill in each event, and I want to assign them in a way that makes our team win the most points. But, I don't want any two players competing in the same event. Can you help me figure out the best way to do this?\",\n  \"question4\": \"Assign 5 volunteers to 5 charity projects, maximizing overall impact while ensuring no project has multiple volunteers.\",\n  \"question5\": \"A large hospital has 20 doctors and 20 patients who need to be assigned to a doctor for a specific treatment. Each doctor has a different level of expertise in treating each patient's condition, measured by a score from 1 to 10. However, due to hospital policies and doctor availability, no two doctors can be assigned to the same patient, and each doctor can only be assigned to one patient. Additionally, the hospital has a limited number of rooms available for treatment, and each room can only accommodate one doctor-patient pair. The hospital wants to assign doctors to patients in a way that maximizes the total expertise score, while also ensuring that the number of assigned doctor-patient pairs does not exceed the available rooms. If the hospital has 15 rooms available, how can they make the optimal assignment? The doctors and patients are listed below, along with the expertise scores:\n\nDoctors: Dr. Smith, Dr. Johnson, Dr. Williams, ..., Dr. Davis\nPatients: Patient 1, Patient 2, Patient 3, ..., Patient 20\nExpertise scores:\n- Dr. Smith: Patient 1 (8), Patient 2 (6), ..., Patient 20 (4)\n- Dr. Johnson: Patient 1 (7), Patient 2 (8), ..., Patient 20 (3)\n- ...\n- Dr. Davis: Patient 1 (5), Patient 2 (4), ..., Patient 20 (9)\n\nPlease provide the optimal assignment of doctors to patients, along with the total expertise score achieved.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Assignment Problem\",\n  \"description\": \"The Assignment Problem is a classic problem in Operations Research and Computer Science. It involves assigning a set of workers to a set of tasks in such a way that each worker is assigned to exactly one task and each task is assigned to exactly one worker. The goal is to maximize the total profit obtained by the assignments.\",\n  \"variables\": \"x = (x_1, x_2, ..., x_n), px = (px_1, px_2, ..., px_n), obj\",\n  \"variables_explanation\": \"x_w represents the task assigned to worker w, px_w represents the profit obtained by assigning worker w to task x_w, and obj represents the total profit obtained by the assignments. The variables x_w are decision variables that need to be determined, while the variables px_w and obj are auxiliary variables that are used to compute the profit.\",\n  \"constraints\": \"alldifferent(x)\",\n  \"constraints_explanation\": \"The constraint alldifferent(x) ensures that each worker is assigned to a different task, i.e., no two workers can be assigned to the same task.\",\n  \"objective\": \"maximize obj = \u2211(w in WORK)(px_w)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "toomany": {"__data__": {"id_": "toomany", "embedding": null, "metadata": {"problem_family": "toomany", "model_name": "toomany", "source_code": "%% TooMany.mzn (too many solutions)\nint: n; % number of machines\nset of int: MACHINE = 1..n;\nint: k; % production per day\nint: red = 1; int: white = 2; int: black = 3; int: blue = 4;\nset of int: COLOR = 1..4;\narray[COLOR] of int: l; % lower bound on production\narray[COLOR] of int: u; % upper bound on production\n\narray[MACHINE,COLOR] of var 0..k div 2: produce;\n\nconstraint forall(m in MACHINE)\n                 (sum(c in COLOR)(produce[m,c]) <= k);\nconstraint forall(c in COLOR)\n                 (sum(m in MACHINE)(produce[m,c]) >= l[c]);\nconstraint forall(c in COLOR)\n                 (sum(m in MACHINE)(produce[m,c]) <= u[c]);\nconstraint forall(m in MACHINE)\n                 (produce[m,white] > 0 /\\ produce[m,black] > 0 -> produce[m,blue] = 0);\nconstraint forall(m in MACHINE)\n                 (produce[m,blue] <= produce[m,red]);\nconstraint forall(m in MACHINE)\n                 (produce[m,red] mod 4 = 0);\nconstraint forall(m in MACHINE)\n                 (produce[m,white] mod 3 = 0);\n\n\nsolve maximize sum(m in MACHINE, c in COLOR)(produce[m,c]);\n\noutput [ show_int(3,produce[m,c]) ++\n         if c = 4 then \"\\n\" else \" \" endif\n       | m in MACHINE, c in COLOR ];\n\nn = 4;\nk = 11;\nl = [8,7,10,6];\nu = [14,16,12,20];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with 4 stages, each with a limited capacity of 11 performances per day. I have 4 types of performances (music, dance, theater, and comedy) with minimum and maximum requirements for each type (8, 7, 10, and 6, respectively). I also have constraints on the relationships between performances on each stage. For example, if a stage has both music and dance performances, it cannot have comedy performances. Additionally, the number of theater performances on each stage must be less than or equal to the number of music performances, and the number of music performances must be a multiple of 4. How can I maximize the total number of performances across all stages and types while satisfying these constraints?\",\n\n  \"question2\": \"I have 4 kids and I want to plan their activities for the day. Each kid can do a maximum of 11 activities, and I have 4 types of activities (arts, sports, music, and reading) that I want them to do. I want to make sure each kid does at least a certain number of each activity (8, 7, 10, and 6, respectively), but not too many. Also, if a kid does sports and music, they can't do reading. And if they do reading, they can't do more than the number of arts activities they do. Oh, and the number of arts activities has to be a multiple of 4. How can I plan their day to make sure they do the most activities possible while following these rules?\",\n\n  \"question3\": \"Imagine you're the manager of a theme park with 4 different areas (adventure, fantasy, future, and fun). Each area can have a maximum of 11 rides and attractions per day. You have 4 types of rides (roller coasters, water rides, carousels, and bumper cars) that you want to put in each area. You want to make sure each area has at least a certain number of each type of ride (8, 7, 10, and 6, respectively), but not too many. Also, if an area has a roller coaster and a water ride, it can't have a bumper car ride. And if it has a bumper car ride, it can't have more than the number of carousels it has. Oh, and the number of carousels has to be a multiple of 4. How can you plan the rides and attractions in each area to make sure you have the most possible while following these rules?\",\n\n  \"question4\": \"4 teams, 11 tasks each, 4 task types. Min and max tasks per type: 8, 7, 10, 6. If team does task A and B, can't do task D. Task C limit = task A limit. Task A must be multiple of 4. Maximize total tasks.\",\n\n  \"question5\": \"I'm the director of a large-scale logistics operation with 4 warehouses, each with a limited capacity of 11 shipments per day. I have 4 types of shipments (priority, standard, express, and bulk) with minimum and maximum requirements for each type (8, 7, 10, and 6, respectively). I also have constraints on the relationships between shipments on each warehouse. For example, if a warehouse has both priority and standard shipments, it cannot have bulk shipments. Additionally, the number of express shipments on each warehouse must be less than or equal to the number of priority shipments, and the number of priority shipments must be a multiple of 4. Furthermore, I have to consider the following additional constraints: each warehouse has a limited number of loading docks, and each shipment type requires a specific number of loading docks (priority: 2, standard: 1, express: 3, bulk: 4). I also have to ensure that the total number of loading docks used per day does not exceed the available capacity. How can I maximize the total number of shipments across all warehouses and types while satisfying these constraints and minimizing the use of loading docks?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Production Planning Problem\",\n  \"description\": \"This problem models a production planning scenario where a set of machines produce different colored products. Each machine has a limited production capacity per day, and there are constraints on the minimum and maximum production of each color. Additionally, there are constraints on the relationships between the production of different colors on each machine. The goal is to maximize the total production across all machines and colors.\",\n  \"variables\": \"produce[m,c] (m in MACHINE, c in COLOR)\",\n  \"variables_explanation\": \"The decision variables produce[m,c] represent the amount of color c produced by machine m, where m is an element of the set MACHINE and c is an element of the set COLOR.\",\n  \"constraints\": \n  [\n    \"\u2211(c in COLOR)(produce[m,c]) \u2264 k (m in MACHINE)\",\n    \"\u2211(m in MACHINE)(produce[m,c]) \u2265 l[c] (c in COLOR)\",\n    \"\u2211(m in MACHINE)(produce[m,c]) \u2264 u[c] (c in COLOR)\",\n    \"produce[m,white] > 0 \u2227 produce[m,black] > 0 \u2192 produce[m,blue] = 0 (m in MACHINE)\",\n    \"produce[m,blue] \u2264 produce[m,red] (m in MACHINE)\",\n    \"produce[m,red] mod 4 = 0 (m in MACHINE)\",\n    \"produce[m,white] mod 3 = 0 (m in MACHINE)\"\n  ],\n  \"constraints_explanation\": \n  [\n    \"Each machine's total production across all colors is limited to k units per day.\",\n    \"The total production of each color across all machines must meet the minimum demand l[c].\",\n    \"The total production of each color across all machines must not exceed the maximum demand u[c].\",\n    \"If a machine produces white and black products, it cannot produce blue products.\",\n    \"The production of blue products on each machine is limited to the production of red products.\",\n    \"The production of red products on each machine must be a multiple of 4.\",\n    \"The production of white products on each machine must be a multiple of 3.\"\n  ],\n  \"objective\": \"Maximize \u2211(m in MACHINE, c in COLOR)(produce[m,c])\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "constrained_connected": {"__data__": {"id_": "constrained_connected", "embedding": null, "metadata": {"problem_family": "constrained_connected", "model_name": "constrained_connected", "source_code": "% constrained clustering \n% Pick a maximal subset of edges so that no two nodes\n% given by the pairs (first[i],second[i]) \n% are connected.\n\nint: n;\nset of int: NODE = 1..n;\nint: m;\nset of int: EDGE = 1..m;\narray[EDGE] of NODE: pre;\narray[EDGE] of NODE: suc;\nint: d;\nset of int: DPAIR = 1..d;\narray[DPAIR] of NODE: first;\narray[DPAIR] of NODE: second;\n\nvar set of EDGE: selected;\n% a representative for each cluster\narray[NODE] of var NODE: rep;\n\n%constraint forall(e in selected)\n%                 (rep[pre[e]] = rep[suc[e]]);\nconstraint forall(e in EDGE)\n                 (e in selected -> rep[pre[e]] = rep[suc[e]]);\n\nconstraint forall(d in DPAIR)\n                 (rep[first[d]] != rep[second[d]]);\n\nsolve maximize card(selected);\n\noutput [ \"(\" ++ show(pre[e]) ++ \",\" ++ show(suc[e]) ++ \")\\n\"\n       | e in fix(selected) ]\n       ++ [show(rep),\"\\n\"]\n       ;\n\n\n\n                 \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a network of interconnected sensors for a smart city project. I have 100 sensors (nodes) and 200 potential connections (edges) between them. However, due to interference concerns, I need to ensure that certain pairs of sensors (50 pairs) are not connected directly. How can I maximize the number of connections while satisfying these constraints? I have a list of the sensors, potential connections, and the pairs that cannot be connected directly.\",\n  \n  \"question2\": \"I'm planning a big party and I want to make sure that some of my guests don't run into each other. I have a list of 50 guests and 100 potential tables I can seat them at. However, there are 20 pairs of guests that I really don't want to sit together. How can I seat my guests at the tables so that I use as many tables as possible and avoid those awkward encounters?\",\n  \n  \"question3\": \"I'm playing a game with my friends where we have to build a network of roads between cities. We have 20 cities and 50 roads we can build, but there are 10 pairs of cities that are too close to each other and can't be connected. How can we build the most roads while following these rules? We want to make it as big as possible!\",\n  \n  \"question4\": \"Maximize connections between 50 nodes while avoiding 10 specific pairs. Go!\",\n  \n  \"question5\": \"I'm a logistics manager for a large e-commerce company, and I'm responsible for designing the network of delivery routes between our warehouses and distribution centers. We have 500 warehouses and 1000 potential routes between them, but due to regulatory restrictions, there are 200 pairs of warehouses that cannot be connected directly. Additionally, we have different types of products that require different types of routes (e.g., refrigerated, non-refrigerated, etc.), and we need to ensure that the routes we choose can accommodate these different types of products. We also have a limited budget for building new routes, so we need to prioritize the most cost-effective options. How can we design the most efficient network of delivery routes while satisfying these constraints and minimizing costs? We have a detailed list of the warehouses, potential routes, and the pairs that cannot be connected directly, as well as the types of products that need to be transported and the costs associated with building new routes.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Constrained Clustering Problem\",\n  \"description\": \"The Constrained Clustering Problem is a classic problem in constraint programming. Given a set of nodes and edges, the goal is to find a maximal subset of edges such that no two nodes in a given set of pairs are connected. This problem can be viewed as a clustering problem where the goal is to cluster the nodes into groups such that the edges within each group are maximized and the edges between groups are minimized, while satisfying the constraint that certain pairs of nodes cannot be in the same group.\",\n  \"variables\": \"selected \u2286 EDGE, rep: NODE \u2192 NODE\",\n  \"variables_explanation\": \"The decision variables are 'selected', which is a subset of the edges (EDGE) that will be included in the solution, and 'rep', which is an array that maps each node to a representative node (i.e., the cluster that the node belongs to).\",\n  \"constraints\": \"\u2200e \u2208 EDGE: e \u2208 selected \u2192 rep[pre[e]] = rep[suc[e]], \u2200d \u2208 DPAIR: rep[first[d]] \u2260 rep[second[d]]\",\n  \"constraints_explanation\": \"The constraints are: (1) for each edge e in the selected subset, the representative nodes of the two endpoints of the edge must be the same (i.e., the edge is within a cluster), and (2) for each pair of nodes (first[d], second[d]) in the given set of pairs, the representative nodes of the two nodes must be different (i.e., the nodes cannot be in the same cluster).\",\n  \"objective\": \"maximize |selected|\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "teamselect": {"__data__": {"id_": "teamselect", "embedding": null, "metadata": {"problem_family": "team_select", "model_name": "teamselect", "source_code": "set of int: PLAYER = 1..11;\nset of int: GOALIE = 1..2;\nset of int: DEFENCE = 3..6;\nset of int: OFFENCE = 7..11;\n\nvar set of PLAYER: Xavier;\nvar set of PLAYER: Yuri;\nvar set of PLAYER: Zena;\n\narray[CAPTAIN] of var set of PLAYER: team = [Xavier,Yuri,Zena];\n\nset of int: CAPTAIN = 1..3;\narray[CAPTAIN,PLAYER] of int: value;\n \nvalue = [| 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6\n         | 9, 8, 4, 7, 6, 4, 5, 3, 5, 5, 7\n         | 8, 4, 3, 3, 6, 2, 5, 5, 3, 2, 5 |]; \n\nconstraint card(Xavier intersect GOALIE) >= 1;\nconstraint card(Xavier intersect DEFENCE) >= 2;\nconstraint card(Xavier intersect OFFENCE) >= 2;\nconstraint card(Xavier) = 6;\n\n\nconstraint card(Yuri intersect GOALIE) >= 1;\nconstraint card(Yuri intersect DEFENCE) >= 2;\nconstraint card(Yuri intersect OFFENCE) >= 2;\nconstraint card(Yuri) = 6;\n\nconstraint card(Zena intersect GOALIE) >= 1;\nconstraint card(Zena intersect DEFENCE) >= 2;\nconstraint card(Zena intersect OFFENCE) >= 2;\nconstraint card(Zena) = 6;\n\nconstraint card(Xavier intersect Yuri) <= 2;\nconstraint card(Xavier intersect Zena) <= 2;\n\nsolve maximize obj;\n\nvar int: obj = sum(c in CAPTAIN)(sum(p in team[c])(value[c,p]));\n\narray[PLAYER] of string: name =\n  [\"Ant\",\"Bee\",\"Cip\",\"Deb\",\"Eve\",\"Fin\",\"Ged\",\"Hel\",\"Ila\",\"Jan\",\"Kim\"];\n\noutput [\"Xavier: \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Xavier) ] ++\n       [\"\\nYuri:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Yuri) ] ++\n       [\"\\nZena:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Zena) ] ++\n       [\"\\nobj = \", show(obj), \";\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with 11 speakers, and I need to form three panels with specific roles: keynote speakers, moderators, and industry experts. Each panel should have at least one keynote speaker, two moderators, and two industry experts. No more than two speakers can be shared between any two panels. How can I maximize the overall impact of the panels based on the speakers' expertise and reputation scores (e.g., 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6)?\",\n  \n  \"question2\": \"I'm trying to put together three groups of friends for a game night. I have 11 friends, and I want each group to have a good mix of people. I want at least one friend who's really good at games, two friends who are okay at games, and two friends who are just there for fun. I don't want any group to have more than two friends who are really close to each other. How can I make sure everyone has a good time?\",\n  \n  \"question3\": \"I'm the captain of my school's sports teams, and I need to pick three teams for a tournament. I have 11 players, and I want each team to have a goalie, two defenders, and two forwards. I also want to make sure that no team has more than two players who are on the same school team. How can I pick the best teams to win the tournament?\",\n  \n  \"question4\": \"Form three groups of 6 from 11 people with specific roles. Maximize overall value with constraints on role distribution and group overlap.\",\n  \n  \"question5\": \"I'm the manager of a large restaurant with 11 staff members, and I need to create three teams for a catering event. Each team should have a team leader, two servers, and two kitchen staff. The team leader should have a high level of experience (score: 8-9), the servers should have a medium level of experience (score: 5-7), and the kitchen staff should have a low level of experience (score: 2-4). No more than two staff members can be shared between any two teams. Additionally, I want to ensure that each team has a good mix of staff with different skill sets (e.g., one team leader with a score of 9, two servers with scores of 5 and 6, and two kitchen staff with scores of 2 and 3). How can I maximize the overall performance of the teams based on the staff members' experience scores (e.g., 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6)?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Ice Hockey Team Formation Problem\",\n  \"description\": \"The Ice Hockey Team Formation Problem is a classic problem in constraint programming. The problem involves forming three ice hockey teams from a set of 11 players, with each team having a specific composition of goalies, defenders, and forwards. The objective is to maximize the total value of the teams, where the value of each team is determined by the sum of the values of its players.\",\n  \"variables\": \"Xavier, Yuri, Zena (sets of players), team (array of sets of players), obj (integer)\",\n  \"variables_explanation\": \"Xavier, Yuri, and Zena represent the sets of players in each team. The team array represents the three teams, where each team is a set of players. The obj variable represents the total value of the teams.\",\n  \"constraints\": \"card(Xavier \u2229 GOALIE) \u2265 1, card(Xavier \u2229 DEFENCE) \u2265 2, card(Xavier \u2229 OFFENCE) \u2265 2, card(Xavier) = 6, card(Yuri \u2229 GOALIE) \u2265 1, card(Yuri \u2229 DEFENCE) \u2265 2, card(Yuri \u2229 OFFENCE) \u2265 2, card(Yuri) = 6, card(Zena \u2229 GOALIE) \u2265 1, card(Zena \u2229 DEFENCE) \u2265 2, card(Zena \u2229 OFFENCE) \u2265 2, card(Zena) = 6, card(Xavier \u2229 Yuri) \u2264 2, card(Xavier \u2229 Zena) \u2264 2\",\n  \"constraints_explanation\": \"The constraints ensure that each team has at least one goalie, two defenders, and two forwards. Each team must have exactly six players. The constraints also ensure that no more than two players are shared between any two teams.\",\n  \"objective\": \"maximize obj = \u2211(c in CAPTAIN)(\u2211(p in team[c])(value[c,p]))\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "knapsack01set": {"__data__": {"id_": "knapsack01set", "embedding": null, "metadata": {"problem_family": "knapsack", "model_name": "knapsack01set", "source_code": "int: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\nvar set of 1..n: x;\n\nconstraint sum(i in 1..n)(size[i] * bool2int(i in x)) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * bool2int(i in x));\n\noutput [\"x = \", show(x), \"\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 20 potential acts to choose from, each with a specific soundcheck time requirement and a guaranteed minimum payment. Given that I have 10 hours available for soundchecks and a budget of $100,000, which acts should I book to maximize the total audience appeal, assuming each act's appeal is directly proportional to their guaranteed minimum payment?\",\n\n  \"question2\": \"I want to pack a bag for a trip, but I don't know what to bring. I have a bunch of clothes and shoes that I like, but my bag can only hold so much. How can I pick the things that will make me the happiest without overstuffing my bag? Each item has a special 'happiness score' that I can use to compare them.\",\n\n  \"question3\": \"I'm planning a birthday party for my friend and I want to invite a bunch of people, but my mom said we can only have 10 guests. Each guest has a 'fun score' that shows how much fun they'll have at the party, and some guests need more space than others. How can I pick the guests that will have the most fun without running out of space?\",\n\n  \"question4\": \"Which 5 books should I take on a trip with a 10kg luggage limit, given their weights and my reading priorities?\",\n\n  \"question5\": \"I'm a curator at a museum and I'm planning a new exhibit on ancient civilizations. I have 20 artifacts to choose from, each with a specific size and weight requirement for display, as well as a 'historical significance score' that reflects its importance to the exhibit. The exhibit hall has a limited floor space of 500 square meters and a maximum weight capacity of 10 tons. Additionally, I need to ensure that the exhibit is visually balanced and engaging, so I want to include a mix of artifacts from different civilizations. How can I select the artifacts that will create the most engaging and historically significant exhibit while staying within the space and weight constraints? I've included the details of each artifact below:\n\nArtifact 1: Size: 2m x 1m, Weight: 500kg, Historical Significance Score: 8\nArtifact 2: Size: 1m x 1m, Weight: 200kg, Historical Significance Score: 6\n...\nArtifact 20: Size: 3m x 2m, Weight: 1000kg, Historical Significance Score: 9\n\nPlease help me create the most impactful exhibit possible.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. It involves finding the optimal subset of items to include in a knapsack of limited capacity, such that the total value of the items is maximized. Each item has a weight and a value, and the knapsack has a maximum capacity. The problem is called 0/1 because each item can either be included (1) or excluded (0) from the knapsack.\",\n  \"variables\": \"x \u2286 {1, 2, ..., n}\", \n  \"variables_explanation\": \"x is a set of items to include in the knapsack. It is a subset of the set of all items {1, 2, ..., n}.\",\n  \"constraints\": \"\u2211_{i=1}^{n} size_i \\* x_i \u2264 capacity\",\n  \"constraints_explanation\": \"The total weight of the items included in the knapsack cannot exceed the knapsack's capacity. size_i is the weight of item i and x_i is a binary variable indicating whether item i is included in the knapsack.\",\n  \"objective\": \"maximize \u2211_{i=1}^{n} profit_i \\* x_i\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "itemset_mining": {"__data__": {"id_": "itemset_mining", "embedding": null, "metadata": {"problem_family": "itemset_mining", "model_name": "itemset_mining", "source_code": "int : NrI ; \nint : NrT ; \nint : Freq ;\narray [ 1..NrT ] of set of 1..NrI : TDB;\nvar set of 1..NrI : Items ;\nconstraint card ( cover ( Items ,TDB ) ) >= Freq ;\nsolve satisfy ; \n\nfunction var set of int : cover (\n         var set of int : Items ,\n         array [ int ] of var set of int : D) = \n         let {\n                          var set of index_set (D): Trans ;\n                          constraint forall ( t in index_set (D) )\n                          ( t in Trans <-> Items subset D[ t ] );\n         } in Trans;\n\narray[1.. NrI] of int: itemprice;\nint: minUtility;\n\nconstraint sum(i in Items)(itemprice[i]) >= minUtility;\n\nNrI = 6;\nint: bread = 1;\nint: butter = 2;\nint: cheese = 3;\nint: cocoa = 4;\nint: milk = 5;\nint: vegemite = 6;\narray[1..NrI] of string: name = [\"bread\",\"butter\",\"cheese\",\"cocoa\",\"milk\",\"vegemite\"];\nitemprice = [1,2,1,2,1,1];\n\nNrT = 7;\nTDB = [ { butter, cheese, milk, vegemite },\n        { butter, cocoa, milk, vegemite },\n\t{ bread, cocoa, cheese, milk },\n\t{ bread, butter, cheese, vegemite }, \n\t{ bread, cheese, milk, vegemite },\n\t{ bread, butter, cheese, cocoa, milk },\n\t{ bread, cheese, milk }];\n\nFreq = 4;\nminUtility = 3;\n\noutput [ name[i] ++ \" \" | i in fix(Items) ];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a logistics manager for a large e-commerce company, and I need to optimize the packaging of our products. We have 6 different products with varying weights and dimensions, and we want to pack them in boxes that can hold a minimum of 3 units of any product. However, we also want to ensure that the total value of the products in each box is at least $3. Given the product weights and dimensions, and the value of each product, can you find a set of products that meets these constraints and can be packed together efficiently?\",\n  \"question2\": \"I'm planning a party and I want to make sure that my guests have a good time. I have a list of 6 different snacks that I can serve, and I want to choose a few that will appeal to at least 4 of my guests. However, I also want to make sure that the total cost of the snacks is at least $3. Can you help me choose some snacks that will make my party a success?\",\n  \"question3\": \"I'm a kid and I love playing with Legos! I have 6 different Lego sets that I can choose from, and I want to build a really cool castle. However, I only have enough space to build a castle that can fit at least 4 of my Lego sets. Also, I want to make sure that the total number of Lego pieces I use is at least 3. Can you help me choose the Lego sets that will make my castle the best?\",\n  \"question4\": \"Which 4+ items from a set of 6 can be combined to reach a minimum value of $3?\",\n  \"question5\": \"I'm a curator for a museum, and I'm planning a new exhibit on the history of food. I have a collection of 6 different artifacts related to food, including a bread-making machine, a butter churn, a cheese mold, a cocoa press, a milk bottle, and a vegemite jar. I want to create a display case that showcases at least 4 of these artifacts, and I want to make sure that the total value of the artifacts in the case is at least $3. However, I also want to ensure that the artifacts I choose are representative of the different types of food that were consumed during different time periods. Given the historical significance and value of each artifact, can you help me choose a set of artifacts that meets these constraints and will make my exhibit a success? The artifacts have the following values: bread-making machine ($1), butter churn ($2), cheese mold ($1), cocoa press ($2), milk bottle ($1), and vegemite jar ($1).\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Frequent Itemset Mining\",\n  \"description\": \"Frequent Itemset Mining is a classic problem in data mining and constraint programming. The goal is to find a set of items that appear together in a minimum number of transactions in a transaction database. The problem is often used in market basket analysis to identify sets of items that are frequently purchased together.\",\n  \"variables\": \"Items (a set of items)\",\n  \"variables_explanation\": \"Items is a decision variable representing the set of items that appear together in a minimum number of transactions in the transaction database.\",\n  \"constraints\": \"card(cover(Items, TDB)) >= Freq, sum(i in Items)(itemprice[i]) >= minUtility\",\n  \"constraints_explanation\": \"The first constraint ensures that the set of items appears together in at least Freq transactions in the transaction database. The second constraint ensures that the total price of the items in the set is at least minUtility.\",\n  \"objective\": \"satisfy (find a feasible solution)\"\n}\n```\n\nNote that the objective of this problem is not to minimize or maximize a specific value, but rather to find a feasible solution that satisfies the constraints. The problem is a satisfaction problem, and the goal is to find a set of items that meets the minimum frequency and minimum utility requirements.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "restarta": {"__data__": {"id_": "restarta", "embedding": null, "metadata": {"problem_family": "restart", "model_name": "restarta", "source_code": "array[1..10] of var 1..10:x;\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(x);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_min, complete)\n      satisfy;\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to assign 10 trucks with different capacities (ranging from 1 to 10 units) to a sequence of delivery tasks. The first task requires a truck with a capacity of at least 9 units, and each subsequent task can be handled by a truck with a capacity less than or equal to the previous one. Additionally, no two tasks can be assigned to trucks with the same capacity. How can the company assign the trucks to the tasks while satisfying these constraints?\",\n\n  \"question2\": \"I'm planning a party and I want to serve 10 different types of desserts. I have a bunch of serving dishes with different sizes (from small to extra-large). I want to use the biggest dishes first and then move to smaller ones. I also want to make sure I don't use the same size dish twice. Can you help me figure out how to arrange the desserts in the dishes?\",\n\n  \"question3\": \"Imagine you're a game developer and you want to create a level with 10 obstacles. Each obstacle needs to be placed on a platform with a specific height (from 1 to 10 blocks). The first obstacle needs to be on a platform with a height of at least 9 blocks, and each subsequent obstacle can be on a platform with a height less than or equal to the previous one. Also, no two obstacles can be on platforms with the same height. How can you design the level to satisfy these constraints?\",\n\n  \"question4\": \"Assign 10 different colored balls to 10 boxes with different capacities (1-10). First box must be at least 9. No repeats. How?\",\n\n  \"question5\": \"A renowned art museum is planning to host a unique exhibition featuring 10 distinct art pieces, each requiring a custom-built pedestal with a specific height (ranging from 1 to 10 meters). The exhibition's curator has a clear vision for the display: the first art piece must be placed on a pedestal with a height of at least 9 meters, and each subsequent piece must be placed on a pedestal with a height less than or equal to the previous one. Furthermore, to maintain the exhibition's aesthetic appeal, no two pedestals can have the same height. The museum's logistics team must also consider the limited availability of pedestal materials and the need to minimize construction costs. Given these constraints, how can the museum's team design the exhibition layout to meet the curator's requirements while also being mindful of the practical considerations?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Non-Strict Decreasing Sequence\",\n  \"description\": \"The problem is to find a sequence of 10 numbers between 1 and 10, where the first number is at least 9 and each subsequent number is less than or equal to the previous one, and all numbers are distinct.\",\n  \"variables\": \"x = [x_1, x_2, ..., x_10], where x_i is the i-th number in the sequence. The variables represent the numbers in the sequence.\",\n  \"constraints\": \"x_1 \u2265 9, x_i \u2264 9 for i = 2..10, x_i \u2260 x_j for i \u2260 j. The constraints ensure that the first number is at least 9, all subsequent numbers are less than or equal to 9, and all numbers are distinct.\",\n  \"objective\": \"There is no objective function in this problem, the goal is to find a feasible solution that satisfies all the constraints.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening1": {"__data__": {"id_": "flattening1", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening1", "source_code": "int: i = 3; int: j = 2;\nvar int: x; var 0..2: y; var 0..3: z;\nconstraint x*y + y*z <= i*j;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has 3 trucks (i) and 2 warehouses (j) to manage. Each truck can carry a certain number of packages (x), and each warehouse has a limited capacity (y) and a specific storage area (z). How can the company allocate packages to trucks and warehouses to maximize storage while not exceeding the capacity of the warehouses and the number of packages each truck can carry, given that the total number of packages allocated should not exceed the product of the number of trucks and warehouses (i*j)?\",\n  \n  \"question2\": \"I'm planning a party and I want to make sure I have enough space for my guests. I have 3 tables (i) and 2 rooms (j) available. Each table can fit a certain number of people (x), and each room has a limited capacity (y) and a specific area for dancing (z). How can I arrange the tables and rooms to fit all my guests without overcrowding the rooms or tables?\",\n  \n  \"question3\": \"Imagine you're a game developer creating a new game where players have to collect resources (x) and build structures (y) on a map with limited space (z). The game has 3 levels (i) and 2 game modes (j). How can you design the game to ensure that players can collect and build resources without running out of space, while also making sure the game is fun and challenging?\",\n  \n  \"question4\": \"3 machines (i) and 2 workers (j) need to process 100 units (x) of material with limited storage (y) and a specific work area (z). How can the work be allocated to meet the demand without exceeding storage and work area limits?\",\n  \n  \"question5\": \"A large retail company is planning to launch a new product line and needs to allocate shelf space in its stores. The company has 3 distribution centers (i) and 2 types of stores (j) with limited shelf space (y) and a specific area for product displays (z). The product line consists of 5 different products (x), each with its own packaging and storage requirements. The company wants to allocate shelf space to maximize product visibility and sales while ensuring that the total amount of shelf space allocated does not exceed the product of the number of distribution centers and store types (i*j). Additionally, the company has specific constraints on the minimum and maximum amount of shelf space that can be allocated to each product, as well as constraints on the number of products that can be displayed in each store. How can the company allocate shelf space to meet these constraints and objectives?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Linear Diophantine Inequality Problem\",\n  \"description\": \"The Linear Diophantine Inequality Problem is a classic problem in number theory and constraint programming. It involves finding integer solutions that satisfy a linear inequality. In this specific instance, we are looking for integer values of x, y, and z that satisfy the inequality x*y + y*z <= i*j, where i and j are given constants.\",\n  \"variables\": \"x, y \u2208 {0, 1, 2}, z \u2208 {0, 1, 2, 3}. These variables represent the decision variables in the problem, where x, y, and z are integers that we need to find. The variable x can take any integer value, while y and z are bounded within the given ranges.\",\n  \"constraints\": \"x*y + y*z \u2264 i*j. This is the main constraint of the problem, which is a linear Diophantine inequality. It states that the sum of the products of x and y, and y and z, must be less than or equal to the product of the given constants i and j.\",\n  \"objective\": \"satisfy. The objective of this problem is to find a solution that satisfies the given constraint, rather than optimizing a specific value. In other words, we are looking for any integer values of x, y, and z that make the inequality true.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "rel_sem": {"__data__": {"id_": "rel_sem", "embedding": null, "metadata": {"problem_family": "rel_sem", "model_name": "rel_sem", "source_code": "var -4..4: x;\nvar -4..4: y;\n\nconstraint x div y >= 2;\n\nsolve satisfy;\n\noutput [\"x = \\(x); y = \\(y);\\n\"];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to optimize the loading of cargo ships. Containers can be stacked up to 4 high and 4 wide. Given a set of containers with different weights, how can we determine the optimal arrangement of containers on the ship such that the weight of each stack is at least twice the weight of the heaviest container in the stack? Assume the weight of each container is an integer between -4 and 4, representing the weight in tons.\",\n  \n  \"question2\": \"I'm planning a road trip with my friends and we want to make sure we have enough snacks for the drive. We have a bunch of bags of chips and we want to divide them among the cars. How can we make sure each car gets at least twice as many bags as the number of people in the car? We have 9 bags of chips and there are 4 people in each car. Can we do this if we have 3 cars?\",\n  \n  \"question3\": \"Imagine you're a game developer and you're creating a new game where players can collect power-ups. You want to make sure that each player gets at least twice as many power-ups as the number of enemies they have to defeat in a level. If a player has 3 enemies to defeat, how many power-ups should you give them? What if they have 4 enemies? Can you make a rule that works for all levels?\",\n  \n  \"question4\": \"How can I divide 12 cookies among 4 people so each person gets at least twice as many cookies as the number of people they're sharing with?\",\n  \n  \"question5\": \"A manufacturing company produces widgets that require a specific ratio of raw materials to produce. The company has a limited supply of raw materials and wants to optimize the production of widgets. The production process requires a ratio of at least 2:1 of material A to material B. The company has a supply of material A that ranges from -4 to 4 units and a supply of material B that ranges from -4 to 4 units. The company wants to produce as many widgets as possible while maintaining the required ratio of materials. How can the company determine the optimal production levels of widgets given the available supply of materials? Assume the production process can only produce whole widgets and the supply of materials is an integer value between -4 and 4. Additionally, the company has a priority to produce widgets that require the least amount of material A, as this material is the most expensive. Can you provide a solution that takes into account this priority?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Integer Division Problem\",\n  \"description\": \"This problem involves finding integer values for x and y such that x divided by y is greater than or equal to 2. The problem is a simple example of a constraint satisfaction problem, where the goal is to find a solution that satisfies the given constraint.\",\n  \"variables\": \"x \u2208 [-4, 4], y \u2208 [-4, 4]\", \n  \"variables_explanation\": \"x and y are integer decision variables, representing the dividend and divisor respectively, with values ranging from -4 to 4.\",\n  \"constraints\": \"x / y \u2265 2\",\n  \"constraints_explanation\": \"The constraint ensures that the result of the integer division of x by y is greater than or equal to 2. This means that the solution must satisfy this divisibility condition.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "test": {"__data__": {"id_": "test", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "test", "source_code": "\n\nset of int: A = {1,3,5};\n\nset of int: B = trace(\"setB\",{2,3,6});\n\narray[A union B] of var 0..1: x;\n\n\nsolve satisfy;\n\noutput [show(x)];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with multiple venues, each with its own set of attendees. I have two groups of attendees, A and B, with some overlap between them. I want to assign each attendee to a venue such that no two attendees from different groups are in the same venue. How can I find a feasible assignment that satisfies this constraint? The attendees in group A are {1, 3, 5} and the attendees in group B are {2, 3, 6}.\",\n  \n  \"question2\": \"I'm trying to plan a party and I have two groups of friends. Some of my friends are in both groups. I want to make sure that if I invite someone from one group, I don't invite someone from the other group who is also friends with them. Is there a way to figure out who I can invite so that no one is friends with someone from the other group?\",\n  \n  \"question3\": \"Imagine you're the manager of a big theme park with lots of different rides. You have two teams of workers, the red team and the blue team. Some workers are on both teams. You want to make sure that if a worker from the red team is working on a ride, no worker from the blue team who is friends with them is working on the same ride. How can you make a schedule that makes sure this doesn't happen? The workers on the red team are {1, 3, 5} and the workers on the blue team are {2, 3, 6}.\",\n  \n  \"question4\": \"Can I invite friends from two groups to a party without inviting friends who know each other?\",\n  \n  \"question5\": \"I'm the curator of a large art museum with multiple galleries. I have two groups of artists, A and B, with some overlap between them. Each artist has a unique style and some artists have collaborated with each other in the past. I want to create an exhibit that showcases the work of these artists, but I want to make sure that no two artists who have collaborated with each other are displayed in the same gallery. Additionally, I want to make sure that the exhibit is diverse and representative of both groups. The artists in group A are {1, 3, 5} and the artists in group B are {2, 3, 6}. Can you help me find a feasible arrangement that satisfies these constraints? I also want to prioritize the display of artists who have not been featured in the museum before, and I want to make sure that the exhibit is accessible to visitors with disabilities. The museum has 10 galleries, each with a different theme and accessibility features. I want to make sure that the exhibit is engaging and interactive, with a mix of visual and tactile elements. Can you help me find a solution that takes all these factors into account?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Set Packing Problem\",\n  \"description\": \"The Set Packing Problem is a classic problem in combinatorial optimization and constraint programming. It involves selecting a subset of sets from a given collection of sets such that the selected sets are pairwise disjoint, i.e., they do not have any elements in common. The goal is to find a packing of sets that satisfies this condition.\",\n  \"variables\": \"x_i, i \u2208 A \u222a B, where x_i \u2208 {0, 1}\", \n  \"variables_explanation\": \"The decision variables x_i represent whether an element i is included (x_i = 1) or not (x_i = 0) in the packing. The index set A \u222a B represents the union of the two given sets A and B.\",\n  \"constraints\": \"\u2200 i, j \u2208 A \u222a B, i \u2260 j, x_i + x_j \u2264 1 if i \u2208 A and j \u2208 B and i = j\",\n  \"constraints_explanation\": \"The constraints ensure that if an element is included in the packing, it cannot be included in any other set. However, in this specific model, there are no explicit constraints defined, and the model only contains a 'solve satisfy' statement, which means that the model is looking for any feasible solution that satisfies the implicit constraints of the variable domains (x_i \u2208 {0, 1}).\",\n  \"objective\": \"No objective, the model is looking for a feasible solution\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening9": {"__data__": {"id_": "flattening9", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening9", "source_code": "var -2..2: x; var -1..2: y; \nvar -2..2: z; var -1..2: u; var 0..3: t;\nconstraint x <= 0 \\/ bool2int(y > 0 /\\ z > 0) + t >= u;\n\nsolve satisfy; ", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to optimize its delivery routes. Each truck has a capacity of 2 tons and can travel up to 200 miles. The company has 5 trucks and needs to deliver packages to 10 locations. Each location has a specific demand for packages, ranging from -2 to 2 tons. The company wants to minimize the number of trucks used while ensuring that all locations receive their required packages. However, there's a catch: if a truck travels to a location with a high demand (greater than 0 tons), it must also visit a nearby location with a high demand. The company has a limited number of 'bonus miles' (up to 3) that can be used to extend the route of a truck. How can the company optimize its delivery routes to meet the demands of all locations while minimizing the number of trucks used?\",\n\n  \"question2\": \"I'm planning a road trip with my friends and we need to decide which cities to visit. We have a map with some cities marked, and each city has a 'fun level' from -2 to 2. We want to visit cities with high fun levels, but we also want to make sure we don't visit too many cities that are too far apart. We have a limited amount of gas (up to 3 tanks), and we want to use it wisely. Can you help us plan a route that visits the most fun cities while using the least amount of gas?\",\n\n  \"question3\": \"Imagine you're a game developer creating a new level for a popular video game. The level has 5 platforms, each with a specific 'difficulty level' from -2 to 2. The player must navigate through the platforms, and each platform has a 'power-up' that can be collected. However, if the player collects a power-up on a platform with a high difficulty level, they must also collect a power-up on a nearby platform with a high difficulty level. The player has a limited number of 'lives' (up to 3), and you want to design the level so that the player can collect all the power-ups while using the least number of lives. How can you design the level to make it fun and challenging for the player?\",\n\n  \"question4\": \"Can you find a combination of 5 numbers (x, y, z, u, t) that satisfies the following conditions: x is between -2 and 2, y is between -1 and 2, z is between -2 and 2, u is between -1 and 2, and t is between 0 and 3, such that x is less than or equal to 0 or (y is greater than 0 and z is greater than 0) and t is greater than or equal to u?\",\n\n  \"question5\": \"A renewable energy company is planning to build a new wind farm with 5 turbines. Each turbine has a specific 'energy output' from -2 to 2 megawatts, and the company wants to optimize the placement of the turbines to maximize the total energy output. However, there's a constraint: if a turbine is placed in a location with high wind speeds (greater than 0 megawatts), it must also be placed near another turbine with high wind speeds. The company has a limited budget for building the turbines (up to 3 million dollars), and it wants to use it wisely. Additionally, the company wants to ensure that the total energy output of the turbines is greater than or equal to the energy demand of the nearby town (u). The company has a team of engineers who can adjust the placement of the turbines to optimize the energy output, but they need to make sure that the turbines are placed in a way that satisfies the constraints. Can you help the company optimize the placement of the turbines to maximize the total energy output while satisfying the constraints and staying within the budget?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Modified Boolean Satisfiability Problem\",\n  \"description\": \"This problem is a variation of the classical Boolean Satisfiability Problem (SAT) with additional constraints and variables. The goal is to find an assignment of values to the variables that satisfies all the constraints.\",\n  \"variables\": \"x \u2208 [-2, 2], y \u2208 [-1, 2], z \u2208 [-2, 2], u \u2208 [-1, 2], t \u2208 [0, 3]. \n               These variables represent the decision variables in the problem, where x, y, z, and u are integer variables with different ranges, and t is a non-negative integer variable.\",\n  \"constraints\": \"x \u2264 0 \u2228 (y > 0 \u2227 z > 0) + t \u2265 u. \n                 This constraint is a disjunction of two conditions. The first condition is that x is less than or equal to 0. \n                 The second condition is that y is greater than 0 and z is greater than 0, and the sum of the boolean result of this condition (converted to an integer) and t is greater than or equal to u.\",\n  \"objective\": \"satisfy. \n               The objective of this problem is to find a solution that satisfies all the constraints, without any specific optimization goal.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "ltsp": {"__data__": {"id_": "ltsp", "embedding": null, "metadata": {"problem_family": "linetsp", "model_name": "ltsp", "source_code": "int: n; % number of cities\nset of int: CITY = 1..n;\nset of int: POS = 1..n;\narray[CITY] of int: coord; % coordinate of city \nint: m; % number of precedences\nset of int: PREC = 1..m;\narray[PREC] of CITY: left;\narray[PREC] of CITY: right;\n\narray[CITY] of var POS: order;\narray[POS] of var CITY: city;\n\ninclude \"inverse.mzn\";\nconstraint inverse(order,city);\n\nconstraint forall(i in PREC)(order[left[i]] < order[right[i]]);\n\nsolve minimize sum(i in 1..n-1)(abs(coord[city[i]] - coord[city[i+1]]));\n\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a road trip across Europe with 10 friends, and we want to visit 15 cities. However, due to some personal preferences and prior commitments, we have some constraints on the order in which we visit the cities. For example, we need to visit Paris before Rome, and Berlin before Amsterdam. We also want to minimize the total driving distance. Can you help me find the optimal route that satisfies all the constraints and minimizes the driving distance? The coordinates of the cities are: (48.8567, 2.3508) for Paris, (41.9028, 12.4964) for Rome, (52.5200, 13.4050) for Berlin, (52.3702, 4.8952) for Amsterdam, and so on.\",\n\n  \"question2\": \"I want to plan a fun day out with my kids. We want to visit some playgrounds and parks in our city, but we need to make sure that we visit the ones with the swings before the ones with the slides. Can you help me figure out the best order to visit the playgrounds so that we don't have to drive too far and the kids have the most fun? We have 5 playgrounds to visit and they are all in different parts of the city.\",\n\n  \"question3\": \"I'm planning a school project where I need to visit different museums in my city. I have 7 museums to visit, but I need to visit the ones with the ancient artifacts before the ones with the modern art. Can you help me find the best order to visit the museums so that I can learn the most and have the most fun? The museums are all in different parts of the city and I need to take the bus to get to each one.\",\n\n  \"question4\": \"I need to visit 5 stores in a row, but I have to visit the grocery store before the pharmacy. What's the best order to visit the stores to minimize my walking distance?\",\n\n  \"question5\": \"I'm the event coordinator for a large music festival, and I need to plan the schedule for the performers. We have 20 bands playing on 5 different stages, and each band has a specific time slot and stage assignment. However, due to some technical and logistical constraints, we have some restrictions on the order in which the bands can play. For example, we need to make sure that the headlining act plays after the opening act, and that the bands with the same genre play on the same stage. We also need to minimize the time it takes for the bands to set up and tear down their equipment, as well as the time it takes for the audience to move between stages. Can you help me find the optimal schedule that satisfies all the constraints and minimizes the setup and teardown times, as well as the audience movement times? The coordinates of the stages are: (40.7128, -74.0060) for Stage 1, (40.7132, -74.0055) for Stage 2, (40.7145, -74.0042) for Stage 3, (40.7158, -74.0029) for Stage 4, and (40.7171, -74.0016) for Stage 5. The setup and teardown times for each band are: 30 minutes for the headlining act, 20 minutes for the opening act, and 15 minutes for all the other bands. The audience movement times between stages are: 10 minutes between Stage 1 and Stage 2, 15 minutes between Stage 2 and Stage 3, 20 minutes between Stage 3 and Stage 4, and 25 minutes between Stage 4 and Stage 5.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Traveling Salesman Problem with Precedence Constraints\",\n  \"description\": \"The Traveling Salesman Problem with Precedence Constraints is a variant of the classic Traveling Salesman Problem. In this problem, we have a set of cities and their coordinates. We also have a set of precedence constraints, which specify that one city must be visited before another. The goal is to find the shortest possible tour that visits all cities exactly once and satisfies all precedence constraints.\",\n  \"variables\": \"order: CITY \u2192 POS, city: POS \u2192 CITY\",\n  \"variables_explanation\": \"The decision variables are order and city. The order variable maps each city to its position in the tour, while the city variable maps each position in the tour to the city that should be visited at that position.\",\n  \"constraints\": \"\u2200i \u2208 PREC: order[left[i]] < order[right[i]], inverse(order, city)\",\n  \"constraints_explanation\": \"The constraints are the precedence constraints, which specify that one city must be visited before another, and the inverse constraint, which ensures that the order and city variables are inverses of each other, i.e., that each city is visited exactly once and each position in the tour is assigned to exactly one city.\",\n  \"objective\": \"minimize \u2211(i=1 to n-1) |coord[city[i]] - coord[city[i+1]]|\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "cell_block_func": {"__data__": {"id_": "cell_block_func", "embedding": null, "metadata": {"problem_family": "cell_block", "model_name": "cell_block_func", "source_code": "int: k;\nset of int: PRISONER = 1..k;\nint: n;\nset of int: ROW = 1..n;\nint: m;\nset of int: COL = 1..m;\nset of PRISONER: danger;\nset of PRISONER: female;\nset of PRISONER: male = PRISONER diff female;\narray[ROW,COL] of int: cost;\n\n\narray[PRISONER] of var ROW: r;\narray[PRISONER] of var COL: c;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent([r[p] * m + c[p] | p in PRISONER]);\n\nfunction var int: \n     manhattan(var int:x1, var int:y1,\n               var int:x2, var int:y2) =\n     abs(x2 - x1) + abs(y2 - y1);\n\nconstraint forall(p in PRISONER, d in danger where p != d) \n                 (manhattan(r[p],c[p],r[d],c[d]) > 1);\n\nconstraint forall(p in female)(r[p] <= (n + 1) div 2);\nconstraint forall(p in male)(r[p] >= n div 2 + 1);\n\nvar int: totalcost = sum(p in PRISONER)(cost[r[p],c[p]]);  \nsolve minimize totalcost;\n \noutput [\"cost = \\(totalcost)\\n\"] ++\n       [ \"Prisoner \\(p) \" ++ if p in female then \"(F)\" else \"(M)\" endif ++ \n         \" in [\\(r[p]),\\(c[p])].\\n\"\n       | p in PRISONER ];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a new layout for a large conference center with 20 rooms and 15 columns. Each room has a specific cost associated with it, and I need to assign 50 speakers to these rooms while minimizing the total cost. However, I have some constraints: 10 of the speakers are VIPs and cannot be placed in adjacent rooms, and 20 of the speakers are from a specific organization and need to be placed in the upper half of the conference center. Can you help me find the optimal assignment of speakers to rooms?\",\n  \"question2\": \"I'm planning a big party and I need to seat 50 guests at tables. Some guests don't get along and can't sit near each other. I also want to make sure that the ladies are seated near the bar and the gentlemen are seated near the food. Can you help me figure out where to seat everyone so that everyone has a good time and the party doesn't get too expensive?\",\n  \"question3\": \"Imagine you're the principal of a school and you need to assign 50 students to their seats in a big auditorium. Some students are friends and want to sit together, but some students don't get along and need to be separated. You also want to make sure that the girls are seated on one side of the auditorium and the boys are seated on the other side. Can you help me figure out the best way to seat everyone so that everyone is happy and safe?\",\n  \"question4\": \"Seat 50 people in a 20x15 grid, minimizing costs. Some people can't sit near each other, and some need to be on one side or the other.\",\n  \"question5\": \"I'm the event coordinator for a large music festival, and I need to assign 50 food vendors to specific locations on the festival grounds. The grounds are divided into a 20x15 grid, with each location having a specific cost associated with it. However, I have some constraints to consider: 10 of the vendors are high-priority and cannot be placed in adjacent locations, and 20 of the vendors are specialty food vendors that need to be placed in the upper half of the grounds. Additionally, I need to ensure that the vendors are distributed evenly throughout the grounds to minimize congestion and maximize customer satisfaction. The festival grounds also have some obstacles, such as a large stage and a VIP area, that need to be taken into account when assigning locations. Can you help me find the optimal assignment of vendors to locations that minimizes costs and meets all of the constraints? The cost of each location is as follows: [insert 20x15 grid of costs]. The high-priority vendors are: [insert list of 10 vendors]. The specialty food vendors are: [insert list of 20 vendors]. The obstacles on the grounds are: [insert list of obstacles].\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Prisoner Placement Problem\",\n  \"description\": \"The Prisoner Placement Problem is a classic problem in constraint programming. The problem involves placing a set of prisoners in a rectangular grid, where each prisoner has a specific cost associated with each cell in the grid. The goal is to minimize the total cost of placing all prisoners while satisfying certain constraints. The constraints include ensuring that no two prisoners are placed in adjacent cells, and that female prisoners are placed in the upper half of the grid and male prisoners are placed in the lower half of the grid.\",\n  \"variables\": \"r[p], c[p], p \u2208 PRISONER\",\n  \"variables_explanation\": \"The decision variables r[p] and c[p] represent the row and column of the cell where prisoner p is placed, respectively.\",\n  \"constraints\": \"alldifferent([r[p] * m + c[p] | p in PRISONER]), manhattan(r[p],c[p],r[d],c[d]) > 1, \u2200p \u2208 PRISONER, d \u2208 danger, p \u2260 d, r[p] \u2264 (n + 1) div 2, \u2200p \u2208 female, r[p] \u2265 n div 2 + 1, \u2200p \u2208 male\",\n  \"constraints_explanation\": \"The constraints include: (1) ensuring that each prisoner is placed in a unique cell (alldifferent), (2) ensuring that no two prisoners are placed in adjacent cells (manhattan distance > 1), (3) ensuring that female prisoners are placed in the upper half of the grid, and (4) ensuring that male prisoners are placed in the lower half of the grid.\",\n  \"objective\": \"minimize totalcost = \u2211(p \u2208 PRISONER) cost[r[p],c[p]]\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening3": {"__data__": {"id_": "flattening3", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening3", "source_code": "var -2..2: x;\nvar 0..4: y;\nconstraint x * x + y * y <= 6;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a new drone delivery system and need to optimize the placement of the drone's cargo within a circular compartment. The compartment has a radius of sqrt(6) units and I want to place a cylindrical package with a height of 2 units and a base radius of 1 unit. However, I also need to ensure that the package is at least 1 unit away from the edge of the compartment. Given these constraints, what are the possible coordinates (x, y) for the center of the package within the compartment?\",\n  \n  \"question2\": \"I'm trying to plan a garden and I want to put a big rock in the middle. The rock is 2 feet wide and I want to put it in a circle of flowers that is 4 feet across. I don't want the rock to touch the flowers, so I need to leave some space around it. Where can I put the rock so that it fits inside the circle and doesn't touch the flowers?\",\n  \n  \"question3\": \"Imagine you're playing a game where you have to hide a treasure chest in a circular forest. The forest is 4 units across and you want to hide the chest at least 1 unit away from the edge of the forest. The chest is 2 units wide and you want to make sure it fits inside the forest without touching the edge. Where can you hide the chest so that it's safe and hidden?\",\n  \n  \"question4\": \"Find a point within a 4x4 circle where x is between -2 and 2 and y is between 0 and 4.\",\n  \n  \"question5\": \"I'm a landscape architect designing a new public park and I want to create a unique feature that incorporates a circular pond with a diameter of 4 units. The pond will be surrounded by a walking path that is at least 1 unit wide, and I want to place a large sculpture in the center of the pond. The sculpture is 2 units wide and I want to ensure that it is at least 1 unit away from the edge of the pond. However, I also need to consider the placement of a nearby playground, which has a rectangular shape with a length of 6 units and a width of 3 units. The playground is located 2 units away from the edge of the pond and I want to make sure that the sculpture does not obstruct the view of the playground from the walking path. Given these constraints, what are the possible coordinates (x, y) for the center of the sculpture within the pond?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Circle Packing Problem\",\n  \"description\": \"This problem is a simple representation of a circle packing problem, where the goal is to find a point (x, y) within a circle of radius sqrt(6) centered at the origin. The problem is a classic example of a constraint satisfaction problem, where the objective is to find a solution that satisfies the given constraints.\",\n  \"variables\": \"x \u2208 [-2, 2], y \u2208 [0, 4]\", \n  \"variables_explanation\": \"x and y are decision variables representing the coordinates of a point in a 2D plane. The variable x can take any integer value between -2 and 2, while the variable y can take any integer value between 0 and 4.\",\n  \"constraints\": \"x^2 + y^2 \u2264 6\",\n  \"constraints_explanation\": \"The constraint represents the equation of a circle centered at the origin with a radius of sqrt(6). The constraint ensures that the point (x, y) lies within or on the boundary of the circle.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "setselectr": {"__data__": {"id_": "setselectr", "embedding": null, "metadata": {"problem_family": "setselect", "model_name": "setselectr", "source_code": "% setselect revised\nint: n; % number of elements\nint: u; % cardinality of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\nvar set of 1..n: x;\n\nconstraint forall(i in 1..k)(card(x intersect s[i]) <= 1);\nconstraint card(x) = u;\n\nsolve maximize sum(i in x)(i);\n\noutput [\"x = \", show(x), \";\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a music festival organizer and I have 20 stages with 15 different genres of music. Each stage can only have one band from each genre. I want to select 8 bands to perform on the stages such that each stage has at most one band from each genre and the total popularity of the selected bands is maximized. The popularity of each band is represented by a number from 1 to 20. How can I select the bands to achieve this goal?\",\n\n  \"question2\": \"I'm planning a party and I have 10 groups of friends. Each group has some people who don't get along with others. I want to invite 5 people to the party such that no two people from the same group are invited and the total number of years of friendship I have with the invited people is maximized. Can someone help me figure this out?\",\n\n  \"question3\": \"I'm a kid and I love collecting Pok\u00e9mon cards. I have 12 packs of cards and each pack has some rare cards. I want to choose 6 cards to add to my collection such that no two cards from the same pack are chosen and the total rarity of the chosen cards is maximized. The rarity of each card is represented by a number from 1 to 12. Can someone help me pick the best cards?\",\n\n  \"question4\": \"I have 10 items and 5 boxes. Each item can only go in one box and each box can only hold one item of each type. I want to put 3 items in the boxes such that no two items of the same type are in the same box and the total value of the items is maximized. How do I do this?\",\n\n  \"question5\": \"I'm a manager at a large company and I'm responsible for assigning projects to teams. I have 25 teams and 15 projects. Each team can only work on one project from each category and each project can only be assigned to one team. I want to assign 8 projects to the teams such that no two projects from the same category are assigned to the same team and the total priority of the assigned projects is maximized. The priority of each project is represented by a number from 1 to 25. Additionally, I have some constraints on the teams, such as team A can only work on projects from categories 1 and 2, team B can only work on projects from categories 3 and 4, and so on. I also have some preferences, such as project 1 is more important than project 2, project 3 is more important than project 4, and so on. Can someone help me figure out the best way to assign the projects to the teams?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Set Packing Problem\",\n  \"description\": \"The Set Packing Problem is a classic problem in combinatorial optimization and constraint programming. Given a collection of subsets of a set of elements, the goal is to select a subset of the elements such that each subset contains at most one selected element. The objective is to maximize the sum of the selected elements.\",\n  \"variables\": \"x: a set of elements from 1 to n. This is the decision variable representing the subset of elements to be selected.\",\n  \"constraints\": \"\u2200i \u2208 1..k (|x \u2229 s[i]| \u2264 1), |x| = u. The first constraint ensures that each subset s[i] contains at most one selected element. The second constraint ensures that the cardinality of the selected subset is equal to u.\",\n  \"objective\": \"Maximize the sum of the selected elements, i.e., maximize \u2211(i \u2208 x) i.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "compatible_assignment": {"__data__": {"id_": "compatible_assignment", "embedding": null, "metadata": {"problem_family": "compatible_assignment", "model_name": "compatible_assignment", "source_code": "int: n;\nset of int: W = 1..n;\nint: m;\nset of int: T = 1..2*m;\narray[W,T] of int: profit;\narray[W,W] of bool: compatible;\n\narray[W] of var T: task;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(task);\nconstraint forall(w1, w2 in W)\n                 (task[w1] != m /\\ task[w2] = task[w1] + 1 ->\n                   compatible[w1,w2]);\n\nsolve maximize sum(w in W)(profit[w,task[w]]);\n\noutput [ \"task = \\(task)\\n\" ] ;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale music festival with 10 stages and 20 bands. Each band has a preferred stage and a preferred time slot, but some bands cannot perform at the same time due to conflicting sound systems. How can I schedule the bands to maximize the overall audience satisfaction, given that some stages are more popular than others and some time slots are more desirable than others? The popularity of each stage and time slot is quantified in a profit matrix, and the compatibility of each pair of bands is represented in a boolean matrix.\",\n  \n  \"question2\": \"I have 10 kids in my class and 20 different activities to do. Some kids don't get along, so I need to make sure they're not doing the same activity at the same time. Some activities are more fun than others, and some kids like some activities more than others. How can I make sure everyone has a good time and does something they like, without any fights breaking out?\",\n\n  \"question3\": \"I'm planning a big sleepover with my friends and we want to play different games. We have 10 friends and 20 games to choose from. Some friends don't get along, so we need to make sure they're not playing the same game at the same time. Some games are more fun than others, and some friends like some games more than others. How can we make sure everyone has a good time and plays something they like, without any fights breaking out? We also want to make sure that if someone is playing a game, their best friend can play the next game in the sequence.\",\n  \n  \"question4\": \"10 friends, 20 games, some friends don't get along. How to assign games to maximize fun and avoid conflicts?\",\n\n  \"question5\": \"I'm the manager of a large retail store with 10 departments and 20 employees. Each employee has a preferred department and a preferred shift, but some employees cannot work at the same time due to conflicting schedules. Some departments are more profitable than others, and some shifts are more desirable than others. The profitability of each department and shift is quantified in a profit matrix, and the compatibility of each pair of employees is represented in a boolean matrix. Additionally, some employees have specific skills that are required for certain departments, and some departments have specific equipment that can only be used by certain employees. How can I schedule the employees to maximize the overall store profitability, given these constraints and preferences? Furthermore, I want to ensure that if an employee is assigned to a department, the next employee in the sequence can be assigned to a department that is compatible with the first employee's department. I also want to consider the fact that some employees are more productive than others, and some departments require more employees than others. I have the following profit matrix and compatibility matrix: ... (insert matrices). Can you help me find the optimal schedule?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Task Assignment Problem with Compatibility Constraints\",\n  \"description\": \"The Task Assignment Problem with Compatibility Constraints is a classic problem in constraint programming. The problem involves assigning tasks to workers in a way that maximizes the total profit, while ensuring that certain compatibility constraints between workers are satisfied. Specifically, the problem requires that if a worker is assigned a task, then the next task in the sequence can only be assigned to a compatible worker. The problem is often used to model real-world scenarios such as scheduling tasks in a manufacturing process or assigning jobs to workers in a service industry.\",\n  \"variables\": \"task[w] \u2208 T, \u2200w \u2208 W\",\n  \"variables_explanation\": \"The decision variables are the tasks assigned to each worker. The variable task[w] represents the task assigned to worker w, and it can take any value from the set T, which represents the set of all possible tasks.\",\n  \"constraints\": \"alldifferent(task[w]), \u2200w1, w2 \u2208 W: (task[w1] \u2260 m \u2227 task[w2] = task[w1] + 1 \u2192 compatible[w1, w2])\",\n  \"constraints_explanation\": \"The constraints of the problem are: (1) all tasks assigned to workers must be different (alldifferent constraint), and (2) if a worker is assigned a task that is not the last task in the sequence (i.e., task[w1] \u2260 m), and the next task in the sequence is assigned to another worker (i.e., task[w2] = task[w1] + 1), then the two workers must be compatible (i.e., compatible[w1, w2] = true).\",\n  \"objective\": \"maximize \u2211(w \u2208 W) profit[w, task[w]]\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "evenproblem": {"__data__": {"id_": "evenproblem", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "evenproblem", "source_code": "predicate even(var int:x) = \n          let { var int: y } in x = 2*y;\n\nvar -1..7: u;\n\nconstraint not even(u); \n\nsolve satisfy;\n\noutput [ show(u) ];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a scheduling system for a manufacturing plant with 8 production lines. Each line can only operate on odd-numbered days of the month. Given the days of the month are numbered from -1 to 7 (where -1 represents the last day of the previous month), what is the first day of the month that I can schedule production on any line?\",\n  \n  \"question2\": \"I'm planning a party and I want to have an odd number of guests. I can invite between 0 and 14 people. What's the smallest odd number of guests I can invite?\",\n  \n  \"question3\": \"Imagine you're playing a game where you have to pick a number between -1 and 7. If you pick an even number, you lose. What's the best number to pick so you don't lose?\",\n  \n  \"question4\": \"What's the smallest odd number between -1 and 7?\",\n  \n  \"question5\": \"I'm a data analyst working for a company that sells products in batches of 2. We're launching a new product and we want to offer a 'buy one get one free' promotion, but only for customers who purchase an odd number of items. We're planning to offer this promotion for a limited time, and we want to start it on a day of the month that is not divisible by 2. Given that our system uses a 0-based indexing for days of the month (where -1 represents the last day of the previous month), and we want to start the promotion on a day between -1 and 7, what is the earliest day of the month that we can start the promotion and still satisfy the 'buy one get one free' condition?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Odd Number Problem\",\n  \"description\": \"The problem is to find an odd number within a given range. This is a simple constraint satisfaction problem where the goal is to find a value that satisfies the given constraints.\",\n  \"variables\": \"u \u2208 \u2124, -1 \u2264 u \u2264 7. u is a decision variable representing an integer within the range -1 to 7.\",\n  \"constraints\": \"\u00aceven(u). This constraint ensures that the value of u is not even, i.e., it is an odd number.\",\n  \"objective\": \"satisfy. The objective of the problem is to find a value of u that satisfies the given constraint, i.e., to find an odd number within the range -1 to 7.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "debug1": {"__data__": {"id_": "debug1", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "debug1", "source_code": "int: n = 5;\narray[1..n] of var 1..n: a;\narray[1..n] of 1..n: b = [3,5,2,3,1];\n\nconstraint forall(j in 1..n, i in b[n-j]..n)\n                 (a[j] < i);\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a series of lectures for a conference, and I have 5 speakers with different time slots available. The speakers have different preferences for when they want to present, given by the array [3,5,2,3,1]. I want to schedule the lectures in a way that each speaker presents before their preferred time slot, and I want to find a feasible schedule that satisfies all the constraints. Can you help me find a valid schedule?\",\n  \n  \"question2\": \"I have 5 kids, and I want to plan a fun day with activities. Each kid has a favorite time of day when they want to do their activity, but I need to make sure each kid does their activity before that time. Can you help me figure out when to schedule each activity so everyone is happy?\",\n  \n  \"question3\": \"Imagine you're the manager of a theme park, and you have 5 new rides that you want to open at different times of the day. Each ride has a special 'opening ceremony' that needs to happen before a certain time, given by the array [3,5,2,3,1]. You want to make sure each ride opens before its ceremony time, and you want to find a schedule that works. Can you help me plan the opening times for the rides?\",\n  \n  \"question4\": \"5 tasks, deadlines [3,5,2,3,1]. Schedule tasks before deadlines. Possible?\",\n  \n  \"question5\": \"I'm the event coordinator for a large music festival, and I have 5 bands that need to perform on the main stage. Each band has a specific time slot when they want to perform, given by the array [3,5,2,3,1], which represents the hour of the day when they want to start playing. However, due to technical and logistical constraints, I need to make sure each band starts playing before their preferred time slot. Additionally, I have to consider the fact that the stage needs to be set up and sound-checked before each performance, which takes about 30 minutes. I also need to leave some buffer time between performances in case anything goes wrong. Can you help me find a feasible schedule that satisfies all these constraints and ensures a smooth and enjoyable experience for the festival-goers?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Job Scheduling Problem\",\n  \"description\": \"The problem is a variant of the Job Scheduling Problem, where we have a set of jobs with given deadlines and we need to schedule them in a way that satisfies certain constraints. In this specific problem, we have a set of jobs with deadlines given by the array b, and we need to assign a start time to each job such that the job is completed before its deadline.\",\n  \"variables\": \"a = [a_1, a_2, ..., a_n], where a_i is the start time of job i\",\n  \"constraints\": \"\u2200j \u2208 {1, ..., n}, \u2200i \u2208 {b[n-j], ..., n}: a_j < i. This constraint ensures that the start time of each job is less than the deadline of the job. The deadlines are given by the array b, and the jobs are scheduled in reverse order of their deadlines.\",\n  \"objective\": \"satisfy (feasibility problem). The objective is to find a feasible solution that satisfies all the constraints, without any specific optimization goal.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "cc_geost": {"__data__": {"id_": "cc_geost", "embedding": null, "metadata": {"problem_family": "carpet_cutting", "model_name": "cc_geost", "source_code": "int: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\n\nset of int: SHAPE = 1..4;\narray[ROOM] of var SHAPE: kind;\n\nconstraint geost_bb(2,\n       [| 3,4 | 4,3 | 1,1 | 1,2 | 1,1 | 2,1 | 4,3 |],\n       [| 0,0 | 0,1 | 1,4 | 3,1 | 4,2 | 1,0 | 0,0 |],\n       [ {1,3,4}, {2,5,6}, {1}, {7} ],\n       [| x[1], y[1] | x[2],y[2] | x[3],y[3] |],\n       kind,\n       [ 0,0 ],\n       [ l, h]);\n\nconstraint kind[1] in {1,2};\nconstraint kind[2] in {1,2};\nconstraint kind[3] in {3,4}; \ninclude \"geost.mzn\";\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\noutput [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nkind = \\(kind);\\n\"];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a modular exhibition booth with 3 distinct areas, each requiring a unique layout. I have 7 different rectangular modules with varying dimensions. How can I arrange these modules to minimize the total length of the booth while ensuring that each area has the desired layout? The booth's height is 7 units, and the maximum length is 12 units. The modules' dimensions are: (3x4), (4x3), (1x1), (1x2), (1x1), (2x1), and (4x3). The desired layouts for each area are: area 1 - modules 1, 3, or 4; area 2 - modules 2, 5, or 6; area 3 - module 1 or 7. What is the minimum length of the booth, and how should I arrange the modules?\",\n  \"question2\": \"I want to put some puzzle pieces together to make a big picture. I have 7 puzzle pieces, and each one is a different shape and size. I want to put them together in a way that makes the picture as short as possible. Can you help me figure out how to do it? The picture can't be more than 12 units long, and it has to be 7 units tall. I also want to make sure that each part of the picture looks right.\",\n  \"question3\": \"Imagine you're building a giant Lego castle with 3 towers. Each tower needs to have a special shape, and you have 7 different Lego pieces to use. How can you use the Lego pieces to make the towers look cool and not use too much space? The castle can't be more than 12 units long, and it has to be 7 units tall. Can you help me figure out how to build the castle?\",\n  \"question4\": \"Minimize the length of a 7-unit tall structure composed of 7 rectangular modules with varying dimensions, subject to specific layout constraints.\",\n  \"question5\": \"I'm a landscape architect designing a unique outdoor space for a client with specific needs. The space will feature 3 distinct areas, each with its own unique character and requirements. The client has provided me with 7 different rectangular planters with varying dimensions, and I need to arrange them in a way that minimizes the total length of the space while ensuring that each area meets the client's requirements. The space's height is 7 units, and the maximum length is 12 units. The planters' dimensions are: (3x4), (4x3), (1x1), (1x2), (1x1), (2x1), and (4x3). The desired layouts for each area are: area 1 - planters 1, 3, or 4; area 2 - planters 2, 5, or 6; area 3 - planter 1 or 7. The client also has specific preferences for the layout of each area, including the need for a focal point in area 1 and a sense of symmetry in area 2. Additionally, the client has expressed a desire to minimize the total length of the space while maximizing the visual impact of the planters. Can you help me determine the minimum length of the space and the optimal arrangement of the planters to meet the client's requirements and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Carpet Cutting Problem\",\n  \"description\": \"The Carpet Cutting Problem is a classic problem in constraint programming. It involves cutting a carpet of a given height into smaller rectangles to cover a set of rooms, each with a specific shape and size. The goal is to minimize the total length of carpet used while ensuring that all rooms are covered.\",\n  \"variables\": \"x, y, kind, l\",\n  \"variables_explanation\": \"x and y are arrays of decision variables representing the x and y coordinates of the top-left corner of each room, respectively. kind is an array of decision variables representing the shape of each room. l is a decision variable representing the total length of carpet used.\",\n  \"constraints\": \"geost_bb(2, ..., [x[1], y[1] | x[2],y[2] | x[3],y[3] |], kind, [ 0,0 ], [ l, h]), kind[1] in {1,2}, kind[2] in {1,2}, kind[3] in {3,4}\",\n  \"constraints_explanation\": \"The geost_bb constraint is a built-in constraint in Minizinc that models the geometric constraints of the problem, including the size and shape of each room, and the total length of carpet used. The other constraints restrict the possible shapes of each room.\",\n  \"objective\": \"minimize l\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mip5": {"__data__": {"id_": "mip5", "embedding": null, "metadata": {"problem_family": "mip", "model_name": "mip5", "source_code": "solve maximize 8*x + 5*y;\n\nvar int: x;\nvar int: y;\nconstraint x + y <= 6;\nconstraint 9*x + 5*y <= 45;\nconstraint x >= 0 /\\ y >= 0; \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to transport two types of packages, A and B, with different weights and volumes. The company has a limited number of trucks with a maximum capacity of 6 units (either A or B) and a total weight limit of 45 tons. Package A weighs 9 tons and takes up 1 unit of space, while package B weighs 5 tons and takes up 1 unit of space. The company wants to maximize its revenue by transporting the most valuable combination of packages, with package A worth $8 per unit and package B worth $5 per unit. What is the optimal combination of packages to transport?\",\n  \n  \"question2\": \"I have a small garden and I want to grow two types of flowers, roses and daisies. I have space for a maximum of 6 plants and I don't want to spend more than $45 on seeds. Roses cost $9 per packet and take up 1 square foot of space, while daisies cost $5 per packet and take up 1 square foot of space. I want to make my garden look as beautiful as possible, and I think roses are worth 8 points of beauty and daisies are worth 5 points of beauty. How many packets of each type of flower should I buy?\",\n  \n  \"question3\": \"Imagine you're the manager of a school cafeteria and you need to decide how many sandwiches and salads to make for lunch. You have a limit of 6 items (either sandwiches or salads) that you can make, and you don't want to spend more than $45 on ingredients. Sandwiches cost $9 to make and take up 1 spot on the menu, while salads cost $5 to make and take up 1 spot on the menu. You think sandwiches are worth 8 points of yumminess and salads are worth 5 points of yumminess. How many sandwiches and salads should you make to make the kids the happiest?\",\n  \n  \"question4\": \"I have $45 to spend on two types of snacks, chips and popcorn. Chips cost $9 per bag and popcorn costs $5 per bag. I can fit a maximum of 6 bags in my backpack. Which snacks should I buy to get the most value, assuming chips are worth 8 points and popcorn is worth 5 points?\",\n  \n  \"question5\": \"A large event planning company is responsible for organizing a music festival with two types of food stalls, gourmet and standard. The company has a limited budget of $45,000 to spend on food and a maximum capacity of 6 stalls (either gourmet or standard) that can be set up in the festival area. Gourmet stalls cost $9,000 to set up and take up 1 spot, while standard stalls cost $5,000 to set up and take up 1 spot. The company wants to maximize its revenue by attracting the most attendees, with gourmet stalls expected to attract 8,000 attendees and standard stalls expected to attract 5,000 attendees. However, the company also needs to consider the fact that gourmet stalls require more staff and equipment, which may affect the overall profitability of the event. What is the optimal combination of gourmet and standard stalls to set up in order to maximize revenue and minimize costs?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"0/1 Knapsack Problem with Multiple Constraints\",\n  \"description\": \"The problem is a variant of the 0/1 knapsack problem, where we have two items with different weights and values. The goal is to maximize the total value of the items while satisfying the capacity constraints of the knapsack. However, in this case, the items can be taken in any quantity (not just 0 or 1), and there are two capacity constraints.\",\n  \"variables\": \"x, y. These variables represent the quantities of two different items to be taken in the knapsack.\",\n  \"constraints\": \"x + y <= 6, 9x + 5y <= 45, x >= 0, y >= 0. These constraints represent the capacity limits of the knapsack. The first constraint limits the total number of items, the second constraint limits the total weight of the items, and the last two constraints ensure that the quantities of the items are non-negative.\",\n  \"objective\": \"maximize 8x + 5y. The objective is to maximize the total value of the items in the knapsack, where the value of the first item is 8 units per quantity and the value of the second item is 5 units per quantity.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening14": {"__data__": {"id_": "flattening14", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening14", "source_code": "var -3..3: y;\nconstraint (let { var int: x = 9 div y } \n            in x * y != 9) -> y != 2;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A financial analyst is trying to optimize a portfolio by finding a divisor of 9 that does not result in a specific ratio when multiplied by its corresponding quotient. If the divisor is within the range of -3 to 3, what value should be avoided to satisfy the condition?\",\n  \"question2\": \"I'm planning a party and I want to divide 9 cupcakes among my friends. However, I don't want to give 2 cupcakes to anyone. What number of friends should I avoid having so that I can still divide the cupcakes fairly?\",\n  \"question3\": \"Imagine you're playing a game where you have to share 9 cookies with your friends. You want to make sure that if you share the cookies equally, you don't end up giving 2 cookies to anyone. How many friends should you not have in your group?\",\n  \"question4\": \"What number between -3 and 3 should be avoided as a divisor of 9 to satisfy a certain condition?\",\n  \"question5\": \"A logistics manager at a warehouse is trying to optimize the storage of crates containing 9 units of a product. The crates need to be stacked in a way that the number of crates in each stack is a divisor of 9. However, due to safety concerns, the manager wants to avoid stacks with 2 crates. Considering the available storage space, the manager can accommodate stacks with a maximum of 3 crates and a minimum of -3 crates (i.e., empty spaces). What value of crates per stack should the manager avoid to satisfy the safety condition and optimize storage?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Division Problem\",\n  \"description\": \"This problem involves finding a value of y such that a certain condition is satisfied. The condition is that if y is a divisor of 9, then y should not be equal to 2.\",\n  \"variables\": \"y \u2208 [-3, 3]\", \n  \"variables_explanation\": \"y is an integer decision variable that represents a potential divisor of 9. It can take any integer value between -3 and 3.\",\n  \"constraints\": \"(\u2203x \u2208 \u2124: x = 9 \u00f7 y \u2227 x * y \u2260 9) \u2192 y \u2260 2\", \n  \"constraints_explanation\": \"The constraint is a conditional constraint that states if there exists an integer x such that x is equal to 9 divided by y and x times y is not equal to 9, then y should not be equal to 2. This constraint is only active when y is a divisor of 9.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "shipping": {"__data__": {"id_": "shipping", "embedding": null, "metadata": {"problem_family": "shipping", "model_name": "shipping", "source_code": "int: W; % number of Warehousse\nset of int: WARE = 1..W;\nint: F; % number of Factories\nset of int: FACT = 1..F;\n\narray[WARE] of int: demand;\narray[FACT] of int: production;\n\narray[FACT,WARE] of int: cost;\n\narray[FACT,WARE] of var int: ship;\n\n%int: m = max(demand);\n%array[FACT,WARE] of var 0..m: ship;\nconstraint forall(f in FACT, w in WARE)(ship[f,w] >= 0);\n\nconstraint forall(w in WARE)\n                 (sum(f in FACT)(ship[f,w]) >= demand[w]);\n\nconstraint forall(f in FACT)\n                 (sum(w in WARE)(ship[f,w]) <= production[f]);\n\nsolve minimize sum(f in FACT, w in WARE)\n                  (cost[f,w]*ship[f,w]);\n\n\noutput [ show_int(2,ship[f,w]) ++\n         if w == W then \"\\n\" else \" \" endif\n       | f in FACT, w in WARE ];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning to organize a music festival with 5 stages and 10 bands. Each stage has a limited capacity of 5000 attendees, and each band has a specific fanbase size. I want to assign the bands to the stages in a way that maximizes the overall attendance while ensuring that each stage's capacity is not exceeded. The cost of assigning a band to a stage depends on the stage's location and the band's popularity. How can I find the optimal assignment of bands to stages that minimizes the total cost while satisfying the capacity constraints and maximizing attendance? The fanbase sizes are: [2000, 3000, 4000, 2500, 3500, 4500, 2000, 3000, 4000, 2500], and the stage capacities are: [5000, 5000, 5000, 5000, 5000]. The cost matrix is: [[10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90], [60, 70, 80, 90, 100], [70, 80, 90, 100, 110], [80, 90, 100, 110, 120], [90, 100, 110, 120, 130], [100, 110, 120, 130, 140]].\",\n\n  \"question2\": \"I have a bunch of friends coming over for a party, and I need to figure out how to get them all the food they want. Some of my friends are vegetarians, and some are gluten-free. I have a few different types of food that I can make, but I'm not sure how much of each thing to make. Can you help me figure out how to make sure everyone gets the food they want without making too much of anything?\",\n\n  \"question3\": \"Imagine you're the manager of a big theme park with 5 different areas (e.g. Adventure Land, Fantasy Land, etc.) and 10 different rides. Each area can only fit a certain number of people, and each ride has a certain number of fans. You want to put the rides in the areas in a way that makes the most people happy. The problem is, some rides are more popular than others, and some areas are more popular than others. How can you figure out which rides to put in which areas to make the most people happy? The number of fans for each ride is: [500, 750, 1000, 800, 600, 900, 700, 1100, 900, 800], and the capacity of each area is: [2000, 2500, 3000, 2000, 2500]. The cost of putting a ride in an area depends on the area's location and the ride's popularity. The cost matrix is: [[10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90], [60, 70, 80, 90, 100], [70, 80, 90, 100, 110], [80, 90, 100, 110, 120], [90, 100, 110, 120, 130], [100, 110, 120, 130, 140]].\",\n\n  \"question4\": \"I have 3 factories and 4 warehouses. Each factory can produce a certain amount of goods, and each warehouse has a certain demand. How can I transport the goods from the factories to the warehouses in a way that minimizes the cost? The production capacities are: [100, 150, 200], and the demands are: [120, 180, 220, 150]. The cost matrix is: [[10, 20, 30, 40], [20, 30, 40, 50], [30, 40, 50, 60]].\",\n\n  \"question5\": \"I'm the logistics manager for a large e-commerce company, and I need to figure out how to transport our products from our warehouses to our customers in a way that minimizes the cost. We have 5 warehouses located in different parts of the country, and each warehouse has a certain capacity. We also have 10 different products, each with its own demand and shipping cost. The problem is that some of our customers are located in areas that are difficult to reach, and the shipping cost is higher for those areas. We want to make sure that we can meet the demand for each product while minimizing the total shipping cost. The warehouse capacities are: [5000, 6000, 7000, 8000, 9000], and the product demands are: [2000, 3000, 4000, 2500, 3500, 4500, 2000, 3000, 4000, 2500]. The shipping cost matrix is: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [20, 30, 40, 50, 60, 70, 80, 90, 100, 110], [30, 40, 50, 60, 70, 80, 90, 100, 110, 120], [40, 50, 60, 70, 80, 90, 100, 110, 120, 130], [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]]. Can you help me figure out how to transport our products in a way that minimizes the total shipping cost while meeting the demand for each product?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Transportation Problem\",\n  \"description\": \"The Transportation Problem is a classic problem in Operations Research and Management Science. It involves finding the most cost-effective way to transport a certain commodity from a set of sources (factories) to a set of destinations (warehouses), given the production capacity of each factory and the demand of each warehouse.\",\n  \"variables\": \"ship[f,w], where f \u2208 FACT and w \u2208 WARE. These variables represent the amount of commodity to be transported from factory f to warehouse w.\",\n  \"constraints\": \"\u2200f \u2208 FACT, w \u2208 WARE: ship[f,w] \u2265 0 (non-negativity constraint), \u2200w \u2208 WARE: \u2211(f \u2208 FACT) ship[f,w] \u2265 demand[w] (demand satisfaction constraint), \u2200f \u2208 FACT: \u2211(w \u2208 WARE) ship[f,w] \u2264 production[f] (production capacity constraint). These constraints ensure that the amount of commodity transported is non-negative, that the demand of each warehouse is satisfied, and that the production capacity of each factory is not exceeded.\",\n  \"objective\": \"minimize \u2211(f \u2208 FACT, w \u2208 WARE) cost[f,w]*ship[f,w] (minimize the total transportation cost)\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "setselectr3": {"__data__": {"id_": "setselectr3", "embedding": null, "metadata": {"problem_family": "setselect", "model_name": "setselectr3", "source_code": "% setselect revised\nint: n; % number of elements\nint: u; % cardinality bound of chosen set\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\narray[1..u] of var 0..n: x;\nconstraint forall(i in 1..u-1)(x[i] >= (x[i] != 0) + x[i+1]);\n\nconstraint forall(i in 1..k)(sum(j in 1..u)(x[j] in s[i]) <= 1);\n\nsolve maximize sum(x);\n\noutput [\"x = \", show(x), \";\\n\"];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a music festival organizer and I have 20 stages with different capacities. I need to schedule 50 bands to play on these stages, but each band can only play once and each stage can only host one band at a time. I want to maximize the total number of attendees at the festival. Each band has a specific fanbase size and I want to prioritize the bands with the largest fanbases. How can I schedule the bands to achieve this goal?\",\n  \"question2\": \"I have a bunch of boxes with different stuff in them and I want to pick some of the boxes to put in my attic. The thing is, some of the boxes have things that can't be near each other, like my winter clothes and my summer clothes. I want to pick the boxes that will fit the most stuff in the attic without any of the things that can't be near each other being near each other. How can I do that?\",\n  \"question3\": \"I'm planning a school dance and I have 15 tables with different numbers of chairs. I want to seat 20 groups of friends, but each group can only sit at one table and each table can only seat one group. I want to make sure that the groups with the most friends get seated first. How can I seat the groups to make sure everyone has a good time?\",\n  \"question4\": \"I have 10 boxes and 5 shelves. Each box can only go on one shelf and each shelf can only hold one box. How can I put the boxes on the shelves to use the most space?\",\n  \"question5\": \"I'm a logistics manager for a large e-commerce company and I need to pack 500 packages into 20 trucks. Each package has a specific weight and volume, and each truck has a limited capacity for weight and volume. I want to maximize the number of packages that I can deliver in a single trip, but I also need to make sure that the packages are packed in a way that minimizes the risk of damage during transit. Additionally, I have 10 different warehouses that the packages can be packed from, and each warehouse has a different set of packages available. I want to prioritize the packages that are most valuable and pack them first. I also need to make sure that the packages are packed in a way that allows for easy unloading at the delivery location. How can I pack the packages to achieve these goals?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Set Packing Problem\",\n  \"description\": \"The Set Packing Problem is a classic problem in combinatorial optimization and constraint programming. Given a collection of sets, the goal is to select a subset of these sets such that no two sets in the subset have any elements in common, and the total number of elements in the selected sets is maximized.\",\n  \"variables\": \"x = [x_1, x_2, ..., x_u], where x_i is the i-th element in the selected set\",\n  \"variables_explanation\": \"The variables x_i represent the elements in the selected set. The value of x_i is the i-th element in the set, or 0 if the i-th position is not used.\",\n  \"constraints\": \"\u2200i \u2208 {1, ..., u-1} : x_i \u2265 (x_i \u2260 0) + x_{i+1}, \u2200i \u2208 {1, ..., k} : \u2211_{j=1}^u (x_j \u2208 s_i) \u2264 1\",\n  \"constraints_explanation\": \"The first constraint enforces that the elements in the selected set are in non-decreasing order, and that if an element is not 0, the next element must be greater than or equal to it. The second constraint ensures that each set s_i is intersected by at most one element in the selected set.\",\n  \"objective\": \"Maximize \u2211_{i=1}^u x_i\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "division": {"__data__": {"id_": "division", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "division", "source_code": "var -4..4:x;\nvar -4..4:y;\nconstraint divp(x,y,3);\n\npredicate divp(var int:x,var int: y,var int: z) \n     = assert(lb(y) >= 0,\n              \"divp: y must be non-negative\",\n              let { var 0..ub(y)-1: r } in\n\t        x = z * y + r /\\ r < y);\n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to package items of different weights into boxes of varying capacities. The company wants to minimize the number of boxes used while ensuring that the total weight of items in each box does not exceed its capacity. Given a set of items with weights between -4 and 4 units, and boxes with capacities between -4 and 4 units, how can the company pack the items into boxes such that the total weight of items in each box is 3 times the capacity of the box plus a remainder that is less than the capacity?\",\n  \n  \"question2\": \"I'm planning a road trip and I want to make sure I have enough snacks for the journey. I have a bunch of bags of snacks that weigh different amounts, and I want to put them into boxes in the car. I want to make sure that each box has a certain number of bags in it, and that the total weight of the bags in each box is not too much for the box to hold. Can someone help me figure out how to pack the bags into boxes so that everything fits and I don't have too much weight in each box?\",\n  \n  \"question3\": \"Imagine you're a pirate and you have a treasure chest with a bunch of gold coins in it. You want to put the coins into smaller chests, but you need to make sure that each smaller chest has a certain number of coins in it. The problem is, some of the coins are really heavy and some are really light, so you need to make sure that the total weight of the coins in each smaller chest isn't too much for it to hold. Can you help me figure out how to put the coins into the smaller chests so that everything fits and I don't have too much weight in each chest?\",\n  \n  \"question4\": \"How can I pack items weighing -4 to 4 units into boxes of capacity -4 to 4 units such that each box has 3 times its capacity plus a remainder?\",\n  \n  \"question5\": \"A manufacturing company produces a variety of products with different weights, and they need to package these products into boxes for shipping. The company has a specific requirement that each box must contain a certain number of products, and the total weight of the products in each box must be 3 times the capacity of the box plus a remainder that is less than the capacity. The company has a range of boxes with capacities between -4 and 4 units, and they want to minimize the number of boxes used while ensuring that the total weight of products in each box does not exceed its capacity. Given a set of products with weights between -4 and 4 units, and boxes with capacities between -4 and 4 units, how can the company pack the products into boxes such that the total weight of products in each box is 3 times the capacity of the box plus a remainder that is less than the capacity, while also minimizing the number of boxes used? The company also has a constraint that the boxes must be packed in a way that minimizes the number of boxes with negative capacity, as these boxes are more expensive to produce. Additionally, the company wants to prioritize the packing of products with higher weights, as these products are more valuable and need to be shipped as soon as possible.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Division Problem\",\n  \"description\": \"The Division Problem is a classic problem in constraint programming that involves finding integer solutions for the division of one number by another. The problem is defined by a dividend x and a divisor y, and the goal is to find values of x and y that satisfy the division constraint.\",\n  \"variables\": \"x \u2208 [-4, 4], y \u2208 [-4, 4]\", \n  \"variables_explanation\": \"x is the dividend and y is the divisor. Both x and y are integer variables with a domain of -4 to 4.\",\n  \"constraints\": \"x = 3 * y + r \u2227 r < y \u2227 y \u2265 0\", \n  \"constraints_explanation\": \"The constraints are: x is equal to 3 times y plus a remainder r, the remainder r is less than y, and y is non-negative. The remainder r is an implicit variable that is introduced by the divp predicate.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "cluster": {"__data__": {"id_": "cluster", "embedding": null, "metadata": {"problem_family": "cluster", "model_name": "cluster", "source_code": "int: n; % points to be clustered\nset of int: POINT = 1..n;\narray[POINT,POINT] of int: dist; % distance between two points\nint: maxdist = max([ dist[i,j] | i,j in POINT]);\n\n\nint: k; % number of clusters\nset of int: CLUSTER = 1..k;\n\nint: maxdiam;\n\narray[POINT] of var CLUSTER: x;\n\nconstraint forall(i,j in POINT where i < j /\\ x[i] = x[j])\n                 (dist[i,j] <= maxdiam);\n\nconstraint forall(i in 1..k-1)\n                 (  min([ j | j in POINT where x[j] = i])\n                  < min([ j | j in POINT where x[j] = i+1]));\n\nvar 0..maxdist: obj = min( i,j in POINT where i < j )\n                         ( dist[i,j] + maxdist * (x[i] != x[j]) );\n\ninclude \"value_precede_chain.mzn\";\nconstraint value_precede_chain([ i | i in 1..k ],x);\n\nsolve maximize obj;\n\noutput [\"obj = \\(obj); x = \\(x)\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale logistics operation that involves transporting 50 packages across the country. Each package has a specific weight and volume, and I need to group them into 5 trucks with limited capacity. The goal is to minimize the total distance traveled by the trucks while ensuring that the packages in each truck are as close to each other as possible. How can I optimize the package assignments to achieve this goal?\",\n  \n  \"question2\": \"I have a bunch of friends coming over for a party and I want to put them into groups for a game. I know how far each person lives from each other, and I want to make sure that people in the same group live close to each other. Can you help me figure out how to put them into groups so that everyone has a good time?\",\n  \n  \"question3\": \"I'm planning a school project where I need to group 20 students into 4 teams for a science fair. Each student has a specific interest and skill level, and I want to make sure that the teams are balanced and work well together. I also want to make sure that students who live close to each other are on the same team. Can you help me figure out how to do this?\",\n  \n  \"question4\": \"Group 20 cities into 4 clusters based on their pairwise distances. Minimize the sum of distances within each cluster.\",\n  \n  \"question5\": \"I'm a manager at a large retail company with 100 stores across the country. Each store has a specific sales volume and customer demographics, and I need to group them into 10 regions for marketing and inventory purposes. The goal is to minimize the total distance traveled by our delivery trucks while ensuring that stores in the same region have similar sales volumes and customer demographics. Additionally, I want to ensure that each region has a roughly equal number of stores and that the regions are contiguous. I also have a limited budget for marketing and inventory, so I need to prioritize the regions based on their sales potential. Can you help me develop a plan to achieve this goal? The pairwise distances between stores are as follows: [insert 100x100 distance matrix]. The sales volumes and customer demographics for each store are as follows: [insert 100x2 data matrix].\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"K-Medoids Clustering Problem\",\n  \"description\": \"The K-Medoids Clustering Problem is a classical problem in data mining and machine learning. Given a set of points and their pairwise distances, the goal is to partition the points into k clusters such that the sum of the distances between points in the same cluster is minimized. The problem is similar to the K-Means Clustering Problem, but instead of using the mean of the points in a cluster as the centroid, the K-Medoids Clustering Problem uses an actual point in the cluster as the centroid (medoid).\",\n  \"variables\": \"x_i \u2208 {1, ..., k} for i \u2208 {1, ..., n}, obj \u2208 {0, ..., maxdist}\",\n  \"variables_explanation\": \"The decision variables x_i represent the cluster assignment of each point i. The variable obj represents the objective function value, which is the sum of the distances between points in the same cluster plus a penalty term for points in different clusters.\",\n  \"constraints\": \"\u2200i, j \u2208 {1, ..., n} where i < j and x_i = x_j: dist[i, j] \u2264 maxdiam, \u2200i \u2208 {1, ..., k-1}: min({j | x_j = i}) < min({j | x_j = i+1}), value_precede_chain([i | i \u2208 {1, ..., k}], x)\",\n  \"constraints_explanation\": \"The first constraint ensures that the diameter of each cluster (i.e., the maximum distance between two points in the same cluster) does not exceed maxdiam. The second constraint ensures that the points in each cluster are ordered in a way that the first point in cluster i is smaller than the first point in cluster i+1. The third constraint is a value precedence chain constraint, which ensures that the points in each cluster are ordered in a way that the first point in cluster i is smaller than the first point in cluster i+1.\",\n  \"objective\": \"maximize obj = min(i, j \u2208 {1, ..., n} where i < j) (dist[i, j] + maxdist * (x_i != x_j))\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "table_seating": {"__data__": {"id_": "table_seating", "embedding": null, "metadata": {"problem_family": "table_seating", "model_name": "table_seating", "source_code": "int: n;\nset of int: PERSON = 1..n;\nint: T; % number of tables\nset of int: TABLE = 1..T;\nint: S; % tables size\narray[int,1..2] of PERSON: couples;\nset of PERSON: key;\n\narray[TABLE] of var set of PERSON: table;\n\npredicate not_same_table(PERSON:p1, PERSON: p2) =\n          forall(t in TABLE)(not ({p1,p2} subset table[t]));\n\nconstraint forall(t in TABLE)(card(table[t]) <= S);\n\nconstraint forall(p in PERSON)(exists(t in TABLE)(p in table[t]));\n\nconstraint forall(c in index_set_1of2(couples))\n                 (not_same_table(couples[c,1],couples[c,2]));\n\nconstraint forall(p1,p2 in key where p1 < p2)\n                 (not_same_table(p1,p2));\n\nvar int: obj = sum(c in index_set_1of2(couples))\n                  ( let { var TABLE: tn1 = sum(t in TABLE)(t * bool2int(couples[c,1] in table[t]));\n                          var TABLE: tn2 = sum(t in TABLE)(t * bool2int(couples[c,2] in table[t]));\n                    } in  tn1 + tn2);\n\n\n\nsolve minimize obj;\n\noutput [show(table), \" = \", show(obj)];\n\n\nn = 20;\nT = 5;\nS = 5;\ncouples = [| 1, 2 | 4, 5 | 6, 7 | 8, 10\n           | 11, 12 | 13, 14 | 17, 18 |];\nkey = {1, 6, 7, 8};\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"A conference organizer needs to assign 20 attendees to 5 breakout sessions, each with a maximum capacity of 5 people. There are 8 pairs of attendees who are colleagues and should not be assigned to the same session. Additionally, there are 4 attendees who are keynote speakers and should not be assigned to the same session as each other. The goal is to minimize the total session number of the colleagues. How can the organizer achieve this?\",\n  \n  \"question2\": \"I'm planning a party and I have 20 friends coming. I want to put them into 5 groups for a game. Some of my friends are couples and I don't want them to be in the same group. Also, there are a few friends who don't get along and I don't want them in the same group either. How can I make sure everyone has fun and gets along?\",\n  \n  \"question3\": \"Imagine you're the principal of a school and you need to assign 20 students to 5 different lunch tables. Some of the students are best friends and you don't want them to sit together because they can get too loud. Also, there are a few students who are class presidents and you don't want them to sit together because they might start talking about school business instead of having fun. How can you make sure everyone has a good time at lunch?\",\n  \n  \"question4\": \"20 people, 5 groups, couples separated, some people don't get along. How to assign them?\",\n  \n  \"question5\": \"A large tech company is hosting a networking event for 20 of its top employees. The event will feature 5 different workshops, each with a maximum capacity of 5 attendees. The company wants to ensure that the attendees are distributed evenly across the workshops, but there are some constraints to consider. Firstly, there are 8 pairs of employees who work together on the same project and should not be assigned to the same workshop. Secondly, there are 4 employees who are high-level executives and should not be assigned to the same workshop as each other. Finally, the company wants to minimize the total workshop number of the employees who work together on the same project. The company also wants to ensure that the attendees are assigned to workshops that align with their interests and skills. How can the company achieve this and make the event a success?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Social Golfer Problem with Key People and Couples\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. The problem involves scheduling golfers into groups (tables) over a number of weeks (tables), with the constraint that no two golfers can play together more than once. In this variation, there are also key people who cannot play together and couples who must be separated. The goal is to minimize the total table number of the couples.\",\n  \"variables\": \"table[t] (t in TABLE), obj\",\n  \"variables_explanation\": \"The decision variables are table[t], which represents the set of people assigned to table t, and obj, which is the total table number of the couples.\",\n  \"constraints\": \"forall(t in TABLE)(card(table[t]) <= S), forall(p in PERSON)(exists(t in TABLE)(p in table[t])), forall(c in index_set_1of2(couples))(not_same_table(couples[c,1],couples[c,2])), forall(p1,p2 in key where p1 < p2)(not_same_table(p1,p2))\",\n  \"constraints_explanation\": \"The constraints are: each table can have at most S people, each person must be assigned to a table, couples must be separated, and key people must not play together.\",\n  \"objective\": \"minimize obj\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "project_scheduling_nonoverlap": {"__data__": {"id_": "project_scheduling_nonoverlap", "embedding": null, "metadata": {"problem_family": "project_scheduling", "model_name": "project_scheduling_nonoverlap", "source_code": "int: n = 8; % no of tasks max\nset of int: TASK = 1..n;\nint: foundations = 1; int: interior_walls =2; int: exterior_walls = 3;\nint: chimney = 4; int: roof = 5; int: doors = 6;\nint: tiles = 7; int: windows = 8;\narray[TASK] of int: duration =\n  [7,4,3,3,2,2,3,3];\nint: p = 8; % number of precedences\nset of int: PREC = 1..p;\narray[PREC,1..2] of TASK: pre = \n  [| foundations, interior_walls \n   | foundations, exterior_walls\n   | foundations, chimney\n   | exterior_walls, roof\n   | exterior_walls, windows\n   | interior_walls, doors\n   | chimney, tiles\n   | roof, tiles |];\n\n\nint: t = sum(duration);\narray[TASK] of var 0..t: start;\n\npredicate precedes(var int:s1, var int:d1, var int:s2)=\n          s1 + d1 <= s2; \n\nconstraint forall(i in PREC)\n                 (precedes(start[pre[i,1]],duration[pre[i,1]],start[pre[i,2]]));\n\npredicate nonoverlap(var int:s1, var int:d1,\n                     var int:s2, var int:d2)=\n          s1 + d1 <= s2 \\/ s2 + d2 <= s1;\n\nset of TASK: CARPENTRY = { interior_walls, exterior_walls, roof };\nconstraint forall(t1, t2 in CARPENTRY where t1 < t2)\n      (nonoverlap(start[t1],duration[t1],start[t2],duration[t2]));\n\nvar int: makespan = max(t in TASK)(start[t] + duration[t]);\n\nsolve minimize makespan;\n\noutput [show(makespan),\" = \", show(start)];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale construction project with 8 tasks, each with a specific duration. Tasks 1, 2, and 3 must be completed before tasks 4, 5, and 6 can start. Additionally, tasks 2 and 5 cannot be performed simultaneously. How can I schedule these tasks to minimize the overall project duration while respecting these constraints?\",\n  \"question2\": \"I want to plan a big party with 8 activities, like setting up the music, preparing food, and decorating. Some activities need to be done before others, and I don't want some of them to happen at the same time. Can you help me figure out when to do each activity so that everything gets done as quickly as possible?\",\n  \"question3\": \"Imagine you're planning a big Lego project with 8 steps. Some steps need to be done before others, and you can't do some of them at the same time. How can you make a schedule so that you finish the project as fast as possible?\",\n  \"question4\": \"8 tasks, some dependencies, some can't overlap. What's the fastest way to finish them all?\",\n  \"question5\": \"I'm the event coordinator for a large music festival with 8 stages, each with its own setup and teardown process. The festival has a total of 8 tasks that need to be completed, including setting up the main stage, building the VIP area, and constructing the food and beverage stalls. Each task has a specific duration, ranging from 2 to 7 hours. However, there are some constraints that need to be taken into account. For example, the main stage cannot be set up until the VIP area is complete, and the food and beverage stalls cannot be constructed until the main stage is set up. Additionally, the festival organizers want to ensure that the setup and teardown processes for the different stages do not overlap, as this would cause logistical issues and compromise the overall festival experience. The organizers also want to minimize the overall festival setup time, as this will impact the overall cost and profitability of the event. Can you help me develop a schedule that takes into account these constraints and minimizes the overall festival setup time?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Job Shop Scheduling with Precedence and Non-Overlap Constraints\",\n  \"description\": \"This problem is a variant of the classic Job Shop Scheduling problem. The goal is to schedule a set of tasks with given durations and precedence constraints, while ensuring that certain tasks do not overlap. The tasks are divided into two categories: all tasks and carpentry tasks. The problem aims to minimize the makespan, which is the maximum completion time of all tasks.\",\n  \"variables\": \"start[t] (t in TASK), makespan\",\n  \"variables_explanation\": \"The decision variables are the start times of each task (start[t]) and the makespan, which is the maximum completion time of all tasks. The start time of each task is a variable that represents when the task starts, and the makespan is a variable that represents the maximum completion time of all tasks.\",\n  \"constraints\": \"precedes(start[pre[i,1]],duration[pre[i,1]],start[pre[i,2]]) (i in PREC), nonoverlap(start[t1],duration[t1],start[t2],duration[t2]) (t1, t2 in CARPENTRY, t1 < t2)\",\n  \"constraints_explanation\": \"The constraints are divided into two categories. The first category is the precedence constraints, which ensure that certain tasks are completed before others start. The second category is the non-overlap constraints, which ensure that certain tasks (specifically, carpentry tasks) do not overlap with each other. The precedence constraints are modeled using the precedes predicate, which ensures that the start time of the second task is greater than or equal to the completion time of the first task. The non-overlap constraints are modeled using the nonoverlap predicate, which ensures that either the first task is completed before the second task starts or vice versa.\",\n  \"objective\": \"minimize makespan\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "lots": {"__data__": {"id_": "lots", "embedding": null, "metadata": {"problem_family": "lots", "model_name": "lots", "source_code": "array[1..10] of var 1..10: a;\nsolve satisfy;\noutput [show(a),\"\\n\"];\n\ninclude \"var_sym.mzn\";\nconstraint var_sym(a);\n\ninclude \"val_sym.mzn\";\nconstraint val_sym(a,[i | i in 1..10]);", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a new layout for a data center with 10 identical servers. Each server can be assigned to one of 10 different racks. To minimize the number of distinct rack configurations and ensure efficient maintenance, I want to assign the servers to racks in a way that minimizes the number of distinct rack configurations. How can I assign the servers to racks while ensuring that the assignment is lexicographically ordered and the rack configurations are also lexicographically ordered?\",\n\n  \"question2\": \"I have 10 boxes of different colors and I want to put them on a shelf in a special order. I want the boxes to be in a order that looks nice and I don't want to have too many different colors next to each other. Can you help me figure out how to put the boxes on the shelf so that they look nice and the colors are not too mixed up?\",\n\n  \"question3\": \"I'm planning a birthday party for my friend and I want to give each of the 10 guests a special gift. I have 10 different gifts to choose from and I want to give each guest a gift that is different from the one I gave to the guest before them. I also want to make sure that the gifts are given out in a way that looks fair and not too random. Can you help me figure out how to give out the gifts so that they are fair and look nice?\",\n\n  \"question4\": \"How can I assign 10 tasks to 10 workers in a way that minimizes the number of distinct task assignments and ensures that the assignments are lexicographically ordered?\",\n\n  \"question5\": \"I'm a curator at a museum and I'm responsible for designing a new exhibit with 10 display cases. Each display case can be assigned to one of 10 different themes, and I want to assign the display cases to themes in a way that minimizes the number of distinct theme configurations. The exhibit will be viewed by visitors in a specific order, and I want to ensure that the display cases are assigned to themes in a way that is lexicographically ordered, so that the exhibit flows smoothly and looks cohesive. Additionally, I want to ensure that the themes are assigned to the display cases in a way that minimizes the number of distinct themes used, so that the exhibit does not look too disjointed. Can you help me figure out how to assign the display cases to themes while taking into account these constraints and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Social Golfer Problem\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. It involves scheduling golfers into groups such that no two golfers play together more than once. However, the provided model seems to be a simplified version of the problem, focusing on the symmetry breaking aspect rather than the actual scheduling. The model is trying to find an assignment of values to the array 'a' such that the solution is symmetric.\",\n  \"variables\": \"a = [a_1, a_2, ..., a_10], where a_i \u2208 {1, 2, ..., 10}\",\n  \"variables_explanation\": \"The variables a_i represent the value assigned to the i-th position in the array 'a'. The domain of each variable is the set of integers from 1 to 10.\",\n  \"constraints\": \"var_sym(a), val_sym(a, [i | i in 1..10])\",\n  \"constraints_explanation\": \"The constraints var_sym(a) and val_sym(a, [i | i in 1..10]) are used to break the symmetry in the solution. var_sym(a) ensures that the solution is lexicographically ordered, i.e., a_i \u2264 a_j for i < j. val_sym(a, [i | i in 1..10]) ensures that the values assigned to the variables are also lexicographically ordered, i.e., the values are assigned in a way that minimizes the number of distinct values used.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote: The objective of the problem is to find a satisfying assignment for the variables, rather than minimizing or maximizing a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "inverselangford": {"__data__": {"id_": "inverselangford", "embedding": null, "metadata": {"problem_family": "langford", "model_name": "inverselangford", "source_code": "% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\n\nset of int: DIGCOPY = 1..l;\narray[POS] of var DIGCOPY: y;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(y);\n\nconstraint forall(d in DIG, c in 1..m-1, p in POS)\n                 (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1);\n\nsolve satisfy;\n\noutput [ show((y[p] - 1) div m + 1) ++ \" \"\n          | p in POS ]\n       ;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to schedule the transportation of 3 identical containers of 5 different products (A, B, C, D, E) across a 15-stop route. Each product has a specific separation requirement: A requires 1 stop, B requires 2 stops, C requires 3 stops, D requires 4 stops, and E requires 5 stops. How can the company arrange the containers to meet these separation requirements and minimize the number of stops with multiple containers?\",\n  \"question2\": \"I'm planning a music festival with 5 stages and 3 performances of each of 5 different bands. I want to make sure that no two performances of the same band are too close together in the schedule. Can you help me figure out a schedule that works?\",\n  \"question3\": \"Imagine you're planning a treasure hunt with 5 clues and 3 copies of each clue. You want to hide the clues in a row, but you don't want two copies of the same clue to be too close together. Clue 1 needs to be at least 1 space away from the next copy, Clue 2 needs to be at least 2 spaces away, and so on. Can you help me figure out where to hide the clues?\",\n  \"question4\": \"Schedule 3 sets of 5 exams (A, B, C, D, E) in a row, ensuring that each exam is separated by its 'difficulty' level (A=1, B=2, C=3, D=4, E=5).\",\n  \"question5\": \"A large conference center is hosting a series of 5 workshops, each with 3 sessions, over the course of 15 time slots. The conference center has specific rules about the scheduling of these workshops: Workshop A requires that its sessions be at least 1 time slot apart, Workshop B requires that its sessions be at least 2 time slots apart, Workshop C requires that its sessions be at least 3 time slots apart, Workshop D requires that its sessions be at least 4 time slots apart, and Workshop E requires that its sessions be at least 5 time slots apart. Additionally, the conference center has a limited number of rooms available, and no more than 3 workshops can be scheduled at the same time. The conference center also wants to minimize the number of time slots with multiple workshops scheduled. Given these constraints, can you help the conference center schedule the workshops to meet these requirements and minimize the number of time slots with multiple workshops?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Langford's Problem\",\n  \"description\": \"Langford's Problem is a classic problem in constraint programming. It involves arranging m copies of the digits 1 to n in a sequence such that any two consecutive copies of digit k are separated by k other digits. The problem is often denoted as (m, n) where m is the number of copies and n is the number of digits.\",\n  \"variables\": \"y[p] (p in POS)\", \n  \"variables_explanation\": \"The decision variables y[p] represent the digit copy at position p in the sequence. Each variable y[p] takes a value from the set DIGCOPY, which is a set of integers from 1 to m*n, where m is the number of copies and n is the number of digits. The value of y[p] is a unique identifier for each digit copy, with the first m values representing the first digit, the next m values representing the second digit, and so on.\",\n  \"constraints\": \"alldifferent(y) and \u2200d \u2208 DIG, c \u2208 1..m-1, p \u2208 POS (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1)\", \n  \"constraints_explanation\": \"The constraints of the problem are: (1) alldifferent(y), which ensures that each digit copy is unique, and (2) the constraint that for each digit d, each copy c of d, and each position p, if the digit copy at position p is the c-th copy of d, then the digit copy at position p+d+1 is the (c+1)-th copy of d. This constraint ensures that any two consecutive copies of digit k are separated by k other digits.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening12": {"__data__": {"id_": "flattening12", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening12", "source_code": "array[1..2] of var 0..25: a;\n\nconstraint not (8 >= sum(i in 1..2)(sqrt(a[i])));\nfunction var int:sqrt(var int: x) :: promise_total =\n    let { var int: y; \n    constraint y * y = x /\\ y >= 0 } in y;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a system for optimizing the placement of solar panels on rooftops. Given a maximum surface area of 25 square meters for each panel, how can I determine the optimal sizes for two panels such that the sum of their square roots (representing the panels' energy output) exceeds a certain threshold of 8, while also considering the physical constraints of the rooftop space?\",\n  \n  \"question2\": \"I'm planning a garden and I want to put two big rocks in it. The rocks come in different sizes, but I don't want the total 'impact' of the rocks to be too small. The impact is like a special number that you get when you take the square root of the size of the rock. I don't know what sizes to choose, but I know I don't want the total impact to be less than or equal to 8. Can you help me figure it out?\",\n  \n  \"question3\": \"Imagine you're building a theme park with two really cool roller coasters. Each roller coaster has a 'thrill level' that's like a secret number that you get when you take the square root of how many loops it has. My friend and I want to make sure that the total thrill level of our two roller coasters is more than 8. We can choose how many loops each roller coaster has, but we can't have more than 25 loops on each one. Can you help us design the roller coasters?\",\n  \n  \"question4\": \"Two investments with returns represented by square roots. Total return should exceed 8. How to allocate up to 25 units to each investment?\",\n  \n  \"question5\": \"I'm a landscape architect designing a sustainable community with two large public parks. Each park will feature a unique 'ecological footprint' that's calculated by taking the square root of the park's size in acres. The community's residents have expressed a strong desire for the total ecological footprint of the two parks to be substantial, but not so large that it overwhelms the surrounding environment. Specifically, they want the total ecological footprint to exceed a threshold of 8, while also ensuring that each park is no larger than 25 acres. Considering the topography and existing infrastructure of the area, I need to determine the optimal sizes for the two parks such that the sum of their ecological footprints meets the community's requirements. Can you help me find a solution that balances the needs of the community with the physical constraints of the site?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Square Root Sum Problem\",\n  \"description\": \"This problem involves finding values for two variables such that the sum of their square roots does not exceed a certain threshold (8 in this case).\",\n  \"variables\": \"a[1], a[2] \u2208 [0, 25]\", \n  \"variables_explanation\": \"The variables a[1] and a[2] represent two non-negative integers between 0 and 25.\",\n  \"constraints\": \"\u00ac (\u221a(a[1]) + \u221a(a[2]) \u2264 8)\", \n  \"constraints_explanation\": \"The constraint states that the sum of the square roots of a[1] and a[2] should not be less than or equal to 8. In other words, the sum of the square roots should be greater than 8.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "aust_colord": {"__data__": {"id_": "aust_colord", "embedding": null, "metadata": {"problem_family": "aust_color", "model_name": "aust_colord", "source_code": "% Colouring Australia using nc colors \nint: nc;\n\nvar 1..nc: wa;    var 1..nc: nt;     \nvar 1..nc: sa;    var 1..nc: q;     \nvar 1..nc: nsw;   var 1..nc: v;\nvar 1..nc: t;\n\nconstraint wa != nt;\nconstraint wa != sa;\nconstraint nt != sa;\nconstraint nt != q;\nconstraint sa != q;\nconstraint sa != nsw;\nconstraint sa != v;\nconstraint q != nsw;\nconstraint nsw != v;\n\nsolve satisfy;\n\noutput [\"wa=\\(wa)\",  \n   \" nt=\\(nt)\", \n   \" sa=\\(sa)\\n\",\n \"q=\\(q)\", \n \" nsw=\\(nsw)\", \n \" v=\\(v)\\n\",\n \"t=\\(t)\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to assign 7 trucks to 7 warehouses across Australia, with each warehouse serving a specific state. The company wants to minimize the number of different colored trucks used, as each color represents a different maintenance schedule. However, due to union regulations, trucks with the same color cannot be assigned to adjacent states. How can the company assign the trucks to the warehouses while respecting these constraints and minimizing the number of colors used?\",\n\n  \"question2\": \"I'm planning a big party and I have 7 tables, each representing a different state in Australia. I want to decorate each table with a different colored tablecloth, but I don't want tables that are next to each other to have the same color. Can someone help me figure out how to do this with the least number of colors possible?\",\n\n  \"question3\": \"Imagine you're a superhero with 7 different colored costumes, each representing a state in Australia. You need to save the world from 7 different villains, each hiding in a different state. However, you can't wear the same colored costume to save two villains in neighboring states. How can you choose the right costume for each villain while using the least number of costumes possible?\",\n\n  \"question4\": \"7 friends want to wear different colored shirts to a music festival, but friends from neighboring states can't wear the same color. What's the minimum number of colors needed?\",\n\n  \"question5\": \"A large telecommunications company is planning to deploy a new network of cell towers across Australia, with each tower serving a specific state. The company wants to minimize the number of different colored towers used, as each color represents a different maintenance schedule. However, due to regulatory requirements, towers with the same color cannot be deployed in adjacent states. Additionally, the company has a limited budget and can only deploy a maximum of 7 towers. The company also has a preference for deploying towers in the following order: Western Australia, Northern Territory, South Australia, Queensland, New South Wales, Victoria, and Tasmania. How can the company deploy the towers while respecting these constraints, minimizing the number of colors used, and following the preferred deployment order?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Graph Colouring Problem\",\n  \"description\": \"The Graph Colouring Problem is a classic problem in constraint programming and graph theory. It involves assigning colours to the vertices of a graph such that no two adjacent vertices have the same colour. In this specific model, the graph represents the map of Australia, where each state is a vertex, and two vertices are adjacent if the corresponding states share a border. The goal is to find a colouring of the graph using a minimum number of colours.\",\n  \"variables\": \"wa \u2208 {1, ..., nc}, nt \u2208 {1, ..., nc}, sa \u2208 {1, ..., nc}, q \u2208 {1, ..., nc}, nsw \u2208 {1, ..., nc}, v \u2208 {1, ..., nc}, t \u2208 {1, ..., nc}. These variables represent the colours assigned to each state in Australia: Western Australia (wa), Northern Territory (nt), South Australia (sa), Queensland (q), New South Wales (nsw), Victoria (v), and Tasmania (t).\",\n  \"constraints\": \"wa \u2260 nt, wa \u2260 sa, nt \u2260 sa, nt \u2260 q, sa \u2260 q, sa \u2260 nsw, sa \u2260 v, q \u2260 nsw, nsw \u2260 v. These constraints represent the adjacency relationships between the states in Australia, ensuring that no two adjacent states have the same colour.\",\n  \"objective\": \"satisfy (i.e., find a feasible solution). The objective is not to minimize or maximize a specific value, but rather to find a valid colouring of the graph using the given number of colours (nc).\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "debug3": {"__data__": {"id_": "debug3", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "debug3", "source_code": "int: n = 5;\narray[1..n] of var 1..n: a;\narray[1..n] of 1..n: b = [3,5,2,3,1];\n\nconstraint forall(j in 1..n)(a[n-j] < b[j]);\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 5 stages, each hosting a different genre of music. The popularity of each genre is given by the array [3,5,2,3,1], where a higher value indicates a more popular genre. I want to assign the stages in a way that the least popular genres are assigned to the stages that are farthest from the main entrance, while ensuring that the most popular genres are assigned to the stages that are closest to the main entrance. How can I assign the stages to maximize the overall festival experience?\",\n  \n  \"question2\": \"I have 5 kids and I want to give them a special treat. I have a list of their favorite treats, but some of them have to be given out before others. For example, my youngest kid loves ice cream, but they can only have it after they've had a sandwich. My oldest kid loves cake, but they can only have it after they've had a salad. How can I give out the treats in the right order so that everyone is happy?\",\n  \n  \"question3\": \"I'm planning a school dance and I want to make sure that the most popular songs are played at the right time. I have a list of the top 5 songs, and I know that some of them have to be played before others. For example, the song that's currently number 3 on the charts can't be played until after the song that's number 5. How can I make a playlist that will keep everyone dancing all night?\",\n  \n  \"question4\": \"5 friends, different favorite foods. Some foods must be eaten before others. What's the order?\",\n  \n  \"question5\": \"I'm the manager of a large retail store, and I'm responsible for scheduling the inventory restocking process. We have 5 different types of products, each with its own restocking schedule. The products are restocked in a specific order, with some products needing to be restocked before others. For example, our best-selling product, which is currently in high demand, needs to be restocked every 3 days, while our slowest-selling product can only be restocked every 5 days. However, due to logistical constraints, we can only restock the products in a specific order, with the products that need to be restocked most frequently being restocked first. The restocking schedule is given by the array [3,5,2,3,1], where a higher value indicates a less frequent restocking schedule. I want to determine the optimal restocking order that minimizes the time it takes to restock all products, while ensuring that the products are restocked in the correct order. How can I determine the optimal restocking order?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Permutation with Precedence Constraints\",\n  \"description\": \"This problem involves finding a permutation of the numbers 1 to n that satisfies a set of precedence constraints. The constraints are given by an array b, where b[j] represents the minimum position that j can occupy in the permutation. The goal is to find a permutation that satisfies all these constraints.\",\n  \"variables\": \"a = (a_1, a_2, ..., a_n), where a_i \u2208 {1, 2, ..., n}\",\n  \"variables_explanation\": \"The variables a_i represent the i-th element of the permutation. The domain of each variable is the set of numbers from 1 to n, indicating that each position in the permutation can be occupied by any of the numbers from 1 to n.\",\n  \"constraints\": \"\u2200j \u2208 {1, 2, ..., n} : a_n - j + 1 < b_j\",\n  \"constraints_explanation\": \"The constraints state that for each position j in the permutation, the element at position n-j+1 must be less than b_j. This means that the element at position j can only occupy a position that is less than b_j in the permutation.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "nurses_let": {"__data__": {"id_": "nurses_let", "embedding": null, "metadata": {"problem_family": "nurses", "model_name": "nurses_let", "source_code": "int: k; % number of nurses\nset of int: NURSE = 1..k;\nint: m; % number of days\nset of int: DAY = 1..m;\nset of int: SHIFT = 1..3;\nint: day = 1; int: night = 2; int: dayoff = 3;\narray[SHIFT] of string: code = [\"d\", \"n\", \"-\"];\nint: o; % number on day shift\nint: l; % lower bound for nightshift\nint: u; % upper bound for nightshift\n\n\narray[NURSE,DAY] of var SHIFT: x;\n\nconstraint forall(n in NURSE, d in 1..m-2)\n                 ( x[n,d] = night /\\ x[n,d+1] = night \n                   -> x[n,d+2] = dayoff);\n\nconstraint forall(n in NURSE, d in 1..m-1)\n                 (x[n,d] = night -> x[n,d+1] != day);\n\nconstraint forall(d in DAY)\n                 (let {var int: on = sum(n in NURSE)\n                                        (bool2int(x[n,d]=night))        \n                      } in l <= on /\\ on <= u);\n\nsolve satisfy;\n\noutput [ code[fix(x[n,d])] \n         ++ if d = m then \"\\n\" else \" \" endif\n       | n in NURSE, d in DAY];\n\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm planning a large-scale music festival with 50 stages and 200 performers. Each performer has a preferred time slot and a maximum number of consecutive performances. I want to ensure that no performer plays more than two consecutive shows without a break, and that the number of performers on each stage is within a certain range (between 3 and 5). How can I create a schedule that satisfies these constraints and minimizes the number of breaks between performances?\",\n\n  \"question2\": \"I have a bunch of friends who want to volunteer at a local animal shelter. We need to make sure that someone is there every day to take care of the animals, but we also want to make sure that no one has to work too many days in a row. Can you help me make a schedule that makes sure everyone gets a break and that the animals are always taken care of?\",\n\n  \"question3\": \"I'm planning a sleepover with my friends and we want to make sure that everyone gets a turn to stay up late and watch movies. We don't want anyone to have to stay up too late two nights in a row, and we want to make sure that there are always at least 2 people awake to keep each other company. Can you help me make a schedule that makes sure everyone gets a turn to stay up late and have fun?\",\n\n  \"question4\": \"5 people, 7 days, 2 consecutive night shifts max. How do I schedule them?\",\n\n  \"question5\": \"I'm the manager of a large retail store with 75 employees and 7 departments. Each employee has a preferred schedule and a maximum number of consecutive shifts they can work. I want to ensure that no employee works more than two consecutive night shifts without a break, and that the number of employees on each shift is within a certain range (between 8 and 12). Additionally, I need to make sure that each department has at least 2 employees on duty at all times, and that no employee is scheduled to work on their birthday. I also have to consider the fact that some employees are part-time and can only work a maximum of 20 hours per week. Can you help me create a schedule that satisfies all these constraints and minimizes the number of breaks between shifts? The store is open from 9am to 9pm, 7 days a week, and I need to make sure that the schedule is fair and reasonable for all employees.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Nurse Scheduling Problem\",\n  \"description\": \"The Nurse Scheduling Problem is a classic problem in constraint programming. It involves scheduling nurses to work on different shifts (day, night, or day off) over a period of days, subject to certain constraints. The goal is to find a feasible schedule that satisfies all the constraints.\",\n  \"variables\": \"x[n,d] \u2208 {1, 2, 3} for n \u2208 NURSE and d \u2208 DAY. These variables represent the shift assigned to nurse n on day d, where 1 corresponds to a day shift, 2 corresponds to a night shift, and 3 corresponds to a day off.\",\n  \"constraints\": \"\u2200n \u2208 NURSE, d \u2208 1..m-2: (x[n,d] = 2 \u2227 x[n,d+1] = 2) \u2192 x[n,d+2] = 3. This constraint ensures that a nurse cannot work two consecutive night shifts without having a day off afterwards. \u2200n \u2208 NURSE, d \u2208 1..m-1: x[n,d] = 2 \u2192 x[n,d+1] \u2260 1. This constraint ensures that a nurse cannot work a night shift followed by a day shift. \u2200d \u2208 DAY: l \u2264 \u2211(n \u2208 NURSE) (x[n,d] = 2) \u2264 u. This constraint ensures that the number of nurses working the night shift on each day is within a certain range.\",\n  \"objective\": \"satisfy. The objective of this problem is to find a feasible schedule that satisfies all the constraints, rather than optimizing a specific objective function.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "project_scheduling": {"__data__": {"id_": "project_scheduling", "embedding": null, "metadata": {"problem_family": "project_scheduling", "model_name": "project_scheduling", "source_code": "int: n = 8; % no of tasks max\nset of int: TASK = 1..n;\nint: foundations = 1; int: interior_walls =2; int: exterior_walls = 3;\nint: chimney = 4; int: roof = 5; int: doors = 6;\nint: tiles = 7; int: windows = 8;\narray[TASK] of int: duration =\n  [7,4,3,3,2,2,3,3];\nint: p = 8; % number of precedences\nset of int: PREC = 1..p;\narray[PREC,1..2] of TASK: pre = \n  [| foundations, interior_walls \n   | foundations, exterior_walls\n   | foundations, chimney\n   | exterior_walls, roof\n   | exterior_walls, windows\n   | interior_walls, doors\n   | chimney, tiles\n   | roof, tiles |];\n\n\nint: t = sum(duration);\narray[TASK] of var 0..t: start;\n\nconstraint forall(i in PREC)\n                 (start[pre[i,1]] + duration[pre[i,1]] <= start[pre[i,2]]);\n\nvar int: makespan = max(t in TASK)(start[t] + duration[t]);\n\nsolve minimize makespan;\n\noutput [show(makespan),\" = \", show(start)];\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm planning a large-scale event with 8 different activities, each with a specific duration. I have certain constraints on the order in which these activities can take place. For example, the catering team needs to set up before the guests arrive, and the music team needs to start playing after the guests have arrived. I want to minimize the total time required to complete all activities. Can you help me find the optimal schedule?\",\n  \"question2\": \"I'm trying to plan a big project at work and I have a bunch of tasks that need to be done in a certain order. Some tasks can't start until others are finished. I want to get everything done as quickly as possible. Can you help me figure out the best way to do it?\",\n  \"question3\": \"I'm planning a big birthday party for my friend and we want to have a bunch of different games and activities. We need to make sure that the cake is ready before we sing happy birthday, and that the music is playing before we start dancing. Can you help us make a schedule so that everything happens at the right time?\",\n  \"question4\": \"8 tasks, 8 dependencies. Minimize total time. Help!\",\n  \"question5\": \"I'm the project manager for a large-scale construction project that involves building a new sustainable community. We have 8 different teams working on various aspects of the project, including foundation laying, exterior wall construction, roof installation, and interior design. Each team has a specific duration for their task, and there are certain dependencies between the tasks. For example, the exterior wall team can't start until the foundation team has finished, and the roof team can't start until the exterior wall team has finished. We want to minimize the total time required to complete the project, while also ensuring that we meet all the necessary safety and quality standards. We have a budget of $10 million and a deadline of 12 months. Can you help us develop a schedule that meets all these constraints and priorities? The specific durations for each task are: foundation laying (7 weeks), exterior wall construction (4 weeks), roof installation (3 weeks), interior design (3 weeks), chimney installation (3 weeks), door installation (2 weeks), tile installation (3 weeks), and window installation (3 weeks). The dependencies between the tasks are as follows: foundation laying must be completed before exterior wall construction, exterior wall construction must be completed before roof installation, and so on. We also have some flexibility in the schedule, as we can start some tasks in parallel if it makes sense to do so. Can you help us develop a schedule that meets all these constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Job Shop Scheduling Problem\",\n  \"description\": \"The Job Shop Scheduling Problem is a classic problem in constraint programming and operations research. It involves scheduling a set of tasks with given durations and precedence constraints to minimize the total time required to complete all tasks. In this specific model, we have 8 tasks representing different construction activities, and 8 precedence constraints defining the order in which these tasks must be executed. The goal is to find a schedule that minimizes the maximum completion time of all tasks, also known as the makespan.\",\n  \"variables\": \"start = [start_1, start_2, ..., start_8], makespan\",\n  \"variables_explanation\": \"The decision variables are the start times of each task (start_i) and the makespan, which is the maximum completion time of all tasks. The start times are represented as an array of variables, where start_i represents the start time of task i. The makespan is a variable that represents the maximum completion time of all tasks.\",\n  \"constraints\": \"start_i + duration_i <= start_j, for all (i, j) in pre\",\n  \"constraints_explanation\": \"The constraints are the precedence constraints, which define the order in which the tasks must be executed. For each pair of tasks (i, j) in the precedence relation pre, the constraint states that the completion time of task i (start_i + duration_i) must be less than or equal to the start time of task j (start_j). This ensures that task j cannot start before task i has finished.\",\n  \"objective\": \"minimize makespan\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "combinedlangford": {"__data__": {"id_": "combinedlangford", "embedding": null, "metadata": {"problem_family": "langford", "model_name": "combinedlangford", "source_code": "% Langfords problem (m,n) m copies of digits 1..n\n% where any two consecutive copies of digit k\n% are separated by k other digits\nint: n;\nset of int: DIG = 1..n;\nint: m;\nset of int: COPY = 1..m;\nint: l = m*n;\nset of int: POS = 1..l;\narray[DIG,COPY] of var POS: x;\n\n\nset of int: DIGCOPY = 1..l;\narray[POS] of var DIGCOPY: y;\n\ninclude \"inverse.mzn\";\nconstraint inverse([x[d,c] | d in DIG, c in COPY], y);\n\n%include \"alldifferent.mzn\";\n%constraint alldifferent([x[d,c] | d in DIG, c in COPY]);\n\nconstraint forall(d in DIG, c in 1..m-1)\n      (x[d,c+1] = x[d,c] + d + 1);\n\n%constraint forall(d in DIG, c in 1..m-1, p in POS)\n%                 (y[p] = m*(d-1) + c <-> y[p+d+1] = m*(d-1) + c + 1);\n\nsolve \n      %:: int_search(y, input_order, indomain_min, complete) \n      %:: int_search([x[d,c] | d in DIG, c in COPY], input_order, indomain_min, complete) \n      satisfy;\n\noutput [show(x),\"\\n\"]\n       ++ [ show((y[p] - 1) div m + 1) ++ \" \"\n          | p in POS ]\n       ;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale logistics operation that involves transporting 5 identical containers of 8 different types of cargo. Each cargo type has a specific 'buffer zone' requirement, where a certain number of containers must be placed between any two containers of the same type. How can I arrange the containers to meet these requirements and minimize the overall length of the transport sequence?\",\n\n  \"question2\": \"I'm trying to plan a music playlist for a party. I have 8 different songs and I want to play each song 5 times. But I don't want to play the same song twice in a row, and I want to leave a certain number of songs between each repeat of the same song. Can you help me figure out the order of the songs?\",\n\n  \"question3\": \"I'm planning a treasure hunt for my friends and I want to hide 8 different types of clues. I want to hide each clue 5 times, but I don't want to hide the same clue twice in a row. And I want to make sure that there are a certain number of clues between each repeat of the same clue. Can you help me figure out where to hide the clues?\",\n\n  \"question4\": \"Arrange 8 items, each repeated 5 times, in a sequence such that a certain number of items separate each repeat of the same item.\",\n\n  \"question5\": \"I'm the curator of a large art museum and I'm planning a retrospective exhibition of the works of 8 different artists. Each artist has 5 pieces that will be displayed in the exhibition, and I want to arrange the pieces in a way that creates a visually appealing and cohesive narrative. However, I have a number of constraints to consider. Each artist has a specific 'buffer zone' requirement, where a certain number of pieces must be placed between any two pieces by the same artist. Additionally, I want to ensure that the exhibition flows smoothly and that visitors are not overwhelmed by too many pieces by the same artist in a row. I also need to take into account the physical layout of the exhibition space, which has a total of 40 display areas. Can you help me determine the optimal arrangement of the pieces to meet these requirements and create a engaging and enjoyable experience for our visitors?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Langford's Problem\",\n  \"description\": \"Langford's Problem is a classic problem in constraint programming. It involves arranging m copies of the digits 1 to n in a sequence such that any two consecutive copies of digit k are separated by k other digits. The problem is often denoted as (m,n) and is known to be NP-complete.\",\n  \"variables\": \"x[d,c], y[p]\", \n  \"variables_explanation\": \"x[d,c] represents the position of the c-th copy of digit d in the sequence, and y[p] represents the digit at position p in the sequence.\",\n  \"constraints\": \"inverse([x[d,c] | d in DIG, c in COPY], y), x[d,c+1] = x[d,c] + d + 1\",\n  \"constraints_explanation\": \"The inverse constraint ensures that the y array is the inverse of the x array, i.e., y[p] is the digit at position p in the sequence. The second constraint ensures that any two consecutive copies of digit k are separated by k other digits.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening11": {"__data__": {"id_": "flattening11", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening11", "source_code": "\ninclude \"alldifferent.mzn\";\npredicate all_different_int_reif(\n      array[int] of var int: a, var bool: b) = \n b <-> forall(i, j in index_set(a) where i < j)\n             (a[i] != a[j]);\n\nvar 0..3: x; var 0..3: y; var 0..3: z; var 0..3: t;\nconstraint alldifferent([x,y,z]);\nconstraint alldifferent([y,z,t]) -> x = 0;\n\nsolve satisfy;\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has four trucks (x, y, z, t) that need to be assigned to four different routes (0, 1, 2, 3) to minimize congestion. However, due to road maintenance, if truck x is assigned to route 0, then trucks y, z, and t must be assigned to different routes. How can the company assign the trucks to routes to satisfy these constraints?\",\n\n  \"question2\": \"I'm planning a party and I have four friends (x, y, z, t) who want to wear different colored shirts (0, 1, 2, 3). But if my friend x wears a white shirt (0), then my friends y, z, and t can't wear the same color. How can I make sure everyone wears a different color?\",\n\n  \"question3\": \"I'm playing a game with my friends and we have four characters (x, y, z, t) that need to be assigned to four different levels (0, 1, 2, 3). But if my character x is on level 0, then my friends' characters y, z, and t can't be on the same level. How can we assign the characters to levels to make the game more fun?\",\n\n  \"question4\": \"Four students (x, y, z, t) need to be assigned to four different projects (0, 1, 2, 3). If student x is assigned to project 0, then students y, z, and t must be assigned to different projects. What's the best way to assign the students?\",\n\n  \"question5\": \"A large university is planning to host a conference with four keynote speakers (x, y, z, t) who will be speaking on four different topics (0, 1, 2, 3). However, due to scheduling conflicts, if speaker x is assigned to topic 0, then speakers y, z, and t must be assigned to different topics to avoid overlapping sessions. Additionally, speaker x has a strong preference for topic 0, while speaker y has a mild preference for topic 1. Speakers z and t have no preferences. The conference organizers want to assign the speakers to topics in a way that satisfies these constraints while also taking into account the speakers' preferences. How can they do this?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Restricted All Different Problem\",\n  \"description\": \"This problem is a variation of the classical All Different Problem, where the goal is to assign different values to a set of variables. However, in this case, there is an additional constraint that restricts the assignment of values to a subset of variables based on the value of another variable.\",\n  \"variables\": \"x, y, z, t \u2208 {0, 1, 2, 3}\", \n  \"variables_explanation\": \"These are the decision variables, which represent the values to be assigned to four different entities. The values are restricted to the set {0, 1, 2, 3}.\",\n  \"constraints\": \"x \u2260 y \u2260 z \u2227 (x = 0 \u2192 y \u2260 z \u2260 t)\", \n  \"constraints_explanation\": \"The first constraint ensures that x, y, and z are all different. The second constraint is conditional and states that if x is assigned the value 0, then y, z, and t must also be different. If x is not assigned the value 0, then there is no restriction on the values of y, z, and t.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "knapsack": {"__data__": {"id_": "knapsack", "embedding": null, "metadata": {"problem_family": "knapsack", "model_name": "knapsack", "source_code": "int: n; % number of objects\nset of int: OBJ = 1..n;\nint: capacity;\narray[OBJ] of int: profit;\narray[OBJ] of int: size;\n\narray[OBJ] of var int: x; % how many of each object\n\nconstraint forall(i in OBJ)(x[i] >= 0);\nconstraint sum(i in OBJ)(size[i] * x[i]) <= capacity;\nsolve maximize sum(i in OBJ)(profit[i] * x[i]);\n\noutput [\"x = \", show(x), \"\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 10 different artists, each with a unique sound and a specific stage requirement. The festival has a limited power capacity of 1000 kW. Each artist has a specific power requirement and a guaranteed minimum payment. I want to maximize the total payment while ensuring that the total power requirement does not exceed the festival's capacity. How can I select the artists to include in the festival to achieve this goal?\",\n\n  \"question2\": \"I want to pack a bunch of stuff for a road trip, but my car has limited space. I have different items like snacks, clothes, and games, and each one takes up a certain amount of space. Some items are more important to me than others. How can I figure out what to bring so that I have the most important stuff and don't run out of space?\",\n\n  \"question3\": \"I'm planning a birthday party for my friend and I want to buy some toys and games for the guests. I have a budget of $100 and I want to get the most fun stuff for the kids. Each toy and game has a different price and a 'fun score' that says how much kids like it. How can I choose the toys and games to buy so that I stay within my budget and get the most fun stuff?\",\n\n  \"question4\": \"I have 5 items to pack, each with a size and a value. My bag can hold 10 units of size. What's the best combination of items to pack to maximize value?\",\n\n  \"question5\": \"I'm a curator at a museum and I'm planning a new exhibit on ancient civilizations. I have a limited amount of space available for the exhibit, and I need to select the artifacts to display. Each artifact has a specific size and a 'historical significance score' that reflects its importance. I also have a limited budget for transportation and insurance, and each artifact has a specific cost associated with it. Additionally, I want to ensure that the exhibit represents a diverse range of civilizations. How can I select the artifacts to include in the exhibit to maximize the historical significance while staying within the space and budget constraints, and also ensuring diversity? The exhibit space has a capacity of 500 square feet, and the budget for transportation and insurance is $10,000. I have 20 artifacts to choose from, each with a size ranging from 10 to 50 square feet, a historical significance score ranging from 1 to 10, and a cost ranging from $100 to $500.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem with Multiples\",\n  \"description\": \"The 0/1 Knapsack Problem with Multiples is a classic problem in discrete optimization. It involves finding the optimal subset of items to include in a knapsack of limited capacity, such that the total profit is maximized. Each item has a size and a profit, and the knapsack has a limited capacity. The problem allows for multiple copies of each item to be included in the knapsack.\",\n  \"variables\": \"x_i, i in OBJ\", \n  \"variables_explanation\": \"The decision variables x_i represent the number of copies of each item i to include in the knapsack.\",\n  \"constraints\": \"x_i >= 0, i in OBJ; \u2211(size_i * x_i) <= capacity, i in OBJ\", \n  \"constraints_explanation\": \"The constraints ensure that the number of copies of each item is non-negative and that the total size of the items included in the knapsack does not exceed its capacity.\",\n  \"objective\": \"maximize \u2211(profit_i * x_i), i in OBJ\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "knapsack01set_concise": {"__data__": {"id_": "knapsack01set_concise", "embedding": null, "metadata": {"problem_family": "knapsack", "model_name": "knapsack01set_concise", "source_code": "int: n; % number of objects\nset of int: OBJ = 1..n;\nint: capacity;\narray[OBJ] of int: profit;\narray[OBJ] of int: size;\n\nvar set of OBJ: x; \n\n\nconstraint sum(i in x)(size[i]) <= capacity;\n\nsolve maximize sum(i in x)(profit[i]);\n\n\noutput [\"x = \", show(x), \"\\n\"];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 20 potential artists to choose from, each with a specific stage size requirement and a guaranteed audience draw. Given the limited space available (5000 sq. ft.), how can I select the optimal set of artists to maximize the total audience draw while staying within the space constraints? The artists' requirements are as follows: Artist A (stage size: 200 sq. ft., audience draw: 1000), Artist B (stage size: 300 sq. ft., audience draw: 800), ..., Artist T (stage size: 100 sq. ft., audience draw: 500).\",\n  \n  \"question2\": \"I want to pack a bag for a trip, but it's really small. I have a bunch of things I want to bring, like clothes and souvenirs, but they all take up different amounts of space. How can I fit the most valuable things in my bag without it getting too full? I don't want to leave anything behind if I don't have to.\",\n  \n  \"question3\": \"I'm planning a school bake sale and I want to make the most money possible. I have 15 different types of treats I can sell, but each one takes up a different amount of space in the display case. The case can only hold so much, and I want to make sure I'm selling the treats that will make the most money. Can you help me figure out which treats to sell?\",\n  \n  \"question4\": \"I have 10 items to pack, each with a size and a value. My bag can only hold 20 units of size. Which items should I pack to maximize value?\",\n  \n  \"question5\": \"I'm the curator of a museum, and I'm tasked with designing a new exhibit featuring a collection of rare and valuable artifacts. The exhibit space is limited to 500 square feet, and each artifact has a specific size requirement and a cultural significance score. The artifacts are as follows: Artifact A (size: 20 sq. ft., cultural significance: 9), Artifact B (size: 15 sq. ft., cultural significance: 7), ..., Artifact K (size: 10 sq. ft., cultural significance: 5). Additionally, some artifacts are related to each other and should be displayed together if possible. For example, Artifacts A and B are from the same historical period and should be displayed within 10 feet of each other. How can I select the optimal set of artifacts to display in the exhibit while maximizing the total cultural significance and staying within the space constraints? I also want to ensure that related artifacts are displayed together whenever possible.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. It involves finding the optimal subset of items to include in a knapsack of limited capacity, such that the total profit of the selected items is maximized. Each item has a size and a profit, and the knapsack has a limited capacity. The problem is called 0/1 because each item can either be included (1) or excluded (0) from the knapsack.\",\n  \"variables\": \"x \u2286 {1, ..., n}\", \n  \"variables_explanation\": \"x is a subset of the set of objects {1, ..., n}, representing the items to include in the knapsack.\",\n  \"constraints\": \"\u2211_{i \u2208 x} size[i] \u2264 capacity\",\n  \"constraints_explanation\": \"The total size of the items in the knapsack (x) must not exceed the knapsack's capacity.\",\n  \"objective\": \"maximize \u2211_{i \u2208 x} profit[i]\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "rcpsp": {"__data__": {"id_": "rcpsp", "embedding": null, "metadata": {"problem_family": "rcpsp", "model_name": "rcpsp", "source_code": "int: n; % number of tasks\nset of int: TASK = 1..n;\narray[TASK] of int: d; % duration\n\nint: m; % number of resources\nset of int: RESOURCE = 1..m;\narray[RESOURCE] of int: L; % resource limit\narray[RESOURCE,TASK] of int: res; % usage\n\nint: l; % number of precedences\nset of int: PREC = 1..l;\narray[PREC,1..2] of TASK: pre; % predecessor/successor pairs\n\nint: maxt; % maximum time\nset of int: TIME = 0..maxt;\n\narray[TASK] of var TIME: s; % start time\n\nconstraint forall(p in PREC)(s[pre[p,1]]+d[pre[p,1]] <= s[pre[p,2]]);\n\ninclude \"cumulative.mzn\";\nconstraint forall(r in RESOURCE)\n                 (cumulative(s,d,[res[r,t]|t in TASK],L[r]));\n%constraint forall(r in RESOURCE) \n%                 ( let { array[int] of var int: ss = \n%                              [ s[t] | t in TASK where res[r,t] > 0 ];\n%                         array[int] of var int: dd = \n%                              [ d[t] | t in TASK where res[r,t] > 0 ];\n%                         array[int] of var int: rr = \n%                              [ res[r,t] | t in TASK where res[r,t] > 0 ]; } in\n%                   cumulative(ss,dd,rr,L[r]));\n\nsolve minimize max(t in TASK)(s[t] + d[t]);\n\noutput [show(s)];\n\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale music festival with 20 stages and 50 bands. Each stage has a limited capacity for sound and lighting equipment, and each band has specific requirements for their performance. The festival schedule needs to be optimized to minimize the maximum performance time of all bands, while ensuring that no stage is overloaded with equipment at any given time. How can I create a schedule that meets these constraints and preferences?\",\n  \n  \"question2\": \"I have a bunch of chores to do around the house, like laundry, cleaning, and grocery shopping. I only have a certain amount of time each day to do these chores, and some of them need to be done in a specific order. For example, I need to do laundry before I can fold and put away the clothes. How can I make a schedule that gets everything done as quickly as possible?\",\n  \n  \"question3\": \"I'm planning a birthday party for my friend and we want to play a bunch of different games. We have a limited amount of time to play all the games, and some games need to be played in a specific order. For example, we need to play the team-building game before we can play the competitive game. We also have a limited number of game controllers and consoles, so we can't play all the games at the same time. How can we make a schedule that fits all the games in and makes sure everyone has fun?\",\n  \n  \"question4\": \"I have 10 tasks to complete with limited resources. How can I prioritize them to finish as quickly as possible?\",\n  \n  \"question5\": \"I'm the manager of a large construction project with 30 different tasks, including excavation, foundation work, and building construction. Each task requires a specific amount of labor, equipment, and materials, and some tasks need to be completed before others can begin. For example, we need to complete the foundation work before we can start building the walls. We also have a limited budget and need to minimize the maximum completion time of all tasks. Additionally, we have to deal with weather constraints, such as not being able to pour concrete in the rain. We have 10 different types of labor, 5 types of equipment, and 15 types of materials, and each task requires a specific combination of these resources. We also have a limited number of storage facilities for the materials and equipment. How can I create a schedule that meets all these constraints and preferences, while also minimizing the maximum completion time of all tasks? For example, let's say the tasks are: Task 1: Excavation (requires 10 laborers, 2 excavators, and 1000 tons of soil), Task 2: Foundation work (requires 15 laborers, 3 cranes, and 500 tons of concrete), Task 3: Building construction (requires 20 laborers, 4 cranes, and 2000 tons of steel). The resources available are: Labor: 50 laborers, Equipment: 5 excavators, 10 cranes, Materials: 5000 tons of soil, 2000 tons of concrete, 10000 tons of steel. The weather forecast is: Day 1-3: Sunny, Day 4-6: Rainy, Day 7-10: Sunny. How can I create a schedule that meets all these constraints and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Resource-Constrained Project Scheduling Problem (RCPSp)\",\n  \"description\": \"The Resource-Constrained Project Scheduling Problem (RCPSp) is a classic problem in constraint programming and operations research. It involves scheduling a set of tasks with given durations and resource requirements, subject to resource constraints and precedence relationships between tasks. The goal is to find a schedule that minimizes the maximum completion time of all tasks.\",\n  \"variables\": \"s[t] (t in TASK)\",\n  \"variables_explanation\": \"The decision variables s[t] represent the start time of each task t in the set of tasks TASK.\",\n  \"constraints\": \"s[pre[p,1]]+d[pre[p,1]] <= s[pre[p,2]] (p in PREC), cumulative(s,d,[res[r,t]|t in TASK],L[r]) (r in RESOURCE)\",\n  \"constraints_explanation\": \"The constraints can be divided into two types. The first type represents the precedence relationships between tasks, where the start time of a task plus its duration must be less than or equal to the start time of its successor task. The second type represents the resource constraints, where the cumulative resource usage of all tasks at any point in time must not exceed the available resource limit. This is modeled using the cumulative constraint, which is a built-in constraint in Minizinc.\",\n  \"objective\": \"minimize max(t in TASK)(s[t] + d[t])\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "jobshop2": {"__data__": {"id_": "jobshop2", "embedding": null, "metadata": {"problem_family": "jobshop", "model_name": "jobshop2", "source_code": "int: n;\nset of int: JOB = 1..n;\nint: m;\nset of int: MACH = 1..m;\nset of int: TASK = 1..m;\narray[JOB,TASK] of int:  d;  % length of task\narray[JOB,TASK] of MACH: mc; % which machine\n\nint: maxt = sum(j in JOB, t in TASK)(d[j,t]);\n\narray[JOB,TASK] of var 0..maxt: s; % start time\n\n% performs tasks in a job in order\nconstraint forall(j in JOB, t in 1..m-1)\n                 (s[j,t] + d[j,t] <= s[j,t+1]);\n\ninclude \"disjunctive.mzn\";\n\nconstraint forall(ma in MACH)\n                 ( let { array[int] of var int: ss = [ s[j,t] | j in JOB, t in TASK where mc[j,t] = ma ];\n                         array[int] of int:     dd = [ d[j,t] | j in JOB, t in TASK where mc[j,t] = ma ]; } in\n                   disjunctive(ss,dd));\n\n\nvar 0..maxt: makespan = max(j in JOB)(s[j,m] + d[j,m]);\n\nsolve  \n   %:: int_search([s[j,t]|j in JOB,t in TASK],input_order,indomain_min,complete)\n   %:: int_search([s[j,t]|j in JOB,t in TASK],smallest, indomain_min, complete)\n   %:: int_search([s[j,t]|j in JOB,t in TASK],dom_w_deg, indomain_min, complete)\n         minimize makespan;\n\noutput [ \"makespan = \", show(makespan), \"\\n\"] ++\n       [ show_int(3,s[j,t]) ++ if t = m  then \"\\n\" else \" \" endif\n       | j in JOB, t in TASK]; \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale conference with 10 parallel sessions, each with 5 talks. The talks have varying durations and some speakers have specific requirements for the room they need to be in. How can I schedule the talks to minimize the overall duration of the conference while ensuring that no speaker has to give two talks at the same time and that all room requirements are met? I have 10 rooms available, each with a different capacity and equipment. I'd like to prioritize the talks with the most attendees and minimize the number of room changes for the attendees.\",\n\n  \"question2\": \"I'm trying to plan a big party with my friends and we all have different schedules. We want to make sure that everyone can attend all the activities we have planned, like playing games, watching a movie, and eating dinner. Some activities take longer than others and we need to make sure that we don't overlap them. We also need to make sure that everyone has enough time to get from one activity to the next. Can you help me figure out the best schedule for our party?\",\n\n  \"question3\": \"I'm 12 years old and I love playing sports. I'm on a soccer team, a basketball team, and a volleyball team. Each team has practices and games at different times and I need to make sure I can make it to all of them. Some practices are longer than others and I need to make sure I have enough time to get from one practice to the next. Can you help me make a schedule so I can play all my sports and still have time for my homework and hanging out with my friends?\",\n\n  \"question4\": \"5 projects, 3 teams, 10 tasks. Each task has a different duration and team requirement. Minimize total project duration.\",\n\n  \"question5\": \"I'm the manager of a large film production company and we're working on a big-budget movie with a complex shooting schedule. We have 20 scenes to shoot, each with a different number of actors, special effects, and location requirements. Some scenes require specific actors or special effects, while others can be shot with a smaller crew. We have 5 different locations available, each with its own constraints and limitations. We also need to consider the availability of our actors, who have different schedules and commitments. Some actors are only available for a limited time, while others have more flexibility. We want to minimize the overall shooting time while ensuring that all scenes are shot with the required actors, special effects, and locations. We also need to consider the logistics of moving the crew and equipment between locations. Can you help us create a shooting schedule that meets all these constraints and minimizes the overall production time? We have a budget of $10 million and we need to stay within it. We also need to ensure that the movie is ready for release within the next 6 months.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Job Shop Scheduling Problem\",\n  \"description\": \"The Job Shop Scheduling Problem is a classic problem in Operations Research and Computer Science. It involves scheduling a set of jobs on a set of machines, where each job consists of a sequence of tasks that must be executed in a specific order. Each task requires a specific machine and has a specific processing time. The goal is to find a schedule that minimizes the makespan, which is the maximum completion time of all jobs.\",\n  \"variables\": \"s[j,t] (start time of task t in job j), makespan (maximum completion time of all jobs)\",\n  \"variables_explanation\": \"The decision variables s[j,t] represent the start time of task t in job j. The variable makespan represents the maximum completion time of all jobs, which is the objective to be minimized.\",\n  \"constraints\": \"s[j,t] + d[j,t] <= s[j,t+1] (precedence constraint), disjunctive(ss,dd) (machine constraint)\",\n  \"constraints_explanation\": \"The precedence constraint s[j,t] + d[j,t] <= s[j,t+1] ensures that tasks in a job are executed in order. The machine constraint disjunctive(ss,dd) ensures that tasks that require the same machine are executed non-overlapping in time.\",\n  \"objective\": \"minimize makespan\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "loan": {"__data__": {"id_": "loan", "embedding": null, "metadata": {"problem_family": "loan", "model_name": "loan", "source_code": "% variables\nvar float: R;        % quarterly repayment\nvar float: P;        % principal initially borrowed\nvar 0.0 .. 10.0: I;  % interest rate\n\n% intermediate variables\nvar float: B1; % balance after one quarter\nvar float: B2; % balance after two quarters\nvar float: B3; % balance after three quarters\nvar float: B4; % balance owing at end\n\nconstraint B1 = P * (1.0 + I) - R;\nconstraint B2 = B1 * (1.0 + I) - R;\nconstraint B3 = B2 * (1.0 + I) - R; \nconstraint B4 = B3 * (1.0 + I) - R;\n\nsolve satisfy;\n\noutput [\n \"Borrowing \", show_float(0, 2, P), \" at \", show(I*100.0), \n \"% interest, and repaying \", show_float(0, 2, R), \n  \"\\nper quarter for 1 year leaves \", show_float(0, 2, B4), \" owing\\n\"\n];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A financial analyst wants to determine the optimal quarterly repayment amount for a $100,000 loan with an interest rate of 8% per annum. The analyst wants to ensure that the loan is repaid within a year and the balance owing at the end of the year is minimized. What is the minimum balance owing at the end of the year and the corresponding quarterly repayment amount?\",\n  \n  \"question2\": \"I borrowed some money from my friend to buy a new bike and I want to pay him back in 4 installments. The interest rate is 5% per quarter. If I borrowed $500, how much should I pay each quarter so that I don't owe him anything after 1 year?\",\n  \n  \"question3\": \"Imagine you are the manager of a lemonade stand and you borrowed $200 from your parents to buy lemons and sugar. You want to pay them back in 4 installments, but you also want to make sure you have enough money to buy more lemons and sugar for the next quarter. If the interest rate is 3% per quarter, how much should you pay each quarter so that you don't owe your parents anything after 1 year?\",\n  \n  \"question4\": \"I owe $1000 at 6% interest. How much should I pay each quarter to pay it off in a year?\",\n  \n  \"question5\": \"A small business owner wants to expand their operations and needs to borrow $50,000 from a bank at an interest rate of 9% per annum. The business owner wants to ensure that the loan is repaid within a year and the balance owing at the end of the year is minimized. However, the business owner also wants to prioritize cash flow and ensure that the quarterly repayment amount is not too high. If the business owner wants to limit the quarterly repayment amount to $15,000, what is the minimum balance owing at the end of the year and the corresponding interest rate that the business owner should negotiate with the bank?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Loan Repayment Problem\",\n  \"description\": \"This problem models a loan repayment scenario where a principal amount is borrowed at a certain interest rate and repaid in equal quarterly installments over a year. The goal is to determine the balance owing at the end of the year given the principal amount, interest rate, and quarterly repayment amount.\",\n  \"variables\": \"R, P, I, B1, B2, B3, B4. R is the quarterly repayment amount, P is the principal amount borrowed, I is the interest rate, and B1, B2, B3, B4 are the balances after one, two, three, and four quarters respectively.\",\n  \"constraints\": \"B1 = P * (1.0 + I) - R, B2 = B1 * (1.0 + I) - R, B3 = B2 * (1.0 + I) - R, B4 = B3 * (1.0 + I) - R. These constraints represent the balance after each quarter, calculated by adding the interest to the previous balance and subtracting the quarterly repayment amount.\",\n  \"objective\": \"satisfy (no specific objective, the goal is to find a feasible solution that satisfies all constraints)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening4": {"__data__": {"id_": "flattening4", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening4", "source_code": "var 0..5: x; var 0..2: y; var 0..3: z;\nint: k = 4;\nconstraint x + 2*(y - x) + z <= k*z;\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to allocate resources for transporting goods. The company has three types of containers with capacities of 0-5 units, 0-2 units, and 0-3 units. The cost of transporting the goods is proportional to the number of units transported, but there's a constraint on the total cost based on the number of units of the third type of container. If the cost is 4 times the number of units of the third type of container, what is the maximum number of units that can be transported while satisfying the cost constraint?\",\n\n  \"question2\": \"I'm planning a party and I need to decide how many snacks to buy. I have three types of snacks: chips, popcorn, and cookies. I can buy between 0 and 5 bags of chips, 0 and 2 bags of popcorn, and 0 and 3 bags of cookies. The problem is that my friend who's helping me with the party has a weird rule: the total number of snacks we have should be less than or equal to 4 times the number of bags of cookies. How many snacks can I buy in total?\",\n\n  \"question3\": \"Imagine you're playing a game where you have three types of power-ups: health, speed, and shield. You can collect between 0 and 5 health power-ups, 0 and 2 speed power-ups, and 0 and 3 shield power-ups. But there's a catch: the total number of power-ups you collect should be less than or equal to 4 times the number of shield power-ups. How many power-ups can you collect in total?\",\n\n  \"question4\": \"Three friends want to buy snacks. They can buy 0-5 chips, 0-2 popcorn, and 0-3 cookies. The total cost is 4 times the cookies. What's the max snacks they can buy?\",\n\n  \"question5\": \"A theme park is planning to launch a new attraction that involves three types of thrill rides: roller coasters, water slides, and drop towers. The park can allocate between 0 and 5 roller coasters, 0 and 2 water slides, and 0 and 3 drop towers. However, the park's management has a constraint on the total number of thrill rides based on the number of drop towers. Specifically, the total number of thrill rides should be less than or equal to 4 times the number of drop towers. The park's management wants to know the maximum number of thrill rides they can allocate while satisfying this constraint. Additionally, the park has a limited budget for staffing and maintenance, and they want to ensure that the number of thrill rides they allocate does not exceed their budget. If the cost of staffing and maintenance is proportional to the number of thrill rides, what is the maximum number of thrill rides the park can allocate while satisfying both the constraint and the budget?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem with Additional Constraints\",\n  \"description\": \"The problem modelled is a variant of the 0/1 knapsack problem with additional constraints. The goal is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function. The problem involves three decision variables, x, y, and z, which are subject to a constraint involving their values and a constant k.\",\n  \"variables\": \"x \u2208 {0, 1, 2, 3, 4, 5}, y \u2208 {0, 1, 2}, z \u2208 {0, 1, 2, 3}. These variables represent the quantities of three different items, where x and y are related through a constraint, and z is used to scale the constraint.\",\n  \"constraints\": \"x + 2*(y - x) + z \u2264 k*z. This constraint represents a relationship between the three decision variables, where the sum of x, twice the difference between y and x, and z is bounded by k times z. The constant k is set to 4.\",\n  \"objective\": \"satisfy (feasibility problem). The objective is to find a feasible solution that satisfies the given constraint, rather than optimizing a specific objective function.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "debug2": {"__data__": {"id_": "debug2", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "debug2", "source_code": "int: n = 5;\narray[1..n] of var 1..n: a;\narray[1..n] of 1..n: b = [3,5,2,3,1];\n\nconstraint forall(j in 1..n)\n                 (assert(n-j in 1..n,\n                  \"b[\\(n-j)]\"));\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale logistics operation with 10 trucks and 10 delivery points. Each delivery point has a specific priority order, given by the array [3,5,2,3,1,8,4,6,9,7]. How can I assign the trucks to the delivery points in such a way that the priority order is respected, considering that the trucks have different capacities and the delivery points have different demands?\",\n  \n  \"question2\": \"I'm organizing a school festival with 5 booths, and each booth needs to be assigned to a specific teacher. The teachers have different preferences for the booths, and some booths need to be assigned before others. Can you help me figure out how to assign the booths to the teachers in a way that makes everyone happy?\",\n  \n  \"question3\": \"Imagine you're planning a big birthday party with 5 friends, and each friend has a favorite game to play. The games need to be played in a specific order, like [3,5,2,3,1]. How can you assign the friends to the games so that everyone gets to play their favorite game, and the games are played in the right order?\",\n  \n  \"question4\": \"5 tasks, 5 workers. Tasks have priority order [3,5,2,3,1]. How to assign tasks to workers?\",\n  \n  \"question5\": \"I'm the manager of a large construction project with 10 teams and 10 tasks to complete. Each task has a specific precedence constraint, given by the array [3,5,2,3,1,8,4,6,9,7], which represents the order in which the tasks need to be completed. The teams have different skill levels and availability, and some tasks require specific equipment. Additionally, we have a limited budget and need to minimize the cost of assigning teams to tasks. We also need to ensure that the tasks are completed in a way that respects the precedence constraints. Can you help me develop a plan to assign the teams to the tasks in a way that minimizes the cost, respects the precedence constraints, and ensures that the tasks are completed on time?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Assignment Problem with Precedence Constraints\",\n  \"description\": \"This problem is a variant of the assignment problem, where we have a set of tasks (or jobs) and a set of agents (or workers) that can perform these tasks. Each task has a specific precedence constraint, which is given by the array b. The goal is to assign each task to an agent in such a way that the precedence constraints are satisfied.\",\n  \"variables\": \"a = [a_1, a_2, ..., a_n], where a_i is the agent assigned to task i\",\n  \"constraints\": \"\u2200j \u2208 {1, ..., n}: n - j + 1 \u2264 n, where n - j + 1 represents the position of task j in the precedence order given by b\",\n  \"objective\": \"Satisfy the constraints (there is no objective function to minimize or maximize)\"\n}\n\nNote: The problem modelled is not a classical assignment problem, but rather a variant with a specific type of precedence constraint. The array b represents the precedence order of the tasks, where b[j] is the position of task j in the order. The constraint ensures that the tasks are assigned to agents in such a way that the precedence order is respected.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "context": {"__data__": {"id_": "context", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "context", "source_code": "array[1..10] of var bool: x; \nvar 0..5: y;\npredicate atmostone(array[int] of var bool: b);\nconstraint y != 0 -> atmostone(x);\n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with 10 different activities, and I want to ensure that only one of them can be a 'main event' if the event's budget exceeds $0. Given that each activity can be either included or excluded, and the budget can range from $0 to $5 million, how can I determine the optimal combination of activities to include while satisfying the main event constraint?\",\n\n  \"question2\": \"I have 10 different hobbies that I want to try, but I only have time for one if I'm really busy. If I'm not busy at all, I can try as many as I want. How can I decide which hobbies to try based on how busy I am?\",\n\n  \"question3\": \"Imagine I have 10 different toys, and I want to put only one of them in my favorite toy box if my mom says I have to clean my room. But if I don't have to clean my room, I can put as many toys as I want in the box. How can I choose which toy to put in the box based on whether I have to clean my room or not?\",\n\n  \"question4\": \"10 tasks, 1 main task if budget > 0. How to choose?\",\n\n  \"question5\": \"I'm a manager at a large company, and I'm responsible for allocating resources to 10 different projects. Each project can be either a 'high-priority' project or a 'low-priority' project, and I want to ensure that only one project can be high-priority if the company's quarterly budget exceeds $0. Given that the budget can range from $0 to $5 million, and each project has a specific resource requirement, how can I determine the optimal allocation of resources to each project while satisfying the high-priority constraint? Additionally, I need to consider the fact that some projects have dependencies on each other, and some projects have specific deadlines that need to be met. Can you help me find a solution that takes into account these additional constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"At Most One True\",\n  \"description\": \"This problem is a classic constraint satisfaction problem where we have a set of boolean variables and a constraint that at most one of these variables can be true, but only if a certain condition is met.\",\n  \"variables\": \"x = (x_1, x_2, ..., x_10), y \u2208 {0, 1, 2, 3, 4, 5}\",\n  \"variables_explanation\": \"x is an array of 10 boolean decision variables, where x_i represents whether the i-th variable is true or false. y is an integer decision variable that can take values from 0 to 5.\",\n  \"constraints\": \"y \u2260 0 \u2192 \u2211(x) \u2264 1\",\n  \"constraints_explanation\": \"The constraint states that if y is not equal to 0, then at most one of the x variables can be true. This is achieved through the atmostone predicate, which ensures that the sum of the x variables is less than or equal to 1.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote that the objective is \"satisfy\" because the problem is a constraint satisfaction problem, where the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mip2": {"__data__": {"id_": "mip2", "embedding": null, "metadata": {"problem_family": "mip", "model_name": "mip2", "source_code": "var float: B;\nvar float: C;\nvar float: D;\n\n\nsolve maximize 1.0*B - 1.0*C + 1.0*D;\nconstraint 2.0*B - 1.0*C + 2.0*D <=  4.0;\nconstraint 2.0*B - 3.0*C + 1.0*D <= -5.0;\nconstraint -1.0*B + 1.0*C - 2.0*D <= -1.0;\n\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A financial analyst wants to allocate $100,000 to three different investment portfolios with expected returns of 5%, 3%, and 7% per annum. However, due to regulatory constraints, the total investment in the first and third portfolios cannot exceed $60,000, and the total investment in the second and third portfolios cannot be less than $30,000. Additionally, the investment in the first portfolio must be at least twice the investment in the second portfolio. How should the analyst allocate the funds to maximize the total return?\",\n  \"question2\": \"I'm planning a party and I want to buy three types of snacks: chips, popcorn, and cookies. I have a budget of $20 and I want to spend as much as possible on snacks. However, I don't want to spend more than $8 on chips and I don't want to spend less than $4 on popcorn. Also, I want to make sure I have at least twice as many cookies as popcorn. How many of each snack should I buy?\",\n  \"question3\": \"Imagine you're a game developer and you want to create a new game with three characters: a warrior, a mage, and a rogue. Each character has a different point value and you want to create a team with a total point value of 100. However, you have some limitations: the warrior and the rogue together can't have more than 60 points, and the mage and the rogue together must have at least 30 points. Also, the warrior must have at least twice as many points as the mage. How many points should each character have?\",\n  \"question4\": \"Maximize profit with $100 budget, 3 products, and constraints: product 1 & 3 <= $60, product 2 & 3 >= $30, product 1 >= 2*product 2.\",\n  \"question5\": \"A large retail company is planning to launch a new product line with three different products: a premium product, a standard product, and a budget product. The company has a budget of $1 million to allocate to the three products and wants to maximize the total revenue. However, due to production constraints, the company cannot produce more than 60,000 units of the premium and budget products combined. Additionally, the company must produce at least 30,000 units of the standard and budget products combined. Furthermore, the company wants to ensure that the production of the premium product is at least twice the production of the standard product. The profit margins for the premium, standard, and budget products are 20%, 15%, and 10%, respectively. How many units of each product should the company produce to maximize the total revenue?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Linear Programming Problem\",\n  \"description\": \"This problem is a classic example of a linear programming problem, which is a type of optimization problem where the goal is to maximize or minimize a linear objective function subject to a set of linear constraints. In this case, the problem is to maximize a linear function of three variables, B, C, and D, subject to three linear constraints.\",\n  \"variables\": \"B, C, D. These variables represent the decision variables of the problem, which are the quantities that can be adjusted to achieve the optimal solution. They are all non-negative, meaning they cannot take on negative values.\",\n  \"constraints\": \"2B - C + 2D \u2264 4, 2B - 3C + D \u2264 -5, -B + C - 2D \u2264 -1. These constraints represent the limitations on the values of the decision variables. They are all linear inequalities, meaning they are equations in which the variables are multiplied by constants and added together, and the result is compared to a constant using a less-than-or-equal-to operator.\",\n  \"objective\": \"Maximize B - C + D. The objective of the problem is to maximize the value of this linear function, which means finding the values of B, C, and D that make the function as large as possible while still satisfying the constraints.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mip1": {"__data__": {"id_": "mip1", "embedding": null, "metadata": {"problem_family": "mip", "model_name": "mip1", "source_code": "var float: B;\nvar float: C;\nvar float: D;\n\nconstraint 2.0*B + 2.0*C + 1.0*D <= 30.0;\nconstraint 1.0*B + 2.0*C + 3.0*D <= 25.0;\nconstraint 2.0*B + 1.0*C + 1.0*D <= 20.0;\nsolve maximize 3.0*B + 1.0*C + 3.0*D;\nconstraint B >= 0 /\\ C >= 0 /\\ D >= 0", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a logistics manager for a company that produces three types of goods: electronics, furniture, and machinery. Each type of good requires a different amount of warehouse space, labor, and transportation resources. I have three warehouses with different capacities: 30 units of space, 25 units of labor, and 20 units of transportation. I want to maximize the total value of goods produced, given that electronics are worth $3 per unit, furniture is worth $1 per unit, and machinery is worth $3 per unit. How can I allocate my resources to maximize the total value of goods produced?\",\n\n  \"question2\": \"I'm planning a party and I want to make sure I have enough food and drinks for my guests. I have three types of snacks: chips, popcorn, and cookies. Each snack requires a different amount of ingredients and time to prepare. I have 30 minutes to prepare the snacks, 25 ingredients to use, and 20 servings to make. I want to make the most delicious snacks possible. Can you help me figure out how many of each snack to make?\",\n\n  \"question3\": \"I'm a 10-year-old kid who loves playing with Legos. I have three types of Lego sets: cars, buildings, and robots. Each set requires a different number of Lego pieces and hours to build. I have 30 hours to build my Legos, 25 Lego pieces to use, and 20 boxes to store them in. I want to build the most awesome Lego creations ever! Can you help me decide which sets to build and how many of each?\",\n\n  \"question4\": \"I have $30 to spend on three types of items: books, toys, and games. Each item costs a different amount. I want to buy the most valuable items possible. Can you help me decide how many of each item to buy?\",\n\n  \"question5\": \"I'm a manager of a large-scale agricultural farm that produces three types of crops: wheat, corn, and soybeans. Each crop requires a different amount of land, water, and labor to cultivate. I have 30 acres of land, 25 units of water, and 20 laborers to allocate. The market demand for each crop is different, with wheat selling for $3 per unit, corn selling for $1 per unit, and soybeans selling for $3 per unit. However, I also need to consider the environmental impact of each crop, with wheat requiring the least amount of water and labor, corn requiring moderate amounts, and soybeans requiring the most. Additionally, I have to ensure that I produce at least 10 units of each crop to meet the minimum market demand. How can I allocate my resources to maximize the total revenue from crop sales while minimizing the environmental impact and meeting the minimum market demand?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Linear Programming Problem\",\n  \"description\": \"This problem is a classic example of a linear programming problem, where the goal is to maximize a linear objective function subject to a set of linear constraints. The problem involves three decision variables, B, C, and D, which are non-negative. The constraints represent limitations on the values of these variables, and the objective is to find the values of B, C, and D that maximize the objective function.\",\n  \"variables\": \"B, C, D. These variables represent the quantities of three different resources or products that can be produced or allocated. They are non-negative, meaning that they cannot take on negative values.\",\n  \"constraints\": \"2B + 2C + D \u2264 30, B + 2C + 3D \u2264 25, 2B + C + D \u2264 20. These constraints represent limitations on the values of the variables B, C, and D. They may represent limitations on the availability of resources, production capacity, or other constraints that must be satisfied.\",\n  \"objective\": \"maximize 3B + C + 3D. The objective of the problem is to maximize this linear function, which represents the total value or profit that can be obtained from the variables B, C, and D.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening7": {"__data__": {"id_": "flattening7", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening7", "source_code": "var -2..2: x; var -1..2: y; var bool: b;\nconstraint if b then x else y endif >= 0;\n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has two types of cargo containers, A and B, with different capacity constraints. Container A can hold between -2 and 2 units of cargo, while container B can hold between -1 and 2 units. The company has a boolean flag, 'priority', that determines which container must have a non-negative cargo load. If 'priority' is true, container A must have a non-negative load, otherwise container B must have a non-negative load. What are the possible cargo loads for containers A and B that satisfy this constraint?\",\n\n  \"question2\": \"Imagine you have two jars of cookies, one that can hold between -2 and 2 cookies and another that can hold between -1 and 2 cookies. You also have a special rule that says if it's your birthday, the first jar must have at least as many cookies as you have fingers on one hand, but if it's not your birthday, the second jar must have at least as many cookies as you have fingers on one hand. How many cookies can you put in each jar so that the rule is always followed?\",\n\n  \"question3\": \"I'm planning a road trip with my friends and we have two cars with different fuel capacities. Car A can hold between -2 and 2 gallons of gas, while car B can hold between -1 and 2 gallons. We also have a special 'lead car' flag that determines which car must have enough gas to make it to the next rest stop. If the 'lead car' flag is true, car A must have enough gas, but if it's false, car B must have enough gas. How much gas can we put in each car so that we're always safe?\",\n\n  \"question4\": \"Two accounts, A and B, with balances between -2 and 2, and -1 and 2 respectively. A boolean flag determines which account must be non-negative. What are the possible balances?\",\n\n  \"question5\": \"A renewable energy company is designing a smart grid system that must balance energy supply and demand in real-time. The system has two types of energy storage units, A and B, with different capacity constraints. Unit A can store between -2 and 2 megawatt-hours (MWh) of energy, while unit B can store between -1 and 2 MWh. The company has a boolean 'peak demand' flag that determines which unit must have a non-negative energy balance. If the 'peak demand' flag is true, unit A must have a non-negative balance, but if it's false, unit B must have a non-negative balance. The company wants to ensure that the system can always meet peak demand, while also minimizing energy waste. What are the possible energy balances for units A and B that satisfy this constraint, assuming the system operates in 15-minute intervals and the energy demand forecast is as follows: 1.2 MWh at 8am, 1.5 MWh at 8:15am, 1.8 MWh at 8:30am, and so on? The company also wants to consider the following constraints: the energy storage units can only be charged or discharged at a rate of 0.5 MWh per 15-minute interval, and the system must always maintain a minimum energy reserve of 0.5 MWh to ensure grid stability.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Conditional Non-Negativity Problem\",\n  \"description\": \"This problem involves finding values for two variables, x and y, and a boolean variable b, such that a conditional constraint is satisfied. The constraint states that if b is true, then x must be non-negative, otherwise y must be non-negative.\",\n  \"variables\": \"x \u2208 [-2, 2], y \u2208 [-1, 2], b \u2208 {true, false}. x and y are integer variables representing the values to be determined, while b is a boolean variable controlling the conditional constraint.\",\n  \"constraints\": \"if b then x \u2265 0 else y \u2265 0 endif. This constraint enforces the conditional non-negativity requirement, where the value of b determines which variable must be non-negative.\",\n  \"objective\": \"satisfy. The objective of this problem is to find any solution that satisfies the given constraint, without optimizing a specific value.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "assign_dual": {"__data__": {"id_": "assign_dual", "embedding": null, "metadata": {"problem_family": "search", "model_name": "assign_dual", "source_code": "int: n;\nset of int: DOM = 1..n;\nint: m;\nset of int: COD = 1..m;\narray[DOM,COD] of int: profit;\n\narray[COD] of var DOM: worker;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(worker);\n\n\nsolve maximize sum(t in COD)\n            (profit[worker[t],t]);\n\noutput [show(worker)];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm the manager of a research institute with 10 scientists and 10 projects. Each scientist has a different level of expertise in each project, and each project has a different level of priority. I want to assign scientists to projects in a way that maximizes the overall expertise and priority. The catch is that each scientist can only work on one project, and each project can only have one scientist assigned to it. How can I make the optimal assignment?\",\n  \"question2\": \"I have 5 friends and 5 restaurants to choose from for dinner. Each friend likes some restaurants more than others, and I want to make sure everyone has a good time. How can I decide which friend to take to which restaurant so that everyone is happy?\",\n  \"question3\": \"I'm the captain of a school sports team with 8 players and 8 positions on the field. Each player is good at some positions but not others. I want to put each player in the position where they'll do the best. How can I figure out the best lineup?\",\n  \"question4\": \"5 kids, 5 toys. Each kid likes some toys more than others. How to give each kid a toy they'll like?\",\n  \"question5\": \"I'm the event coordinator for a large music festival with 15 stages and 15 bands. Each band has a different genre and style, and each stage has a different capacity and atmosphere. I want to assign bands to stages in a way that maximizes the overall audience satisfaction and stage utilization. However, I also need to consider the following constraints: Stage 1 can only accommodate bands with a maximum of 5 members, Stage 2 is only suitable for bands with a high-energy performance, and Stage 3 is reserved for local bands. Additionally, Band A cannot be assigned to Stage 1, Band B requires a stage with a minimum capacity of 500, and Band C has a specific request to be assigned to Stage 5. How can I make the optimal assignment of bands to stages, taking into account these constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Assignment Problem\",\n  \"description\": \"The Assignment Problem is a classic problem in Operations Research and Computer Science. It involves assigning a set of workers to a set of tasks in such a way that each worker is assigned to exactly one task and each task is assigned to exactly one worker. The goal is to maximize the total profit or efficiency of the assignments.\",\n  \"variables\": \"worker[t] \u2208 DOM, t \u2208 COD. These variables represent the assignment of each task t to a worker. The value of worker[t] is the index of the worker assigned to task t.\",\n  \"constraints\": \"worker[t] \u2208 DOM, t \u2208 COD (domain constraint); alldifferent(worker) (each worker is assigned to at most one task). These constraints ensure that each task is assigned to a valid worker and that each worker is assigned to at most one task.\",\n  \"objective\": \"maximize \u2211(profit[worker[t],t]) (maximize the total profit of the assignments). The objective is to find an assignment of workers to tasks that maximizes the total profit or efficiency of the assignments.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "stableroommates_func": {"__data__": {"id_": "stableroommates_func", "embedding": null, "metadata": {"problem_family": "stableroommates_func", "model_name": "stableroommates_func", "source_code": "% Taken from the paper by Patrick Prosser at CPAIOR 2014\nint: n; % number of agents\nset of int: AGENT = 1..n;\n\narray[AGENT] of int: npref; % number of preferences of each agent\narray[AGENT] of int: cum_npref = [ sum(j in 1..i-1)(npref[j]) | i in AGENT];\narray[1..sum(npref)] of int: preferences;  % all preferences in one list\n\nfunction AGENT: pref(AGENT: i, 1..n-1: j) = \n         assert(j in 1..npref[i], \"Called pref(\" ++ show(i) ++ \",\" ++ show(j) ++ \") too large preference\\n\",\n         preferences[cum_npref[i] + j]);\n\nconstraint forall(i in AGENT)\n                 (assert(forall(j in 1..npref[i])\n                               (pref(i,j) != i) /\\\n                         forall(j1, j2 in 1..npref[i] where j1 < j2)\n                               (pref(i,j1) != pref(i,j2)),\n                         \"Agent \" ++ show(i) ++ \"has erroneous preferences\"));\n\n\n%% ranking information: rank = 0 means not ranked but shoulnt occur!\nfunction 0..n-1: rank(AGENT: i1, AGENT: i2) = \n                 max([bool2int(pref(i1,j) = i2) * j | j in 1..npref[i1]]); \n\narray[AGENT] of var 1..n: a;\n%% constraint (1)\nconstraint forall(i in AGENT)(a[i] <= npref[i] + 1);\n%% constraint (2)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref(i,p) } in \n                   a[i] > rank(i,j) -> a[j] < rank(j,i)\n                 );\n%% constraint (3)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref(i,p) } in \n                   a[i] = rank(i,j) -> a[j] = rank(j,i)\n                 );\n\nsolve satisfy;\n\n   output  [ if fix(a[i]) < npref[i] /\\ i < pref(i,fix(a[i]))\n             then \"(\" ++ show(i) ++ \",\" ++ show(pref(i,fix(a[i]))) ++ \")\\n\"\n             else \"\" endif\n           | i in AGENT ]\n %      ++ [show(rank),\"\\n\"] \n       ++\n       [show(npref),\"\\n\"] \n       ++ [show(a),\"\\n\"]\n        ;\n       \n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a logistics manager for a large e-commerce company, and I need to assign delivery drivers to warehouses. Each driver has a preference list of warehouses they'd like to be assigned to, based on factors like distance and traffic. However, each warehouse has a limited capacity for drivers, and I need to ensure that the assignments are stable, meaning that no driver would prefer to be assigned to a different warehouse, and no warehouse would prefer to have a different driver. Can I find a stable assignment of drivers to warehouses that respects these constraints and preferences? I have 10 drivers and 5 warehouses, and the preference lists are as follows: [driver1: warehouse1, warehouse2, warehouse3], [driver2: warehouse2, warehouse3, warehouse4], ...\",\n\n  \"question2\": \"I'm planning a party and I want to seat my guests at tables. Some guests are friends and want to sit together, while others don't get along and should be seated apart. I have 8 guests and 4 tables, and I want to make sure that everyone is happy with their seating arrangement. Can I figure out a way to seat my guests that makes everyone happy?\",\n\n  \"question3\": \"I'm in charge of organizing a school dance, and I need to assign students to tables for dinner. Some students are friends and want to sit together, while others have dietary restrictions and need to be seated at tables with specific food options. I have 20 students and 5 tables, and I want to make sure that everyone has a good time. Can I find a way to seat the students that makes everyone happy and respects their dietary restrictions?\",\n\n  \"question4\": \"Can I assign 5 friends to 3 hotel rooms in a way that makes everyone happy, given their preferences for roommates?\",\n\n  \"question5\": \"I'm a manager at a large tech company, and I need to assign employees to teams for a new project. Each employee has a preference list of teams they'd like to be assigned to, based on factors like project goals and team dynamics. However, each team has a limited capacity for employees, and I need to ensure that the assignments are stable, meaning that no employee would prefer to be assigned to a different team, and no team would prefer to have a different employee. Additionally, I need to consider the following constraints: team A requires at least 2 employees with expertise in machine learning, team B requires at least 1 employee with expertise in data science, and team C requires at least 1 employee with expertise in software engineering. Can I find a stable assignment of employees to teams that respects these constraints and preferences? I have 15 employees and 5 teams, and the preference lists are as follows: [employee1: team1, team2, team3], [employee2: team2, team3, team4], ... The expertise of each employee is as follows: [employee1: machine learning, data science], [employee2: software engineering, data science], ... The capacity of each team is as follows: [team1: 3 employees], [team2: 4 employees], [team3: 2 employees], [team4: 3 employees], [team5: 3 employees].\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Stable Roommates Problem\",\n  \"description\": \"The Stable Roommates Problem is a classic problem in constraint programming and computer science. It involves finding a stable matching between a set of agents, where each agent has a preference list of other agents they would like to be matched with. A matching is considered stable if there are no two agents who would prefer to be matched with each other over their current match. The problem is a variation of the Stable Marriage Problem, but without the distinction between men and women.\",\n  \"variables\": \"a[i] (i in AGENT)\",\n  \"variables_explanation\": \"The decision variable a[i] represents the ranking of agent i's match in their preference list. The value of a[i] is an integer between 1 and n, where n is the number of agents. The value of a[i] indicates the position of the matched agent in the preference list of agent i.\",\n  \"constraints\": \"a[i] <= npref[i] + 1 (i in AGENT), a[i] > rank(i,j) -> a[j] < rank(j,i) (i in AGENT, p in 1..npref[i]), a[i] = rank(i,j) -> a[j] = rank(j,i) (i in AGENT, p in 1..npref[i])\",\n  \"constraints_explanation\": \"The constraints ensure that the matching is stable. The first constraint ensures that the ranking of the matched agent is within the preference list of the agent. The second constraint ensures that if agent i prefers agent j over their current match, then agent j must prefer their current match over agent i. The third constraint ensures that if agent i is matched with their most preferred agent, then that agent must also be matched with their most preferred agent.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote that the objective of the problem is to find a stable matching, rather than to minimize or maximize a specific value. The `solve satisfy` statement in the Minizinc model indicates that the goal is to find a solution that satisfies all the constraints, rather than to optimize a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "simple-prod-planning": {"__data__": {"id_": "simple-prod-planning", "embedding": null, "metadata": {"problem_family": "production_planning", "model_name": "simple-prod-planning", "source_code": "% Number of different products\nint: nproducts; \nset of int: Products = 1..nproducts;  \n\n%profit per unit for each product\narray[Products] of int: profit;\narray[Products] of string: pname; \n\n%Number of resources\nint: nresources; \nset of int: Resources = 1..nresources; \n\n%amount of each resource available\narray[Resources] of int: capacity; \narray[Resources] of string: rname;\n\n%units of each resource required to produce 1 unit of product\narray[Products, Resources] of int: consumption; \nconstraint assert(forall (r in Resources, p in Products) \n           (consumption[p,r] >= 0), \"Error: negative consumption\");\n\n% bound on number of Products\nint: mproducts = max (p in Products) \n                     (min (r in Resources where consumption[p,r] > 0) \n                          (capacity[r] div consumption[p,r]));\n\n% Variables: how much should we make of each product\narray[Products] of var 0..mproducts: produce;\narray[Resources] of var 0..max(capacity): used;\n\n% Production cannot use more than the available Resources:\nconstraint forall (r in Resources) (     \n      used[r] = sum (p in Products)(consumption[p, r] * produce[p]) \n      /\\ used[r] <= capacity[r]\n);    \n\n% Maximize profit\nsolve maximize sum (p in Products) (profit[p]*produce[p]);\n\noutput [ show(pname[p]) ++ \" = \" ++ show(produce[p]) ++ \";\\n\" |\n         p in Products ] ++\n       [ show(rname[r]) ++ \" = \" ++ show(used[r]) ++ \";\\n\" |\n         r in Resources ];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale music festival with 5 stages, each featuring a different genre of music. I have a budget of $100,000 to allocate to the stages, and I want to maximize the overall attendance. Each stage has a different capacity, and I have estimates of the attendance for each genre. However, I also need to consider the resources required for each stage, such as sound equipment, lighting, and security. How can I allocate my budget to the stages to maximize attendance while ensuring that I have enough resources for each stage? The attendance estimates are: Stage 1 (Rock) - 5000, Stage 2 (Pop) - 3000, Stage 3 (Hip-Hop) - 4000, Stage 4 (Electronic) - 2000, Stage 5 (Folk) - 1000. The resource requirements are: Stage 1 - 10 sound engineers, 5 lighting technicians, 20 security personnel, Stage 2 - 8 sound engineers, 4 lighting technicians, 15 security personnel, Stage 3 - 12 sound engineers, 6 lighting technicians, 25 security personnel, Stage 4 - 6 sound engineers, 3 lighting technicians, 10 security personnel, Stage 5 - 4 sound engineers, 2 lighting technicians, 5 security personnel. The available resources are: 50 sound engineers, 20 lighting technicians, 100 security personnel.\",\n\n  \"question2\": \"I want to make some crafts to sell at a market. I have some materials like paper, glue, and scissors. I want to make as much money as possible, but I don't have a lot of time. Some crafts take longer to make than others, and some use more materials. How can I decide which crafts to make to get the most money? I have 10 hours to make crafts, and I can make: Craft A (takes 1 hour, uses 2 paper, 1 glue, sells for $5), Craft B (takes 2 hours, uses 3 paper, 2 glue, sells for $10), Craft C (takes 3 hours, uses 1 paper, 1 glue, sells for $8). I have 20 paper, 10 glue, and unlimited scissors.\",\n\n  \"question3\": \"I'm planning a birthday party for my friend, and I want to make it the best party ever! I have a budget of $50 to spend on games and activities. I want to make sure that everyone has fun, but I also want to make sure that we don't run out of supplies. Some games use more supplies than others, and some are more fun than others. How can I decide which games to play to make sure everyone has the most fun? I can play: Game A (uses 2 balls, 1 balloon, is 8/10 fun), Game B (uses 1 ball, 2 balloons, is 9/10 fun), Game C (uses 1 ball, 1 balloon, is 7/10 fun). I have 5 balls and 5 balloons.\",\n\n  \"question4\": \"I have 3 machines that can make 3 different products. Each machine can only make one product at a time. How can I allocate the machines to maximize production? Machine 1 can make 10 units of Product A or 5 units of Product B. Machine 2 can make 8 units of Product A or 6 units of Product C. Machine 3 can make 12 units of Product B or 4 units of Product C. Product A sells for $10, Product B sells for $8, and Product C sells for $12.\",\n\n  \"question5\": \"I'm the manager of a large hospital, and I need to allocate resources to different departments. I have a budget of $1 million to allocate to the departments, and I want to maximize the overall patient satisfaction. Each department has a different capacity, and I have estimates of the patient satisfaction for each department. However, I also need to consider the resources required for each department, such as doctors, nurses, and equipment. How can I allocate my budget to the departments to maximize patient satisfaction while ensuring that I have enough resources for each department? The patient satisfaction estimates are: Department 1 (Emergency) - 80%, Department 2 (Surgery) - 90%, Department 3 (Pediatrics) - 85%, Department 4 (ICU) - 95%, Department 5 (Rehabilitation) - 80%. The resource requirements are: Department 1 - 10 doctors, 20 nurses, 5 equipment, Department 2 - 12 doctors, 25 nurses, 10 equipment, Department 3 - 8 doctors, 15 nurses, 3 equipment, Department 4 - 15 doctors, 30 nurses, 12 equipment, Department 5 - 6 doctors, 10 nurses, 2 equipment. The available resources are: 50 doctors, 100 nurses, 20 equipment. Additionally, I have some constraints: Department 1 must have at least 5 doctors, Department 2 must have at least 10 nurses, Department 3 must have at least 2 equipment, Department 4 must have at least 8 doctors, Department 5 must have at least 1 equipment.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Resource Allocation Problem\",\n  \"description\": \"The Resource Allocation Problem is a classic problem in Operations Research and Constraint Programming. It involves allocating limited resources to different products in order to maximize profit. Each product requires a certain amount of each resource to be produced, and the goal is to determine the optimal production levels for each product given the available resources.\",\n  \"variables\": \"produce[p] (p in Products), used[r] (r in Resources)\",\n  \"variables_explanation\": \"The decision variables are produce[p], which represents the number of units of product p to produce, and used[r], which represents the amount of resource r used. Both variables are non-negative integers.\",\n  \"constraints\": \"consumption[p,r] >= 0 (p in Products, r in Resources), used[r] = sum(p in Products)(consumption[p, r] * produce[p]) (r in Resources), used[r] <= capacity[r] (r in Resources)\",\n  \"constraints_explanation\": \"The constraints ensure that the consumption of each resource is non-negative, that the amount of each resource used is equal to the sum of the consumption of each product, and that the amount of each resource used does not exceed the available capacity.\",\n  \"objective\": \"maximize sum(p in Products)(profit[p]*produce[p])\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "missingsolution": {"__data__": {"id_": "missingsolution", "embedding": null, "metadata": {"problem_family": "missingsolution", "model_name": "missingsolution", "source_code": "% Missing Solutions\nint: n; % no of people\nset of int: PERSON = 1..n;\nint: male = 1; int: female = 2;\nset of int: GENDER = male..female;\narray[PERSON] of GENDER: gender;\narray[PERSON] of int: age;\n\narray[1..n] of var PERSON: order;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(order);\n\n% males and females alternate\nconstraint forall(i in 1..n)\n                 (i mod 2 = 0 <-> gender[order[i]] = female);\n\n% age does not grow bu more than 10\nconstraint forall(i in 1..n-1)\n                 (age[order[i+1]] - age[order[i]] <= 10);\n\nsolve satisfy;\n\noutput [ show(order), \"\\n\"] ++\n       [\"[\"] ++ [ show(age[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                | i in 1..n ] ++\n       [\"[\"] ++ [ show(gender[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                 | i in 1..n ];\n\n\n%n = 6;\n%gender = [male,male,male,female,female,female];\n%age = [13, 25, 34, 40, 16, 13];\n\nn = 5;\ngender = [male,male,female,female,female];\nage = [13,25,34,40,16];\n\n%order = [4,2,3,1,5];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm organizing a conference with 10 speakers, and I want to ensure that the speakers from different companies alternate in the schedule. Additionally, I want to minimize the difference in speaking experience between consecutive speakers. Can I find an optimal arrangement that satisfies these constraints?\",\n  \"question2\": \"I'm planning a party with my friends, and I want to make sure that the guys and girls take turns dancing. Also, I don't want anyone to feel left out because they're too old or too young. Is there a way to arrange the dance order so that everyone has fun?\",\n  \"question3\": \"I'm in charge of planning the school's talent show, and I want to make sure that the acts are in a cool order. I want the boys and girls to take turns performing, and I don't want anyone to feel weird because they're too old or too young. Can you help me figure out the best order for the acts?\",\n  \"question4\": \"Alternate men and women in a line, with age gaps no more than 10 years. Possible?\",\n  \"question5\": \"I'm the manager of a large retail store, and I'm responsible for scheduling the employees for the holiday season. We have 20 employees, and I want to ensure that the schedule is fair and efficient. I want to alternate between male and female employees on each shift, and I also want to minimize the difference in seniority between consecutive employees on the same shift. Additionally, I have to consider the fact that some employees have requested specific days off, and I need to accommodate those requests. Can I find a schedule that satisfies all these constraints and ensures a smooth operation during the holiday season? The employees' ages are: 25, 30, 35, 20, 40, 45, 50, 55, 60, 28, 32, 38, 42, 48, 52, 58, 22, 26, 34, 36. The employees' genders are: male, female, male, female, male, female, male, female, male, female, male, female, male, female, male, female, male, female, male, female. The requested days off are: employee 1: December 25, employee 5: January 1, employee 10: December 31.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Alternating Males and Females with Age Constraints\",\n  \"description\": \"This problem involves arranging a group of people in a line such that males and females alternate, and the age difference between consecutive people does not exceed 10 years. The problem is a classic example of a constraint satisfaction problem, where the goal is to find a feasible solution that satisfies all the given constraints.\",\n  \"variables\": \"order: {1, 2, ..., n} -> {1, 2, ..., n}\",\n  \"variables_explanation\": \"The decision variable 'order' represents a permutation of the people, where 'order[i]' is the position of person 'i' in the line.\",\n  \"constraints\": \"alldifferent(order), (i mod 2 = 0 <-> gender[order[i]] = female), (age[order[i+1]] - age[order[i]] <= 10)\",\n  \"constraints_explanation\": \"The constraints are: (1) 'alldifferent(order)': all people must be in different positions in the line; (2) '(i mod 2 = 0 <-> gender[order[i]] = female)': males and females must alternate in the line; and (3) '(age[order[i+1]] - age[order[i]] <= 10)': the age difference between consecutive people must not exceed 10 years.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote that the objective is \"satisfy\" because this is a constraint satisfaction problem, where the goal is to find a feasible solution that satisfies all the given constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "knapsack01": {"__data__": {"id_": "knapsack01", "embedding": null, "metadata": {"problem_family": "knapsack", "model_name": "knapsack01", "source_code": "int: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\narray[1..n] of var 0..1: x; \n\nconstraint sum(i in 1..n)(size[i] * x[i]) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * x[i]);\n\noutput [\"x = \", show(x), \"\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 10 potential acts, each with a specific sound system requirement and a guaranteed audience draw. The sound system requirements range from 100 to 500 watts, and the audience draw ranges from 100 to 1000 people. The festival has a limited power capacity of 2000 watts. How can I select the acts to maximize the total audience draw while staying within the power capacity?\",\n  \"question2\": \"I want to pack a suitcase for a trip, but it has a weight limit. I have a bunch of clothes and shoes with different weights and importance levels. How can I choose what to pack to make sure I don't go over the weight limit, but still bring the most important things?\",\n  \"question3\": \"I'm planning a school project where I need to choose which books to read from a list of 10. Each book has a certain number of pages and a certain level of interest to me. The project requires me to read a total of 500 pages, but I want to read the most interesting books. How can I choose the books to read to maximize my interest while staying within the page limit?\",\n  \"question4\": \"I have 5 items to pack in a bag with a 10kg limit. Each item weighs 1-5kg and has a value of 1-5. What items should I pack to maximize value?\",\n  \"question5\": \"I'm a curator at a museum, and I'm planning a new exhibit on ancient civilizations. I have a list of 15 artifacts, each with a specific size and historical significance. The exhibit hall has a limited floor space of 500 square feet, and I want to showcase the most historically significant artifacts. However, some artifacts are too large to be displayed together, and some require special climate control. How can I select the artifacts to display to maximize the historical significance of the exhibit while staying within the space and climate control constraints? Additionally, I want to ensure that at least 3 artifacts from each of the 5 ancient civilizations are displayed, and that no more than 2 artifacts from the same civilization are displayed together.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. It involves finding the optimal subset of items to include in a knapsack of limited capacity, such that the total value of the items is maximized. Each item has a weight and a value, and the knapsack has a maximum capacity. The problem is called 0/1 because each item can either be included (1) or excluded (0) from the knapsack.\",\n  \"variables\": \"x_i, i = 1..n, where x_i \u2208 {0, 1}\", \n  \"variables_explanation\": \"The decision variables x_i represent whether item i is included (x_i = 1) or excluded (x_i = 0) from the knapsack.\",\n  \"constraints\": \"\u2211_{i=1}^{n} size_i * x_i \u2264 capacity\",\n  \"constraints_explanation\": \"The constraint represents the capacity constraint of the knapsack. It ensures that the total weight of the items included in the knapsack does not exceed the maximum capacity.\",\n  \"objective\": \"maximize \u2211_{i=1}^{n} profit_i * x_i\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "submultisetsum": {"__data__": {"id_": "submultisetsum", "embedding": null, "metadata": {"problem_family": "submultisetsum", "model_name": "submultisetsum", "source_code": "% subsetsum problem\narray[int] of int: number;\nint: target;\n\nset of int: NUMBER = index_set(number);\nvar set of NUMBER: selected;\n\nconstraint sum(i in selected)\n              (number[i]) = target;\nsolve satisfy;\n\noutput [show(selected)];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 10 bands, each with a different performance fee. The fees are: 1000, 800, 1200, 900, 1100, 1300, 1000, 850, 1050, 1250. I have a budget of 9000. Which bands should I select to maximize the number of performances while staying within my budget?\",\n  \"question2\": \"I want to buy some video games for my console, but I only have 100 dollars to spend. The prices of the games I want are: 20, 30, 40, 25, 35, 45, 50. Can you help me choose which games to buy so I don't go over my budget?\",\n  \"question3\": \"I'm planning a birthday party for my friend and I want to buy some toys for the goodie bags. I have 50 dollars to spend and I want to buy toys that cost: 5, 3, 4, 2, 6, 7 dollars. Can you help me choose which toys to buy so I can stay within my budget and make sure everyone gets a toy?\",\n  \"question4\": \"I have 20 dollars to spend on snacks at the movies. The prices are: 5, 3, 4, 2 dollars. What snacks can I buy?\",\n  \"question5\": \"I'm a project manager at a construction company and I need to allocate resources to different tasks. I have a team of 10 workers with different skill levels and hourly wages: 50, 40, 60, 45, 55, 65, 50, 42, 58, 62 dollars. Each task requires a certain number of workers and has a specific deadline. The tasks are: Task A (requires 3 workers, deadline in 2 days), Task B (requires 2 workers, deadline in 3 days), Task C (requires 4 workers, deadline in 1 day). My budget for labor costs is 1000 dollars per day. Which tasks should I prioritize and which workers should I assign to each task to minimize labor costs while meeting the deadlines?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Subset Sum Problem\",\n  \"description\": \"The Subset Sum Problem is a classic problem in computer science and operations research that involves finding a subset of a given set of integers that sums up to a target value. It is a well-known NP-complete problem, which means that the running time of traditional algorithms increases rapidly as the size of the input increases.\",\n  \"variables\": \"S (a subset of the set of integers {1, 2, ..., n})\",\n  \"variables_explanation\": \"S is the decision variable representing the subset of integers that sums up to the target value. It is a set of indices of the input array 'number' that are selected to be part of the subset.\",\n  \"constraints\": \"\u2211(i in S) number[i] = target\",\n  \"constraints_explanation\": \"The constraint states that the sum of the integers in the selected subset S must be equal to the target value. This is the only constraint in the problem, and it ensures that the solution is a subset of the input integers that sums up to the target value.\",\n  \"objective\": \"satisfy (find a feasible solution)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "missing_solution": {"__data__": {"id_": "missing_solution", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "missing_solution", "source_code": "% Missing Solutions\nint: n; % no of people\nset of int: PERSON = 1..n;\nint: male = 1; int: female = 2;\nset of int: GENDER = male..female;\narray[PERSON] of GENDER: gender;\narray[PERSON] of int: age;\n\narray[1..n] of var PERSON: order;\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(order);\n\n% males and females alternate\nconstraint forall(i in 1..n)\n                 (i mod 2 = 0 <-> gender[order[i]] = female);\n\n% age does not grow bu more than 10\nconstraint forall(i in 1..n-1)\n                 (age[order[i+1]] - age[order[i]] <= 10);\n\nsolve satisfy;\n\noutput [ show(order), \"\\n\"] ++\n       [\"[\"] ++ [ show(age[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                | i in 1..n ] ++\n       [\"[\"] ++ [ show(gender[order[i]]) ++ if i < n then \", \" else \"]\\n\" endif\n                 | i in 1..n ];\n\n\n%n = 6;\n%gender = [male,male,male,female,female,female];\n%age = [13, 25, 34, 40, 16, 13];\n\nn = 5;\ngender = [male,male,female,female,female];\nage = [13,25,34,40,16];\n\n%order = [4,2,3,1,5];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm organizing a conference with 10 speakers, and I want to ensure that the presentation order is optimal. The speakers have different areas of expertise (male: technical, female: non-technical) and ages (25-50). I want to alternate between technical and non-technical talks and ensure that the age difference between consecutive speakers does not exceed 10 years. Can you help me find the best order for the speakers?\",\n  \"question2\": \"I'm planning a party with my friends, and we want to take a group photo. We have 8 friends, and we want to stand in a line with the guys and girls alternating. Some of my friends are older than others, and we don't want anyone to be standing next to someone who is more than 10 years older or younger. Can you help us figure out the best order to stand in?\",\n  \"question3\": \"I'm in charge of planning the school play, and we have 12 kids who want to be in the play. We want to make sure that the boys and girls are standing in a line, taking turns, and that the kids who are older aren't standing next to kids who are way younger. Can you help us make a list of who should stand where?\",\n  \"question4\": \"Alternate men and women in a line, ages 20-40, max 10-year age gap between neighbors.\",\n  \"question5\": \"I'm the event coordinator for a large music festival, and we're expecting around 15,000 attendees. We have 20 different food vendors who will be set up along the festival grounds, and we want to make sure that the vendors are arranged in a way that is appealing to our attendees. We have a mix of male and female-owned vendors, and we want to alternate between the two. Additionally, we have vendors who specialize in different types of cuisine, and we want to make sure that the age range of the vendors (i.e., how long they've been in business) doesn't vary too much between neighboring vendors. Specifically, we don't want any vendor to be next to another vendor who has been in business for more than 10 years longer or shorter than them. We have the following vendors: 5 male-owned vendors who have been in business for 5, 10, 15, 20, and 25 years, and 15 female-owned vendors who have been in business for 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, and 45 years. Can you help us determine the optimal arrangement of vendors to ensure a pleasant and diverse experience for our attendees?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Alternating Gender Lineup Problem\",\n  \"description\": \"The Alternating Gender Lineup Problem is a classic constraint programming problem. The problem involves arranging a group of people in a line such that males and females alternate, and the age difference between consecutive people does not exceed 10 years. The goal is to find a valid arrangement that satisfies these constraints.\",\n  \"variables\": \"order: {1, 2, ..., n} -> {1, 2, ..., n}\",\n  \"variables_explanation\": \"The decision variable 'order' represents the arrangement of people in the line. It is a permutation of the set of people, where 'order[i]' is the person at position 'i' in the line.\",\n  \"constraints\": \"alldifferent(order), (i mod 2 = 0 <-> gender[order[i]] = female), (age[order[i+1]] - age[order[i]] <= 10)\",\n  \"constraints_explanation\": \"The constraints are: (1) 'alldifferent(order)': all people must be in a different position in the line, (2) '(i mod 2 = 0 <-> gender[order[i]] = female)': males and females must alternate in the line, and (3) '(age[order[i+1]] - age[order[i]] <= 10)': the age difference between consecutive people must not exceed 10 years.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening8": {"__data__": {"id_": "flattening8", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening8", "source_code": "var -2..2: x; var -1..2: y; \nvar -2..2: z; var -1..2: u; var 0..3: t;\nconstraint x > 0 -> bool2int(y > 0 /\\ z > 0) + t >= u;\n\nsolve satisfy; ", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has 5 trucks with different capacities (2, 3, 4, 5, and 6 tons) and 4 warehouses with different storage limits (1, 2, 3, and 4 tons). The company wants to transport goods from the warehouses to a central hub, but there's a constraint: if a truck is used to transport goods from a warehouse, the total capacity of the truck and the storage limit of the warehouse must be greater than or equal to the amount of goods being transported. How can the company satisfy this constraint and transport the goods efficiently?\",\n\n  \"question2\": \"I'm planning a party and I want to make sure my guests have enough food and drinks. I have 5 types of snacks (chips, popcorn, etc.) and 4 types of drinks (soda, juice, etc.). Some snacks and drinks go well together, but I want to make sure that if I serve a certain snack, I also serve the right drinks to go with it. How can I make sure I have the right combination of snacks and drinks for my party?\",\n\n  \"question3\": \"Imagine you're playing a game where you have 5 characters with different powers (super strength, super speed, etc.) and 4 levels with different obstacles (laser beams, pitfalls, etc.). If you choose a character to play a level, you need to make sure that the character's powers and the level's obstacles are compatible. For example, if a character has super strength, they can overcome certain obstacles, but if they don't have super speed, they might not be able to avoid others. How can you choose the right character for each level and make sure they can overcome the obstacles?\",\n\n  \"question4\": \"Can I have 3 friends over for dinner if I have 2 tables with 2 chairs each and 1 table with 3 chairs, but only if I invite friends who like the same food?\",\n\n  \"question5\": \"A university is planning to offer 5 new courses (math, science, history, etc.) and has 4 professors with different areas of expertise. The university wants to assign professors to courses, but there's a constraint: if a professor is assigned to a course, the professor's expertise and the course's requirements must be compatible. For example, a math professor can teach a math course, but a history professor might not be able to teach a science course. Additionally, the university wants to make sure that each course has at least 2 professors assigned to it, and that each professor teaches at least 1 course. The university also has a limited budget for hiring professors, so they want to minimize the number of professors they need to hire. How can the university satisfy these constraints and assign professors to courses efficiently, given the following specific requirements: Course 1 requires 2 professors with math expertise, Course 2 requires 1 professor with science expertise, Course 3 requires 2 professors with history expertise, Course 4 requires 1 professor with math expertise, and Course 5 requires 1 professor with science expertise? The university has 4 professors available: Professor A has math expertise, Professor B has science expertise, Professor C has history expertise, and Professor D has both math and science expertise.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Conditional Constraint Satisfaction Problem\",\n  \"description\": \"This problem is a conditional constraint satisfaction problem, where the goal is to find a solution that satisfies a set of constraints. The problem involves five decision variables and a single constraint that involves a conditional statement.\",\n  \"variables\": \"x \u2208 [-2, 2], y \u2208 [-1, 2], z \u2208 [-2, 2], u \u2208 [-1, 2], t \u2208 [0, 3]\",\n  \"variables_explanation\": \"The variables x, y, z, and u are integer decision variables with different domains, while t is a non-negative integer variable. The variables x, y, and z are likely related to some conditions or states, while u and t are related to the satisfaction of these conditions.\",\n  \"constraints\": \"x > 0 \u2192 (y > 0 \u2227 z > 0) + t \u2265 u\",\n  \"constraints_explanation\": \"The constraint is a conditional constraint that states: if x is greater than 0, then the number of variables y and z that are greater than 0, plus the value of t, must be greater than or equal to u. This constraint is a complex logical constraint that involves a conditional statement and a combination of logical and arithmetic operations.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote that the objective of the problem is to satisfy the constraints, rather than to minimize or maximize a specific value. This is because the problem is a constraint satisfaction problem, where the goal is to find a solution that satisfies all the constraints, rather than to optimize a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "aust_color": {"__data__": {"id_": "aust_color", "embedding": null, "metadata": {"problem_family": "aust_color", "model_name": "aust_color", "source_code": "% Colouring Australia using 4 colors \nint: nc = 4;\n\nvar 1..nc: wa;    var 1..nc: nt;     \nvar 1..nc: sa;    var 1..nc: q;     \nvar 1..nc: nsw;   var 1..nc: v;\nvar 1..nc: t;\n\nconstraint wa != nt;\nconstraint wa != sa;\nconstraint nt != sa;\nconstraint nt != q;\nconstraint sa != q;\nconstraint sa != nsw;\nconstraint sa != v;\nconstraint q != nsw;\nconstraint nsw != v;\n\nsolve satisfy;\n\noutput [\"wa=\\(wa)\",  \n   \" nt=\\(nt)\", \n   \" sa=\\(sa)\\n\",\n \"q=\\(q)\", \n \" nsw=\\(nsw)\", \n \" v=\\(v)\\n\",\n \"t=\\(t)\\n\"];", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale logistics operation across seven major hubs in Australia. Each hub needs to be assigned a specific frequency band for communication, and I have four available bands. However, due to interference concerns, certain hubs cannot share the same band. Specifically, hubs 1 and 2, 1 and 3, 2 and 3, 2 and 4, 3 and 4, 3 and 5, 3 and 6, 4 and 5, and 5 and 6 cannot use the same band. Can I find a feasible assignment of frequency bands to hubs that satisfies these constraints?\",\n\n  \"question2\": \"I'm trying to plan a big party with seven different groups of friends. I want to give each group a different colored balloon, but some groups can't be near each other because they don't get along. Can you help me figure out which color balloon to give to each group so that the groups that don't get along aren't near each other?\",\n\n  \"question3\": \"Imagine you're planning a big school festival with seven different clubs. Each club needs to have a different colored tablecloth, but some clubs can't be near each other because they're rivals. For example, the soccer team and the basketball team can't be near each other. Can you help me figure out which color tablecloth to give to each club so that the rival clubs aren't near each other?\",\n\n  \"question4\": \"Seven friends want to wear different colored shirts, but some friends can't wear the same color as others. Can you find a way to assign colors to each friend so that no two friends who can't wear the same color are wearing the same color?\",\n\n  \"question5\": \"I'm the manager of a large retail chain with seven stores across Australia. Each store needs to be assigned a specific marketing campaign, and I have four available campaigns. However, due to branding concerns, certain stores cannot run the same campaign. Specifically, stores 1 and 2, 1 and 3, 2 and 3, 2 and 4, 3 and 4, 3 and 5, 3 and 6, 4 and 5, and 5 and 6 cannot run the same campaign. Additionally, store 7 has a specific requirement that it must run a campaign that is different from store 5. Can I find a feasible assignment of marketing campaigns to stores that satisfies these constraints and also meets the specific requirement of store 7? Furthermore, I want to prioritize the assignment of campaigns to stores based on their sales performance, with the top-performing store getting the most desirable campaign. Can you help me find a solution that balances these competing objectives?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Graph Colouring Problem\",\n  \"description\": \"The Graph Colouring Problem is a classic problem in constraint programming and graph theory. It involves assigning colours to the vertices of a graph such that no two adjacent vertices have the same colour. In this specific model, the problem is applied to the map of Australia, where each state is represented as a vertex, and two vertices are adjacent if the corresponding states share a border. The goal is to find a colouring of the map using a minimum number of colours.\",\n  \"variables\": \"wa \u2208 {1, ..., nc}, nt \u2208 {1, ..., nc}, sa \u2208 {1, ..., nc}, q \u2208 {1, ..., nc}, nsw \u2208 {1, ..., nc}, v \u2208 {1, ..., nc}, t \u2208 {1, ..., nc}. These variables represent the colours assigned to each state in Australia: Western Australia (wa), Northern Territory (nt), South Australia (sa), Queensland (q), New South Wales (nsw), Victoria (v), and Tasmania (t).\",\n  \"constraints\": \"wa \u2260 nt, wa \u2260 sa, nt \u2260 sa, nt \u2260 q, sa \u2260 q, sa \u2260 nsw, sa \u2260 v, q \u2260 nsw, nsw \u2260 v. These constraints represent the adjacency relationships between the states in Australia, ensuring that no two adjacent states have the same colour.\",\n  \"objective\": \"satisfy. The objective of this problem is not to minimize or maximize a specific value, but rather to find a feasible solution that satisfies all the constraints, i.e., a colouring of the map using 4 colours.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "queens": {"__data__": {"id_": "queens", "embedding": null, "metadata": {"problem_family": "queens", "model_name": "queens", "source_code": "\nint: n;                                 % The number of queens.\n\narray [1..n] of var 1..n: q;\n\ninclude \"alldifferent.mzn\";\n\nconstraint alldifferent(q);\nconstraint alldifferent(i in 1..n)(q[i] + i);\nconstraint alldifferent(i in 1..n)(q[i] - i);\n\n\nsolve \n%      :: int_search(q, input_order, indomain_min, complete) \n%      :: int_search(q, first_fail, indomain_min, complete) \n%      :: int_search(q, smallest, indomain_min, complete)\n%      :: int_search(q, largest, indomain_min, complete)\n%      :: int_search(q, input_order, indomain_max, complete) \n%      :: int_search(q, first_fail, indomain_max, complete) \n%      :: int_search(q, smallest, indomain_max, complete)\n%      :: int_search(q, largest, indomain_max, complete)\n%      :: int_search(q, input_order, indomain_median, complete) \n%      :: int_search(q, first_fail, indomain_median, complete) \n%      :: int_search(q, smallest, indomain_median, complete)\n%      :: int_search(q, largest, indomain_median, complete)\n%      :: int_search(q, input_order, indomain_random, complete) \n%      :: int_search(q, first_fail, indomain_random, complete) \n%      :: int_search(q, smallest, indomain_random, complete)\n%      :: int_search(q, largest, indomain_random, complete)\n      satisfy;\n\n%output\t\n%%\t[\tif fix(q[i]) = j then \"Q \" else \". \" endif ++\n%\t \tif j = n then \"\\n\" else \"\" endif\n%\t|\ti, j in 1..n\n%\t];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a large-scale solar farm with 8 rows of panels. Each row can have a different number of panels, but no two rows can have the same number of panels. Additionally, the panels in each row must be spaced in such a way that no two panels in adjacent rows are directly above or below each other. How can I arrange the panels to maximize energy production while meeting these constraints?\",\n\n  \"question2\": \"I have 8 kids and I want to put them in different seats at a dinner table. I don't want any two kids to sit in the same row or diagonal as each other. Can you help me figure out where to put them?\",\n\n  \"question3\": \"Imagine you're the captain of a spaceship with 8 crew members. You need to assign each crew member to a different seat on the ship, but there are some rules. No two crew members can sit in the same row or diagonal as each other. Also, the seats are numbered from 1 to 8, and each crew member has a favorite seat number. Can you help me assign the crew members to seats so that everyone is happy and safe?\",\n\n  \"question4\": \"8 people, 8 seats. No two people can sit in the same row or diagonal. How do I seat them?\",\n\n  \"question5\": \"I'm the event planner for a large conference with 8 keynote speakers. Each speaker has a preferred time slot and a preferred room, but there are some constraints. No two speakers can present in the same time slot or in rooms that are directly above or below each other. Additionally, the rooms are arranged in a grid, and each room has a limited capacity. The speakers also have different levels of seniority, and we want to ensure that the most senior speakers are assigned to the most desirable time slots and rooms. We also want to minimize the number of room changes required between presentations. Can you help me create a schedule that meets all these constraints and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"N-Queens Problem\",\n  \"description\": \"The N-Queens problem is a classic problem in constraint programming and computer science. The problem is to place N queens on an NxN chessboard such that no two queens attack each other. A queen can attack another queen if they are in the same row, column, or diagonal.\",\n  \"variables\": \"q = [q_1, q_2, ..., q_n], where q_i is the column in which the i-th queen is placed\",\n  \"constraints\": \"alldifferent(q), alldifferent(q_i + i), alldifferent(q_i - i), where i = 1, 2, ..., n. The first constraint ensures that no two queens are in the same column. The second and third constraints ensure that no two queens are in the same diagonal.\",\n  \"objective\": \"satisfy (i.e., find a feasible solution)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "setselect": {"__data__": {"id_": "setselect", "embedding": null, "metadata": {"problem_family": "setselect", "model_name": "setselect", "source_code": "% setselect\nint: n; % number of elements\nint: k; % number of subsets\narray[1..k] of set of 1..n: s;\n\nvar set of 1..n: x;\n\nconstraint forall(i in 1..k)(card(x intersect s[i]) <= 1);\n\nsolve maximize sum(i in x)(i);\n\noutput [\"x = \", show(x), \";\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a music festival organizer and I have 20 stages with 50 bands scheduled to perform. Each band has a preferred set of stages they'd like to play on, but due to logistical constraints, I can only allow each band to play on at most one stage. How can I maximize the total 'coolness' of the bands performing, where each band's coolness is represented by a unique number from 1 to 50?\",\n\n  \"question2\": \"I have a bunch of different groups of friends and we all like to hang out together, but some of my friends don't get along with each other. I want to invite a group of friends to a party, but I don't want to invite anyone who doesn't get along with someone else I've already invited. How can I invite the most friends possible without any drama?\",\n\n  \"question3\": \"I'm planning a big birthday party for my little brother and I want to invite all of his friends from school. But some of his friends are in different classes and they don't all get along. I want to make sure that I don't invite too many kids from the same class, so they don't fight. How can I invite the most kids possible without any fights?\",\n\n  \"question4\": \"I have 10 groups of people and each group has a preferred set of 5 restaurants. How can I choose a group of people to dine together at a single restaurant without any group having more than one person at the restaurant?\",\n\n  \"question5\": \"I'm a curator at a large art museum and I'm responsible for organizing a new exhibit featuring the works of 50 different artists. Each artist has a preferred set of 10 galleries where they'd like their work to be displayed, but due to space constraints, I can only display each artist's work in at most one gallery. Additionally, some galleries have specific themes or styles that may not be suitable for certain artists' work. How can I maximize the total 'impact' of the exhibit, where each artist's impact is represented by a unique number from 1 to 50, while also ensuring that the exhibit is well-balanced and visually appealing? For example, I want to make sure that no more than 3 artists from the same style are displayed in the same gallery, and that each gallery has a mix of artists from different styles. I also want to make sure that the exhibit is accessible to visitors with disabilities, so I need to ensure that at least 2 galleries are wheelchair accessible. Can you help me come up with a plan for the exhibit that meets all of these constraints and maximizes the impact of the exhibit?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Set Packing Problem\",\n  \"description\": \"The Set Packing Problem is a classic problem in combinatorial optimization and constraint programming. Given a collection of sets, the goal is to find the largest subset of these sets such that no two sets in the subset have any elements in common. In this specific model, the problem is formulated as a maximization problem, where the objective is to find the subset of elements that maximizes the sum of their indices.\",\n  \"variables\": \"x: a set of elements from 1 to n. This is the decision variable that represents the subset of elements to be selected.\",\n  \"constraints\": \"\u2200i \u2208 1..k (|x \u2229 s[i]| \u2264 1): This constraint ensures that the selected subset x intersects with each set s[i] at most once. In other words, for each set s[i], at most one element of s[i] can be included in the selected subset x.\",\n  \"objective\": \"maximize \u2211(i \u2208 x) i: The objective is to maximize the sum of the indices of the elements in the selected subset x.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "assign_inverse": {"__data__": {"id_": "assign_inverse", "embedding": null, "metadata": {"problem_family": "search", "model_name": "assign_inverse", "source_code": "int: n;\nset of int: DOM = 1..n;\nint: m;\nset of int: COD = 1..m;\narray[DOM,COD] of int: profit;\n\narray[DOM] of var COD: task;\narray[COD] of var DOM: worker;\n\ninclude \"inverse.mzn\";\nconstraint inverse(task,worker);\n\n\nsolve maximize sum(w in COD)\n            (profit[w,task[w]]);\n\noutput [show(task)];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm managing a team of 10 data scientists and 10 machine learning projects. Each project has a different priority level and each data scientist has a different level of expertise in various machine learning techniques. I want to assign each project to a data scientist in a way that maximizes the overall priority level of the projects while ensuring that each data scientist is assigned to a project that matches their expertise. The priority levels of the projects are: [3, 5, 2, 7, 1, 9, 4, 6, 8, 10] and the expertise levels of the data scientists are: [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.6]. How can I make the optimal assignment?\",\n  \"question2\": \"I have 5 kids and 5 different activities to do after school. Each kid likes some activities more than others. How can I make sure each kid does an activity they like and no activity is done by more than one kid?\",\n  \"question3\": \"Imagine you're the manager of a theme park with 8 different rides and 8 different employees. Each ride needs one employee to operate it and each employee has a favorite ride they want to work on. However, some rides are more popular than others and you want to make sure the most popular rides are operated by the most experienced employees. How can you assign the employees to the rides in a way that makes everyone happy?\",\n  \"question4\": \"5 friends, 5 restaurants. Each friend likes some restaurants more than others. How to assign friends to restaurants to maximize happiness?\",\n  \"question5\": \"I'm the event coordinator for a large music festival with 15 different stages and 15 different sound engineers. Each stage has a different priority level based on the popularity of the bands playing on it and each sound engineer has a different level of expertise in various genres of music. I want to assign each stage to a sound engineer in a way that maximizes the overall priority level of the stages while ensuring that each sound engineer is assigned to a stage that matches their expertise. However, there are some additional constraints: stage 1 and stage 2 cannot have the same sound engineer, stage 3 requires a sound engineer with expertise in rock music, and stage 4 requires a sound engineer with expertise in electronic music. The priority levels of the stages are: [10, 8, 12, 9, 11, 7, 6, 5, 4, 3, 2, 1, 15, 14, 13] and the expertise levels of the sound engineers are: [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.6, 0.9, 0.8, 0.7, 0.6, 0.5]. How can I make the optimal assignment?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Assignment Problem\",\n  \"description\": \"The Assignment Problem is a classic problem in combinatorial optimization and operations research. It involves finding the optimal assignment of a set of workers to a set of tasks, given the profit or cost of each worker-task pair. The goal is to maximize the total profit or minimize the total cost.\",\n  \"variables\": \"task: DOM -> COD, worker: COD -> DOM. These variables represent the assignment of tasks to workers and workers to tasks, respectively. The task variable maps each task to a worker, while the worker variable maps each worker to a task.\",\n  \"constraints\": \"inverse(task, worker). This constraint ensures that the task and worker variables are inverses of each other, meaning that if task[w] = t, then worker[t] = w. This constraint ensures that each task is assigned to exactly one worker and each worker is assigned to exactly one task.\",\n  \"objective\": \"maximize sum(w in COD) (profit[w, task[w]]). The objective is to maximize the total profit, which is calculated by summing the profit of each worker-task pair.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "crazy_sets_global": {"__data__": {"id_": "crazy_sets_global", "embedding": null, "metadata": {"problem_family": "crazy_sets", "model_name": "crazy_sets_global", "source_code": "int: n; % maximum value\nset of int: NUMBER = 1..n;\nint: c; % cardinality of sets\nint: m; % number of sets\n\n\narray[1..m,1..c] of var NUMBER: x;\nconstraint forall(i in 1..m, j in 1..c-1)\n      ( x[i,j] < x[i,j+1] );\n\n\nconstraint forall(i in 1..m-1, j in 1..c)\n      ( x[i,j] < x[i+1,j] );\n\ninclude \"global_cardinality_low_up.mzn\";\nconstraint global_cardinality_low_up( [ x[i,j] | i in 1..m, j in 1..c ],\n                              [ i | i in 1..n ],\n                              [ 0 | i in 1..n ],\n                              [ 2 | i in 1..n ]);\n\n\nsolve satisfy;\n\n   output [ if j = 1 then \"{\" else \"\" endif ++\n   show(x[i,j])\n   ++ if j = c then \"}\" else \", \" endif\n   ++ if j = c /\\ i < m then \", \" else \"\" endif\n   | i in 1..m, j in 1..c ];\n   \n\nn = 10;\nc = 4;\nm = 4;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm organizing a conference with 10 speakers and 4 time slots. Each speaker can present at most twice, and I want to ensure that no two speakers present at the same time slot more than once. How can I schedule the speakers to maximize the diversity of presentations in each time slot?\",\n  \n  \"question2\": \"I have 10 friends and I want to plan a game night with 4 tables. Each table can have 4 players, and I want to make sure that no two friends play together more than once. Can you help me figure out how to seat everyone so that everyone has a good time?\",\n  \n  \"question3\": \"I'm planning a school dance and I want to make sure that everyone has a good time. I have 10 DJs and I want to schedule them to play at 4 different times. Each DJ can play at most twice, and I want to make sure that no two DJs play at the same time more than once. Can you help me make a schedule that will make everyone happy?\",\n  \n  \"question4\": \"10 people, 4 groups, no repeats. How do I assign them?\",\n  \n  \"question5\": \"I'm the manager of a large retail store with 10 employees and 4 departments. Each employee can work in at most two departments, and I want to ensure that no two employees work together in the same department more than once. Additionally, I want to make sure that each department has a diverse set of employees with different skill sets. The store is open 7 days a week, and each department needs to be staffed with 4 employees per day. I have the following employee skill sets: employee 1-3 have skills A and B, employee 4-6 have skills B and C, employee 7-9 have skills C and D, and employee 10 has skills A and D. How can I create a schedule that meets all these requirements and ensures that each department has a diverse set of employees with different skill sets?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Social Golfer Problem\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. It involves scheduling golfers into groups of a certain size, such that no two golfers play together more than once. The problem is often used as a benchmark for constraint programming systems.\",\n  \"variables\": \"x[i,j], where i in 1..m, j in 1..c. These variables represent the golfer assigned to the j-th position in the i-th group.\",\n  \"constraints\": \"x[i,j] < x[i,j+1], where i in 1..m, j in 1..c-1. This constraint ensures that the golfers in each group are assigned in increasing order. x[i,j] < x[i+1,j], where i in 1..m-1, j in 1..c. This constraint ensures that the golfers in each position across groups are assigned in increasing order. global_cardinality_low_up([x[i,j] | i in 1..m, j in 1..c], [i | i in 1..n], [0 | i in 1..n], [2 | i in 1..n]). This constraint ensures that each golfer is assigned to exactly two groups.\",\n  \"objective\": \"satisfy. The objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "doublechannel": {"__data__": {"id_": "doublechannel", "embedding": null, "metadata": {"problem_family": "doublechannel", "model_name": "doublechannel", "source_code": "% scheduling ships entering and leaving a port through k channels\nset of int: TYPE = 1..3;\nint: entering = 1;\nint: leaving  = 2;\nint: dummy = 3;\n\nint: nC; % number of channels\nset of int: CHANNEL = 1..nC;\narray[CHANNEL] of int: len;    % length in 100m units\n\nint: nS; % number of ships\nset of int: SHIP = 1..nS; % ships ENTER then LEAVE\nset of int: SHIPE = 1..nS+nC; % ships ENTER then LEAVE then nC dummy ships\n\narray[SHIP] of int: speed;   % time in minutes to traverse 100m\narray[SHIP] of int: desired; % desired time to start to enter/leave \narray[SHIP] of entering..leaving: dirn;   % entering or leaving\n\nint: leeway;  % leeway between 2 ships in 100m units\nint: maxt;    % maximum time\nset of int: TIME = 0..maxt;\n\narray[SHIPE] of var TYPE: kind = dirn ++ [ dummy | i in 1..nC];\narray[SHIPE] of var TIME:    start; % when ships enter the channel \narray[SHIPE] of var TIME:     end; % when ships leave the channel \narray[SHIPE] of var CHANNEL: channel; % which channel a ship is assigned to\n\narray[SHIP] of var SHIPE:   next;  % the next ship in the same channel (or a dummy)\n\n% dummy ships\nconstraint forall(s in nS + 1 .. nS + nC)(start[s] = maxt /\\ end[s] = maxt);\nconstraint forall(s in nS + 1 .. nS + nC)(channel[s] = s - nS);\n\n% relationships between start and ends\nconstraint forall(s in SHIP)(end[s] = start[s] + len[channel[s]]*speed[s]);\n\n\n% the next ship are all different\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(next);\n\n% no clashes in channel\nconstraint forall(s in SHIP)(if kind[s] + kind[next[s]] = entering+leaving then\n                                end[s] <= start[next[s]]\n                             else\n                                start[s] + speed[s]*leeway <= start[next[s]] /\\\n                                end[s] + speed[s]*leeway <= end[next[s]]\n                             endif);\n\n% next ship is in same channel\nconstraint forall(s in SHIP)(channel[next[s]] = channel[s]);\n\nsolve minimize sum(s in SHIP)(abs(start[s] - desired[s]));\n\noutput [ \"start = \",show(start),\n         \";\\nend = \", show(end),\n         \";\\nchannel = \", show(channel),\n         \";\\nnext = \", show(next),\n         \";\\n\" ];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company operates a network of warehouses and distribution centers. Each warehouse has a limited number of loading docks, and each dock has a specific length. Trucks arrive at the warehouses to load or unload cargo, and each truck has a desired arrival time and a specific speed. The company wants to minimize the total deviation from the desired arrival times while ensuring that trucks do not collide with each other at the docks. How can the company optimize its truck scheduling to achieve this goal?\",\n  \"question2\": \"Imagine you're planning a big party and you have a bunch of guests arriving and leaving at different times. You have a few entrances and exits, but they're not all the same size. Some guests are coming in big groups, and some are coming alone. You want to make sure that nobody runs into each other when they're arriving or leaving. How can you make a plan to make sure everything runs smoothly?\",\n  \"question3\": \"I'm planning a school event where we have to manage the arrival and departure of a lot of buses. Each bus has a specific arrival time, and we want to make sure that they don't get stuck behind each other when they're arriving or leaving. We have a few different entrances and exits, but some of them are really narrow. How can we make a schedule to make sure everything goes smoothly?\",\n  \"question4\": \"How can I schedule 10 trucks to arrive and depart from 3 loading docks without any collisions, given their desired arrival times and speeds?\",\n  \"question5\": \"A large music festival is being held on a remote island, and the organizers need to manage the arrival and departure of over 50,000 attendees via a limited number of ferry docks. Each ferry has a specific capacity and arrival time, and the attendees have different desired arrival times. The festival organizers want to minimize the total waiting time for attendees while ensuring that the ferries do not collide with each other at the docks. Additionally, the organizers need to take into account the limited parking space on the island and the need to accommodate attendees with disabilities. How can the festival organizers optimize their ferry scheduling to achieve these goals, given the following constraints: the ferry docks are 100m, 150m, and 200m long; the ferries have speeds of 5, 10, and 15 minutes per 100m; the attendees have desired arrival times between 8am and 12pm; and the festival organizers want to limit the waiting time to no more than 30 minutes per attendee?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Ship Scheduling Problem\",\n  \"description\": \"The Ship Scheduling Problem is a classic problem in constraint programming that involves scheduling ships entering and leaving a port through a limited number of channels. Each ship has a desired time to start entering or leaving the port, and the goal is to minimize the total deviation from these desired times while ensuring that the ships do not clash with each other in the channels.\",\n  \"variables\": \"kind[s], start[s], end[s], channel[s], next[s], s \u2208 SHIP\",\n  \"variables_explanation\": \"The decision variables are: kind[s] (the type of ship s, which can be entering, leaving, or dummy), start[s] (the time when ship s enters the channel), end[s] (the time when ship s leaves the channel), channel[s] (the channel assigned to ship s), and next[s] (the next ship in the same channel as ship s).\",\n  \"constraints\": \"start[s] = maxt \u2227 end[s] = maxt, s \u2208 nS + 1 .. nS + nC; channel[s] = s - nS, s \u2208 nS + 1 .. nS + nC; end[s] = start[s] + len[channel[s]]*speed[s], s \u2208 SHIP; alldifferent(next); end[s] \u2264 start[next[s]], s \u2208 SHIP \u2227 kind[s] + kind[next[s]] = entering+leaving; start[s] + speed[s]*leeway \u2264 start[next[s]] \u2227 end[s] + speed[s]*leeway \u2264 end[next[s]], s \u2208 SHIP \u2227 kind[s] + kind[next[s]] \u2260 entering+leaving; channel[next[s]] = channel[s], s \u2208 SHIP\",\n  \"constraints_explanation\": \"The constraints are: dummy ships have a fixed start and end time of maxt and are assigned to a specific channel; the end time of a ship is determined by its start time, the length of the channel, and its speed; the next ship in each channel is different; ships do not clash with each other in the channels, either by not overlapping in time or by leaving enough leeway between them; and the next ship in each channel is assigned to the same channel as the current ship.\",\n  \"objective\": \"minimize \u2211(s \u2208 SHIP) |start[s] - desired[s]|\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "rel_sem2": {"__data__": {"id_": "rel_sem2", "embedding": null, "metadata": {"problem_family": "rel_sem", "model_name": "rel_sem2", "source_code": "array[1..2] of var 0..1: x;\nvar 1..3: i;\n\nconstraint i <= 2 -> x[i] >= 1;\n\noutput [\"i  = \\(i); x = \\(x);\\n\"];\n\nsolve satisfy;", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has two warehouses (x[1] and x[2]) that can either be operational (1) or non-operational (0). The company has three transportation options (i) with different costs and capacities. If the company chooses transportation option 1 or 2, the corresponding warehouse must be operational. How can the company choose a transportation option and warehouse configuration to satisfy the operational constraints?\",\n\n  \"question2\": \"Imagine you're planning a party and you have two rooms (x[1] and x[2]) that can either be used (1) or not used (0). You have three different party themes (i) to choose from. If you choose theme 1 or 2, you need to use the corresponding room. How can you choose a party theme and room configuration that works?\",\n\n  \"question3\": \"I'm planning a sleepover with my friends and we have two different game stations (x[1] and x[2]) that can either be set up (1) or not set up (0). We have three different game options (i) to choose from. If we choose game option 1 or 2, we need to set up the corresponding game station. How can we choose a game option and game station configuration that's fun for everyone?\",\n\n  \"question4\": \"Two coffee machines (x[1] and x[2]) can be turned on (1) or off (0). If I choose coffee blend 1 or 2, the corresponding machine must be on. What's the best way to choose a coffee blend and machine configuration?\",\n\n  \"question5\": \"A university is planning to host a conference with three different keynote speakers (i) and two different auditoriums (x[1] and x[2]) that can either be reserved (1) or not reserved (0). The conference organizers have a limited budget and need to allocate resources efficiently. If they choose keynote speaker 1 or 2, they need to reserve the corresponding auditorium. Additionally, the organizers have a preference for auditorium 1, but it has a higher rental fee. They also need to consider the speakers' availability and the conference schedule. How can the university choose a keynote speaker and auditorium configuration that satisfies the constraints and minimizes costs, while also considering the organizers' preferences and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Implication Problem\",\n  \"description\": \"This problem is a simple implication problem, where the value of a variable i affects the value of another variable x. The problem is to find a solution that satisfies the given constraints.\",\n  \"variables\": \"i \u2208 {1, 2, 3}, x = (x[1], x[2]) \u2208 {0, 1}\u00b2\",\n  \"variables_explanation\": \"The variable i is an integer that can take values from 1 to 3. The variable x is an array of two binary variables, x[1] and x[2], each of which can take values 0 or 1.\",\n  \"constraints\": \"i \u2264 2 \u2192 x[i] \u2265 1\",\n  \"constraints_explanation\": \"The constraint is an implication that states if i is less than or equal to 2, then the corresponding value of x[i] must be greater than or equal to 1. In other words, if i is 1 or 2, then x[1] or x[2] must be 1, respectively.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "table_example": {"__data__": {"id_": "table_example", "embedding": null, "metadata": {"problem_family": "table_example", "model_name": "table_example", "source_code": "set of int: INDEX = 1..3;\nset of int: MODEL = 1..5;\nint: mazda6 = 1;\nint: vwbug = 2;\nint: mini = 3;\nint: porsche = 4;\nint: landrover = 5;\nset of int: YEAR = 1900..2100;\nset of int: COLOR = 1..6;\nint: red = 1;\nint: yellow = 2;\nint: black = 3;\nint: grey = 4;\nint: white = 5;\nint: blue = 6;\nset of int: DOOR = 1..7;\nset of int: PRICE = 0..100000;\n\n% cars database: MAKE * YEAR * COLOR * DOOR * PRICE\narray[INDEX,1..5] of int: \ncars = [| mazda6, 2003, red,  5, 12000\n        | vwbug,  2009, blue, 3,  8000\n        | mini,   2014, grey, 4, 10000\n        |];\n\nvar MODEL: model;\nvar YEAR:  year;\nvar COLOR: color;\nvar DOOR:  doors;\nvar int:   cost;\n\ninclude \"table.mzn\";\nconstraint table([model,year,color,doors,cost],  cars);\n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm a logistics manager for a car rental company and I need to allocate cars to customers based on their preferences. I have a database of available cars with their attributes (model, year, color, number of doors, and price). I want to find a car that matches a customer's requirements, which are: a car with at least 4 doors, a price below $15,000, and a color that is not grey. Can I find a car that satisfies these constraints?\",\n  \"question2\": \"I want to buy a new car, but I don't know what to choose. I like cars that are not too old and have a nice color. I also need a car with enough space for my family, so it should have at least 4 doors. Can you help me find a car that fits my needs?\",\n  \"question3\": \"Mom, I want a cool car for my birthday! I like cars that are blue or red and have a lot of doors. Can we find a car that is like that? And can it be a car that is not too expensive, like less than $10,000?\",\n  \"question4\": \"Find a car with 5 doors and a price below $12,000.\",\n  \"question5\": \"I'm a film producer and I'm working on a new movie that requires a specific car for one of the scenes. The car should be a model that was produced between 2000 and 2010, have a unique color (not black, white, or grey), and have exactly 3 doors. The car should also be relatively affordable, with a price below $8,000. Additionally, the car should be a model that is not too common, so it should be a model that is not a best-seller. Can you help me find a car that fits these requirements? The movie's budget is tight, so I need to find a car that meets all these constraints and is also within our budget.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Car Selection Problem\",\n  \"description\": \"This problem involves selecting a car from a database based on certain criteria. The database contains information about different car models, their year of manufacture, color, number of doors, and price. The goal is to find a car that satisfies certain constraints.\",\n  \"variables\": \"model \u2208 MODEL, year \u2208 YEAR, color \u2208 COLOR, doors \u2208 DOOR, cost \u2208 PRICE\",\n  \"variables_explanation\": \"These are the decision variables in the problem. The model variable represents the type of car, year represents the year of manufacture, color represents the color of the car, doors represents the number of doors, and cost represents the price of the car.\",\n  \"constraints\": \"table([model,year,color,doors,cost], cars)\",\n  \"constraints_explanation\": \"This constraint ensures that the selected car is present in the database. The table constraint is used to enforce this, where the selected car's attributes (model, year, color, doors, and cost) must match one of the rows in the database.\",\n  \"objective\": \"satisfy\"\n}\n\nNote: The objective of this problem is to simply find a feasible solution that satisfies the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "teamselect_advanced": {"__data__": {"id_": "teamselect_advanced", "embedding": null, "metadata": {"problem_family": "team_select", "model_name": "teamselect_advanced", "source_code": "% team select problem\n\nset of int: PLAYER = 1..11;\nset of int: GOALIE = 1..2;\nset of int: DEFENCE = 3..6;\nset of int: OFFENCE = 7..11;\narray[PLAYER] of string: name =\n  [\"Ant\",\"Bee\",\"Cip\",\"Deb\",\"Eve\",\"Fin\",\"Ged\",\"Hel\",\"Ila\",\"Jan\",\"Kim\"];\nset of int: CAPTAIN = 1..3;\nint: xavier = 1; int: yuri = 2; int: zena = 3;\narray[CAPTAIN,PLAYER] of int: value;\nvalue = [| 2, 5, 6, 8, 9, 5, 8, 7, 7, 4, 6\n         | 9, 8, 4, 7, 6, 4, 5, 3, 5, 5, 7\n         | 8, 4, 3, 3, 6, 2, 5, 5, 3, 2, 5 |];\n\nvar set of PLAYER: Xavier;\nvar set of PLAYER: Yuri;\nvar set of PLAYER: Zena;\n\npredicate correct_team(var set of PLAYER: team) = \n          card(team) = 6 /\\ \n          card(team intersect GOALIE) >= 1 /\\\n          card(team intersect DEFENCE) >= 2 /\\\n          card(team intersect OFFENCE) >= 2;\n\nconstraint correct_team(Xavier) /\\ correct_team(Yuri) /\\ correct_team(Zena);\n\nconstraint card(Xavier intersect Yuri) <= 2;\nconstraint card(Xavier intersect Zena) <= 2;\n\nvar int: obj = sum(p in Xavier)(value[xavier,p]) +\n               sum(p in Yuri)(value[yuri,p]) +\n               sum(p in Zena)(value[zena,p]);\n\nsolve maximize obj;\n\noutput [\"Xavier: \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Xavier) ] ++\n       [\"\\nYuri:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Yuri) ] ++\n       [\"\\nZena:   \"] ++\n       [ show(name[p]) ++ \" \" | p in fix(Zena) ] ++\n       [\"\\nobj = \", show(obj), \";\\n\"];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with three parallel workshops, each requiring a diverse set of 6 speakers. I have a pool of 11 potential speakers, each with a unique expertise and a score indicating their relevance to each workshop. However, I need to ensure that each workshop has at least one keynote speaker, two industry experts, and two academics. Additionally, I want to minimize the overlap between workshops to encourage attendees to explore different topics. How can I select the speakers to maximize the overall relevance score while satisfying these constraints?\",\n\n  \"question2\": \"I'm trying to plan a school project where I need to divide my class into three groups for a project. We have 11 students, and I want to make sure each group has a good mix of skills. I've given each student a score for how well they work with others, and I want to make sure each group has at least one student who is really good at working with others. I also want to make sure each group has at least two students who are good at math and at least two students who are good at writing. Can you help me figure out how to divide the students into groups so that each group is well-rounded and works well together?\",\n\n  \"question3\": \"I'm planning a big party with my friends, and we want to play a game where we divide into three teams. We have 11 friends coming, and we want to make sure each team has a good mix of people who are good at different things. We've given each friend a score for how good they are at sports, how good they are at music, and how good they are at art. We want to make sure each team has at least one person who is really good at sports, at least two people who are good at music, and at least two people who are good at art. Can you help us figure out how to divide into teams so that each team is fair and fun?\",\n\n  \"question4\": \"Divide 11 people into 3 groups of 6, with at least 1 leader, 2 tech experts, and 2 creatives in each group, while minimizing overlap and maximizing overall skill score.\",\n\n  \"question5\": \"I'm the manager of a large retail store, and I'm planning to launch a new product line with three different marketing campaigns. Each campaign requires a team of 6 employees, and I have a pool of 11 potential team members with varying levels of expertise in sales, marketing, and customer service. I've assigned a score to each employee indicating their relevance to each campaign, and I want to maximize the overall score while satisfying the following constraints: each team must have at least one employee with sales experience, at least two employees with marketing experience, and at least two employees with customer service experience. Additionally, I want to minimize the overlap between teams to ensure that each campaign has a unique perspective. However, I also need to consider the following preferences: employee 1 and employee 2 cannot be on the same team, employee 3 has a strong preference for campaign 1, and employee 4 has a strong preference for campaign 2. How can I select the teams to maximize the overall score while satisfying these constraints and preferences?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Team Selection Problem\",\n  \"description\": \"The Team Selection Problem is a classic problem in constraint programming. The problem involves selecting three teams, Xavier, Yuri, and Zena, from a set of 11 players. Each team must have at least one goalie, two defenders, and two forwards. The objective is to maximize the total value of the selected players, where the value of each player is given by a 3x11 matrix, with each row representing a team and each column representing a player.\",\n  \"variables\": \"Xavier, Yuri, Zena (Xavier, Yuri, Zena \u2286 {1, 2, ..., 11})\",\n  \"variables_explanation\": \"Xavier, Yuri, and Zena are sets of players representing the three teams. Each set contains the indices of the selected players.\",\n  \"constraints\": \"|Xavier| = 6 \u2227 |Yuri| = 6 \u2227 |Zena| = 6 \u2227 |Xavier \u2229 GOALIE| \u2265 1 \u2227 |Yuri \u2229 GOALIE| \u2265 1 \u2227 |Zena \u2229 GOALIE| \u2265 1 \u2227 |Xavier \u2229 DEFENCE| \u2265 2 \u2227 |Yuri \u2229 DEFENCE| \u2265 2 \u2227 |Zena \u2229 DEFENCE| \u2265 2 \u2227 |Xavier \u2229 OFFENCE| \u2265 2 \u2227 |Yuri \u2229 OFFENCE| \u2265 2 \u2227 |Zena \u2229 OFFENCE| \u2265 2 \u2227 |Xavier \u2229 Yuri| \u2264 2 \u2227 |Xavier \u2229 Zena| \u2264 2\",\n  \"constraints_explanation\": \"The constraints ensure that each team has exactly 6 players, at least one goalie, at least two defenders, and at least two forwards. Additionally, the constraints limit the overlap between teams to at most 2 players.\",\n  \"objective\": \"maximize \u2211(p in Xavier) value[xavier, p] + \u2211(p in Yuri) value[yuri, p] + \u2211(p in Zena) value[zena, p]\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "knapsack01bool": {"__data__": {"id_": "knapsack01bool", "embedding": null, "metadata": {"problem_family": "knapsack", "model_name": "knapsack01bool", "source_code": "int: n; % number of objects\nint: capacity;\narray[1..n] of int: profit;\narray[1..n] of int: size;\n\narray[1..n] of var bool: x; \n\nconstraint sum(i in 1..n)(size[i] * bool2int(x[i])) <= capacity;\nsolve maximize sum(i in 1..n)(profit[i] * bool2int(x[i]));\n\noutput [\"x = \", show(x), \"\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 10 potential acts to choose from, each with a specific sound system requirement and a guaranteed audience draw. The sound system requirements range from 100 to 500 watts, and the audience draw ranges from 100 to 1000 people. The festival has a limited power capacity of 2000 watts. How can I select the acts to maximize the total audience draw while staying within the power capacity?\",\n  \"question2\": \"I want to pack a bag for a trip, but I don't know what to bring. I have a bunch of clothes and shoes that I like, but they all take up different amounts of space in my bag. I also know how much I like each item, but I don't want to overpack. Can you help me figure out what to bring so I can fit everything in my bag and still be happy with what I have?\",\n  \"question3\": \"I'm planning a sleepover with my friends and we want to play a bunch of games. We have a bunch of different games that we like, but they all take up different amounts of time to play. We also know how much fun each game is, but we don't want to stay up too late. Can you help us figure out which games to play so we can have the most fun and still get some sleep?\",\n  \"question4\": \"I have 5 items to pack, each with a size and a value. The sizes are 2, 4, 6, 8, and 10, and the values are 10, 20, 30, 40, and 50. My bag can hold a maximum of 20 units. What should I pack to get the most value?\",\n  \"question5\": \"I'm a curator at a museum and I'm planning a new exhibit on ancient civilizations. I have a collection of 15 artifacts, each with a specific size and historical significance. The sizes range from 1 to 10 square meters, and the historical significance ranges from 1 to 10 points. The exhibit hall has a limited floor space of 50 square meters. Additionally, I have to consider the following constraints: I must include at least 3 artifacts from each of the 5 civilizations, and I must include at least 2 artifacts that are over 5 square meters in size. I also have to prioritize the artifacts based on their historical significance, but I also want to make sure that the exhibit is visually appealing and has a good balance of large and small artifacts. Can you help me select the artifacts to include in the exhibit to maximize the total historical significance while meeting all the constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. Given a set of objects, each with a profit and a size, and a knapsack with a limited capacity, the goal is to select a subset of the objects to include in the knapsack such that the total profit is maximized and the total size does not exceed the knapsack capacity. The problem is called 0/1 because each object can either be included (1) or excluded (0) from the knapsack.\",\n  \"variables\": \"x_i, i = 1..n. These variables represent the decision of whether to include (x_i = 1) or exclude (x_i = 0) object i from the knapsack.\",\n  \"constraints\": \"\u2211(size_i * x_i) \u2264 capacity, i = 1..n. This constraint ensures that the total size of the objects included in the knapsack does not exceed the knapsack capacity.\",\n  \"objective\": \"Maximize \u2211(profit_i * x_i), i = 1..n. The objective is to maximize the total profit of the objects included in the knapsack.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "trace": {"__data__": {"id_": "trace", "embedding": null, "metadata": {"problem_family": "buggy", "model_name": "trace", "source_code": "int: n = 5;\narray[1..n] of var 1..n: a;\narray[1..n] of 1..n: b = [3,5,2,3,1];\n\nconstraint forall(j in 1..n, i in trace(\"b[\\(n-j)]\\n\",b[n-j]) .. n)\n                 (a[j] < i); \n\nsolve satisfy;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a music festival with 5 stages, each with a specific soundcheck time (b = [3,5,2,3,1]). I want to schedule the soundchecks in a way that ensures each stage's soundcheck is completed before the next stage's soundcheck starts. What's the earliest start time for each stage's soundcheck (a) that satisfies this constraint?\",\n\n  \"question2\": \"I have 5 kids and I want to take them to the park, but each kid has a different bedtime (b = [3,5,2,3,1]). I want to make sure we leave the park before each kid's bedtime. What time should we leave the park so that we can make it home before bedtime, and also make sure we don't leave too early and waste our time at the park?\",\n\n  \"question3\": \"I'm planning a sleepover with my friends and we want to watch 5 movies. Each movie has a different ending time (b = [3,5,2,3,1]). We want to make sure we start the next movie before the previous one ends. What time should we start each movie so that we can watch all 5 movies and still get some sleep?\",\n\n  \"question4\": \"5 tasks, each with a deadline (b = [3,5,2,3,1]). What's the earliest start time for each task to meet the deadlines?\",\n\n  \"question5\": \"I'm a project manager at a construction company and we're working on a large-scale development project that involves 5 different teams, each with a specific completion deadline (b = [3,5,2,3,1]). The teams need to work in a specific order, and each team's work depends on the previous team's completion. We want to ensure that each team starts working as soon as possible after the previous team completes their work, while also meeting the deadlines. Additionally, we need to consider the fact that some teams may need to work on multiple tasks simultaneously, and we want to minimize the overlap between tasks to avoid conflicts. What's the optimal start time for each team to ensure that we meet the deadlines and minimize conflicts between teams?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Job Scheduling Problem\",\n  \"description\": \"The Job Scheduling Problem is a classic problem in constraint programming. It involves scheduling a set of jobs on a single machine, where each job has a specific processing time and a deadline. The goal is to find a schedule that satisfies all the constraints, such as not scheduling a job before its deadline.\",\n  \"variables\": \"a = [a_1, a_2, ..., a_n], where a_i is the start time of job i\",\n  \"constraints\": \"\u2200j \u2208 {1, ..., n}, \u2200i \u2208 {b[n-j], ..., n}, a_j < i, where b_i is the deadline of job i\",\n  \"objective\": \"satisfy (find a feasible solution)\"\n}\n\nNote: The problem is not a traditional job scheduling problem, but rather a variant where the goal is to find a schedule that satisfies the given constraints. The model does not have an objective function to minimize or maximize, but rather aims to find a feasible solution that satisfies all the constraints.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "photo": {"__data__": {"id_": "photo", "embedding": null, "metadata": {"problem_family": "photo", "model_name": "photo", "source_code": "int:n ;\nset of int: PERSON = 1..n;\nset of int: POS = 1..n;\narray[PERSON,PERSON] of int: friend;\n\n%array[PERSON] of var POS: x;\narray[POS] of var PERSON: y;\n\n%include \"inverse.mzn\";\n%constraint inverse(x,y);\n\ninclude \"alldifferent.mzn\";\nconstraint alldifferent(y);\n\n%constraint alldifferent(x);\n\n%y[i] = sum(j in 1..n)(bool2int(x[j] = i) * j);\n\nsolve maximize sum(i in 1..n-1)(friend[y[i],y[i+1]]);\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a networking event for 10 entrepreneurs and I want to arrange them in a way that maximizes the number of meaningful connections between adjacent individuals. I have a matrix representing the strength of relationships between each pair of entrepreneurs. How can I optimize the seating arrangement to achieve this goal?\",\n\n  \"question2\": \"I'm trying to plan a dinner party for my friends and I want to make sure everyone has someone they like sitting next to them. I have a list of who gets along with who. Can you help me figure out the best way to seat everyone?\",\n\n  \"question3\": \"I'm in charge of planning the school dance and I want to make sure everyone has a good time. I have a list of who is friends with who and I want to arrange the tables so that friends are sitting together. But I also want to make sure that no one is sitting alone. Can you help me figure out the best way to do this?\",\n\n  \"question4\": \"I have 8 friends and I want to arrange them in a line for a group photo. I know who gets along with who. How can I maximize the number of happy pairs?\",\n\n  \"question5\": \"I'm the event coordinator for a large music festival and I'm responsible for arranging the meet-and-greet sessions between the artists and the attendees. There are 20 artists and 20 attendees, and each artist has a different level of comfort with each attendee. I have a matrix representing the comfort level between each artist-attendee pair. The goal is to arrange the meet-and-greet sessions in a way that maximizes the overall comfort level of the artists. However, there are some additional constraints: artist A cannot be paired with attendee 1, artist B must be paired with attendee 2, and attendees 3-5 must be paired with artists from the same genre. Additionally, the meet-and-greet sessions must be arranged in a way that minimizes the number of attendees who are paired with artists from different genres. Can you help me find the optimal arrangement?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Social Golfer Problem with Friendship Maximization\",\n  \"description\": \"The Social Golfer Problem is a classic problem in constraint programming. In this variation, we have a set of people who want to play golf together in groups of a certain size. The goal is to arrange the people in a way that maximizes the total friendship between adjacent people in the arrangement. The friendship between two people is given by a matrix, where friend[i,j] represents the friendship between person i and person j.\",\n  \"variables\": \"y: POS \u2192 PERSON\",\n  \"variables_explanation\": \"The decision variable y is an array of variables, where y[i] represents the person assigned to position i in the arrangement.\",\n  \"constraints\": \"alldifferent(y)\",\n  \"constraints_explanation\": \"The constraint alldifferent(y) ensures that each person is assigned to at most one position in the arrangement. This means that no two positions can have the same person assigned to them.\",\n  \"objective\": \"maximize \u2211(i in 1..n-1) friend[y[i],y[i+1]]\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "cell_block": {"__data__": {"id_": "cell_block", "embedding": null, "metadata": {"problem_family": "cell_block", "model_name": "cell_block", "source_code": "int: k;\nset of int: PRISONER = 1..k;\nint: n;\nset of int: ROW = 1..n;\nint: m;\nset of int: COL = 1..m;\nset of PRISONER: danger;\nset of PRISONER: female;\nset of PRISONER: male = PRISONER diff female;\narray[ROW,COL] of int: cost;\n\n\narray[PRISONER] of var ROW: r;\narray[PRISONER] of var COL: c;\n\n%constraint forall(p1, p2 in PRISONER where p1 < p2)\n%                 (abs(r[p1] - r[p2]) + abs(c[p1] - c[p2]) > 0); \ninclude \"alldifferent.mzn\";\nconstraint alldifferent([r[p] * m + c[p] | p in PRISONER]);\n\nconstraint forall(p in PRISONER, d in danger where p != d)\n                 ( abs(r[p] - r[d]) + abs(c[p] - c[d]) > 1 );\n\nconstraint forall(p in female)(r[p] <= (n + 1) div 2);\nconstraint forall(p in male)(r[p] >= n div 2 + 1);\n\nvar int: totalcost = sum(p in PRISONER)(cost[r[p],c[p]]);  \nsolve minimize totalcost;\n \noutput [\"cost = \\(totalcost)\\n\"] ++\n       [ \"Prisoner \\(p) \" ++ if p in female then \"(F)\" else \"(M)\" endif ++ \n         \" in [\\(r[p]),\\(c[p])].\\n\"\n       | p in PRISONER ];\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm planning a large-scale music festival with 50 artists, each with a specific sound level and crowd size. The festival grounds are divided into a 10x10 grid, with varying noise restrictions and crowd capacities for each cell. Some artists are incompatible due to conflicting sound levels or crowd sizes. How can I assign artists to cells to minimize the total noise level and crowd congestion while ensuring that no two incompatible artists are adjacent to each other? The noise level and crowd capacity of each cell are given in a 10x10 matrix, and the incompatibility relationships between artists are also provided.\",\n\n  \"question2\": \"I have a bunch of friends coming over for a party, and I want to seat them at tables in my backyard. Some of my friends don't get along, so I don't want to sit them at the same table. I also want to make sure that the guys and girls are separated. Can you help me figure out how to seat everyone so that everyone has a good time and no one gets into a fight? I have 10 tables, and I can tell you who gets along with who.\",\n\n  \"question3\": \"I'm planning a school dance, and I need to assign tables to students. Some students are friends and want to sit together, but others don't get along and need to be separated. We also have a rule that boys and girls need to sit at separate tables. The tables are arranged in a big grid, and some tables are closer to the DJ than others. How can I assign tables to students so that everyone has a good time and follows the rules? We have 20 students and 10 tables.\",\n\n  \"question4\": \"I have 10 people to seat at a dinner party, but some of them don't get along. Can you help me figure out how to seat them so that no one gets into a fight?\",\n\n  \"question5\": \"I'm the manager of a large retail store, and I need to assign employees to different sections of the store. We have 50 employees, and each section of the store has a different level of foot traffic and sales volume. Some employees are more experienced and can handle high-pressure sections, while others are better suited for quieter areas. We also have a rule that male and female employees need to be separated in certain sections of the store. Additionally, some employees have conflicts with each other and need to be assigned to different sections. The store is divided into a 10x10 grid, with varying levels of foot traffic and sales volume for each cell. Can you help me assign employees to sections of the store so that we maximize sales and minimize conflicts? The foot traffic and sales volume of each cell are given in a 10x10 matrix, and the conflict relationships between employees are also provided. We also have a budget constraint, where we need to minimize the total number of employees assigned to high-pressure sections.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Prisoner Placement Problem\",\n  \"description\": \"The Prisoner Placement Problem is a classic problem in constraint programming. The problem involves placing a set of prisoners in a rectangular grid, where each prisoner has a specific cost associated with each cell in the grid. The goal is to minimize the total cost of placing all prisoners while satisfying certain constraints. The constraints include ensuring that no two prisoners are placed in the same cell, that prisoners in the 'danger' set are not placed adjacent to each other, and that female and male prisoners are placed in separate halves of the grid.\",\n  \"variables\": \"r[p], c[p] (p in PRISONER), totalcost\",\n  \"variables_explanation\": \"The decision variables r[p] and c[p] represent the row and column of the cell where prisoner p is placed. The variable totalcost represents the total cost of placing all prisoners.\",\n  \"constraints\": \"alldifferent([r[p] * m + c[p] | p in PRISONER]), abs(r[p] - r[d]) + abs(c[p] - c[d]) > 1 (p in PRISONER, d in danger where p != d), r[p] <= (n + 1) div 2 (p in female), r[p] >= n div 2 + 1 (p in male)\",\n  \"constraints_explanation\": \"The constraints include ensuring that no two prisoners are placed in the same cell (alldifferent), that prisoners in the 'danger' set are not placed adjacent to each other (abs(r[p] - r[d]) + abs(c[p] - c[d]) > 1), and that female and male prisoners are placed in separate halves of the grid (r[p] <= (n + 1) div 2 and r[p] >= n div 2 + 1).\",\n  \"objective\": \"minimize totalcost\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mip4": {"__data__": {"id_": "mip4", "embedding": null, "metadata": {"problem_family": "mip", "model_name": "mip4", "source_code": "solve maximize 21*x + 11*y;\n\nvar int: x;\nvar int: y;\nconstraint 7*x + 4*y <= 13;\nconstraint x >= 0 /\\ y >= 0; \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to allocate two types of cargo containers, A and B, to a fleet of trucks. Each container A weighs 7 tons and has a revenue of $21,000, while each container B weighs 4 tons and has a revenue of $11,000. The total weight capacity of the trucks is 13 tons. How can the company maximize its revenue while not exceeding the weight capacity?\",\n  \n  \"question2\": \"I have two types of boxes I want to put in my car. One box is big and heavy, and the other is smaller and lighter. The big box is worth more money to me, but it's also really heavy. The small box is lighter, but it's not as valuable. My car can only hold so much weight. How many of each box can I put in my car to get the most value without overloading it?\",\n  \n  \"question3\": \"Imagine you're the manager of a school's bake sale. You have two types of cupcakes to sell: chocolate and vanilla. Chocolate cupcakes are more popular and make $21 each, but they're also heavier and take up more space in the display case. Vanilla cupcakes are lighter and make $11 each. The display case can only hold a certain amount of weight. How many of each type of cupcake should you display to make the most money?\",\n  \n  \"question4\": \"Maximize profit with 2 products, weights 7 and 4, values $21 and $11, and a weight limit of 13.\",\n  \n  \"question5\": \"A small, independent bookstore is planning a promotional event to attract more customers. The store has two types of book bundles to offer: a premium bundle containing a bestselling novel and a non-fiction book, and a standard bundle containing a single bestselling novel. The premium bundle weighs 7 pounds and has a revenue of $21 per bundle, while the standard bundle weighs 4 pounds and has a revenue of $11 per bundle. The store has a limited storage capacity of 13 pounds for the bundles. Additionally, the store has a limited budget for shipping and handling, and the cost of shipping and handling is directly proportional to the weight of the bundles. The store wants to maximize its revenue while not exceeding the storage capacity and minimizing the shipping and handling costs. How many premium and standard bundles should the store offer to achieve its goals?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\",\n  \"variables\": \"x, y. These variables represent the number of items of type x and y to include in the collection.\",\n  \"constraints\": \"7x + 4y \u2264 13, x \u2265 0, y \u2265 0. The first constraint represents the weight limit of the knapsack, where each item of type x has a weight of 7 and each item of type y has a weight of 4. The second and third constraints ensure that the number of items of each type is non-negative.\",\n  \"objective\": \"maximize 21x + 11y. The objective is to maximize the total value of the items in the collection, where each item of type x has a value of 21 and each item of type y has a value of 11.\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "compatible_assignment_opt": {"__data__": {"id_": "compatible_assignment_opt", "embedding": null, "metadata": {"problem_family": "compatible_assignment", "model_name": "compatible_assignment_opt", "source_code": "int: n;\nset of int: W = 1..n;\nint: m;\nset of int: T = 1..2*m;\narray[W,T] of int: profit;\narray[W,W] of bool: compatible;\n\narray[W] of var T: task;\narray[T] of var opt W: worker;\n\nconstraint inverse(task,worker);\nconstraint forall(t in T where t mod m != 0)\n                 (compatible[worker[t],worker[t+1]]);\n           \n\nsolve maximize sum(w in W)(profit[w,task[w]]);\n\noutput [ if fix(occurs(worker[t])) then show(worker[t]) else \" \" endif ++ \" \"\n       | t in T ] \n       ++ [ show(task), \"\\n\" ]\n       ;\n\npredicate inverse(array[int] of var opt int: f, array[int] of var opt int: g) = \n          forall(i in index_set(f), j in index_set(g))\n                (occurs(f[i]) /\\ occurs(g[j]) ->\n                 (deopt(f[i]) = j <-> deopt(g[j]) = i)); \n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale conference with 50 speakers and 100 attendees. Each speaker has a preferred time slot and a list of attendees they'd like to present to. However, some attendees have conflicting interests and cannot be in the same session. How can I schedule the speakers to maximize the overall satisfaction of the attendees while ensuring that no attendee is in a session with someone they conflict with? The satisfaction of each attendee is measured by a score from 1 to 10, and I have a matrix of these scores for each speaker-attendee pair. Additionally, each speaker can only present once, and each attendee can only attend one session per time slot.\",\n\n  \"question2\": \"I'm trying to plan a school dance, and I need to assign DJs to different time slots. Some DJs are friends and can't work together, and some students have favorite DJs they want to see. How can I make sure everyone has a good time and sees their favorite DJ? I have a list of DJs, time slots, and which students like which DJs.\",\n\n  \"question3\": \"Imagine you're planning a big birthday party for your friends. You have 10 friends, and each friend has a favorite game they want to play. However, some friends don't get along and can't play together. You also have 20 different games to choose from, and each game can only be played once. How can you make sure everyone has fun and plays their favorite game? You have a list of friends, games, and which friends like which games.\",\n\n  \"question4\": \"Assign 10 workers to 20 tasks to maximize profit, considering worker-task compatibility and task dependencies.\",\n\n  \"question5\": \"I'm the manager of a large restaurant with 20 waiters and 40 tables. Each waiter has a preferred section of the restaurant and a list of tables they'd like to serve. However, some tables have special requests that require specific waiters, and some waiters have conflicts with each other. Additionally, each table has a priority level from 1 to 5, and I want to maximize the overall satisfaction of the customers. The satisfaction of each customer is measured by a score from 1 to 10, and I have a matrix of these scores for each waiter-table pair. Furthermore, each waiter can only serve one table per section, and each table can only be served by one waiter. The restaurant is open for two shifts, and each waiter can only work one shift. How can I assign the waiters to the tables to maximize the overall satisfaction of the customers while ensuring that no waiter is assigned to a table with a conflicting request or a conflicting waiter? I have a list of waiters, tables, sections, priorities, and the satisfaction scores for each waiter-table pair.\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Worker Task Assignment and Scheduling Problem\",\n  \"description\": \"This problem involves assigning tasks to workers and scheduling them in a way that maximizes the total profit. The problem has additional constraints where each task is divided into two sub-tasks that must be performed by compatible workers.\",\n  \"variables\": \"task[w] \u2208 {1, ..., 2m} for w \u2208 W, worker[t] \u2208 {1, ..., n} for t \u2208 T\",\n  \"variables_explanation\": \"The decision variables are task[w] and worker[t]. task[w] represents the task assigned to worker w, and worker[t] represents the worker assigned to task t. The task[w] variable can take any value from 1 to 2m, and the worker[t] variable can take any value from 1 to n.\",\n  \"constraints\": \"\u2200t \u2208 T where t mod m \u2260 0: compatible[worker[t], worker[t+1]], inverse(task, worker)\",\n  \"constraints_explanation\": \"The constraints are: (1) for each task t that is not the second sub-task of a task pair (i.e., t mod m \u2260 0), the workers assigned to task t and task t+1 must be compatible, and (2) the inverse constraint ensures that each worker is assigned to at most one task and each task is assigned to at most one worker.\",\n  \"objective\": \"maximize \u2211(w in W) profit[w, task[w]]\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "carpet_cutting_geost": {"__data__": {"id_": "carpet_cutting_geost", "embedding": null, "metadata": {"problem_family": "carpet_cutting", "model_name": "carpet_cutting_geost", "source_code": "int: n; % number of rooms\nset of int: ROOM = 1..n;\nint: m; % number of rectangle/offsets\nset of int: ROFF = 1..m;\narray[ROFF,1..4] of int: d; % defns\nset of int: ROT = 1..4;\narray[ROOM,ROT] of set of ROFF: shape;\nint: h; % height of roll\nint: maxl; % maximum length of roll\n\nn = 3; m = 7;\nd = [| 0,0,3,4  % (xoffset,yoffset,xsize,ysize)\n    | 0,1,4,3\n    | 1,4,1,1\n    | 3,1,1,2\n    | 4,2,1,1\n    | 1,0,2,1 \n    | 0,0,4,3 |];\nshape = [| {1,3,4}, {2,5,6}, {}, {}\n         | {1,3,4}, {2,5,6}, {}, {}\n         | {1}, {7}, {}, {}  |];\nh = 7; maxl = 12;\n\narray[ROOM] of var 0..maxl: x;\narray[ROOM] of var 0..h: y;\n\nset of int: DIM = 1..2;\narray[ROFF,DIM] of int: rect_size = \n     array2d(ROFF,DIM, [ d[r,i] | r in ROFF, i in 3..4]);\narray[ROFF,DIM] of int: rect_offset = \n     array2d(ROFF,DIM, [ d[r,i] | r in ROFF, i in 1..2]);\narray[int] of set of ROFF: shapes = [ {1,3,4}, {2,5,6}, {1}, {7} ];\nset of int: SHAPE = index_set(shapes);\n%array[int] of set of RECT: s = sort([shapes[i,j] | i in 1..n, j in 1..4]);\n\narray[ROOM] of var SHAPE: kind;\narray[ROOM,DIM] of var int: coords =\n      array2d(ROOM,DIM, [ if j = 1 then x[i] else y[i] endif\n                         | i in ROOM, j in 1..2 ]);\n\n\n\ninclude \"geost.mzn\";\n\nconstraint geost_bb(2,\n                    rect_size,\n                    rect_offset,\n                    shapes,\n                    coords,\n                    kind,\n                    [0,0],\n                    [l,h]);\n\nvar 0..maxl: l; % length of carpet used\n\nsolve minimize l;\n\nconstraint forall(i in ROOM)\n                 (exists(r in ROT where shape[i,r] != {})\n                        (shapes[kind[i]] = shape[i,r]));\n\n\noutput [\"rect_size = \\(rect_size);\\nrect_offset = \\(rect_offset);\\n\"] ++\n       [\"l = \\(l);\\nx = \\(x);\\ny = \\(y);\\nkind = \\(kind);\\n\"];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a modular exhibition stand with 3 modules, each with a unique shape and size. I have 7 different panel designs, each with its own dimensions and offset. The stand must fit within a 12-meter long and 7-meter high space. How can I minimize the length of the stand while ensuring that each module is covered by the correct panels and that the panels do not overlap?\",\n  \"question2\": \"I want to decorate my living room with some weirdly shaped rugs. I have 3 areas to cover and 7 different rug designs to choose from. Each rug has a specific size and shape, and I want to make sure they fit together nicely without overlapping. Can you help me figure out how to do it with the least amount of rug?\",\n  \"question3\": \"Imagine you're a Tetris master and you have to fit different shaped blocks into a big rectangle. You have 3 levels to fill and 7 different block shapes to use. Each block has a special size and shape, and you want to make sure they fit together perfectly without overlapping. Can you help me figure out how to do it with the least amount of blocks?\",\n  \"question4\": \"How can I fit 3 irregularly shaped objects into a 12x7 space using 7 different rectangular pieces?\",\n  \"question5\": \"I'm a landscape architect designing a public park with 3 distinct areas, each with its own unique terrain and features. I have 7 different types of paving stones to use, each with its own dimensions and offset. The park must fit within a 12-meter long and 7-meter high space, and I want to minimize the length of the paved area while ensuring that each area is covered by the correct paving stones and that the stones do not overlap. Additionally, I want to prioritize the use of certain paving stones in specific areas to create a visually appealing design. Can you help me find a solution that balances these competing demands?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Carpet Cutting Problem\",\n  \"description\": \"The Carpet Cutting Problem is a classic problem in constraint programming. It involves cutting a carpet of a given height into smaller rectangles to cover a set of rooms. Each room has a set of possible shapes that can be used to cover it, and each shape has a specific size and offset. The goal is to minimize the length of the carpet used to cover all the rooms.\",\n  \"variables\": \"x, y, kind, l\",\n  \"variables_explanation\": \"x and y are arrays of variables representing the x and y coordinates of the top-left corner of each room. kind is an array of variables representing the shape used to cover each room. l is a variable representing the length of the carpet used.\",\n  \"constraints\": \"geost_bb(2, rect_size, rect_offset, shapes, coords, kind, [0,0], [l,h]), forall(i in ROOM) (exists(r in ROT where shape[i,r] != {}) (shapes[kind[i]] = shape[i,r]))\",\n  \"constraints_explanation\": \"The first constraint is a geometric constraint that ensures the rectangles do not overlap and are within the bounds of the carpet. The second constraint ensures that the shape used to cover each room is one of the possible shapes for that room.\",\n  \"objective\": \"minimize l\"\n}\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "flattening5": {"__data__": {"id_": "flattening5", "embedding": null, "metadata": {"problem_family": "flattening", "model_name": "flattening5", "source_code": "int: n;    set of int: OBJ = 1..n;\narray[OBJ] of int: size;\narray[OBJ] of int: value;\nint: limit;\narray[OBJ] of var int: x;\nconstraint forall(i in OBJ)(x[i] >= 0);\nconstraint sum(i in OBJ)(size[i]*x[i])<= limit;\nsolve maximize sum(i in OBJ)(value[i]*x[i]);\nn = 4;\nsize = [5,8,9,12];\nvalue = [3,5,7,8];\nlimit = 29;\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company has 4 types of cargo containers with different volumes (5, 8, 9, 12 cubic meters) and values ($3, $5, $7, $8 per cubic meter). The company has a limited capacity of 29 cubic meters on its truck. How can the company maximize its revenue by selecting the optimal combination of cargo containers to transport, given that each container can be transported a non-negative number of times?\",\n\n  \"question2\": \"I'm planning a road trip and I have 4 different types of snacks that I want to bring. Each snack has a different size (5, 8, 9, 12 inches) and a different level of importance to me (3, 5, 7, 8 out of 10). My car has a limited amount of space (29 inches) for snacks. How can I choose the right snacks to bring so that I'm as happy as possible with the snacks I have, without running out of space?\",\n\n  \"question3\": \"Imagine you're a space explorer and you have 4 different types of space rocks that you want to collect. Each rock has a different size (5, 8, 9, 12 units) and a different point value (3, 5, 7, 8 points). Your spaceship has a limited amount of space (29 units) for collecting rocks. How can you collect the rocks that will give you the most points, without running out of space on your ship?\",\n\n  \"question4\": \"I have 4 items with different sizes and values. My bag can hold 29 units. How can I maximize my value without exceeding the bag's capacity?\",\n\n  \"question5\": \"A museum curator is planning a new exhibit on ancient artifacts and has 4 different types of artifacts to choose from, each with a different size (5, 8, 9, 12 square feet) and a different level of historical significance (3, 5, 7, 8 out of 10). The exhibit hall has a limited amount of space (29 square feet) for displaying the artifacts. The curator wants to create an exhibit that showcases the most historically significant artifacts, while also ensuring that the exhibit is visually appealing and engaging for visitors. However, the curator also needs to consider the fact that each artifact can be displayed a non-negative number of times, and that the total size of the displayed artifacts cannot exceed the available space. How can the curator choose the optimal combination of artifacts to display, given these constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"0/1 Knapsack Problem\",\n  \"description\": \"The 0/1 Knapsack Problem is a classic problem in combinatorial optimization. Given a set of items, each with a size and a value, and a knapsack with a limited capacity, the goal is to select a subset of the items to include in the knapsack such that the total value of the selected items is maximized without exceeding the knapsack's capacity. The problem is called 0/1 because each item can either be included (1) or excluded (0) from the knapsack.\",\n  \"variables\": \"x[i], i in OBJ. These variables represent the number of times each item i is included in the knapsack.\",\n  \"constraints\": \"x[i] >= 0, i in OBJ (non-negativity constraint, each item can only be included a non-negative number of times); \u2211(size[i]*x[i]) <= limit, i in OBJ (capacity constraint, the total size of the selected items cannot exceed the knapsack's capacity).\",\n  \"objective\": \"maximize \u2211(value[i]*x[i]), i in OBJ (maximize the total value of the selected items)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "mydiv": {"__data__": {"id_": "mydiv", "embedding": null, "metadata": {"problem_family": "mydiv", "model_name": "mydiv", "source_code": "function var int:mydiv(var int: x, var int: y)=\n         assert(lb(x) >= 0 /\\ lb(y) >= 0,\n         \"mydiv called with negative arguments\",\n         let { constraint y != 0 } in\n         safediv(x,y));\nfunction var int:safediv(var int: x, var int: y)\n         :: promise_total =\n         let { var 0..ub(y)-1: r;\n               var 0..ub(x): z;\n               constraint x = y * z + r;\n               constraint r < y } in\n         z;\n\nvar 0..5: a;\nvar 0..5: b;\nint: c = 1;\n\nconstraint not (c = mydiv(a,b));\n\nsolve satisfy;\n\noutput [\"\\(c) != mydiv(\\(a),\\(b))\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to allocate 5 identical trucks to transport goods between warehouses. Each truck can carry a maximum of 5 units of goods. The company wants to avoid assigning a truck to a warehouse with zero units of goods. How can the company allocate the trucks to warehouses A, B, C, D, and E, which have 3, 2, 1, 4, and 0 units of goods respectively, such that the number of trucks allocated to each warehouse is not equal to the number of units of goods divided by the number of trucks available?\",\n  \n  \"question2\": \"I'm planning a party and I want to put some snacks into bowls. I have 6 bowls and I want to put some chips into each bowl. I don't want to put the same number of chips into each bowl as the number of bowls I have divided by the number of bags of chips I have. How many chips can I put into each bowl if I have 5 bags of chips and I want to make sure I don't run out of chips?\",\n  \n  \"question3\": \"Imagine you're playing a game where you have 5 toy boxes and you want to put some toys into each box. You don't want to put the same number of toys into each box as the number of boxes you have divided by the number of toys you have. If you have 5 toys and you want to make sure you don't put too many toys into each box, how many toys can you put into each box?\",\n  \n  \"question4\": \"How can I allocate 5 resources to 5 tasks such that the number of resources allocated to each task is not equal to the number of resources divided by the number of tasks?\",\n  \n  \"question5\": \"A university is planning to allocate 5 identical printers to 5 departments: Mathematics, Computer Science, Physics, Chemistry, and Biology. Each department has a different number of students: 120, 150, 100, 80, and 0 respectively. The university wants to allocate the printers such that the number of printers allocated to each department is not equal to the number of students divided by the total number of printers available. Additionally, the university wants to ensure that no department with zero students gets a printer. How can the university allocate the printers to the departments such that the allocation satisfies these conditions?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Avoid Division by Zero\",\n  \"description\": \"This problem is a simple representation of avoiding division by zero in a mathematical expression. It involves finding values for two variables 'a' and 'b' such that 'c' is not equal to the result of 'a' divided by 'b'.\",\n  \"variables\": \"a \u2208 {0, 1, 2, 3, 4, 5}, b \u2208 {0, 1, 2, 3, 4, 5}, c = 1\",\n  \"constraints\": \"c \u2260 a / b, a \u2265 0, b \u2265 0, b \u2260 0\",\n  \"objective\": \"satisfy\"\n}\n\nNote: The objective is 'satisfy' because this is a constraint satisfaction problem, where the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "restart": {"__data__": {"id_": "restart", "embedding": null, "metadata": {"problem_family": "restart", "model_name": "restart", "source_code": "array[1..10] of var 1..10:x;\n\nconstraint forall(i,j in 1..10 where i < j)\n                 (x[i] != x[j]);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_min, complete)\n      satisfy;\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale event with 10 VIP guests, each with a unique security clearance level from 1 to 10. Due to security concerns, I need to assign a specific access level to each guest, ensuring that no two guests have the same clearance level. Additionally, I have to ensure that the guest with the highest security clearance (level 9 or 10) is assigned to the most secure area, while the remaining guests are assigned to areas with lower security levels (level 1-9). How can I optimize the assignment of security clearance levels to each guest while satisfying these constraints?\",\n\n  \"question2\": \"I have 10 boxes of different sizes and I want to put a sticker on each box with a number from 1 to 10. I don't want any two boxes to have the same number on the sticker. Also, I want the biggest box to have a sticker with a number 9 or 10, and the rest of the boxes to have stickers with numbers 1-9. Can someone help me figure out which number to put on each box?\",\n\n  \"question3\": \"Imagine you're the manager of a soccer team with 10 players, and you need to assign a unique jersey number to each player from 1 to 10. The team's star player wants to wear a jersey number 9 or 10, and the rest of the players are okay with wearing any number from 1 to 9. How can you assign the jersey numbers so that no two players have the same number and the star player gets their preferred number?\",\n\n  \"question4\": \"Assign 10 unique numbers (1-10) to 10 items, with the first item being 9 or 10, and the rest being 1-9. No duplicates allowed.\",\n\n  \"question5\": \"I'm the curator of a large art museum, and I'm planning a special exhibition featuring 10 unique art pieces, each with a specific cultural and historical significance. The art pieces are to be displayed in a specific order, with the most valuable and culturally significant piece being displayed first. The first piece must be assigned a display number of 9 or 10, while the remaining pieces can be assigned display numbers from 1 to 9. However, due to the unique characteristics of each piece, no two pieces can be assigned the same display number. Additionally, the display numbers must be assigned in a way that ensures a smooth flow of visitors through the exhibition, with the most significant piece being displayed prominently at the beginning. How can I optimize the assignment of display numbers to each art piece while satisfying these constraints and ensuring a cohesive and engaging visitor experience?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Permutation Problem with Restricted Domain\",\n  \"description\": \"This problem is a variation of the permutation problem, where we need to assign a value from 1 to 10 to each of 10 variables, such that all values are different and the first variable has a value greater than or equal to 9, and the rest of the variables have a value less than or equal to 9.\",\n  \"variables\": \"x = [x_1, x_2, ..., x_10], where x_i is the value assigned to the i-th variable, with x_i \u2208 {1, 2, ..., 10} for all i \u2208 {1, 2, ..., 10}.\",\n  \"constraints\": \"\u2200i, j \u2208 {1, 2, ..., 10} where i < j: x_i \u2260 x_j (all values must be different), \u2200i \u2208 {2, 3, ..., 10}: x_i \u2264 9 (the rest of the variables have a value less than or equal to 9), x_1 \u2265 9 (the first variable has a value greater than or equal to 9).\",\n  \"objective\": \"satisfy (the problem is a satisfaction problem, where the goal is to find a solution that satisfies all the constraints, without any objective function to minimize or maximize).\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "restart2": {"__data__": {"id_": "restart2", "embedding": null, "metadata": {"problem_family": "restart", "model_name": "restart2", "source_code": "array[1..10] of var 1..10:x;\n\nconstraint forall(i,j in 1..10 where i < j)\n                 (x[i] != x[j]);\nconstraint forall(i in 2..10)(x[i] <= 9);\nconstraint x[1] >= 9;\n\nsolve :: int_search(x, input_order, indomain_max, complete)\n      satisfy;\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm planning a large-scale conference with 10 keynote speakers, each with a unique area of expertise. I want to assign a specific time slot to each speaker, but I have some constraints: the first speaker must be a renowned expert in their field (i.e., have a high reputation score), and the rest of the speakers must have a reputation score of at most 9. Additionally, I want to ensure that no two speakers with the same area of expertise are assigned the same time slot. How can I find an optimal schedule that satisfies these constraints?\",\n\n  \"question2\": \"I'm trying to plan a surprise party for my friend's birthday, and I want to invite 10 people. I want to make sure that each person has a unique gift, and I don't want to give anyone a gift that's too expensive (let's say, more than $9). Also, I want to make sure that the person who gets the most expensive gift is someone my friend really likes. Can you help me figure out who should get which gift?\",\n\n  \"question3\": \"I'm playing a game where I have to assign 10 different superheroes to 10 different missions. Each superhero has a special power, and I want to make sure that no two superheroes with the same power are assigned to the same mission. Also, I want to make sure that the superhero with the most powerful power is assigned to the most important mission. Can you help me figure out who should go on which mission?\",\n\n  \"question4\": \"I have 10 boxes to pack, and I want to put a different item in each box. The first item must be the most valuable one, and the rest must be worth at most $9. How can I pack the boxes?\",\n\n  \"question5\": \"I'm a curator at a museum, and I'm planning a new exhibit featuring 10 different artists. Each artist has a unique style, and I want to make sure that no two artists with the same style are displayed in the same room. Additionally, I want to make sure that the artist with the most prestigious reputation is displayed in the main gallery. However, I also have to consider the physical constraints of the museum: each room can only hold a certain number of pieces, and I have to make sure that the artwork is displayed in a way that is visually appealing. Furthermore, I have to take into account the preferences of the museum's patrons: some artists are more popular than others, and I want to make sure that the most popular artists are displayed prominently. Can you help me come up with a layout for the exhibit that satisfies all of these constraints and priorities?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Permutation Problem with Restricted Domain\",\n  \"description\": \"This problem is a variation of the permutation problem, where the goal is to find a permutation of the numbers 1 to 10, with the additional constraint that the first element must be at least 9 and the rest of the elements must be at most 9. The problem is a classic example of a constraint satisfaction problem, where the objective is to find a solution that satisfies all the given constraints.\",\n  \"variables\": \"x = [x_1, x_2, ..., x_10], where x_i is a variable representing the i-th element of the permutation, with domain {1, 2, ..., 10}\",\n  \"constraints\": \"\u2200i, j \u2208 {1, 2, ..., 10} where i < j: x_i \u2260 x_j (all elements must be distinct), \u2200i \u2208 {2, 3, ..., 10}: x_i \u2264 9 (all elements except the first must be at most 9), x_1 \u2265 9 (the first element must be at least 9)\",\n  \"objective\": \"satisfy (the objective is to find a solution that satisfies all the constraints, there is no optimization objective)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "square_pack": {"__data__": {"id_": "square_pack", "embedding": null, "metadata": {"problem_family": "square_pack", "model_name": "square_pack", "source_code": "int: n; % number of squares\nset of int: SQUARE = 1..n;\nint: maxl = sum(i in SQUARE)(i);\nint: mina = sum(i in SQUARE)(i*i);\n\nvar n..maxl: height;\nvar n..maxl: width;\nvar mina .. n*maxl: area = height * width;\n\narray[SQUARE] of var 0..maxl: x;\narray[SQUARE] of var 0..maxl: y;\n\n% squares fit in the rectangle\nconstraint forall(s in SQUARE)(x[s] + s <= width);\nconstraint forall(s in SQUARE)(y[s] + s <= height);\n\n% non overlap\nconstraint forall(s1, s2 in SQUARE where s1 < s2)\n                 (x[s1] + s1 <= x[s2] \\/\n                  x[s2] + s2 <= x[s1] \\/  \n                  y[s1] + s1 <= y[s2] \\/ \n                  y[s2] + s2 <= y[s1]);\narray[SQUARE] of int: size = [ i | i in SQUARE ];\n\n% non overlap with global diffn\ninclude \"diffn.mzn\";\n%constraint diffn(x,y,size,size);\n\n% redundant cumulative constraints\ninclude \"cumulative.mzn\";\n%constraint cumulative(x,size,size,height);\n%constraint cumulative(y,size,size,width);\n\n% variables ordered in reverse size x[n], y[n], x[n-1], y[n-1], ..., x[1], y[1]\n%array[1..2*n] of var 0..maxl: vs = [ if i mod 2 = 0 then x[n+1 - i div 2] \n%                                     else y[n+1 - i div 2] endif | i in 2..2*n+1 ];\n\nsolve :: seq_search([\n         int_search([area,height,width], input_order, indomain_min, complete) \n         %,int_search(vs, input_order, indomain_min, complete)\n         ])\n      minimize area;\n\noutput [\"area = \",show(area), \"\\n\"] ++\n[\"height = \",show(height), \"\\n\"] ++\n[\"width = \",show(width), \"\\n\"] ++\n[\"x = \", show(x), \"\\n\"] ++\n[\"y = \", show(y), \"\\n\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a modular exhibition space and I have 10 rectangular modules of different sizes that need to be arranged in a way that minimizes the total floor area. Each module has a specific width and length, and they cannot overlap. How can I arrange the modules to achieve the smallest possible footprint while ensuring that all modules fit within the space?\",\n  \"question2\": \"I have a bunch of boxes of different sizes that I need to pack into a big box. I don't want the big box to be too big, but I also don't want the boxes to overlap. Is there a way to figure out the smallest big box I can use?\",\n  \"question3\": \"Imagine you're building a city with blocks of different sizes. You want to fit all the blocks into a big rectangle, but you don't want them to touch each other. How can you make the rectangle as small as possible while still fitting all the blocks?\",\n  \"question4\": \"Packing 5 boxes of different sizes into a small space. How to minimize space used?\",\n  \"question5\": \"I'm a logistics manager for a company that specializes in shipping large, irregularly-shaped items. We have a fleet of trucks with varying cargo capacities, and we need to pack these items into the trucks in a way that minimizes the number of trucks needed while ensuring that all items are safely transported. The items are rectangular in shape, but they come in a wide range of sizes, from small boxes to large machinery. We also have to consider the weight and balance of the items when packing them into the trucks. Our goal is to reduce our carbon footprint by minimizing the number of trucks on the road, while also ensuring that all items are delivered safely and efficiently. Can you help us develop a strategy for packing these items into our trucks in a way that achieves these goals?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Square Packing Problem\",\n  \"description\": \"The Square Packing Problem is a classic problem in constraint programming and operations research. The problem involves packing a set of squares of different sizes into a rectangular container of minimum area. The goal is to find the smallest possible area of the container that can accommodate all the squares without overlapping them.\",\n  \"variables\": \"n, height, width, area, x, y\",\n  \"variables_explanation\": \"n is the number of squares, height and width are the dimensions of the rectangular container, area is the area of the container, and x and y are arrays of variables representing the x and y coordinates of the bottom-left corner of each square.\",\n  \"constraints\": \"forall(s in SQUARE)(x[s] + s <= width), forall(s in SQUARE)(y[s] + s <= height), forall(s1, s2 in SQUARE where s1 < s2)(x[s1] + s1 <= x[s2] \\/ x[s2] + s2 <= x[s1] \\/ y[s1] + s1 <= y[s2] \\/ y[s2] + s2 <= y[s1])\",\n  \"constraints_explanation\": \"The constraints ensure that each square fits within the container (first two constraints), and that no two squares overlap (third constraint). The third constraint is a disjunction of four conditions, each representing a possible way for two squares to not overlap.\",\n  \"objective\": \"minimize area\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "array_quest": {"__data__": {"id_": "array_quest", "embedding": null, "metadata": {"problem_family": "array_quest", "model_name": "array_quest", "source_code": "set of int: COL = 1..5;\nset of int: ROW = 1..2;\narray[ROW,COL] of int: c = \n\t\t\t\t[| 250, 2,  75, 100,  0 \n\t\t\t\t | 200, 0, 150, 150, 75 |];\narray[COL,ROW] of int: b = array2d(COL, ROW, \n   [c[j, i] | i in COL, j in ROW]);\n\nsolve satisfy;\n\noutput [\"b = [\"] ++\n       [ if j = 1 then \"| \" else \"\" endif ++\n         show_int(3,b[i,j]) ++ if j = 2 then \"\\n     \" else \",\" endif\n       | i in COL, j in ROW ] ++ [\"|];\"];\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm a logistics manager for a company that operates a fleet of drones to deliver packages in a metropolitan area. I have a cost matrix that represents the energy consumption of each drone when traveling between different locations. I need to transform this matrix into a format that represents the energy consumption of each location when served by a specific drone. How can I achieve this transformation efficiently?\",\n  \n  \"question2\": \"I'm planning a music festival with 5 stages and 2 sound engineers. I have a table that shows how much it costs for each sound engineer to set up at each stage. I want to make a new table that shows how much it costs for each stage to be set up by a specific sound engineer. Can someone help me figure this out?\",\n  \n  \"question3\": \"Imagine you're the manager of a school cafeteria with 5 food stations and 2 chefs. You have a list of how much it costs for each chef to prepare food at each station. You want to make a new list that shows how much it costs for each food station to be prepared by a specific chef. How would you do this?\",\n  \n  \"question4\": \"I have a 2x5 matrix of costs. How can I flip it to get a 5x2 matrix?\",\n  \n  \"question5\": \"I'm the director of a large hospital with 5 departments (Emergency, Surgery, Pediatrics, Oncology, and Cardiology) and 2 teams of medical specialists (Team A and Team B). Each team has a different level of expertise and experience in each department, which affects the quality of care they can provide. I have a cost matrix that represents the cost of each team providing care in each department, taking into account factors such as the team's expertise, the department's requirements, and the hospital's resources. The cost matrix is as follows: \n  [250, 2, 75, 100, 0 \n   200, 0, 150, 150, 75]. \n  I need to transform this matrix into a format that represents the cost of each department when served by a specific team. This will help me make informed decisions about which team to assign to each department, taking into account the trade-offs between cost and quality of care. How can I achieve this transformation efficiently and effectively?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Assignment Problem\",\n  \"description\": \"The Assignment Problem is a classic problem in Operations Research and Computer Science. It involves finding the optimal assignment of a set of workers to a set of tasks, given the cost of each worker performing each task. The goal is to minimize the total cost of the assignments.\",\n  \"variables\": \"b[i,j] (i in COL, j in ROW), where b[i,j] is the cost of assigning task i to worker j. However, in this model, b is not a decision variable but rather a parameter that is derived from the cost matrix c. There are no decision variables in this model.\",\n  \"constraints\": \"None (the model is a simple data transformation and does not involve any constraints on decision variables).\",\n  \"objective\": \"None (the model is a simple data transformation and does not involve any optimization objective).\"\n}\n\nNote: The provided Minizinc model does not actually model an optimization problem, but rather a simple data transformation. It takes a cost matrix c and transforms it into a new matrix b. There are no decision variables or constraints in this model.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "graph": {"__data__": {"id_": "graph", "embedding": null, "metadata": {"problem_family": "graph", "model_name": "graph", "source_code": "% a strange graph numbering problem\nvar 1..8: a;\nvar 1..8: b;\nvar 1..8: c;\nvar 1..8: d;\nvar 1..8: e;\nvar 1..8: f;\nvar 1..8: g;\nvar 1..8: h;\n\n% Each number is used exactly once\nconstraint a != b;\nconstraint a != c;\nconstraint a != d;\nconstraint a != e;\nconstraint a != f;\nconstraint a != g;\nconstraint a != h;\nconstraint b != c;\nconstraint b != d;\nconstraint b != e;\nconstraint b != f;\nconstraint b != g;\nconstraint b != h;\nconstraint c != d;\nconstraint c != e;\nconstraint c != f;\nconstraint c != g;\nconstraint c != h;\nconstraint d != e;\nconstraint d != f;\nconstraint d != g;\nconstraint d != h;\nconstraint e != f;\nconstraint e != g;\nconstraint e != h;\nconstraint f != g;\nconstraint f != h;\nconstraint g != h;\n\n% Adjacent vertices differ by at most two\nconstraint abs(a - b) >= 2;\nconstraint abs(a - c) >= 2;\nconstraint abs(a - d) >= 2;\nconstraint abs(b - c) >= 2;\nconstraint abs(b - e) >= 2;\nconstraint abs(b - f) >= 2;\nconstraint abs(c - d) >= 2;\nconstraint abs(c - e) >= 2;\nconstraint abs(c - f) >= 2;\nconstraint abs(c - g) >= 2;\nconstraint abs(d - f) >= 2;\nconstraint abs(d - g) >= 2;\nconstraint abs(e - f) >= 2;\nconstraint abs(e - h) >= 2;\nconstraint abs(f - g) >= 2;\nconstraint abs(f - h) >= 2;\nconstraint abs(g - h) >= 2;\n\nsolve satisfy;\n\noutput [\"  \\(b)-\\(e)\\n\",\n        \" /|*|\\\\\\n\",\n        \"\\(a)-\\(c)-\\(f)-\\(h)\\n\",\n        \" \\\\|*|/\\n\",\n        \"  \\(d)-\\(g)\\n\"] ++\n       [\"\\na = \\(a); b = \\(b); c = \\(c); d = \\(d);\",\n        \" e = \\(e); f = \\(f); g = \\(g); h = \\(h);\\n\"] \n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm designing a network of 8 high-frequency radio transmitters in a dense urban area. Each transmitter must be assigned a unique frequency between 1 and 8 to minimize interference. However, due to the proximity of the transmitters, the frequency difference between adjacent transmitters must be at least 2 units to prevent signal overlap. How can I assign the frequencies to the transmitters to satisfy these constraints?\",\n\n  \"question2\": \"I have 8 friends coming over for a party and I want to give each of them a unique number between 1 and 8 as a fun party favor. However, some of my friends don't get along, so I need to make sure that friends who don't get along aren't assigned numbers that are too close together. For example, if two friends don't get along, I don't want them to have numbers that are only 1 apart. Can you help me figure out how to assign the numbers to my friends?\",\n\n  \"question3\": \"I'm planning a treasure hunt for my school's math club. I have 8 clues that I want to hide around the school, and each clue needs to have a unique number between 1 and 8. However, some of the clues are hidden in close proximity to each other, so I need to make sure that the numbers on the clues aren't too close together. For example, if two clues are hidden near each other, I don't want them to have numbers that are only 1 apart. Can you help me figure out how to assign the numbers to the clues?\",\n\n  \"question4\": \"Assign 8 unique numbers to 8 objects, with adjacent objects having numbers at least 2 apart.\",\n\n  \"question5\": \"I'm the manager of a large warehouse that stores 8 different types of inventory. Each type of inventory needs to be assigned a unique storage location, and the storage locations are arranged in a specific pattern to minimize congestion and maximize efficiency. However, due to the layout of the warehouse, some storage locations are closer together than others, and we need to make sure that inventory types that are prone to damage or contamination aren't stored too close together. Specifically, we need to ensure that the storage locations for these sensitive inventory types are at least 2 locations apart from each other. We also need to make sure that each storage location is assigned a unique number between 1 and 8 to facilitate easy tracking and retrieval of the inventory. Can you help me figure out how to assign the storage locations to the inventory types to satisfy these constraints and optimize the warehouse layout? For example, let's say the warehouse layout is as follows:\n\n  Location 1 is adjacent to Location 2 and Location 3\n  Location 2 is adjacent to Location 1 and Location 4\n  Location 3 is adjacent to Location 1 and Location 5\n  Location 4 is adjacent to Location 2 and Location 6\n  Location 5 is adjacent to Location 3 and Location 7\n  Location 6 is adjacent to Location 4 and Location 8\n  Location 7 is adjacent to Location 5\n  Location 8 is adjacent to Location 6\n\n  And let's say the sensitive inventory types are Type A, Type B, and Type C. How can I assign the storage locations to the inventory types to satisfy the constraints and optimize the warehouse layout?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Graph Numbering Problem\",\n  \"description\": \"The Graph Numbering Problem is a classic problem in constraint programming. It involves assigning numbers to the vertices of a graph such that each number is used exactly once and the difference between the numbers of adjacent vertices is at least two. The problem is often used as a benchmark for constraint programming solvers.\",\n  \"variables\": \"a, b, c, d, e, f, g, h \u2208 {1, 2, ..., 8}. These variables represent the numbers assigned to the vertices of the graph.\",\n  \"constraints\": \"a \u2260 b, a \u2260 c, ..., g \u2260 h (28 constraints), |a - b| \u2265 2, |a - c| \u2265 2, ..., |g - h| \u2265 2 (16 constraints). The first set of constraints ensures that each number is used exactly once, while the second set of constraints ensures that the difference between the numbers of adjacent vertices is at least two.\",\n  \"objective\": \"satisfy. The objective of the problem is to find a solution that satisfies all the constraints, rather than minimizing or maximizing a specific value.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "myabs": {"__data__": {"id_": "myabs", "embedding": null, "metadata": {"problem_family": "myabs", "model_name": "myabs", "source_code": "function var int: myabs(var int: x) \n         :: promise_total =\n         let { var int: y; \n               constraint int_abs(x,y) } in y;\n\npredicate int_abs(var int: x, var int: y) = \n          y >= x /\\ y >= -x /\\ (y <= x \\/ y <= -x); \n\nvar -5..6: a;\nvar 2..5: b;\n\nconstraint myabs(a) > 4 -> b < 4;\n\nsolve satisfy;\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"A logistics company needs to optimize its delivery routes. The company has a fleet of trucks with varying capacities, and each truck must travel a certain distance to reach its destination. The company wants to ensure that if a truck travels more than 400 miles, it must carry less than 4 tons of cargo. How can the company determine the optimal cargo load for each truck based on its travel distance?\",\n  \n  \"question2\": \"Imagine you're planning a road trip and you want to make sure you don't overpack your car. If you're driving really far, you want to make sure you don't have too much stuff in the car. How can you figure out how much stuff to bring based on how far you're driving?\",\n  \n  \"question3\": \"Tom is going on a bike ride and he wants to make sure he doesn't carry too much weight in his backpack. If he's riding more than 4 miles, he wants to make sure he has less than 4 water bottles in his backpack. How can Tom figure out how many water bottles to bring based on how far he's riding?\",\n  \n  \"question4\": \"If a machine is operating at high speed (> 400 units), it must not exceed 4 units of pressure. What are the possible pressure values for the machine?\",\n  \n  \"question5\": \"A renewable energy company is designing a new wind farm with turbines of varying capacities. The company wants to ensure that if a turbine is installed in an area with high wind speeds (> 400 meters per second), it must be designed to handle less than 4 megawatts of power. The company also needs to consider the cost of installation, maintenance, and energy production for each turbine. The company has a budget of $10 million for the entire project and wants to maximize energy production while minimizing costs. How can the company determine the optimal turbine design and placement for each location based on wind speed and other factors?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Conditional Absolute Value Problem\",\n  \"description\": \"This problem involves finding a solution that satisfies a conditional constraint based on the absolute value of a variable. The problem has two decision variables, a and b, with different domains. The constraint is conditional, meaning it only applies if the absolute value of a is greater than 4.\",\n  \"variables\": \"a \u2208 [-5, 6], b \u2208 [2, 5]\", \n  \"constraints\": \"|a| > 4 \u2192 b < 4\", \n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "crazy_sets": {"__data__": {"id_": "crazy_sets", "embedding": null, "metadata": {"problem_family": "crazy_sets", "model_name": "crazy_sets", "source_code": "int: n; % maximum value\nset of int: NUMBER = 1..n;\nint: c; % cardinality of sets\nint: m; % number of sets\n\n\narray[1..m] of var set of NUMBER: s;\n\nconstraint forall(i,j,k in 1..m where i < j /\\ j < k)\n     ( s[i] intersect s[j] intersect s[k] = {} );\n\n\narray[1..m,1..c] of var NUMBER: x;\nconstraint forall(i in 1..m, j in 1..c-1)\n      ( x[i,j] < x[i,j+1] );\n\n\nconstraint forall(i in 1..m-1, j in 1..c)\n      ( x[i,j] < x[i+1,j] );\n\nconstraint forall(i in 1..m, o in NUMBER)\n      (o in s[i] \n       -> exists(j in 1..c)(x[i,j] = o));\nconstraint forall(i in 1..m, j in 1..c)(x[i,j] in s[i]);\n\nsolve satisfy;\n\noutput [show(s)];\n\nn = 10;\nc = 4;\nm = 4;\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm planning a large music festival with 10 stages and 4 time slots per stage. I have a list of 10 popular bands, and I want to schedule them in a way that no two stages have the same band at the same time, and no three stages have the same band at any time. Additionally, I want to ensure that the bands are scheduled in a way that the earliest time slot on each stage is always occupied by a different band than the earliest time slot on the previous stage. Can you help me find a valid schedule?\",\n  \"question2\": \"I have a bunch of toys and I want to put them into boxes. I have 10 toys and I want to put them into 4 boxes. But I don't want any three boxes to have the same toy. And I want to make sure that the toys in each box are in order from smallest to largest. Can you help me figure out how to do this?\",\n  \"question3\": \"I'm planning a school project where I have to create a set of 4 teams with 4 members each. I have a list of 10 students, and I want to assign them to teams in a way that no three teams have the same student. Also, I want to make sure that the students on each team are in alphabetical order. Can you help me come up with a solution?\",\n  \"question4\": \"I have 10 items and 4 groups. No three groups can have the same item. How can I divide the items into groups?\",\n  \"question5\": \"I'm a curator at a large art museum, and I'm planning a new exhibit featuring 10 famous paintings. I want to display the paintings in 4 galleries, with 4 paintings in each gallery. However, I have a few constraints to consider. Firstly, no three galleries can have the same painting. Secondly, I want to ensure that the paintings in each gallery are in chronological order by artist. Thirdly, I want to make sure that the earliest painting in each gallery is always by a different artist than the earliest painting in the previous gallery. Finally, I want to prioritize the display of paintings by artists who are known for their work in a specific style. Can you help me come up with a valid arrangement of paintings that meets all of these constraints?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Erd\u0151s-Ko-Rado Problem\",\n  \"description\": \"The Erd\u0151s-Ko-Rado problem is a well-known problem in combinatorial mathematics. It involves finding the maximum number of subsets of a given size that can be chosen from a set of elements such that no three subsets have an element in common. In this model, we are looking for a collection of subsets of a given size from a set of elements, such that no three subsets have an element in common.\",\n  \"variables\": \"s: 2^NUMBER, x: NUMBER^m*c\",\n  \"variables_explanation\": \"The decision variables are s, which represents a collection of subsets of the set NUMBER, and x, which represents the elements in each subset. The variable s is a 2D array where each element is a subset of the set NUMBER, and the variable x is a 2D array where each element is an element in the set NUMBER.\",\n  \"constraints\": \"\u2200i,j,k\u22081..m (i<j\u2227j<k \u2192 s[i]\u2229s[j]\u2229s[k]={}) \u2227 \u2200i\u22081..m,j\u22081..c-1 (x[i,j]<x[i,j+1]) \u2227 \u2200i\u22081..m-1,j\u22081..c (x[i,j]<x[i+1,j]) \u2227 \u2200i\u22081..m,o\u2208NUMBER (o\u2208s[i] \u2192 \u2203j\u22081..c (x[i,j]=o)) \u2227 \u2200i\u22081..m,j\u22081..c (x[i,j]\u2208s[i])\",\n  \"constraints_explanation\": \"The constraints are: (1) no three subsets have an element in common, (2) the elements in each subset are in increasing order, (3) the elements in each subset are in lexicographic order, (4) each element in a subset is actually in the subset, and (5) each element in the subset is in the set NUMBER.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "nurses": {"__data__": {"id_": "nurses", "embedding": null, "metadata": {"problem_family": "nurses", "model_name": "nurses", "source_code": "int: k; % number of nurses\nset of int: NURSE = 1..k;\nint: m; % number of days\nset of int: DAY = 1..m;\nset of int: SHIFT = 1..3;\nint: day = 1; int: night = 2; int: dayoff = 3;\narray[SHIFT] of string: code = [\"d\", \"n\", \"-\"];\nint: o; % number on day shift\nint: l; % lower bound for nightshift\nint: u; % upper bound for nightshift\n\n\narray[NURSE,DAY] of var SHIFT: x;\n\nconstraint forall(n in NURSE, d in 1..m-2)\n                 ( x[n,d] = night /\\ x[n,d+1] = night \n                   -> x[n,d+2] = dayoff);\n\nconstraint forall(n in NURSE, d in 1..m-1)\n                 (x[n,d] = night -> x[n,d+1] != day);\n\ninclude \"global_cardinality_low_up.mzn\";\nconstraint forall(d in DAY)\n                 (global_cardinality_low_up([x[n,d] | n in NURSE ],                                               [ day, night ], [ o, l ], [o, u])); \n\nsolve satisfy;\n\noutput [ code[fix(x[n,d])] \n         ++ if d = m then \"\\n\" else \" \" endif\n       | n in NURSE, d in DAY];\n\n", "questions_this_excerpt_can_answer": "```\n{\n  \"question1\": \"I'm managing a team of 10 freelancers working on a project that requires them to be available for 7 days. I need to ensure that at least 3 freelancers are available during the day, and between 2 and 4 freelancers are available at night. Additionally, I want to avoid having any freelancer work two consecutive nights without a break. How can I create a schedule that meets these requirements and allows me to visualize the assignments?\",\n  \"question2\": \"I have a bunch of friends who want to volunteer at a local animal shelter. We need to make sure that someone is there every day to take care of the animals. Some of my friends can only come during the day, and some can only come at night. We also need to make sure that no one gets too tired and has to take a break. Can you help me make a schedule that works for everyone?\",\n  \"question3\": \"I'm in charge of planning a school trip to a summer camp. We have 15 students and 7 days to plan activities. Some activities can only be done during the day, and some can only be done at night. We also need to make sure that the students get enough rest and don't get too tired. Can you help me make a schedule that's fun and safe for everyone?\",\n  \"question4\": \"10 workers, 7 days, day/night shifts. No consecutive night shifts. How to schedule?\",\n  \"question5\": \"I'm the manager of a large event planning company, and we're organizing a music festival that will take place over 7 days. We have a team of 20 staff members who will be working on the event, and we need to create a schedule that ensures we have adequate coverage at all times. The festival will have day and night performances, and we need to make sure that our staff members are assigned to shifts that align with their skills and availability. We also need to ensure that no staff member works more than two consecutive night shifts without a break. Additionally, we have some staff members who are only available to work during the day, and others who are only available to work at night. We also need to take into account the fact that some staff members will be working on specific tasks that require them to be on site for extended periods of time. Can you help me create a schedule that meets all of these requirements and ensures a successful event?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "```\n{\n  \"name\": \"Nurse Scheduling Problem\",\n  \"description\": \"The Nurse Scheduling Problem is a classic problem in constraint programming. It involves scheduling nurses to work different shifts over a period of days, subject to certain constraints. The goal is to find a feasible schedule that satisfies all the constraints.\",\n  \"variables\": \"x[n,d] \u2208 {1, 2, 3} for n \u2208 NURSE and d \u2208 DAY\",\n  \"variables_explanation\": \"The decision variables x[n,d] represent the shift assigned to nurse n on day d. The possible shifts are day (1), night (2), and day off (3).\",\n  \"constraints\": \"\u2200n \u2208 NURSE, d \u2208 1..m-2: (x[n,d] = 2 \u2227 x[n,d+1] = 2 \u2192 x[n,d+2] = 3) \u2227 \u2200n \u2208 NURSE, d \u2208 1..m-1: (x[n,d] = 2 \u2192 x[n,d+1] \u2260 1) \u2227 \u2200d \u2208 DAY: global_cardinality_low_up([x[n,d] | n \u2208 NURSE], [1, 2], [o, l], [o, u])\",\n  \"constraints_explanation\": \"The constraints are: (1) a nurse cannot work two consecutive night shifts without having a day off on the third day, (2) a nurse cannot work a night shift followed by a day shift, and (3) the number of nurses working day and night shifts on each day must be within the specified bounds (o, l, u).\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote: The objective is \"satisfy\" because the problem is a feasibility problem, where the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "stableroommates": {"__data__": {"id_": "stableroommates", "embedding": null, "metadata": {"problem_family": "stable_roommates", "model_name": "stableroommates", "source_code": "% Taken from the paper by Patrick Prosser at CPAIOR 2014\nint: n; % number of agents\nset of int: AGENT = 1..n;\nset of int: AGENT0 = 0..n;    % zero indicates no agent\narray[AGENT,1..n-1] of AGENT0: pref; % preference order for each agent\n     % the preference order is padded by zeros\narray[AGENT] of int: npref = [ sum(j in 1..n-1)(bool2int(pref[i,j] > 0))\n                             | i in AGENT ];\nconstraint forall(i in AGENT)\n                 (assert(forall(j in 1..n-1)\n                               (pref[i,j] != i /\\ \n                                (pref[i,j] = 0 <-> j > npref[i])) /\\\n                         forall(j1, j2 in 1..npref[i] where j1 < j2)\n                               (pref[i,j1] != pref[i,j2]),\n                         \"Agent \" ++ show(i) ++ \"has erroneous preferences\"));\n%% ranking information: rank = 0 means not ranked\narray[AGENT,AGENT] of 0..n-1: rank = \n     array2d(AGENT,AGENT, [ max([bool2int(pref[i1,j] = i2) * j | j in 1..n-1])\n                          | i1, i2 in AGENT ]);\n\narray[AGENT] of var 1..n: a;\n%% constraint (1)\nconstraint forall(i in AGENT)(a[i] <= npref[i] + 1);\n%% constraint (2)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref[i,p] } in \n                   a[i] > rank[i,j] -> a[j] < rank[j,i]\n                 );\n%% constraint (3)\nconstraint forall(i in AGENT, p in 1..npref[i])\n                 ( let { int: j = pref[i,p] } in \n                   a[i] = rank[i,j] -> a[j] = rank[j,i]\n                 );\n\nsolve satisfy;\n\noutput  [ if i < fix(pref[i,a[i]]) then \"(\" ++ show(i) ++ \",\" ++ show(pref[i,a[i]]) ++ \")\\n\"\n          else \"\" endif\n        | i in AGENT ]\n       ++ [show(rank),\"\\n\"] \n %      ++ [show(npref),\"\\n\"] \n %      ++ [show(a),\"\\n\"]\n        ;\n       \n\n", "questions_this_excerpt_can_answer": "```json\n{\n  \"question1\": \"I'm planning a large networking event with 20 attendees, each with their own preferences for who they'd like to meet. I want to create a schedule that ensures each attendee meets their top choices, while also minimizing the number of meetings that would require attendees to switch between rooms. How can I optimize the schedule to achieve this?\",\n  \"question2\": \"I'm trying to set up a playdate for my kids and their friends. There are 10 kids in total, and each kid has a list of their favorite friends to play with. I want to make sure everyone has a good time, but I don't want any kids to feel left out. Can you help me figure out who should play together?\",\n  \"question3\": \"I'm in charge of planning a school dance, and we need to assign tables for the students to sit at. There are 15 tables, and each student has a list of their friends they want to sit with. We also need to make sure that no table has more than 8 students. Can you help me figure out who should sit at each table?\",\n  \"question4\": \"5 friends want to sit together at a concert, but each has a different preference for who they want to sit next to. How can we arrange the seats to make everyone happy?\",\n  \"question5\": \"I'm the manager of a large restaurant with 25 tables, and we're expecting a busy night with 50 customers. Each customer has a list of their preferred tables, based on factors like proximity to the bar, natural light, and noise level. We also need to ensure that no table has more than 4 customers, and that we're maximizing the number of customers we can seat. Additionally, we have a few VIP customers who need to be seated at specific tables. Can you help me create a seating plan that takes all of these factors into account and ensures that every customer has a great dining experience?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "{\n  \"name\": \"Stable Roommates Problem\",\n  \"description\": \"The Stable Roommates Problem is a classic problem in constraint programming and computer science. It involves finding a stable matching between a set of agents, where each agent has a preference order over the other agents. A matching is considered stable if there are no two agents who would prefer to be matched with each other over their current matches. The problem is a variation of the Stable Marriage Problem, but without the distinction between men and women.\",\n  \"variables\": \"a[i] (i in AGENT)\",\n  \"variables_explanation\": \"The decision variables a[i] represent the ranking of agent i in the stable matching. The value of a[i] is the rank of agent i in the matching, with lower values indicating a higher preference.\",\n  \"constraints\": \"a[i] <= npref[i] + 1 (i in AGENT), a[i] > rank[i,j] -> a[j] < rank[j,i] (i in AGENT, p in 1..npref[i]), a[i] = rank[i,j] -> a[j] = rank[j,i] (i in AGENT, p in 1..npref[i])\",\n  \"constraints_explanation\": \"The constraints ensure that the matching is stable. The first constraint ensures that the rank of each agent is within their preference order. The second constraint ensures that if agent i prefers agent j over their current match, then agent j must prefer their current match over agent i. The third constraint ensures that if agent i is matched with agent j, then agent j must also be matched with agent i.\",\n  \"objective\": \"satisfy\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}}}