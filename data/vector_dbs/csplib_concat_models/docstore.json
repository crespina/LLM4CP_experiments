{"docstore/metadata": {"all_interval": {"doc_hash": "7f02be2cba0a73383163600145191f1f63cd3a0ab05a24c665f2826308a8f1c7"}, "bibd": {"doc_hash": "34204be3d1d0508f581ceadb3c5f380af5ec16226cb36a20c0f40b8e97686fbf"}, "bus_scheduling_csplib": {"doc_hash": "96642368b31a4c4e9d31cb34e857897bf269ecc4f81280563e1229b5f3e1cb87"}, "car": {"doc_hash": "cddbf68c691e3857eae758ceaff9bf723f976f26d9996c3b9200c9e1783cdccf"}, "clique": {"doc_hash": "411af2c43088877b27d25dab980962b7f676b24abab896fb3c54df53366ac7a9"}, "crossfigure": {"doc_hash": "c34ccee6b7df39a8bd94d17718f9a2a2876d150f5c3c522c001d6040560ecdd0"}, "curriculum": {"doc_hash": "74a225c8ef935ac76762800ec5719a9677a8ee9020abf8cf10683dfb8673999e"}, "diamond_free_degree_sequence": {"doc_hash": "57deae8f5d376914f380ee0ed73cb7f90303c1d0545b94b4c2133cfa0f03bf5c"}, "fractions": {"doc_hash": "78c163f7c5fb3a81b786ccf76f37ec8e946c85e3c46dbc34b06763e20019a01c"}, "golfers": {"doc_hash": "b2199babdf2e4e7addc6f4c351ccef6e83740bc4df0ab12942e877ed3e01b6a8"}, "golomb": {"doc_hash": "8fbd409e9c57c6a776f162895ee21538dd7da03d8bc9307ed6f29828f4e8d1bd"}, "K4xP2Graceful": {"doc_hash": "464d592f9b38b6e7a583c0498082f80910e05019bfa09b7893da209dec65e983"}, "killer_sudoku": {"doc_hash": "12ed721edfbc244b4d44854954212d0405871a1b6abbfcccc6dcc3e39201d550"}, "langford": {"doc_hash": "c76c520a4bda3235d7b8d47a4aa612f1879b34e7dcc663c000953a61b5b192b3"}, "magic_hexagon": {"doc_hash": "e9b3f22d885cf77488327f429cabf79c3200d7c55bc8d8d98a405ad0576b9236"}, "magic_sequence": {"doc_hash": "818b86e409d13438e99dc214d4f81930f4fbd8cbb9cf047fa1a26fd4d0c3b77d"}, "maximum_density_still_life": {"doc_hash": "e4d4d3a7d6fe759673aac7f9c79ec631fe94888e095e974d69e38e35e9d0e8d6"}, "nonogram_create_automaton2": {"doc_hash": "1ed85a0124f9c92211329ae608e49310e81169f2697bc29338d5ea77f343d476"}, "opd": {"doc_hash": "ac6d0a209f0ebba8f3f5355d7427abfc06226686ac5cae0dff94d460e3114ca7"}, "partition": {"doc_hash": "3474f3ba87a83f557199404b0a50ec21a4bbc6baed79e8dcbe9825be26308308"}, "QuasigroupCompletion": {"doc_hash": "b6e67fad3dfce8d63a4a8c7432a8d6f3f72a7d812510fea9aff3b06c32175595"}, "QuasiGroupExistence": {"doc_hash": "5355398451c2c95e0730e9fd7aeeab89e1e5be66e389ec5ba6b8b71fa3ea38c0"}, "queens": {"doc_hash": "ba1257989bc97f0548691a5da1e12bff0345221d69551d95606b38951dbef474"}, "rehearsal": {"doc_hash": "c213d354b89e5e56e4b307cf9efe1cf9fbc4aea239dd30e2b321aae8ce3b5174"}, "RosteringProblem": {"doc_hash": "99b45211d537e144b245cb68e2540411c31c266db395c16c63708b73d19230c3"}, "sb": {"doc_hash": "e4473b6ec2dd75e1b70d55c7b657aeb52de0d5dbfa648271d80190b74738ab12"}, "schur": {"doc_hash": "c67d38ecfe777ae4745eed1679d78928df39046dc1eafa7b6b9742b350a096b2"}, "sonet_problem": {"doc_hash": "befb8e0bac7d42bd8ecb492d32d804e42f5f6b9cbed1d04fda90de5afb1e4d7b"}, "steiner": {"doc_hash": "42f8667b7226f597df63f401149e44299fe84cae7db7e84023a2d4507156b2ce"}, "stoch_fjsp": {"doc_hash": "e36a39cb87d492aceea37d1900c95c7059bbc90daca49d546382ad988c25baff"}, "template_design": {"doc_hash": "11ae19a31c184c4902c1acd631e0916fd97a5b19a2df8e85fcc0afe2ae05424a"}, "traffic_lights_table": {"doc_hash": "2988804a144e1b435ea72ca292f9cf2a79f3057e4e84916336c303f5e003ee52"}, "TTPPV": {"doc_hash": "15d598aedacca5996127deaaa81fe30393b3183c40c52e8f93048fae15e43edb"}, "vessel-loading": {"doc_hash": "f58114429d1b43df44d76009b1e122bd92ceaa57fac6c44a0650987835bd82f5"}, "warehouses": {"doc_hash": "6850b805928b4a070d80f4717e82bfab1d1f126cf0fb6dc3a4bf6179778a36d0"}, "water_buckets1": {"doc_hash": "eb792ac7e1ee492d3c4747c60bd92648305f0650665be325563b728532f2b125"}}, "docstore/data": {"all_interval": {"__data__": {"id_": "all_interval", "embedding": null, "metadata": {"problem_family": "all_interval", "model_name": "all_interval", "source_code": "Model 1 : \n\n\n%\n% All interval problem in MiniZinc\n%\n% \"\"\"\n% Given the twelve standard pitch-classes (c, c%, d, ...), represented by\n% numbers 0,1,...,11, find a series in which each pitch-class occurs exactly\n% once and in which the musical intervals between neighbouring notes cover\n% the full set of intervals from the minor second (1 semitone) to the major\n% seventh (11 semitones). That is, for each of the intervals, there is a\n% pair of neigbhouring pitch-classes in the series, between which this\n% interval appears. The problem of finding such a series can be easily\n% formulated as an instance of a more general arithmetic problem on Z_n,\n% the set of integer residues modulo n. Given n in N, find a vector\n% s = (s_1, ..., s_n), such that (i) s is a permutation of\n% Z_n = {0,1,...,n-1}; and (ii) the interval vector\n% v = (|s_2-s_1|, |s_3-s_2|, ... |s_n-s_{n-1}|) is a permutation of\n% Z_n-{0} = {1,2,...,n-1}. A vector v satisfying these conditions is\n% called an all-interval series of size n; the problem of finding such\n% a series is the all-interval series problem of size n. We may also be\n% interested in finding all possible series of a given size.\n\ninclude \"globals.mzn\";\n\nint: n = 12;\n% array[1..n] of var 1..n: x;\narray[1..n] of var 1..n: x;\narray[1..n-1] of var 1..n-1: diffs;\nint: sum_distinct = ((n+1)*n) div 2;\n\n% max_regret seems to be quite good....\nsolve :: int_search(x, max_regret, indomain_split, complete) satisfy;\n\nconstraint      \n  all_different(diffs) :: domain\n  /\\  \n  all_different(x) :: domain\n  /\\ \n  forall(k in 1..n-1) (\n      diffs[k] = abs(x[k+1] - x[k])\n  )\n  /\\ % symmetry breaking\n  x[1] < x[n-1]\n  /\\\n  diffs[1] < diffs[2]\n;\n\n\noutput [\n       show(x) ++ \",\" % , \" \", show(sum_distinct), \" diffs: \", show(diffs)\n]\n\n\nModel 2 : \n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n%    all_different(series) /\\\n\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i != j)  (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n;\n\noutput\n[  show(series)\n];\n\n\nModel 3 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   %  C1: Each pitch class occurs exactly once\n   forall(i, j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   forall(i,j in classes where j < n-1 /\\ i < n-1 /\\ i!=j) (\n     abs(series[i+1] - series[i]) != abs(series[j+1] - series[j])\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput\n[ show(series)\n];\n\n\nModel 4 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[differ] of var differ: differences;\n\nsolve satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 1..n-2) (\n       differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in differ where i != j) (\n       differences[i] != differences[j]\n   )\n;\n\noutput [\n  show(series)\n];\n\n\nModel 5 : \n\n\ninclude \"globals.mzn\";\n\nint: n = 12;\nset of int: classes = 0..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\n\nsolve :: int_search(series, first_fail, indomain_median, complete) satisfy;\n\nconstraint\n  % C1: Each pitch class occurs exactly once\n  % GCAD: Exploitation of alldifferent() global constraint\n  all_different(series)\n  /\\\n\n  % C2: Differences between neighbouring notes are all different\n  % GCAD: Exploitation of alldifferent() global constraint\n  % alldifferent(all (i in classes: i <> n-1) abs(series[i+1] - series[i]));\n  all_different( \n         [ abs(series[i+1] - series[i]) | i in classes where i != n-1]\n  )\n  \n;\n\noutput [\n  show(series)\n];\n\n\nModel 6 : \n\n\nint: n= 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\n% solve satisfy;\nsolve :: int_search(series, occurrence, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   forall(i,j in classes where i != j) (\n     series[i] != series[j]\n   )\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n      differences[i]=abs(series[i+1] - series[i])\n   )\n   /\\\n   forall(i,j in 0..n-2 where i != j) (\n      differences[i] != differences[j]\n   )\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\noutput [\n  show(series)\n];\n\n\nModel 7 : \n\n\ninclude \"globals.mzn\";\nint: n = 12;\nset of int: classes = 0..n-1;\nset of int: differ = 1..n-1;\n\n% Search space: The set of permutations of integer range [0..n-1]\narray[classes] of var classes: series;\narray[0..n-2] of var differ: differences;\n\nsolve ::int_search(series, first_fail, indomain_max, complete) satisfy;\n\nconstraint\n   % C1: Each pitch class occurs exactly once\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(series)\n   /\\\n   % C2: Differences between neighbouring notes are all different\n   % AUX: Addition of auxiliary predicates\n   % Auxiliary predicate stores the interval between pairs of neighbouring notes\n   forall(i in 0..n-2) (\n          differences[i] = abs(series[i+1] - series[i])\n   )\n   /\\\n   % GCAD: Exploitation of alldifferent() global constraint\n   all_different(differences)\n   /\\\n   % SBSO: Symmetry-breaking by selective ordering\n   % The first note is less than last one\n   series[0] < series[n-1]\n;\n\n\noutput [\n   \"series: \" ++ show(series) ++ \"\\n\" ++\n   \"differences: \" ++ show(differences) \n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the All-Interval Series Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to optimize the route of a robotic arm that picks up items from 12 different shelves. The arm can move in a straight line, but I want to minimize the total distance traveled while ensuring that each shelf is visited exactly once. Additionally, I want to ensure that the arm doesn't repeat the same movement pattern between shelves. Can you help me find the most efficient route?\",\n  \"question2\": \"I'm planning a road trip across 12 different cities, and I want to visit each city only once. I also want to make sure that the driving distance between each city is unique, so I don't get bored with the same scenery. Can you help me plan the perfect route?\",\n  \"question3\": \"I'm a 10-year-old who loves puzzles! I have 12 different colored blocks, and I want to build a tower with each block only used once. The catch is that I want the distance between each block to be different, like a staircase. Can you help me figure out the right order to build my tower?\",\n  \"question4\": \"I need to schedule 12 meetings with different teams, and I want to minimize the time spent on travel between meetings. Can you help me find the most efficient order?\",\n  \"question5\": \"I'm a curator at a modern art museum, and I'm planning an exhibition with 12 different installations. Each installation requires a unique amount of space and has specific lighting and temperature requirements. I want to create a layout that ensures each installation is displayed in a way that maximizes its impact, while also minimizing the distance between installations to reduce visitor fatigue. Additionally, I want to ensure that the layout is visually appealing and doesn't repeat the same pattern of installation types. Can you help me design the perfect layout?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the All-Interval Series Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"All-Interval Series Problem\",\n  \"description\": \"The All-Interval Series Problem is a classic problem in constraint programming that involves finding a series of pitch classes such that each pitch class occurs exactly once and the musical intervals between neighbouring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones).\",\n  \"variables\": \"x = (x_1, ..., x_n) where x_i \u2208 {0, 1, ..., n-1}, diffs = (diffs_1, ..., diffs_{n-1}) where diffs_i \u2208 {1, 2, ..., n-1}\",\n  \"variables_description\": \"x represents the series of pitch classes, and diffs represents the differences between neighbouring notes in the series.\",\n  \"constraints\": \"all_different(x) \u2227 all_different(diffs) \u2227 \u2200k \u2208 {1, ..., n-1} (diffs_k = |x_{k+1} - x_k|) \u2227 x_1 < x_{n-1} \u2227 diffs_1 < diffs_2\",\n  \"constraints_description\": \"The constraints ensure that each pitch class occurs exactly once in the series, each difference between neighbouring notes occurs exactly once, the differences are calculated correctly, and some symmetry-breaking constraints are added to reduce the search space.\",\n  \"objective\": \"satisfy (no objective function, the goal is to find a feasible solution)\"\n}\n```\n\nNote that the variables, constraints, and objective are based on Model 1, but the other models are equivalent and represent the same problem.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "bibd": {"__data__": {"id_": "bibd", "embedding": null, "metadata": {"problem_family": "bibd", "model_name": "bibd", "source_code": "% bibd.mzn\n% vim: ft=zinc ts=4 sw=4 et tw=0\n% Ralph Becket <rafe@csse.unimelb.edu.au>\n% Tue Oct 23 11:28:06 EST 2007\n%\n% Balanced incomplete block designs.  See the following:\n% http://mathworld.wolfram.com/BlockDesign.html\n% http://www.dcs.st-and.ac.uk/~ianm/CSPLib/prob/prob028/spec.html\n%\n%\n%\n% A BIBD (v, b, r, k, lambda) problem is to find a binary matrix of v rows\n% of b columns such that each row sums to r, each column sums to k, and\n% the dot product beween any pair of distinct rows is lambda.\n\ninclude \"lex_lesseq.mzn\";\n\nint: v;\nint: k;\nint: lambda;\n\nint: b = (lambda * v * (v - 1)) div (k * (k - 1));\nint: r = (lambda * (v - 1)) div (k - 1);\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\narray [rows, cols] of var bool: m;\n\n    % Every row must sum to r.\n    %\nconstraint forall (i in rows) (sum (j in cols) (bool2int(m[i, j])) = r);\n\n    % Every column must sum to k.\n    %\nconstraint forall (j in cols) (sum (i in rows) (bool2int(m[i, j])) = k);\n\n    % The dot product of every pair of distinct rows must be lambda.\n    %\nconstraint\n    forall (i_a, i_b in rows where i_a < i_b) (\n        sum (j in cols) (bool2int(m[i_a, j] /\\ m[i_b, j])) = lambda\n    );\n\n    % Break row symmetry in the incidence matrix.\n    %\nconstraint forall(i in rows diff {max(rows)})(\n        lex_lesseq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    );\n\n    % Break column symmetry in the incidence matrix.\n    %\nconstraint forall(j in cols diff {max(cols)})(\n        lex_lesseq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    );\n\nsolve :: bool_search([m[i, j] | i in rows, j in cols],\n    input_order, indomain_min, complete)\n    satisfy;\n\noutput  [\"bibd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r),\n        \", k = \", show(k), \", lambda = \", show(lambda), \")\\n\\n\"] ++\n        [ ( if j > b then \"\\n\" else show(bool2int(m[i, j])) endif )\n        | i in rows, j in 1..(b + 1)\n        ];\n\n%----------------------------------------------------------------------------%\n%----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to allocate 15 warehouses to 20 delivery routes such that each warehouse is used for exactly 7 routes, each route visits exactly 3 warehouses, and any two routes have exactly 1 warehouse in common. How can the company optimize its warehouse allocation to meet these constraints?\",\n  \"question2\": \"I'm planning a music festival with 12 stages and 18 bands. I want each stage to have exactly 4 bands, each band to play on exactly 3 stages, and any two bands to share exactly 1 stage. How can I schedule the bands to make this happen?\",\n  \"question3\": \"I'm organizing a school fair with 10 game stalls and 15 volunteers. I want each stall to have exactly 3 volunteers, each volunteer to work at exactly 2 stalls, and any two volunteers to work together at exactly 1 stall. How can I assign the volunteers to the stalls?\",\n  \"question4\": \"Design a social network with 8 groups and 12 users such that each group has exactly 3 users, each user is in exactly 2 groups, and any two users are in exactly 1 group together.\",\n  \"question5\": \"A large hospital has 18 medical specialties and 25 doctors. The hospital wants to create teams of exactly 3 doctors to work together on exactly 4 specialties each. Additionally, the hospital wants to ensure that any two doctors work together on exactly 1 specialty, and any two specialties have exactly 1 doctor in common. How can the hospital create these teams to optimize its medical specialty coverage?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the Balanced Incomplete Block Design (BIBD) problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the description of the problem in the required format:\n\n{\n\"name\": \"Balanced Incomplete Block Design (BIBD)\",\n\"description\": \"A Balanced Incomplete Block Design (BIBD) is a combinatorial design in which each element is contained in the same number of blocks, each pair of elements is contained in the same number of blocks, and not all elements are contained in the same block. The problem is to find a binary matrix of v rows and b columns such that each row sums to r, each column sums to k, and the dot product between any pair of distinct rows is lambda.\",\n\"variables\": \"m[i, j] for i in {1, ..., v} and j in {1, ..., b}, where m[i, j] is a binary variable indicating whether element i is in block j. These variables represent the incidence matrix of the BIBD.\",\n\"constraints\": \"1) \u2200i in {1, ..., v}, \u2211(j in {1, ..., b}) m[i, j] = r (each row sums to r), 2) \u2200j in {1, ..., b}, \u2211(i in {1, ..., v}) m[i, j] = k (each column sums to k), 3) \u2200i, j in {1, ..., v} where i < j, \u2211(l in {1, ..., b}) m[i, l] \u2227 m[j, l] = \u03bb (the dot product between any pair of distinct rows is lambda), 4) row symmetry breaking constraints, 5) column symmetry breaking constraints.\",\n\"objective\": \"Satisfy (there is no objective function to minimize or maximize)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "bus_scheduling_csplib": {"__data__": {"id_": "bus_scheduling_csplib", "embedding": null, "metadata": {"problem_family": "bus_scheduling_csplib", "model_name": "bus_scheduling_csplib", "source_code": "%\n% Bus driver scheduling problem (prob022 in CSPLib) in MiniZinc.\n%\n% Specification\n% Bus driver scheduling can be formulated as a set paritioning problem.\n% We propose 12 set partitioning problems derived from small bus driver\n% scheduling problems. These consist of a given set of tasks (pieces of\n% work) to cover and a large set of possible shifts, where each shift\n% covers a subset of the tasks and has an associated cost. We must select\n% a subset of possible shifts that covers each piece of work once and\n% only once: this is called a partition. Further,\n%\n% In the driver scheduling (unlike air crew scheduling) the main aim is\n% to reduce the number of shifts used in the solution partition and the\n% total cost of the partition is secondary. To simplify the problem we have\n% made the cost of each shift the same. This means that the goal is to\n% minimise the number of shifts.\n%\n% The problems come from four different bus companies:\n% Reading (r1 to r5a),\n% CentreWest Ealing area (c1, c1a, c2),\n% the former London Transport (t1 and t2).\n%\n% The problems have differing regulations and features (e.g. urban and\n% short distance rural bus schedules can have very different features). Note\n% that r1 and r1a are the same problem, but have different numbers of\n% generated shifts. Similarly with the problems: c1, c1a and r5, r5a.\n%\n% Problems are presented in the same format as the set partitioning\n% examples in ORLIB. The first line gives the number of rows (pieces of work),\n% columns (shifts) and the minimum number of columns need for a partition.\n% Then each line after that corresponds to one column. It starts with\n% the cost (which is always 1 in our case) then the number of rows it\n% covers, followed by the rows it covers.\n% \"\"\"\n\n\ninclude \"globals.mzn\"; \nint: num_work;\nint: num_shifts;\nint: min_num_shifts;\narray[1..num_shifts] of set of int: shifts;\n\narray[1..num_shifts] of var 0..1: x;\nvar 0..num_shifts: tot_shifts;\n\n% solve minimize tot_shifts;\nsolve :: int_search(\n        x ++ [tot_shifts], \n        first_fail, \n        indomain_min, \n        complete) \n    minimize tot_shifts;\n    % satisfy;\n\nconstraint\n   tot_shifts = sum(x)\n   /\\\n   forall(j in 0..num_work-1) (\n       sum(i in 1..num_shifts) (x[i]*bool2int(j in shifts[i])) = 1\n   )\n   /\\\n   tot_shifts >= min_num_shifts\n\n   % /\\ % for solve satisfy (t1)\n   % tot_shifts = 7\n;\n\n\noutput [\n  \"tot_shifts: \" ++ show(tot_shifts) ++ \"\\n\" ++ \n  \"x: \" ++ show(x) ++ \"\\n\"\n] ++ \n[\n  if fix(x[i]) = 1 then show(shifts[i]) else \"\" endif\n  | i in 1..num_shifts\n] ++ \n[\"\\n\"] ++\n[\n  if fix(x[i]) = 1 then show(i) ++ \" \" else \"\" endif\n  | i in 1..num_shifts\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Bus Driver Scheduling Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to optimize the number of delivery routes for our fleet of vans. We have 50 packages to deliver across 20 different neighborhoods, and each van can carry a maximum of 5 packages. How can I minimize the number of vans needed while ensuring that each package is delivered exactly once?\",\n  \"question2\": \"I'm planning a music festival and I need to schedule the performances of 15 bands across 5 stages. Each band has a specific set of requirements for their performance, such as sound checks and equipment setup. How can I make sure that each band plays exactly once and that the stages are used efficiently?\",\n  \"question3\": \"I'm a camp counselor and I need to plan activities for 12 kids across 4 different stations (arts, sports, games, and outdoor adventures). Each kid needs to participate in each activity exactly once, and each station can only accommodate a certain number of kids at a time. How can I make sure that every kid gets to do every activity while minimizing the number of groups I need to create?\",\n  \"question4\": \"I have 8 tasks to complete and 12 possible workflows that can complete them. How can I choose the minimum number of workflows needed to complete all tasks?\",\n  \"question5\": \"I'm the manager of a large hospital and I need to schedule the use of 10 operating rooms across 5 different surgical specialties (cardio, neuro, ortho, etc.). Each specialty has a specific set of requirements for the operating rooms, and each room can only be used for one specialty at a time. Additionally, I need to ensure that each specialty has at least 2 operating rooms available at all times. How can I minimize the total number of operating rooms needed while meeting these constraints and ensuring that each specialty has the necessary resources?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Bus Driver Scheduling Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Bus Driver Scheduling Problem\",\n\"description\": \"The Bus Driver Scheduling Problem is a classic problem in constraint programming that involves scheduling bus drivers to cover a set of tasks (pieces of work) with a minimum number of shifts. Each shift covers a subset of tasks and has an associated cost. The goal is to select a subset of possible shifts that covers each task once and only once, while minimizing the total number of shifts used.\",\n\"variables\": \"x = {x[1], x[2], ..., x[num_shifts]} where x[i] is a binary variable indicating whether shift i is selected or not, and tot_shifts is an integer variable representing the total number of shifts used. x[i] \u2208 {0, 1} and tot_shifts \u2208 [0, num_shifts]\",\n\"variables_explanation\": \"The decision variables x[i] represent whether a particular shift is selected or not, and tot_shifts represents the total number of shifts used in the solution.\",\n\"constraints\": \"tot_shifts = \u2211(x) \u2227 \u2200j \u2208 {0, ..., num_work-1} (\u2211(x[i]*bool2int(j \u2208 shifts[i])) = 1) \u2227 tot_shifts \u2265 min_num_shifts\",\n\"constraints_explanation\": \"The constraints ensure that the total number of shifts used is equal to the sum of the x variables, each task is covered by exactly one shift, and the total number of shifts used is at least the minimum required.\",\n\"objective\": \"minimize tot_shifts\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "car": {"__data__": {"id_": "car", "embedding": null, "metadata": {"problem_family": "car", "model_name": "car", "source_code": "%\n% Car sequencing in MiniZinc.\n% include \"globals.mzn\";\n\nint: numclasses;\nint: numoptions;\nint: numcars;\nset of int: Classes = 1..numclasses;\nset of int: Options = 1..numoptions;\nset of int: Slots = 1..numcars;\n\narray[Classes] of int: numberPerClass;\n\narray[Classes,Options] of int: optionsRequired;\narray[Options] of int: windowSize;\narray[Options] of int: optMax;\n\narray[Options] of int: optionNumberPerClass = [sum(j in Classes) (numberPerClass[j] * optionsRequired[j,i]) | i in Options];\n\n% decision variables\n\narray[Slots] of var Classes: slot;\narray[Options, Slots] of var 0..1: setup;\n\n\nvar int: z = sum(s in Classes) (s*slot[s]);\n\n% solve minimize z;\nsolve :: int_search(slot, input_order, indomain_min, complete)\n  satisfy;\n\nconstraint\n  forall(c in Classes ) (\n    sum(s in Slots ) (bool2int(slot[s] = c)) = numberPerClass[c]\n  )\n  /\\\n  forall(o in Options, s in 1..numcars - windowSize[o] + 1) (\n    sum(j in s..s + windowSize[o]- 1) (setup[o,j]) <= optMax[o]\n  )\n  /\\\n  forall(o in Options, s in Slots ) (\n    setup[o,s] = optionsRequired[slot[s],o]\n  )\n  /\\\n  forall(o in Options, i in 1..optionNumberPerClass[o]) (\n    sum(s in 1..(numcars - i * windowSize[o])) (setup[o,s]) >=\n           (optionNumberPerClass[o] - i * optMax[o])\n  )\n;\n\n% for solve satisfy\n% constraint z = 82;\n\n\noutput [\n \"z: \" ++ show(z) ++ \"\\n\" ++\n \"slot: \" ++ show(slot) ++ \"\\n\"\n] ++\n[\n  if j = 1 then \"\\n\" else \" \" endif ++ \n    show(setup[i,j])\n  | i in Options, j in Slots\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Car Sequencing Problem:\n\n```\n{\n  \"question1\": \"I'm a production planner at a high-volume manufacturing facility. We produce 500 units of 5 different product lines, each with its own set of features and options. The production line has 10 stations, and each station can only handle a certain number of units with a specific feature before it needs to be reset. I need to sequence the production to minimize the total downtime and maximize efficiency. How can I optimize the production sequence to meet the demand for each product line while respecting the station constraints?\",\n  \"question2\": \"I'm planning a music festival with 10 stages and 50 bands. Each band has a specific setup requirement, like a certain type of drum set or a specific soundboard. The stages have limited capacity, and some bands can only play on certain stages. I want to create a schedule that ensures each band plays on the right stage with the right setup, and that the transitions between bands are as smooth as possible. Can you help me figure out the best schedule?\",\n  \"question3\": \"I'm organizing a school fair with 10 booths, and each booth needs to be staffed by a certain number of volunteers with specific skills, like first aid or language proficiency. We have 50 volunteers, each with their own set of skills and availability. I want to create a schedule that ensures each booth has the right number of volunteers with the right skills, and that the volunteers are not overworked. How can I make sure everyone has a great time at the fair?\",\n  \"question4\": \"I need to schedule 10 meetings with 5 different teams, each with their own set of requirements and constraints. How can I minimize the total number of meeting rooms needed and ensure that each team has the right setup?\",\n  \"question5\": \"I'm the manager of a large catering company that provides meals for 10 different events, each with its own set of dietary restrictions and preferences. We have 50 chefs, each with their own set of skills and expertise, and 10 kitchens with limited capacity. The events have different start times, and some chefs can only work at certain events. I need to create a schedule that ensures each event has the right number of chefs with the right skills, and that the kitchens are utilized efficiently. The schedule should also minimize the total travel time between events for the chefs. Can you help me optimize the catering schedule to meet the demands of our clients?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Car Sequencing Problem, but in different contexts. They require the solver to optimize a sequence of events or tasks, subject to constraints on resources, capacity, and preferences."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Car Sequencing Problem\",\n\"description\": \"The Car Sequencing Problem is a classic problem in constraint programming. It involves sequencing a set of cars of different classes through a production line, subject to certain constraints on the options and features of the cars. The goal is to minimize the total penalty or cost of the sequence.\",\n\"variables\": \"slot[s] \u2208 Classes, s \u2208 Slots; setup[o, s] \u2208 {0, 1}, o \u2208 Options, s \u2208 Slots. \nThe decision variables are slot[s], which represents the class of the car in slot s, and setup[o, s], which represents whether option o is set up in slot s.\",\n\"constraints\": \"\u2200c \u2208 Classes, \u2211(s \u2208 Slots) (bool2int(slot[s] = c)) = numberPerClass[c]; \n\u2200o \u2208 Options, s \u2208 1..numcars - windowSize[o] + 1, \u2211(j \u2208 s..s + windowSize[o]- 1) (setup[o, j]) \u2264 optMax[o]; \n\u2200o \u2208 Options, s \u2208 Slots, setup[o, s] = optionsRequired[slot[s], o]; \n\u2200o \u2208 Options, i \u2208 1..optionNumberPerClass[o], \u2211(s \u2208 1..(numcars - i * windowSize[o])) (setup[o, s]) \u2265 (optionNumberPerClass[o] - i * optMax[o]). \nThese constraints ensure that the number of cars of each class is respected, the window size for each option is not exceeded, the setup of options is consistent with the car classes, and the total number of setups for each option is within the allowed limit.\",\n\"objective\": \"Minimize z = \u2211(s \u2208 Classes) (s * slot[s]). The objective is to minimize the total penalty or cost of the sequence, which is calculated as the sum of the products of each car's class and its position in the sequence.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "clique": {"__data__": {"id_": "clique", "embedding": null, "metadata": {"problem_family": "clique", "model_name": "clique", "source_code": "% Maximum Clique Problem\n\nint: n = 5;\narray[1..n, 1..n] of int: adj =\n    [| 0, 1, 0, 1, 0\n     | 1, 0, 1, 0, 0\n     | 0, 1, 0, 1, 1\n     | 1, 0, 1, 0, 1\n     | 0, 0, 1, 1, 0 |];\n\n% --- naive model ---\n\n% decision variables: which vertices are in the clique?\narray[1..n] of var bool: c;\nvar int: size;\n\n% how many vertices have we selected?\nconstraint size = sum(c);\n\n% we can only pick one of any non-adjacent pair of vertices\nconstraint forall (i, j in 1..n where i < j /\\ 0 == adj[i,j]) (bool2int(c[i]) + bool2int(c[j]) <= 1);\n\nsolve maximize size;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Maximum Clique Problem:\n\n```\n{\n  \"question1\": \"I'm a network architect designing a high-availability cluster for a cloud-based service. I have 10 servers, each with a specific set of features (e.g., storage capacity, processing power, etc.). I need to identify the largest subset of servers that can be connected in a way that ensures each pair of servers has at least one common feature. How can I maximize the number of servers in this subset while satisfying the connectivity constraint?\",\n  \"question2\": \"I'm planning a party and I want to invite a group of friends who all get along with each other. I have a list of 8 friends, and I know which ones are friends with each other. How can I invite the largest group of friends who all get along with each other?\",\n  \"question3\": \"I'm a 12-year-old who loves playing with my friends at recess. We have a group of 7 friends, and we all like to play different games together (e.g., soccer, tag, etc.). I want to find the largest group of friends who can play a game together that everyone likes. How can I do that?\",\n  \"question4\": \"I have 5 colleagues, and I need to form a team for a project. Each colleague has skills that overlap with some others. How can I form the largest team with the most diverse skills?\",\n  \"question5\": \"I'm a manager at a large retail company, and I need to assign sales associates to different product categories (e.g., electronics, clothing, etc.). I have 15 sales associates, each with expertise in specific product categories, and I need to ensure that each category has at least one associate who is knowledgeable about it. Additionally, I want to minimize the number of categories each associate is responsible for. How can I assign the sales associates to maximize the number of categories covered while minimizing the workload for each associate?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Maximum Clique Problem. They are written in a way that is easy to understand, and the context is different from the traditional graph theory context."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Maximum Clique Problem\",\n\"description\": \"The Maximum Clique Problem is a classic problem in graph theory and computer science. Given a graph, the goal is to find the largest subset of vertices such that every pair of vertices in the subset is connected by an edge. This problem is NP-hard and has many applications in social network analysis, data mining, and computer vision.\",\n\"variables\": \"c = {c_1, c_2, ..., c_n} where c_i \u2208 {0, 1} for i = 1, ..., n; size \u2208 \u2124\",\n\"variables_explanation\": \"The decision variables c_i represent whether vertex i is in the clique (c_i = 1) or not (c_i = 0). The variable size represents the total number of vertices in the clique.\",\n\"constraints\": \"\u2211_{i=1}^n c_i = size; \u2200i, j \u2208 {1, ..., n} where i < j and adj[i, j] = 0, c_i + c_j \u2264 1\",\n\"constraints_explanation\": \"The first constraint ensures that the total number of vertices in the clique is equal to the sum of the c_i variables. The second constraint ensures that for any pair of non-adjacent vertices i and j, at most one of them can be in the clique.\",\n\"objective\": \"Maximize size\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "crossfigure": {"__data__": {"id_": "crossfigure", "embedding": null, "metadata": {"problem_family": "crossfigure", "model_name": "crossfigure", "source_code": "% Crossfigure problem in MiniZinc.\n% \"\"\"\n% Crossfigures are the numerical equivalent of crosswords. You have a grid and some\n% clues with numerical answers to place on this grid. Clues come in several different\n% forms (for example: Across 1. 25 across times two, 2. five dozen, 5. a square number,\n% 10. prime, 14. 29 across times 21 down ...).\n% \"\"\"\n\n\nint: n = 9;\narray[1..n, 1..n] of var 0..9: M;\n\nset of int: D = 0..9999; % the max length of the numbers in this problem is 4\nvar D: A1;\nvar D: A4;\nvar D: A7;\nvar D: A8;\nvar D: A9;\nvar D: A10;\nvar D: A11;\nvar D: A13;\nvar D: A15;\nvar D: A17;\nvar D: A20;\nvar D: A23;\nvar D: A24;\nvar D: A25;\nvar D: A27;\nvar D: A28;\nvar D: A29;\nvar D: A30;\n\nvar D: D1;\nvar D: D2;\nvar D: D3;\nvar D: D4;\nvar D: D5;\nvar D: D6;\nvar D: D10;\nvar D: D12;\nvar D: D14;\nvar D: D16;\nvar D: D17;\nvar D: D18;\nvar D: D19;\nvar D: D20;\nvar D: D21;\nvar D: D22;\nvar D: D26;\nvar D: D28;\n\n\n%\n% across(Matrix, Across, Len, Row, Col)\n%\tConstrains 'Across' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding across.\n%\npredicate across(array[int, int] of var D: Matrix, var D: Across, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Across)\n   /\\\n   forall(i in 0..Len-1) (\n\n       Matrix[Row,Col+i] = tmp[i+1]\n   )\n;\n\n%\n% down(Matrix, Down, Len, Row, Col):\n%\tConstrains 'Down' to be equal to the number represented by the\n%\t'Len' digits starting at position (Row, Col) of the array 'Matrix'\n%\tand proceeding down.\n%\npredicate down(array[int,int] of var D: Matrix, var D: Down, int: Len, int: Row, int: Col) =\n   let {\n     array[1..Len] of var D: tmp\n   }\n   in\n   toNum10(tmp, Down)\n   /\\\n   forall(i in 0..Len-1) (\n      Matrix[Row+i,Col] = tmp[i+1]\n   )\n;\n\n\n%\n% converts a number <-> array\n%\npredicate toNum10(array[int] of var D: a, var D: n) =\n          let { int: len = length(a) }\n          in\n          n = sum(i in 1..len) (\n            ceil(pow(10.0, int2float(len-i))) * a[i]\n          )\n          /\\ forall(i in 1..len) (a[i] >= 0)\n;\n\n\n%\n% x is a square\n% \npredicate square(var D: x) =\n   exists(y in D) (\n      y*y = x\n   )\n;\n\n\n%\n% very simple primality test\n%\npredicate is_prime(var int: x) =\n   forall(i in 2..ceil(sqrt(9999.0))) ( \n        (i < x) -> (x mod i > 0)\n   )\n;\n\n\nsolve :: int_search(\n         [M[i,j] | i,j in 1..n] ++\n         [A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n         D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28],\n         occurrence,\n         indomain_min,\n         complete\n         ) \n     satisfy;\n\n\nconstraint\n\n   % Set up the constraints between the matrix elements and the\n   % clue numbers.\n   across(M, A1, 4, 1, 1)  /\\ \n   across(M, A4, 4, 1, 6)  /\\ \n   across(M, A7, 2, 2, 1)  /\\ \n   across(M, A8, 3, 2, 4)  /\\ \n   across(M, A9, 2, 2, 8)  /\\ \n   across(M, A10, 2, 3, 3) /\\ \n   across(M, A11, 2, 3, 6) /\\ \n   across(M, A13, 4, 4, 1) /\\ \n   across(M, A15, 4, 4, 6) /\\ \n   across(M, A17, 4, 6, 1) /\\ \n   across(M, A20, 4, 6, 6) /\\ \n   across(M, A23, 2, 7, 3) /\\ \n   across(M, A24, 2, 7, 6) /\\ \n   across(M, A25, 2, 8, 1) /\\ \n   across(M, A27, 3, 8, 4) /\\ \n   across(M, A28, 2, 8, 8) /\\ \n   across(M, A29, 4, 9, 1) /\\ \n   across(M, A30, 4, 9, 6) /\\ \n\n   down(M, D1, 4, 1, 1)  /\\ \n   down(M, D2, 2, 1, 2)  /\\ \n   down(M, D3, 4, 1, 4)  /\\ \n   down(M, D4, 4, 1, 6)  /\\ \n   down(M, D5, 2, 1, 8)  /\\ \n   down(M, D6, 4, 1, 9)  /\\ \n   down(M, D10, 2, 3, 3) /\\ \n   down(M, D12, 2, 3, 7) /\\ \n   down(M, D14, 3, 4, 2) /\\ \n   down(M, D16, 3, 4, 8) /\\ \n   down(M, D17, 4, 6, 1) /\\ \n   down(M, D18, 2, 6, 3) /\\ \n   down(M, D19, 4, 6, 4) /\\ \n   down(M, D20, 4, 6, 6) /\\ \n   down(M, D21, 2, 6, 7) /\\ \n   down(M, D22, 4, 6, 9) /\\ \n   down(M, D26, 2, 8, 2) /\\ \n   down(M, D28, 2, 8, 8) /\\ \n\n\n   % Set up the clue constraints.\n%  Across\n%  1 27 across times two\n%  4 4 down plus seventy-one\n%  7 18 down plus four\n%  8 6 down divided by sixteen\n%  9 2 down minus eighteen\n% 10 Dozen in six gross\n% 11 5 down minus seventy\n% 13 26 down times 23 across\n% 15 6 down minus 350\n% 17 25 across times 23 across\n% 20 A square number\n% 23 A prime number\n% 24 A square number\n% 25 20 across divided by seventeen\n% 27 6 down divided by four\n% 28 Four dozen\n% 29 Seven gross\n% 30 22 down plus 450 \n\n   A1 = 2 * A27         /\\ \n   A4 = D4 + 71         /\\ \n   A7 = D18 + 4         /\\ \n   A8 = D6 div 16       /\\ \n   A9 = D2 - 18         /\\ \n   A10 = 6 * 144 div 12 /\\ \n   A11 = D5 - 70        /\\ \n   A13 = D26 * A23      /\\ \n   A15 = D6 - 350       /\\ \n   A17 = A25 * A23      /\\ \n   square(A20)          /\\ \n   is_prime(A23)        /\\\n   square(A24)          /\\ \n   A25 = A20 div 17     /\\ \n   A27 = D6 div 4       /\\ \n   A28 = 4 * 12         /\\ \n   A29 = 7 * 144        /\\ \n   A30 = D22 + 450      /\\ \n\n   % Down\n   %\n   %  1 1 across plus twenty-seven\n   %  2 Five dozen\n   %  3 30 across plus 888\n   %  4 Two times 17 across\n   %  5 29 across divided by twelve\n   %  6 28 across times 23 across\n   % 10 10 across plus four\n   % 12 Three times 24 across\n   % 14 13 across divided by sixteen\n   % 16 28 down times fifteen\n   % 17 13 across minus 399\n   % 18 29 across divided by eighteen\n   % 19 22 down minus ninety-four\n   % 20 20 across minus nine\n   % 21 25 across minus fifty-two\n   % 22 20 down times six\n   % 26 Five times 24 across\n   % 28 21 down plus twenty-seven \n\n   D1 = A1 + 27     /\\ \n   D2 = 5 * 12      /\\ \n   D3 = A30 + 888   /\\ \n   D4 = 2 * A17     /\\ \n   D5 = A29 div 12  /\\ \n   D6 = A28 * A23   /\\ \n   D10 = A10 + 4    /\\ \n   D12 = A24 * 3    /\\ \n   D14 = A13 div 16 /\\ \n   D16 = 15 * D28   /\\ \n   D17 = A13 - 399  /\\ \n   D18 = A29 div 18 /\\ \n   D19 = D22 - 94   /\\ \n   D20 = A20 - 9    /\\ \n   D21 = A25 - 52   /\\ \n   D22 = 6 * D20    /\\ \n   D26 = 5 * A24    /\\ \n   D28 = D21 + 27\n\n\n   % Fix the blackboxes\n   /\\\n   M[1,5] = 0 /\\\n   M[2,3] = 0 /\\\n   M[2,7] = 0 /\\\n   M[3,2] = 0 /\\\n   M[3,5] = 0 /\\\n   M[3,8] = 0 /\\\n   M[4,5] = 0 /\\\n   M[5,1] = 0 /\\\n   M[5,3] = 0 /\\\n   M[5,4] = 0 /\\\n   M[5,5] = 0 /\\\n   M[5,6] = 0 /\\\n   M[5,7] = 0 /\\\n   M[5,9] = 0 /\\\n   M[6,5] = 0 /\\\n   M[7,2] = 0 /\\\n   M[7,5] = 0 /\\\n   M[7,8] = 0 /\\\n   M[8,3] = 0 /\\\n   M[8,7] = 0 /\\\n   M[9,5] = 0\n;\n\n\noutput [\n show([A1,A4,A7,A8,A9,A10,A11,A13,A15,A17,A20,A23,A24,A25,A27,A28,A29,A30,\n       D1,D2,D3,D4,D5,D6,D10,D12,D14,D16,D17,D18,D19,D20,D21,D22,D26,D28]), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(M[i,j])\n  | i,j  in 1..n\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Crossfigure problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to optimize the loading of cargo containers on a ship. I have 9 containers of different sizes and weights, and each container has specific requirements for its position on the ship. Some containers need to be placed near the front, while others require a specific distance from the cargo crane. How can I arrange the containers to maximize efficiency and minimize delays?\",\n  \"question2\": \"I'm planning a music festival and need to schedule 30 acts across 9 stages over 2 days. Some acts have specific time slots they can perform, while others have conflicts with other acts. How can I create a schedule that ensures every act gets a good time slot and minimizes conflicts?\",\n  \"question3\": \"I'm designing a new theme park with 9 different attractions. Each attraction has a specific footprint and requires a certain amount of space around it. Some attractions need to be placed near the entrance, while others need to be far away from the food stands. How can I lay out the park to make sure everything fits and visitors have a great experience?\",\n  \"question4\": \"I have 9 different ingredients and need to create 30 unique recipes. Each recipe requires a specific combination of ingredients, and some ingredients can't be used together. How can I create the recipes to use up all the ingredients?\",\n  \"question5\": \"As a city planner, I need to design a new public transportation system for a city with 9 different neighborhoods. Each neighborhood has a specific population density and transportation needs, and some neighborhoods require more frequent bus routes than others. Additionally, there are 30 different bus routes that need to be assigned to specific neighborhoods, and each route has a specific capacity and frequency. How can I design the transportation system to minimize congestion, reduce travel times, and meet the needs of all neighborhoods, while also ensuring that each bus route is fully utilized and efficient?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Crossfigure problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Crossfigure Problem\",\n  \"description\": \"The Crossfigure problem is a numerical puzzle where a grid is filled with numbers according to certain clues. The clues are given in the form of mathematical operations and relationships between the numbers in the grid.\",\n  \"variables\": \"M[i, j], A1, A4, A7, A8, A9, A10, A11, A13, A15, A17, A20, A23, A24, A25, A27, A28, A29, A30, D1, D2, D3, D4, D5, D6, D10, D12, D14, D16, D17, D18, D19, D20, D21, D22, D26, D28. \n  M[i, j] represents the value of the cell at row i and column j in the grid. \n  A1, A4, ..., A30 represent the values of the Across clues, and D1, D2, ..., D28 represent the values of the Down clues.\",\n  \"constraints\": \"across(M, A1, 4, 1, 1), ..., down(M, D28, 2, 8, 8), A1 = 2 * A27, ..., D28 = D21 + 27, M[i, j] = 0 for certain (i, j) pairs. \n  The across and down predicates ensure that the values of the Across and Down clues are correctly calculated from the values in the grid. \n  The remaining constraints represent the relationships between the Across and Down clues as given in the problem statement.\",\n  \"objective\": \"The objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to fill the grid with numbers such that all the clues are satisfied.\"\n}\n```\n\nNote that I have not included the entire list of variables and constraints in the answer, as it would be too lengthy. Instead, I have provided a representative sample of each, along with a brief explanation of what they represent.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "curriculum": {"__data__": {"id_": "curriculum", "embedding": null, "metadata": {"problem_family": "curriculum", "model_name": "curriculum", "source_code": "% The balanced academic curriculum problem:\n%\n% A curriculum is a set of courses with prerequisites.\n% Each course must be assigned within a set number of periods.\n% A course cannot be scheduled before its prerequisites.\n% Each course confers a number of academic credits (it's \"load\").\n% Students have lower and upper bounds on the number of credits they can study for in a given period.\n% Students have lower and upper bounds on the number of courses they can study for in a given period.\n% The goal is to assign a period to every course satisfying these criteria, minimising the load for all periods.\n\ninclude \"globals.mzn\";\n\nint: n_courses;\nint: n_periods;\nint: load_per_period_lb;\nint: load_per_period_ub;\nint: courses_per_period_lb;\nint: courses_per_period_ub;\narray [1..n_courses] of int: course_load;\nint: max_course_load = sum(c in courses)(course_load[c]);\n\nset of int: courses = 1..n_courses;\nset of int: periods = 1..n_periods;\n\n% period course is assigned to\narray [courses] of var periods: course_period;\n% whether period i has course j assigned\narray [periods, courses] of var 0..1: x;\n% total load for each period\narray [periods] of var load_per_period_lb..load_per_period_ub: load;\n% optimisation target\nvar load_per_period_lb..load_per_period_ub: objective;\n\nconstraint forall(p in periods) (\n    forall(c in courses) (x[p,c] = bool2int(course_period[c] = p)) /\\\n    sum(i in courses) (x[p,i]) >= courses_per_period_lb /\\\n    sum(i in courses) (x[p,i]) <= courses_per_period_ub /\\\n    load[p] = sum(c in courses) (x[p,c] * course_load[c]) /\\\n    load[p] >= load_per_period_lb /\\\n    load[p] <= objective\n);\n\n% prerequisite(a, b) means \"course a has prerequisite course b\".\n\npredicate prerequisite(courses: a, courses: b) =\n    course_period[b] < course_period[a];\n\n% add some redundant linear constraints\n\nconstraint forall(p in 0..n_periods-1) (\n    let {\n\t\tvar 0..max_course_load: l = sum(c in courses) (bool2int(course_period[c] > p) * course_load[c])\n\t} in \n        l >= (n_periods-p) * load_per_period_lb /\\\n        l <= (n_periods-p) * objective\n    );\n\nsolve :: seq_search([\n      int_search([x[i,j] | i in periods, j in courses], input_order, indomain_max, complete),\n      int_search([objective], input_order, indomain_min, complete)\n    ]) minimize objective;\n\noutput \n    [show(c) ++ \"-\" ++ show(course_period[c]) ++ \"\\t\" | c in courses ] ++ [\"\\n\"] ++\n    [\"objective = \", show(objective)];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to optimize the allocation of warehouse staff to different shifts. We have 15 staff members, each with a specific skill set and workload capacity. We operate 5 shifts per day, and each shift has a minimum and maximum number of staff required. Some staff members have prerequisites, such as requiring a specific supervisor to be present. How can I assign staff to shifts to minimize the total workload across all shifts while respecting these constraints?\",\n  \"question2\": \"I'm planning a music festival with 10 stages and 20 bands. Each band has a specific soundcheck and performance time requirement, and some bands can only play before or after certain other bands. We also have a limited number of sound engineers and stagehands available. How can I schedule the bands to minimize the total time required to set up and tear down the stages while ensuring that all the bands get to play?\",\n  \"question3\": \"I'm a 12-year-old who loves playing with my friends in a school club. We have 8 members, and we want to plan a series of activities for the next 5 weeks. Each activity has a specific number of participants required, and some activities can only be done before or after certain other activities. How can I schedule the activities to make sure everyone gets to participate in their favorite activities while respecting the rules?\",\n  \"question4\": \"I have 7 tasks to complete, each with a specific duration and prerequisite tasks. How can I schedule these tasks to minimize the total time required to complete them all?\",\n  \"question5\": \"I'm the manager of a large hospital's surgical department, and I need to optimize the scheduling of surgeries for the next 10 days. We have 15 surgeons, each with a specific set of surgeries they can perform, and 20 operating rooms with different equipment and staffing requirements. Each surgery has a specific duration and prerequisite surgeries, and some surgeons have specific requirements for their assistants and anesthesiologists. We also have to ensure that each operating room is used efficiently and that the total time required to complete all the surgeries is minimized. How can I assign surgeries to operating rooms and schedule the surgeons to achieve this goal?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and can be answered by solving the Balanced Academic Curriculum Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Balanced Academic Curriculum Problem\",\n\"description\": \"The Balanced Academic Curriculum Problem is a classic constraint programming problem that involves assigning courses to periods while satisfying various constraints related to course prerequisites, student credit loads, and course loads per period. The goal is to minimize the total load across all periods.\",\n\"variables\": \"course_period[c] (c \u2208 courses), x[p,c] (p \u2208 periods, c \u2208 courses), load[p] (p \u2208 periods), objective\\n\nThese variables represent the period assigned to each course, whether a course is assigned to a period, the total load for each period, and the overall objective value to be minimized, respectively.\",\n\"constraints\": \"\u2200p \u2208 periods (\u2200c \u2208 courses (x[p,c] = bool2int(course_period[c] = p)) \u2227 \u03a3i \u2208 courses x[p,i] \u2265 courses_per_period_lb \u2227 \u03a3i \u2208 courses x[p,i] \u2264 courses_per_period_ub \u2227 load[p] = \u03a3c \u2208 courses x[p,c] * course_load[c] \u2227 load[p] \u2265 load_per_period_lb \u2227 load[p] \u2264 objective) \u2227 prerequisite(a, b) = course_period[b] < course_period[a] \u2227 \u2200p \u2208 0..n_periods-1 (l \u2265 (n_periods-p) * load_per_period_lb \u2227 l \u2264 (n_periods-p) * objective)\\n\nThese constraints ensure that each course is assigned to a period, the number of courses per period is within bounds, the load per period is within bounds, prerequisites are respected, and some redundant linear constraints are added to help the solver.\",\n\"objective\": \"minimize objective (total load across all periods)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "diamond_free_degree_sequence": {"__data__": {"id_": "diamond_free_degree_sequence", "embedding": null, "metadata": {"problem_family": "diamond_free_degree_sequence", "model_name": "diamond_free_degree_sequence", "source_code": "%\n% Diamond-free Degree Sequence (CSPLib #50) in MiniZinc.\n%\n% Given a simple undirected graph G=(V,E), where V is the set of vertices and E the set of\n% undirected edges, the edge {u,v} is in E if and only if vertex u is adjacent to vertex v\u2208G.\n% The graph is simple in that there are no loop edges, i.e. we have no edges of the form {v,v}.\n% Each vertex v\u2208V has a degree dv i.e. the number of edges incident on that vertex. Consequently\n% a graph has a degree sequence d1,\u2026,dn, where di>=di+1. A diamond is a set of four vertices\n% in V such that there are at least five edges between those vertices. Conversely, a graph is\n% diamond-free if it has no diamond as an induced subgraph, i.e. for every set of four vertices\n% the number of edges between those vertices is at most four.\n%\n% In our problem we have additional properties required of the degree sequences of the graphs,\n% in particular that the degree of each vertex is greater than zero (i.e. isolated vertices\n% are disallowed), the degree of each vertex is modulo 3, and the sum of the degrees is\n% modulo 12 (i.e. |E| is modulo 6).\n%\n% The problem is then for a given value of n, produce all unique degree sequences d1,\u2026,dn such\n% that\n%\n%  * di\u2265di+1\n%  * each degree di>0 and di is modulo 3\n%  * the sum of the degrees is modulo 12\n%  * there exists a simple diamond-free graph with that degree sequence\n\n\ninclude \"globals.mzn\"; \n\nint: n = 11;\n\n% decision variables\narray[1..n,1..n] of var 0..1: x;\narray[1..n] of var 1..n: degrees;\n\n\n% solve satisfy;\nsolve :: int_search(degrees, first_fail, indomain_split, complete) satisfy;\n\nconstraint\n  forall(i,j,k,l in 1..n where i < j /\\ j < k /\\ k < l) (\n     x[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4\n  )\n  /\\\n  forall(i in 1..n) (\n     degrees[i] = sum([x[i,j] | j in 1..n])\n     /\\ degrees[i] mod 3 = 0\n     % no loops\n     /\\ x[i,i] = 0\n  ) \n  /\\ % undirected graph\n  forall(i,j in 1..n) (\n    x[i,j] = x[j,i]\n  )\n  /\\ sum(degrees) mod 12 = 0\n\n  % symmetry breaking\n  /\\ decreasing(degrees)\n  /\\ lex2(x)\n;\n\noutput \n[ \"degrees: \", show(degrees), \"\\n\"]\n% ++\n% [\n%   if j = 1 then \"\\n\" else \" \" endif ++\n%     show(x[i,j])\n%   | i,j in 1..n\n% ]\n;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a network architect designing a new communication system for a team of 11 researchers. Each researcher needs to be connected to at least one other researcher, and the total number of connections should be a multiple of 6. Additionally, each researcher can only be connected to a maximum of 3 other researchers at a time. How can I design the communication system to ensure that no group of four researchers is overly connected, and what are the possible connection patterns between the researchers?\",\n  \n  \"question2\": \"I'm planning a party for my friends and I want to make sure everyone has someone to talk to. I have 11 friends coming, and I want to arrange the seating so that everyone is talking to at least one other person. I also want to make sure that no group of four friends is too cliquey. How can I arrange the seating to make sure everyone has someone to talk to, and no one is left out?\",\n  \n  \"question3\": \"I'm designing a new theme park with 11 different attractions. I want to make sure that each attraction is connected to at least one other attraction, and that the total number of connections between attractions is a multiple of 6. I also want to make sure that no group of four attractions is too crowded. How can I design the theme park to make sure each attraction is connected, and no one gets overwhelmed?\",\n  \n  \"question4\": \"I have 11 friends and I want to plan a game night. How can I arrange the seating so that everyone is playing with at least one other person, and no group of four friends is too dominant?\",\n  \n  \"question5\": \"I'm a urban planner designing a new neighborhood with 11 community centers. Each community center needs to be connected to at least one other community center, and the total number of connections between community centers should be a multiple of 6. Additionally, each community center can only be connected to a maximum of 3 other community centers at a time. I also want to ensure that no group of four community centers is too densely connected, to avoid congestion and promote a sense of community. How can I design the neighborhood to meet these requirements, and what are the possible connection patterns between the community centers?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the diamond-free degree sequence problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Diamond-free Degree Sequence\",\n  \"description\": \"The problem is to find all unique degree sequences of a simple diamond-free graph with a given number of vertices, such that each degree is greater than zero, each degree is modulo 3, and the sum of the degrees is modulo 12.\",\n  \"variables\": \"x[i,j] (i, j = 1..n), degrees[i] (i = 1..n). x[i,j] represents the presence (1) or absence (0) of an edge between vertices i and j, and degrees[i] represents the degree of vertex i.\",\n  \"constraints\": \"x[i,j] + x[i,k] + x[i,l] + x[j,k] + x[j,l] + x[k,l] <= 4 (diamond-free constraint), degrees[i] = sum(x[i,j] for j in 1..n) (degree calculation), degrees[i] mod 3 = 0 (degree modulo 3), x[i,i] = 0 (no loops), x[i,j] = x[j,i] (undirected graph), sum(degrees) mod 12 = 0 (sum of degrees modulo 12), decreasing(degrees) (symmetry breaking), lex2(x) (symmetry breaking).\",\n  \"objective\": \"Satisfy (find a feasible solution)\"\n}\n```\n\nNote that the objective is to find a feasible solution, as the problem is a satisfaction problem rather than an optimization problem.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "fractions": {"__data__": {"id_": "fractions", "embedding": null, "metadata": {"problem_family": "fractions", "model_name": "fractions", "source_code": "%\n% Fractions problem in MiniZinc.\n%\n% Prolog benchmark problem (BProlog)\n% \"\"\"\n% Find distinct non-zero digits such that the following equation holds:\n%        A        D        G\n%     ------  + ----- + ------  = 1\n%       B*C      E*F      H*I\n\ninclude \"globals.mzn\"; \n\nvar 1..9: A;\nvar 1..9: B;\nvar 1..9: C;\nvar 1..9: D;\nvar 1..9: E;\nvar 1..9: F;\nvar 1..9: G;\nvar 1..9: H;\nvar 1..9: I;\narray[1..9] of var 1..9: Vars=[A,B,C,D,E,F,G,H,I];\n\nvar 1..81: D1;\nvar 1..81: D2;\nvar 1..81: D3;\n\n\n\n% solve satisfy;\nsolve :: int_search(Vars ++ [D1,D2,D3], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   all_different(Vars) /\\\n   D1 = 10*B+C /\\\n   D2 = 10*E+F /\\\n   D3 = 10*H+I /\\\n   A*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3 /\\\n   % break the symmetry\n   A*D2 >= D*D1 /\\\n   D*D3 >= G*D2 /\\\n   %redundant constraints\n   3*A >= D1 /\\\n   3*G <= D2\n\n;\n\noutput [\n  show(Vars), \"\\n\"\n]\n;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to allocate nine different types of cargo to three ships with different capacities. The company wants to maximize the total cargo value while ensuring that each ship is utilized to its full capacity. The cargo types have different values and volume requirements, and the ships have different capacity constraints. How can the company allocate the cargo to achieve its goal?\",\n  \"question2\": \"I'm planning a party and I want to serve three different types of drinks. I have nine different ingredients and I want to use each ingredient only once. The drinks need to have different amounts of each ingredient, and I want to make sure that each drink has the right balance of ingredients. Can you help me figure out how to mix the ingredients to make the perfect drinks?\",\n  \"question3\": \"I'm playing a game where I need to collect nine different items to unlock a special level. The items are hidden in three different locations, and each location has a different combination of items. I need to find the right combination of items to unlock the level. Can you help me figure out which items to collect and where to find them?\",\n  \"question4\": \"I have nine different tasks to complete and three machines to do them on. Each task takes a different amount of time on each machine. How can I allocate the tasks to the machines to minimize the total time taken?\",\n  \"question5\": \"A theme park is designing a new rollercoaster with three different sections, each with a different theme and capacity. The park wants to allocate nine different ride vehicles to the three sections, taking into account the different capacities and theme requirements of each section. The vehicles have different characteristics, such as speed and capacity, and the park wants to maximize the overall efficiency of the rollercoaster while ensuring a smooth and enjoyable ride for visitors. The park also wants to minimize the number of vehicles needed to achieve this goal. How can the park allocate the ride vehicles to the three sections to achieve its objectives?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the fractions problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Fractions Problem\",\n\"description\": \"The Fractions Problem is a classic constraint satisfaction problem that involves finding distinct non-zero digits that satisfy a specific equation. The equation consists of three fractions with different numerators and denominators, and the goal is to find the values of these digits such that the sum of the three fractions equals 1.\",\n\"variables\": \"A, B, C, D, E, F, G, H, I, D1, D2, D3. These variables represent the digits in the numerators and denominators of the three fractions, where A, D, and G are the numerators, and B*C, E*F, and H*I are the denominators, respectively. D1, D2, and D3 are intermediate variables used to calculate the denominators.\",\n\"constraints\": \"all_different(Vars), D1 = 10*B+C, D2 = 10*E+F, D3 = 10*H+I, A*D2*D3 + D*D1*D3 + G*D1*D2 = D1*D2*D3, A*D2 >= D*D1, D*D3 >= G*D2, 3*A >= D1, 3*G <= D2. These constraints ensure that the digits are distinct, the denominators are correctly calculated, the equation is satisfied, and some symmetry-breaking and redundant constraints are added to help the solver.\",\n\"objective\": \"satisfy (i.e., find a feasible solution that satisfies all the constraints)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golfers": {"__data__": {"id_": "golfers", "embedding": null, "metadata": {"problem_family": "golfers", "model_name": "golfers", "source_code": "Model 1 :\n\n\n% The social golfers problem\n% A club has a number of golfers that play rounds in groups (the number of\n% golfers is a multiple of the number of groups).  Each round, a golfer\n% plays with a group of different people, such that the same pair of golfers\n% never play together twice.\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\nset of int: places = 1..n_golfers;\n\narray [rounds, places] of var golfers: round_place_golfer;\narray [golfers, golfers] of var 0..n_rounds: golfer_golfer_round;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (p in places) (round_place_golfer[r, p])\n    );\n\n    % Break some symmetry by strictly ordering each group in each round.\n    %\nconstraint\n    forall (r in rounds, p in places) (\n        if p mod n_per_group != 0\n        then round_place_golfer[r, p] < round_place_golfer[r, p + 1]\n        else true\n        endif\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (r in rounds, g in 0..(n_groups - 1), i, j in 1..n_per_group\n            where i < j) (\n        golfer_golfer_round[\n            round_place_golfer[r, n_per_group * g + i],\n            round_place_golfer[r, n_per_group * g + j]\n        ] = r\n    );\n\nsolve\n    :: int_search([round_place_golfer[r, p] | r in rounds, p in places],\n        first_fail, indomain_min, complete)\n    satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if p = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif ) ++\n    ( if p mod n_per_group = 1 then \"   \" else \" \" endif ) ++\n    show_int(2, round_place_golfer[r, p]) | r in rounds, p in places\n];\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups, group] of var golfers: round_group_i_golfer;\n\n    % Each member of each group must be distinct.\n    %\nconstraint\n    forall (r in rounds) (\n        alldifferent (g in groups, i in group) (round_group_i_golfer[r, g, i])\n    );\n\n    % We also break some symmetry\n    % here by strictly ordering each group.\n    %\nconstraint\n    forall (r in rounds, g in groups, i in group where i < n_per_group) (\n        round_group_i_golfer[r, g, i] < round_group_i_golfer[r, g, i + 1]\n    );\n\n    % Each pair can play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups, i, j in group where i < j) (\n            bool2int(\n                round_group_i_golfer[r, g, i] = a\n            /\\  round_group_i_golfer[r, g, j] = b\n            )\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [\n    \"Social golfers:\\n\\n\", \n    \"Groups        : \", show(n_groups), \"\\n\", \n    \"No. per group : \", show(n_per_group), \"\\n\",\n    \"No. of rounds : \", show(n_rounds), \"\\n\"\n] ++ [\n    ( if g = 1 /\\ i = 1 then \"\\nround \" ++ show(r) ++ \":\" else \"\" endif) ++\n    ( if i = 1 then \"   \" else \" \" endif) ++\n    show_int(2, round_group_i_golfer[r, g, i]) \n    |  r in rounds, g in groups, i in group\n];\n\n\nModel 3 : \n\n\ninclude \"globals.mzn\";\n\nint: n_groups;                          % The number of groups.\nint: n_per_group;                       % The size of each group.\nint: n_rounds;                          % The number of rounds.\n\nint: n_golfers = n_groups * n_per_group;\n\nset of int: groups = 1..n_groups;\nset of int: group = 1..n_per_group;\nset of int: rounds = 1..n_rounds;\nset of int: golfers = 1..n_golfers;\n\narray [rounds, groups] of var set of golfers: round_group_golfers;\n\n    % Each group has to have the right size.\n    %\nconstraint\n    forall (r in rounds, g in groups) (\n        card(round_group_golfers[r, g]) = n_per_group\n    );\n\n    % Each group in each round has to be disjoint.\n    %\nconstraint\n    forall (r in rounds) (\n        all_disjoint (g in groups) (round_group_golfers[r, g])\n    );\n\n    % Symmetry breaking.\n    %\n% constraint\n%     forall (r in rounds, g in groups where g < n_groups) (\n%         round_group_golfers[r, g] < round_group_golfers[r, g + 1]\n%     );\n\n    % Each pair may play together at most once.\n    %\nconstraint\n    forall (a, b in golfers where a < b) (\n        sum (r in rounds, g in groups) (\n            bool2int({a, b} subset round_group_golfers[r, g])\n        )\n    <=\n        1\n    );\n\nsolve satisfy;\n\noutput [    ( if   g = 1\n              then \"\\nround \" ++ show(r) ++ \":   \"\n              else \"   \"\n              endif\n            ) ++\n            show(round_group_golfers[r, g])\n       |    r in rounds, g in groups\n       ];\n\n\nModel 4 :\n\n\nint: weeks = 4;\nint: groups = 3;\nint: groupSize = 3;\nint: golfers = groups * groupSize;\n\nset of int: Golfer = 1..golfers;\nset of int: Week = 1..weeks;\nset of int: Group = 1..groups;\n\n% Search space: The set of all possible group assignments to all \n% players in each of the weeks\narray[Golfer, Week] of var Group: assign;\n\n% solve satisfy;\n% solve :: int_search([assign[i,j] | i in Golfer, j in Week ], \"first_fail\", \"indomain\", \"complete\") satisfy;\nsolve :: int_search([assign[i,j] | i in Golfer, j in Week ], \n        first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   % C1: Each group has exactly groupSize players\n   forall (gr in Group, w in Week)( % c1\n     sum (g in Golfer) (bool2int(assign[g,w] = gr)) = groupSize\n   )\n   /\\\n   % C2: Each pair of players only meets at most once\n   forall (g1, g2 in Golfer, w1, w2 in Week  where g1 != g2 /\\ w1 != w2) (\n     (bool2int(assign[g1,w1] = assign[g2,w1]) + bool2int(assign[g1,w2] = assign[g2,w2])) <= 1\n   )\n  /\\\n  % SBSA: Symmetry-breaking by selective assignment\n  % On the first week, the first groupSize golfers play in group 1, the \n  % second groupSize golfers play in group 2, etc. On the second week, \n  % golfer 1 plays in group 1, golfer 2 plays in group 2, etc.\n  forall(g in Golfer) (\n    assign[g,1]=((g-1) div groupSize) + 1 % \n  )\n  /\\\n  forall(g in Golfer where g <= groupSize)(\n    assign[g,2]=g\n  )\n\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n  show(assign[i,j])\n  | i in Golfer, j in Week\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Social Golfers Problem:\n\n```\n{\n  \"question1\": \"I'm organizing a conference with 12 parallel sessions, each with 4 speakers, over 3 days. I want to ensure that each speaker presents in a different session each day, and no two speakers present together more than once. How can I schedule the speakers to achieve this?\",\n  \"question2\": \"I'm planning a dinner party for 12 friends over 3 nights. I want to seat them in groups of 4 each night, but I don't want any two friends to sit together more than once. Can you help me figure out the seating arrangements?\",\n  \"question3\": \"I'm in charge of planning a school's club fair, where 12 clubs will be represented over 3 days. Each club needs to be assigned to a table with 4 other clubs, and I want to make sure that no two clubs are at the same table more than once. How can I make this happen?\",\n  \"question4\": \"I need to schedule 12 teams for 3 rounds of a tournament, with 4 teams per round. No team can play with the same opponent more than once. Can you help me with the schedule?\",\n  \"question5\": \"I'm the event coordinator for a large corporation's annual retreat, which will feature 12 different workshops over 3 days. Each workshop needs to be assigned to a room with 4 other workshops, and I want to ensure that no two workshops are in the same room more than once. Additionally, I need to consider the following constraints: Workshop A cannot be in the same room as Workshop B, Workshop C requires a specific room with a projector, and Workshop D needs to be in a room with natural light. Can you help me create a schedule that meets all these requirements?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Social Golfers Problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Social Golfers Problem\",\n  \"description\": \"The Social Golfers Problem is a classic constraint satisfaction problem where a group of golfers need to be arranged into groups of a fixed size to play golf over a number of rounds, such that each golfer plays with a different set of golfers in each round, and no two golfers play together more than once.\",\n  \"variables\": \"round_place_golfer[r, p], golfer_golfer_round[g, h], round_group_i_golfer[r, g, i], round_group_golfers[r, g], assign[i, j]\",\n  \"variables_description\": \"Decision variables representing the assignment of golfers to groups and rounds, and the rounds in which pairs of golfers play together.\",\n  \"constraints\": \"alldifferent, symmetry breaking, each pair plays together at most once\",\n  \"constraints_description\": \"Constraints ensuring that each group has distinct golfers, symmetry is broken to reduce the search space, and each pair of golfers plays together at most once.\",\n  \"objective\": \"satisfy\"\n}\n```\n\nNote that the variables and constraints are listed in a concise format, but if you'd like me to expand on them, I can provide a more detailed explanation of each variable and constraint.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "golomb": {"__data__": {"id_": "golomb", "embedding": null, "metadata": {"problem_family": "golomb", "model_name": "golomb", "source_code": "% Golomb rulers\n% From csplib:\n% A Golomb ruler may be defined as a set of m integers 0 = a_1 < a_2 <\n% ... < a_m such that the m(m-1)/2 differences a_j - a_i, 1 <= i < j\n% <= m are distinct. Such a ruler is said to contain m marks and is of\n% length a_m. The objective is to find optimal (minimum length) or\n% near optimal rulers.\n%\n% This is the \"ternary constraints and an alldifferent\" model\n\ninclude \"globals.mzn\";\n\nint: m;\nint: n = m*m;\n\narray[1..m] of var 0..n: mark;\n\narray[1..(m*(m-1)) div 2] of var 0..n: differences =\n    [ mark[j] - mark[i] | i in 1..m, j in i+1..m];\n\nconstraint mark[1] = 0;\n\nconstraint forall ( i in 1..m-1 ) ( mark[i] < mark[i+1] );\n\nconstraint alldifferent(differences);\n\n    % Symmetry breaking\nconstraint differences[1] < differences[(m*(m-1)) div 2];\n\nsolve :: int_search(mark, input_order, indomain, complete)\n    minimize mark[m];\n\noutput [show(mark)];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Golomb Ruler Problem:\n\n```\n{\n  \"question1\": \"I'm a radio frequency engineer designing a new wireless communication system. I need to allocate 10 distinct frequency channels to 10 different devices, ensuring that the differences between all pairs of frequencies are unique to minimize interference. What is the most efficient way to allocate these frequencies to minimize the overall bandwidth required?\",\n  \"question2\": \"I'm planning a music festival with 8 stages, each featuring a different genre of music. I want to schedule the performances so that no two stages have the same time gap between acts. How can I create a schedule that minimizes the overall duration of the festival while ensuring that each stage has a unique set of time gaps between performances?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles and games. I have 6 friends coming over for a birthday party, and I want to create a scavenger hunt with clues that have different time intervals between them. How can I design the scavenger hunt so that each pair of clues has a unique time gap, and the whole hunt takes the shortest amount of time possible?\",\n  \"question4\": \"I need to schedule 5 meetings with different teams, ensuring that the time gaps between meetings are all distinct. What's the most efficient way to schedule these meetings?\",\n  \"question5\": \"I'm a logistics manager at a large e-commerce company, responsible for scheduling the loading and unloading of cargo ships at our port. We have 12 different cargo ships arriving at the port, each with a unique set of containers that need to be loaded and unloaded in a specific order. To minimize congestion and maximize efficiency, I want to schedule the loading and unloading operations so that the time gaps between each pair of operations are distinct. However, I also need to ensure that the overall duration of the loading and unloading process is minimized, while taking into account the priority of each cargo ship and the availability of cranes and labor resources. Can you help me design an optimal schedule that meets these constraints and priorities?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the Golomb Ruler Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Golomb Ruler Problem\",\n\"description\": \"The Golomb Ruler Problem is a classic problem in constraint programming that involves finding a set of integers, called marks, such that the differences between all pairs of marks are distinct. The goal is to find a ruler with the minimum length, which is the maximum mark value.\",\n\"variables\": \"mark[1], ..., mark[m], differences[1], ..., differences[m*(m-1) div 2]\",\n\"The variables represent the marks on the ruler and the differences between all pairs of marks. The marks are integers between 0 and n, where n is the square of the number of marks. The differences are also integers between 0 and n.\",\n\"constraints\": \"mark[1] = 0, mark[i] < mark[i+1] for i in 1..m-1, alldifferent(differences), differences[1] < differences[m*(m-1) div 2]\",\n\"The constraints ensure that the first mark is 0, the marks are in increasing order, all differences are distinct, and a symmetry breaking constraint to reduce the search space.\",\n\"objective\": \"minimize mark[m]\"\n\"The objective is to minimize the maximum mark value, which represents the length of the ruler.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "K4xP2Graceful": {"__data__": {"id_": "K4xP2Graceful", "embedding": null, "metadata": {"problem_family": "K4xP2Graceful", "model_name": "K4xP2Graceful", "source_code": "% K4P2 Graceful Graph in MiniZinc.\n\ninclude \"globals.mzn\"; \n\nint: m = 16;\nint: n = 8;\narray[1..n] of var 0..m: nodes;\narray[1..m, 1..2] of var 1..n: graph;\narray[1..m] of var 1..m: edges;\n\n\n\nsolve :: int_search(nodes, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..m) (\n    abs(nodes[graph[i,1]] - nodes[graph[i,2]]) = edges[i]  \n  )\n  /\\\n  all_different(edges) \n  /\\ \n  all_different(nodes)\n;\n\ngraph =\narray2d(1..m, 1..2,\n[1, 2,\n1, 3,\n1, 4,\n2, 3,\n2, 4,\n3, 4,\n\n5, 6,\n5, 7,\n5, 8,\n6, 7,\n6, 8,\n7, 8,\n\n1, 5,\n2, 6,\n3, 7,\n4, 8]);\n\noutput\n[\n  \"nodes: \" ++ show(nodes) ++ \"\\n\" ++\n  \"edges: \" ++ show(edges) ++ \"\\n\"\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a network architect designing a communication system for a team of 8 robots working together in a warehouse. Each robot has a unique identifier and can communicate with its neighbors. I need to assign frequencies to each robot such that the difference between frequencies of adjacent robots is unique. How can I assign frequencies to ensure reliable communication?\",\n  \"question2\": \"I'm planning a music festival with 8 stages and 16 performances. Each stage can have multiple performances, and each performance has a unique soundcheck requirement. I want to schedule the performances such that the soundcheck requirements between adjacent performances on the same stage are different. Can you help me create a schedule that meets these requirements?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles and games. I have 8 friends coming over for a party, and we want to play a game where we sit in a circle and pass a ball to each other. We want to assign a unique number to each friend such that the difference between the numbers of adjacent friends is different. Can you help me figure out how to assign the numbers?\",\n  \"question4\": \"I have 8 friends and 16 pairs of matching socks. I want to assign a unique pair of socks to each friend such that the difference between the numbers on adjacent friends' socks is unique. How can I do this?\",\n  \"question5\": \"I'm a logistics manager responsible for scheduling 16 truck deliveries to 8 warehouses. Each warehouse has a unique identifier, and each truck has a unique cargo capacity. I need to assign a warehouse to each truck such that the difference between the warehouse identifiers of adjacent trucks is unique. Additionally, I need to ensure that the total cargo capacity of all trucks assigned to each warehouse is within a certain range. Can you help me create a schedule that meets these requirements and minimizes delays?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the K4xP2 Graceful Graph problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Graceful Graph\",\n\"description\": \"The Graceful Graph problem is a well-known problem in graph theory and constraint programming. It involves finding a labeling of the nodes of a graph such that the absolute difference between the labels of adjacent nodes is unique for each edge.\",\n\"variables\": \"nodes: n_i \u2208 {0, ..., m} for i = 1, ..., n; graph: g_ij \u2208 {1, ..., n} for i = 1, ..., m, j = 1, 2; edges: e_i \u2208 {1, ..., m} for i = 1, ..., m. \nThe variables nodes represent the labels of the nodes, graph represents the adjacency matrix of the graph, and edges represent the absolute differences between the labels of adjacent nodes.\",\n\"constraints\": \"\u2200i \u2208 {1, ..., m}: |n_gi1 - n_gi2| = e_i; \nall_different(e); \nall_different(n). \nThe first constraint ensures that the absolute difference between the labels of adjacent nodes is equal to the edge label. The second and third constraints ensure that all edge labels and node labels are unique, respectively.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The problem is a feasibility problem, meaning that the goal is to find a solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "killer_sudoku": {"__data__": {"id_": "killer_sudoku", "embedding": null, "metadata": {"problem_family": "killer_sudoku", "model_name": "killer_sudoku", "source_code": "Model 1 :\n\n%\n% Killer Sudoku in MiniZinc.\n\n%   Killer sudoku (also killer su doku, sumdoku, sum doku, addoku, or\n%   samunamupure) is a puzzle that combines elements of sudoku and kakuro.\n%   Despite the name, the simpler killer sudokus can be easier to solve\n%   than regular sudokus, depending on the solver's skill at mental arithmetic;\n%   the hardest ones, however, can take hours to crack.\n \n%   The objective is to fill the grid with numbers from 1 to 9 in a way that\n%   the following conditions are met:\n \n%     * Each row, column, and nonet contains each number exactly once.\n%     * The sum of all numbers in a cage must match the small number printed\n%       in its corner.\n%     * No number appears more than once in a cage. (This is the standard rule\n%       for killer sudokus, and implies that no cage can include more\n%       than 9 cells.)\n \n%   In 'Killer X', an additional rule is that each of the long diagonals\n%   contains each number once.\n%   \"\"\"\n \n\nint: num_p = 29; % number of segments\nint: num_hints = 4;  % number of hints per segments (that's max number of hints)\nint: max_val = 100;\narray[1..num_p, 1..2*num_hints+1] of 0..max_val: P =\n  array2d(1..num_p, 1..2*num_hints+1, [\n    1,1,  1,2, 0,0, 0,0,   3,\n    1,3,  1,4, 1,5, 0,0,  15,\n    1,6,  2,5, 2,6, 3,5,  22,\n    1,7,  2,7, 0,0, 0,0,   4,\n    1,8,  2,8, 0,0, 0,0,  16,\n    1,9,  2,9, 3,9, 4,9,  15,\n    2,1,  2,2, 3,1, 3,2,  25,\n    2,3,  2,4, 0,0, 0,0,  17,\n    3,3,  3,4, 4,4, 0,0,   9,\n    3,6,  4,6, 5,6, 0,0,   8,\n    3,7,  3,8, 4,7, 0,0,  20,\n    4,1,  5,1, 0,0, 0,0,   6,\n    4,2,  4,3, 0,0, 0,0,  14,\n    4,5,  5,5, 6,5, 0,0,  17,\n    4,8,  5,7, 5,8, 0,0,  17,\n    5,2,  5,3, 6,2, 0,0,  13,\n    5,4,  6,4, 7,4, 0,0,  20,\n    5,9,  6,9, 0,0, 0,0,  12,\n    6,1,  7,1, 8,1, 9,1,  27,\n    6,3,  7,2, 7,3, 0,0,   6,\n    6,6,  7,6, 7,7, 0,0,  20,\n    6,7,  6,8, 0,0, 0,0,   6,\n    7,5,  8,4, 8,5, 9,4,  10,\n    7,8,  7,9, 8,8, 8,9,  14,\n    8,2,  9,2, 0,0, 0,0,   8,\n    8,3,  9,3, 0,0, 0,0,  16,\n    8,6,  8,7, 0,0, 0,0,  15,\n    9,5,  9,6, 9,7, 0,0,  13,\n    9,8,  9,9, 0,0, 0,0,  17\n   ]);\n\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\nconstraint\n \n  forall(i in 1..n) (\n        all_different([x[i,j] | j in 1..n]) /\\\n        all_different([x[j,i] | j in 1..n])\n  )\n  /\\\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n  /\\ % calculate the hints\n  forall(p in 1..num_p) (\n     sum(i in 1..num_hints where P[p,2*(i-1)+1] > 0) (x[  P[p, 2*(i-1)+1], P[p,2*(i-1)+2]  ]) = P[p, 2*num_hints+1]\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];\n\n\nModel 2 :\n\n\ninclude \"globals.mzn\"; \nint: n = 9;\narray[1..n, 1..n] of var 1..9: x;\n\nint: num_segments = 29; % number of segments\n\narray[1..n, 1..n] of int: segments =\narray2d(1..n, 1..n,\n[\n  1, 1, 2, 2, 2, 3, 4, 5, 6, % 1\n  7, 7, 8, 8, 3, 3, 4, 5, 6, % 2\n  7, 7, 9, 9, 3,10,11,11, 6, % 3\n 13,14,14, 9,15,10,11,12, 6, % 4\n 13,16,16,17,15,10,12,12,18, % 5\n 19,16,20,17,15,21,22,22,18, % 6\n 19,20,20,17,23,21,21,24,24, % 7\n 19,25,26,23,23,27,27,24,24, % 8\n 19,25,26,23,28,28,28,29,29, % 9\n]);\n\narray[1..num_segments] of int: segment_sums =\n[\n   3, % 1\n  15, % 2\n  22, % 3\n   4, % 4\n  16, % 5\n  15, % 6\n  25, % 7\n  17, % 8\n   9, % 9\n   8, % 10\n  20, % 11\n  17, % 12\n   6, % 13\n  14, % 14\n  17, % 15\n  13, % 16\n  20, % 17\n  12, % 18\n  27, % 19\n   6, % 20\n  20, % 21\n   6, % 22\n  10, % 23\n  14, % 24\n   8, % 25\n  16, % 26\n  15, % 27\n  13, % 28\n  17  % 29\n];\n\n% solve satisfy;\nsolve :: int_search([x[i,j] | i,j in 1..n], first_fail, indomain_min, complete) satisfy;\n\n% Standard Sudoku constraints\nconstraint\n  % rows and columns\n  forall(i in 1..n) (\n     all_different([x[i,j] | j in 1..n]) /\\\n     all_different([x[j,i] | j in 1..n])\n  )\n  /\\ % blocks\n  forall(i in 0..2,j in 0..2) (\n    all_different([x[r,c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3] )\n  )\n;\n\n% Handle the segments\nconstraint\n  forall(p in 1..num_segments) (\n    segment_sums[p] = sum([x[i,j] | i,j in 1..n where segments[i,j] = p])\n  )\n;\n\noutput [\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(x[i,j])\n  | i,j in 1..n\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Killer Sudoku problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to assign 9 different tasks to 9 teams of workers. Each task requires a specific set of skills, and each team has a unique combination of skills. Additionally, each task has a specific time requirement, and I need to ensure that the total time required for each team's tasks does not exceed 9 hours. How can I assign the tasks to the teams to maximize efficiency and meet the time constraints?\",\n  \"question2\": \"I'm planning a party for my friends, and I want to create a fun activity that involves dividing them into groups. I have 9 friends, and I want to create 9 groups with different themes. Each friend has a preferred theme, and I want to make sure each group has a good mix of friends. How can I divide my friends into groups so that everyone is happy and has a great time?\",\n  \"question3\": \"I'm a kid, and I love playing with my 9 favorite toys! I want to create a special toy box with 9 compartments, and I want to put each toy in a specific compartment. But, I have some rules: each toy can only go in one compartment, and each compartment can only hold one toy. How can I put my toys in the compartments so that I can play with them easily and have fun?\",\n  \"question4\": \"I have 9 different ingredients, and I want to create 9 different dishes for a cooking competition. Each dish requires a specific combination of ingredients, and I need to make sure I use each ingredient exactly once. How can I combine the ingredients to create the dishes?\",\n  \"question5\": \"I'm a manager at a large hospital, and I need to assign 9 different medical procedures to 9 different surgical teams. Each procedure requires a specific set of medical equipment, and each team has a unique set of skills and expertise. Additionally, each procedure has a specific time requirement, and I need to ensure that the total time required for each team's procedures does not exceed 9 hours. Furthermore, I need to consider the priority of each procedure, as some are more urgent than others. How can I assign the procedures to the teams to maximize efficiency, meet the time constraints, and prioritize the most urgent procedures?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Killer Sudoku problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Killer Sudoku\",\n  \"description\": \"Killer Sudoku is a puzzle that combines elements of Sudoku and Kakuro. The objective is to fill a 9x9 grid with numbers from 1 to 9 such that each row, column, and nonet contains each number exactly once, and the sum of all numbers in a cage must match the small number printed in its corner.\",\n  \"variables\": \"x[i, j] for i, j in 1..9; These are the decision variables representing the values to be assigned to each cell in the 9x9 grid.\",\n  \"constraints\": \"all_different([x[i, j] | j in 1..9]) for i in 1..9 (each row contains each number exactly once), all_different([x[j, i] | j in 1..9]) for i in 1..9 (each column contains each number exactly once), all_different([x[r, c] | r in i*3+1..i*3+3, c in j*3+1..j*3+3]) for i, j in 0..2 (each nonet contains each number exactly once), sum(x[i, j] | i, j in 1..9 where segments[i, j] = p) = segment_sums[p] for p in 1..29 (the sum of all numbers in a cage must match the small number printed in its corner); These constraints ensure that the solution satisfies the rules of Killer Sudoku.\",\n  \"objective\": \"satisfy (there is no objective function to minimize or maximize, the goal is to find a feasible solution that satisfies all the constraints)\"\n}\n```\n\nNote that the two models provided are equivalent and represent the same problem, which is a Killer Sudoku puzzle.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "langford": {"__data__": {"id_": "langford", "embedding": null, "metadata": {"problem_family": "langford", "model_name": "langford", "source_code": "% Langford's number problem in MiniZinc.\n%\n% Arrange 2 sets of positive integers 1..k to a sequence,\n% such that, following the first occurence of an integer i,\n% each subsequent occurrence of i, appears i+1 indices later\n% than the last.\n% For example, for k=4, a solution would be 41312432\n\ninclude \"globals.mzn\";\n\nint: k;\nset of int: positionDomain = 1..2*k;\n\narray[positionDomain] of var positionDomain: position;\n% better presentation:\narray[positionDomain] of var 1..k: solution;\n\nsolve :: int_search(position, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n  forall(i in 1..k) (\n     position[i+k] = position[i] + i+1 /\\\n     % hakank: added this\n     solution[position[i]] = i /\\ \n     solution[position[k+i]] = i\n  )\n  /\\   \n  all_different(position)\n  /\\ % symmetry breaking\n  solution[1] < solution[2*k]\n;\n\n\noutput [\n  show(solution), \"\\n\"\n\n];\n\n%\n% data\n%\nk = 4;\n% k = 7;\n% k = 8;\n% k = 10;\n% k = 20;\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Langford's number problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to schedule 10 trucks to deliver packages to 20 locations. Each truck has a specific capacity and must visit each location exactly twice, with the second visit being exactly 'x' stops after the first visit, where 'x' is the package number. How can we optimize the delivery route to minimize delays and ensure all packages are delivered efficiently?\",\n  \"question2\": \"I'm planning a music festival with 10 stages and 20 performances. Each stage needs to have a unique setlist, and each performance needs to happen exactly twice, with the second performance happening a certain number of acts after the first. How can I schedule the performances to make sure everything runs smoothly and the crowd has a great time?\",\n  \"question3\": \"I'm planning a birthday party for my friend and I want to create a scavenger hunt with 10 clues and 20 challenges. Each challenge needs to be completed exactly twice, with the second time being a certain number of clues after the first. How can I design the scavenger hunt to make it fun and exciting for all the guests?\",\n  \"question4\": \"Schedule 10 meetings with 20 attendees, ensuring each attendee meets exactly twice, with the second meeting being a certain number of meetings after the first.\",\n  \"question5\": \"A theme park is designing a new rollercoaster with 10 cars and 20 riders per car. Each rider needs to ride the rollercoaster exactly twice, with the second ride being a certain number of cars after the first. The park wants to minimize wait times and ensure a smooth ride experience. Additionally, they need to consider the riders' preferences for morning or afternoon rides, and ensure that riders with disabilities are accommodated. How can the park optimize the rollercoaster schedule to meet these requirements and provide an enjoyable experience for all riders?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Langford's number problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Langford's Number Problem\",\n\"description\": \"Arrange two sets of positive integers 1..k to a sequence, such that, following the first occurrence of an integer i, each subsequent occurrence of i appears i+1 indices later than the last.\",\n\"variables\": \"position: {1, ..., 2k} -> {1, ..., 2k}, solution: {1, ..., 2k} -> {1, ..., k}. \nThe decision variables are position and solution. position is an array of length 2k, where each element is a value between 1 and 2k. solution is also an array of length 2k, where each element is a value between 1 and k. They represent the sequence of integers and the corresponding values in the sequence, respectively.\",\n\"constraints\": \"forall(i in 1..k) (position[i+k] = position[i] + i+1), forall(i in 1..k) (solution[position[i]] = i), forall(i in 1..k) (solution[position[k+i]] = i), all_different(position), solution[1] < solution[2k]. \nThe constraints ensure that the sequence satisfies the Langford's number problem condition, i.e., each subsequent occurrence of an integer i appears i+1 indices later than the last. The all_different constraint ensures that all positions are distinct, and the last constraint is a symmetry breaking constraint.\",\n\"objective\": \"satisfy. \nThe objective of the problem is to find a feasible solution that satisfies all the constraints, i.e., to find a sequence that meets the Langford's number problem condition.\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_hexagon": {"__data__": {"id_": "magic_hexagon", "embedding": null, "metadata": {"problem_family": "magic_hexagon", "model_name": "magic_hexagon", "source_code": "% Magic Hexagon in MiniZinc.\n\ninclude \"globals.mzn\"; \n\nset of int: N = 1..19;\nvar N: a;\nvar N: b;\nvar N: c;\nvar N: d;\nvar N: e;\nvar N: f;\nvar N: g;\nvar N: h;\nvar N: i;\nvar N: j;\nvar N: k;\nvar N: l;\nvar N: m;\nvar N: n;\nvar N: o;\nvar N: p;\nvar N: q;\nvar N: r;\nvar N: s;\n\narray[N] of var N: LD = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s];\n\nsolve satisfy;\n\nconstraint\n  all_different(LD) /\\\n\n  a + b + c =  38 /\\\n  d + e + f + g =  38 /\\\n  h + i + j + k + l =  38 /\\ \n  m + n + o + p =  38 /\\ \n  q + r + s =  38 /\\ \n  a + d + h =  38 /\\ \n  b + e + i + m =  38 /\\ \n  c + f + j + n + q =  38 /\\ \n  g + k + o + r =  38 /\\ \n  l + p + s =  38 /\\ \n  c + g + l =  38 /\\ \n  b + f + k + p =  38 /\\ \n  a + e + j + o + s =  38 /\\ \n  d + i + n + r =  38 /\\ \n  h + m + q =  38 /\\ \n\n  a < c /\\\n  a < h /\\\n  a < l /\\\n  a < q /\\\n  a < s /\\\n  c < h\n;\n\noutput\n[\n  show(LD)\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Magic Hexagon problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to allocate 19 different types of packages to 19 different shelves in a hexagonal arrangement. Each shelf has a limited capacity, and I need to ensure that the total weight of packages on each row, column, and diagonal is within a certain threshold (38 units). Additionally, I have some specific constraints on the placement of certain packages due to their size and fragility. Can you help me find an optimal allocation that meets these constraints?\",\n  \"question2\": \"I'm planning a music festival with 19 different bands, and I need to schedule them on 19 different stages in a hexagonal arrangement. Each stage has a limited capacity, and I want to ensure that the total 'energy' of the bands on each row, column, and diagonal is balanced (let's say 38 'energy units'). I also have some preferences for which bands should be placed near each other. Can you help me create a schedule that works?\",\n  \"question3\": \"I'm a 12-year-old who loves puzzles, and I have a new game where I need to place 19 different toys in a hexagonal arrangement. Each toy has a point value, and I want to make sure that the total points on each row, column, and diagonal are the same (38 points). I also have some favorite toys that I want to place in specific spots. Can you help me solve the puzzle?\",\n  \"question4\": \"I have 19 different ingredients, and I want to create a recipe with a specific balance of flavors. Can you help me find a combination that meets certain constraints?\",\n  \"question5\": \"I'm a urban planner designing a new city district with 19 different zones, each with its own unique characteristics and requirements. The district needs to be designed in a hexagonal arrangement, with each zone having a limited capacity. I need to ensure that the total 'development value' of each row, column, and diagonal is within a certain threshold (38 units), while also taking into account the specific needs of each zone (e.g., residential areas need to be near parks, commercial areas need to be near public transportation, etc.). Can you help me find an optimal design that meets these complex constraints and priorities?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Magic Hexagon problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Magic Hexagon\",\n\"description\": \"The Magic Hexagon is a classic constraint satisfaction problem where the goal is to place numbers from 1 to 19 in a hexagonal arrangement such that the sum of the numbers in each row, column, and diagonal is equal to 38.\",\n\"variables\": \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s \\\\ \nThese variables represent the numbers to be placed in the hexagonal arrangement.\",\n\"constraints\": \"all_different(LD) \\\\ \na + b + c = 38, d + e + f + g = 38, h + i + j + k + l = 38, m + n + o + p = 38, q + r + s = 38, \na + d + h = 38, b + e + i + m = 38, c + f + j + n + q = 38, g + k + o + r = 38, l + p + s = 38, \nc + g + l = 38, b + f + k + p = 38, a + e + j + o + s = 38, d + i + n + r = 38, h + m + q = 38, \na < c, a < h, a < l, a < q, a < s, c < h \\\\ \nThese constraints ensure that each number is used only once, the sums of the numbers in each row, column, and diagonal are equal to 38, and some additional ordering constraints to break symmetry.\",\n\"objective\": \"satisfy (i.e., find a feasible solution)\"\n}\n\nNote that the objective of this problem is to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "magic_sequence": {"__data__": {"id_": "magic_sequence", "embedding": null, "metadata": {"problem_family": "magic_sequence", "model_name": "magic_sequence", "source_code": "Model 1 :\n\n% Magic sequence in MiniZinc.\n% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n  forall(i in 0..n-1) (\n    s[i] = sum(j in 0..n-1) (bool2int(s[j] = i))\n  )\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\nModel 2 : \n\n\nint: n =  20;\narray[0..n-1] of var 0..n-1: s;\n\nsolve satisfy;\n\nconstraint\n        forall(i in 0..n-1) (\n                s[i] = sum(j in 0..n-1) (bool2int(s[j]=i))\n        )\n        /\\ \n        sum(i in 0..n-1) (s[i])=n \n        /\\\n        sum(i in 0..n-1) (s[i]*i) =n\n;\n\n\noutput [\n       show(s), \"\\n\",\n];\n\n\n\nModel 3 :\n\n\ninclude \"globals.mzn\";\n\nint: n =  10;\narray[0..n-1] of var 0..n-1: s;\narray[0..n-1] of int: value = array1d(0..n-1, [i | i in 0..n-1]); % helper for distribute\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   distribute(s, value, s)         /\\ \n   sum(i in 0..n-1) (s[i])   = n   /\\\n   sum(i in 0..n-1) (s[i]*i) = n\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\n\nModel 4 :\n\n\ninclude \"globals.mzn\";\n\nint: n =  100;\narray[0..n-1] of var 0..n-1: s;\n\n% solve satisfy;\nsolve :: int_search(s, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n   global_cardinality(s,array1d(0..n-1, set2array(index_set(s))), s) :: domain\n;\n\n\noutput [\n       show(s), \"\\n\"\n];\n\n\nModel 5 : \n\n\n% Magic squares in MiniZinc\n\ninclude \"globals.mzn\";\n\nint: n = 3;\n\nint: total = ( n * (n*n + 1)) div 2;\narray[1..n,1..n] of var 1..n*n: magic;\n\n\n% solve satisfy;\nsolve :: int_search(\n        [magic[i,j] | i in 1..n, j in 1..n], \n        first_fail,\n        indomain_min,\n        complete) \n    satisfy;\n\n\nconstraint\n\n        all_different([magic[i,j] | i in 1..n, j in 1..n]) :: domain\n        /\\\n        forall(k in 1..n) (\n           sum(i in 1..n) (magic[k,i]) = total % :: domain\n           /\\\n           sum(i in 1..n) (magic[i,k]) = total %:: domain\n        )\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,i]) = total  %:: domain\n       /\\ % diagonal\n       sum(i in 1..n) (magic[i,n-i+1]) = total %:: domain\n;\n\n% symmetry breaking\n% Activating all these constraints we get the\n% \"standard\" way of counting the number of solutions:\n%    1, 0, 1, 880, 275305224\n% i.e. this sequence: http://oeis.org/A006052\n%\n% Without the constraints the number of solutions are:\n%  N  #solutions\n%  -------------\n%  1     1\n%  2     0\n%  3     8\n%  4  7040\n%  5  many... \n%\n% constraint\n%    magic[1,1] < magic[1,n]\n%    /\\ magic[1,n] < magic[n,1]\n%    /\\ magic[1,1] < magic[n,n]\n% ;\n\n\noutput [\n  \"Total: \" ++ show(total) ++ \"\\n\"\n] ++\n[\n    %   show(magic)\n  if j = 1 then \"\\n\" else \"\" endif ++\n    if fix(magic[i,j]) < 10 then \" \" else \"\" endif ++\n    show(magic[i,j]) ++ \" \"\n  | i,j in 1..n\n] \n++ \n[\"\\n\"];\n\n\nModel 6 : \n\n\n% Magic square integer programming version in MiniZinc.\n% In recreational mathematics, a magic square of order n is an\n% arrangement of n^2 numbers, usually distinct integers, in a square,\n% such that n numbers in all rows, all columns, and both diagonals sum\n% to the same constant. A normal magic square contains the integers\n% from 1 to n^2.\n\n\n% square order\nint: n = 3; \n\n% integers to be placed\nset of 1..n*n: N = 1..n*n;\n\n% x[i,j,k] = 1 means that cell (i,j) contains integer k\narray[1..n, 1..n, N] of var 0..1: x;\n\narray[1..n, 1..n] of var 1..n*n: square;\n\nvar int: s; % the magic sum\n\nsolve :: int_search(\n        [x[i,j,k] | i,j in 1..n, k in N] ++ \n        [square[i,j] | i,j in 1..n] ++\n        [s],\n        first_fail,\n        indomain_min, \n        complete % \"credit(640, bbs(5))\" % \"complete\"\n      ) \n    satisfy;\n\nconstraint \n  s >= 0 \n  /\\\n  s <= n*n*n\n  /\\\n  % each cell must be assigned exactly one integer\n  forall(i in 1..n, j in 1..n) (\n     sum(k in N) (x[i,j,k]) = 1\n  )\n  /\\\n  % each integer must be assigned exactly to one cell\n  forall(k in N) (\n     sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1\n  )\n\n  /\\\n  % the sum in each row must be the magic sum \n  forall(i in 1..n) (\n     sum(j in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in each column must be the magic sum\n  forall(j in 1..n) (\n     sum(i in 1..n, k in N) (k * x[i,j,k]) = s\n  )\n\n  /\\\n  % the sum in the diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,i,k]) = s\n\n  /\\\n  % the sum in the co-diagonal must be the magic sum\n  sum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s\n\n  /\\\n  % for output\n  forall(i,j in 1..n) ( square[i,j] = sum(k in N) (k * x[i,j,k]))\n;\n\n\noutput [ \n   \"\\ns: \", show(s)\n] ++\n[\n  if  j = 1 then \"\\n\" else \" \" endif ++\n    show(square[i,j]) \n  | i,j in 1..n\n\n] ++ [\"\\n\"];\n\n% printf \"\\n\";\n% printf \"Magic sum is %d\\n\", s;\n% printf \"\\n\";\n% for{i in 1..n}\n% {  printf{j in 1..n} \"%3d\", sum{k in N} k * x[i,j,k];\n%    printf \"\\n\";\n% }\n% printf \"\\n\";", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the magic sequence problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to allocate 20 trucks to transport goods from a warehouse to 20 different locations. Each truck has a specific capacity, and each location requires a certain number of trucks to deliver the goods. How can I assign the trucks to the locations such that each location receives the exact number of trucks it needs, and the total number of trucks used is minimized?\",\n  \"question2\": \"I'm planning a party and I want to make sure each of my 10 friends gets the right number of party hats. I have 10 different types of hats, and each friend wants a specific number of hats. How can I give each friend the right number of hats without running out of any type of hat?\",\n  \"question3\": \"I'm playing a game where I need to collect 15 different types of stickers. Each sticker has a point value, and I need to collect a certain number of each sticker to win the game. How can I collect the stickers such that I get the right number of each sticker and maximize my points?\",\n  \"question4\": \"I have 12 tasks to complete, and each task requires a specific number of people to work on it. How can I assign the tasks to the people such that each task gets the right number of people?\",\n  \"question5\": \"As a marketing manager, I need to allocate 50 promotional items to 10 different regions. Each region has a specific demand for each item, and I need to ensure that each region receives the exact number of items it needs. Additionally, I need to minimize the total number of items used and ensure that the items are distributed fairly across the regions. How can I allocate the items to the regions such that each region gets the right number of items, and the total number of items used is minimized?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the magic sequence problem. They are designed to be practical and relatable, and can be answered by solving the magic sequence problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the descriptions of each model:\n\n**Model 1**\n```\n{\n  \"name\": \"Magic Sequence\",\n  \"description\": \"A magic sequence of length n is a sequence of integers x0 ... xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\",\n  \"variables\": \"s[i] (i in 0..n-1), where s[i] is the number of times i occurs in the sequence\",\n  \"constraints\": \"forall(i in 0..n-1) (s[i] = sum(j in 0..n-1) (bool2int(s[j] = i)))\",\n  \"objective\": \"Satisfy\"\n}\n```\n\n**Model 2**\n```\n{\n  \"name\": \"Magic Sequence with Additional Constraints\",\n  \"description\": \"A magic sequence of length n is a sequence of integers x0 ... xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence, and the sum of all xi is equal to n, and the sum of all xi*i is equal to n.\",\n  \"variables\": \"s[i] (i in 0..n-1), where s[i] is the number of times i occurs in the sequence\",\n  \"constraints\": \"forall(i in 0..n-1) (s[i] = sum(j in 0..n-1) (bool2int(s[j] = i))) /\\ sum(i in 0..n-1) (s[i]) = n /\\ sum(i in 0..n-1) (s[i]*i) = n\",\n  \"objective\": \"Satisfy\"\n}\n```\n\n**Model 3**\n```\n{\n  \"name\": \"Magic Sequence with Distribute Constraint\",\n  \"description\": \"A magic sequence of length n is a sequence of integers x0 ... xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence, and the sum of all xi is equal to n, and the sum of all xi*i is equal to n.\",\n  \"variables\": \"s[i] (i in 0..n-1), where s[i] is the number of times i occurs in the sequence\",\n  \"constraints\": \"distribute(s, value, s) /\\ sum(i in 0..n-1) (s[i]) = n /\\ sum(i in 0..n-1) (s[i]*i) = n\",\n  \"objective\": \"Satisfy\"\n}\n```\n\n**Model 4**\n```\n{\n  \"name\": \"Magic Sequence with Global Cardinality Constraint\",\n  \"description\": \"A magic sequence of length n is a sequence of integers x0 ... xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence.\",\n  \"variables\": \"s[i] (i in 0..n-1), where s[i] is the number of times i occurs in the sequence\",\n  \"constraints\": \"global_cardinality(s, array1d(0..n-1, set2array(index_set(s))), s)\",\n  \"objective\": \"Satisfy\"\n}\n```\n\n**Model 5**\n```\n{\n  \"name\": \"Magic Square\",\n  \"description\": \"A magic square of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that n numbers in all rows, all columns, and both diagonals sum to the same constant.\",\n  \"variables\": \"magic[i,j] (i,j in 1..n), where magic[i,j] is the value in the cell (i,j) of the magic square\",\n  \"constraints\": \"all_different([magic[i,j] | i,j in 1..n]) /\\ forall(k in 1..n) (sum(i in 1..n) (magic[k,i]) = total /\\ sum(i in 1..n) (magic[i,k]) = total) /\\ sum(i in 1..n) (magic[i,i]) = total /\\ sum(i in 1..n) (magic[i,n-i+1]) = total\",\n  \"objective\": \"Satisfy\"\n}\n```\n\n**Model 6**\n```\n{\n  \"name\": \"Magic Square (Integer Programming Version)\",\n  \"description\": \"A magic square of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that n numbers in all rows, all columns, and both diagonals sum to the same constant.\",\n  \"variables\": \"x[i,j,k] (i,j in 1..n, k in 1..n^2), where x[i,j,k] = 1 if cell (i,j) contains integer k, and square[i,j] (i,j in 1..n), where square[i,j] is the value in the cell (i,j) of the magic square, and s, where s is the magic sum\",\n  \"constraints\": \"forall(i in 1..n, j in 1..n) (sum(k in 1..n^2) (x[i,j,k]) = 1) /\\ forall(k in 1..n^2) (sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1) /\\ forall(i in 1..n) (sum(j in 1..n, k in 1..n^2) (k * x[i,j,k]) = s) /\\ forall(j in 1..n) (sum(i in 1..n, k in 1..n^2) (k * x[i,j,k]) = s) /\\ sum(i in 1..n, k in 1..n^2) (k * x[i,i,k]) = s /\\ sum(i in 1..n, k in 1..n^2) (k * x[i,n-i+1,k]) = s\",\n  \"objective\": \"Satisfy\"\n}\n```\nNote that the descriptions are based on my understanding of the models, and may not be entirely accurate.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "maximum_density_still_life": {"__data__": {"id_": "maximum_density_still_life", "embedding": null, "metadata": {"problem_family": "maximum_density_still_life", "model_name": "maximum_density_still_life", "source_code": "% Maximum density still life in MiniZinc.\n\n% include \"globals.mzn\"; \nint: size = 7; % to change\n\nset of int: objFunctionBoardCoord      = 2..size+1;\nset of int: checkConstraintsBoardCoord = 1..size+2;\nset of int: augmentedBoardCoord        = 0..size+3;\n\n% Search space: The set of all possible assignments of 0s (dead) and 1s (live) \n% to the cells of the board section. However, to be able to easily express \n% constraints on \"boundary\" cells, we take as search space the set of 0/1 \n% boards of size n+4 by n+4: the actual stable pattern appears in the sub-board \n% defined by ignoring the first/last two rows/columns.\narray[augmentedBoardCoord,augmentedBoardCoord] of var 0..1: grid;\n\nvar int: z = sum(r in objFunctionBoardCoord, c in objFunctionBoardCoord) (grid[r,c]);\n\n% Objective function: Maximize the number of live cells in the sub-board defined \n% by ignoring the first/last two/ rows/columns.\n\n\n% solve maximize z;\nsolve :: int_search(\n        [grid[i,j] | i,j in augmentedBoardCoord], \n        smallest, \n        indomain_max, \n        complete) \n    maximize z;\n\nconstraint\n\n  % C1: Cells in the first/last two rows/columns are all 0 (dead)\n  forall(x in augmentedBoardCoord) (\n    grid[0,x] = 0 /\\\n    grid[1,x] = 0 /\\\n    grid[size+2,x] = 0 /\\  \n    grid[size+3,x] = 0 /\\\n    grid[x,0] == 0 /\\       \n    grid[x,1] == 0 /\\\n    grid[x,size+2] = 0 /\\  \n    grid[x,size+3] = 0 \n  )\n  /\\\n  forall(r in checkConstraintsBoardCoord,c in checkConstraintsBoardCoord) (\n    % C2: Each cell of the board (except those of the first/last row/column) \n    %     that has exactly three live neighbors is alive. \n    %     Together with constraint C1, this implies that cells in the\n    %     second/last-but-one row/column cannot have three live neighbors.\n    (\n      ( ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] + \n          grid[r,c-1] + grid[r,c+1] + \n          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1]\n          ) = 3 \n       ) -> (grid[r,c] = 1)\n    )\n    /\\    \n\n    % C3: Each live cell must have 2 or 3 live neighbors (cells of the first/last \n    % row/column may be ignored by this constraint)\n    (\n       (grid[r,c] = 1) -> \n                      (\n                        2 <= \n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          )\n                        /\\\n                        ( grid[r-1,c-1] + grid[r-1,c] + grid[r-1,c+1] +\n                          grid[r,c-1] + grid[r,c+1] +\n                          grid[r+1,c-1] + grid[r+1,c] + grid[r+1,c+1] \n                          ) <= 3\n                      )\n    )\n  )\n  \n  /\\\n  % SBSO: Symmetry-breaking by selective ordering\n  % The assignment is forced to respect an ordering on the values that occur in corner entries\n  % of the board. In particular:  \n  % - if the NW-corner cell is dead, the SE-corner cell\n  % must be dead too \n  % - if the NE-corner cell is dead, the SW-corner cell must be dead too\n  % \n  grid[2,2] >= grid[size+1,size+1] /\\\n  grid[2,size+1] >= grid[size+1,2]\n;\n\n\noutput [\n  if j = 0 then \"\\n\" else \" \" endif ++\n    show(grid[i,j])\n  | i,j in augmentedBoardCoord\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a urban planner designing a new neighborhood with 7x7 blocks. I want to maximize the number of parks (live cells) while ensuring that each park has at least 2 and at most 3 adjacent parks. The blocks on the perimeter of the neighborhood cannot be parks. How can I allocate the parks to maximize their density while respecting these constraints?\",\n  \"question2\": \"I'm a farmer with a 7x7 plot of land. I want to plant as many apple trees (live cells) as possible, but I need to make sure each tree has 2 or 3 neighboring trees to help with pollination. The trees on the edges of the plot can't be apple trees. How can I arrange the trees to get the most apple trees possible?\",\n  \"question3\": \"I'm a 10-year-old who loves playing with my friends in a 7x7 grid of squares. I want to find a way to stand in a square with as many friends as possible, but each of us needs to have 2 or 3 friends next to us. We can't stand on the edges of the grid. How can we arrange ourselves to have the most friends together?\",\n  \"question4\": \"Maximize the number of coffee shops in a 7x7 grid, with each shop needing 2-3 neighboring shops to stay in business. No shops on the edges.\",\n  \"question5\": \"I'm a logistics manager responsible for allocating storage containers in a 7x7 warehouse grid. Each container requires 2-3 adjacent containers to be efficiently loaded and unloaded. The containers on the perimeter of the warehouse cannot be used for storage. Additionally, the warehouse has a specific layout with some areas reserved for loading docks and others for office space. How can I allocate the containers to maximize storage capacity while respecting these constraints and the warehouse layout? The warehouse has the following layout: rows 1 and 7 are reserved for loading docks, columns 1 and 7 are reserved for office space, and the top-left 2x2 sub-grid is reserved for a break room.\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the Maximum Density Still Life problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Maximum Density Still Life\",\n  \"description\": \"The Maximum Density Still Life problem is a classic problem in constraint programming that involves finding a pattern of live and dead cells on a grid such that the density of live cells is maximized, while ensuring that the pattern is stable according to the rules of Conway's Game of Life.\",\n  \"variables\": \"grid[r,c] for r in augmentedBoardCoord, c in augmentedBoardCoord, where grid[r,c] is a binary variable indicating whether the cell at position (r,c) is live (1) or dead (0). These variables represent the possible assignments of live and dead cells to the grid.\",\n  \"constraints\": \"C1: grid[0,x] = 0, grid[1,x] = 0, grid[size+2,x] = 0, grid[size+3,x] = 0, grid[x,0] = 0, grid[x,1] = 0, grid[x,size+2] = 0, grid[x,size+3] = 0 for all x in augmentedBoardCoord (cells on the boundary are dead), C2: (grid[r-1,c-1] + ... + grid[r+1,c+1] = 3) -> grid[r,c] = 1 for all r,c in checkConstraintsBoardCoord (cells with exactly three live neighbors are alive), C3: (grid[r,c] = 1) -> (2 <= grid[r-1,c-1] + ... + grid[r+1,c+1] <= 3) for all r,c in checkConstraintsBoardCoord (live cells have 2 or 3 live neighbors), SBSO: grid[2,2] >= grid[size+1,size+1], grid[2,size+1] >= grid[size+1,2] (symmetry-breaking constraints). These constraints ensure that the pattern is stable and the density of live cells is maximized.\",\n  \"objective\": \"Maximize the number of live cells in the grid, represented by the variable z.\"\n}\n```\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "nonogram_create_automaton2": {"__data__": {"id_": "nonogram_create_automaton2", "embedding": null, "metadata": {"problem_family": "nonogram_create_automaton2", "model_name": "nonogram_create_automaton2", "source_code": "Model 1 :\n\n% Nonoram solver using regular and is written in all-MiniZinc.\n\ninclude \"globals.mzn\"; \n\nint: rows;\nint: row_rule_len;\narray[1..rows, 1..row_rule_len] of int: row_rules;\nint: cols;\nint: col_rule_len;\narray[1..cols, 1..col_rule_len] of int: col_rules;\n\n\narray[1..rows, 1..cols] of var 1..2: x;\n\nsolve :: int_search(\n     [x[i,j] | j in 1..cols, i in 1..rows], \n     first_fail, \n     indomain_min, \n     complete) \nsatisfy;\n\n%\n% The approach is rather simple:\n%  - zero_positions is a set of the positions in the state table where the \n%    state 0 should be, which also correspond to the state of the pattern \"0\"\n%  - when this have been identified everything else comes to rest\n%\n% On the other hand, the calculation of the states is hairy, very hairy.\n%\npredicate make_automaton(array[int] of var int: x, array[int] of int: pattern) =\n    let {\n        int: n = length(pattern),\n        % fix for \"zero clues\"\n        int: len = max(length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern),1),\n        int: leading_zeros = sum(i in 1..n) (bool2int(pattern[i] = 0)),\n        set of int: zero_positions = {sum(j in 1..i) (pattern[j]+1) -leading_zeros | i in 1..n where pattern[i] > 0},\n       array[1..2*len] of 0..len*2: states = \n     if (length([pattern[i] | i in 1..n where pattern[i] > 0]) + sum(pattern)) = 0 then \n       [1,1]  % fix for \"zero clues\"\n     else \n    [1, 2] ++\n    [\n       if i div 2 in zero_positions then\n           if i mod 2 = 0 then\n            0\n           else\n            (i div 2) + 1\n           endif\n       elseif (i-1) div 2 in zero_positions then\n           if i mod 2 = 0 then\n            (i div 2)+1\n           else\n            (i div 2)+2\n           endif\n       else\n         if not( (((i-1) div 2) - 1) in zero_positions) then\n            if i mod 2 = 0 then\n               (i div 2) + 1\n            else \n              if (i div 2) + 1 in zero_positions then\n                  (i div 2) + 2\n              else \n                  0\n              endif\n            endif\n          else\n             if i mod 2 = 0 then\n                 (i div 2) + 1\n             else \n                if not((i div 2) + 1 in zero_positions) then\n                   0\n                else \n                   (i div 2) + 2 \n                endif\n             endif\n          endif\n       endif\n    | i in 3..2*(len-1)]\n    ++\n    [len, 0]\n    endif\n    } \n    in\n    regular(\n       x,\n       len, \n       2, \n       array2d(1..len, 1..2, states),\n       1, \n       {len}) % :: domain\n;\n\nconstraint\n\n      forall(j in 1..cols) (\n        make_automaton([x[i,j] | i in 1..rows], [col_rules[j,k] | k in 1..col_rule_len])\n      )\n      /\\\n      forall(i in 1..rows) (\n        make_automaton([x[i,j] | j in 1..cols], [row_rules[i,k] | k in 1..row_rule_len])\n      )\n\n;\n\noutput \n[\n  if j = 1 then \"\\n\" else \"\" endif ++\n     if fix(x[i,j]) = 1 then \" \" else \"#\" endif\n    \n  | i in 1..rows, j in 1..cols\n] \n++ \n[\n  \"\\n\"\n];\n\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\nint: X;\nint: Y;\n\nint: maxlen;\n\narray [1..Y,1..maxlen] of int: rows;\n\narray [1..X,1..maxlen] of int: cols;\n\narray[1..2, 1..2, 1..2] of 0..1: nonmul = \n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 1, 1,\n         1, 0, 0, 1]\n    );\n\narray[1..2, 1..2, 1..2] of 0..1: nonadd =\n    array3d(1..2, 1..2, 1..2,\n        [0, 0, 0, 1,\n         1, 0, 0, 1]\n    );\n\n% variables\n%\narray[1..Y, 1..X] of var 1..2: A;\n\n% All variables in a region must be different\n% Ordering to ensure each variable is handled exactly once\npredicate nonogram_row(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: row) =\n    nonogram([A[row, v] | v in 1..X], cons);\n\npredicate nonogram_col(\n        array[1..Y, 1..X] of var 1..2: A,\n        array[int] of 0..1: cons,\n        int: col) = \n    nonogram([A[v,col] | v in 1..Y], cons);\n\npredicate nonogram(array[int] of var 1..2: A, array [int] of int: cons) = \n    let {\n          int: n = if cons[1] = 0 then 0 else max(index_set(cons)) endif,\n          array [1..n + 1, 1..2] of int: consarr =\n              if cons[1] = 0 then [|1, 0|] \n              else array2d(1..n + 1, 1..2,\n                [1, 2] ++\n                [    i * nonmul[cons[i - 1] + 1, cons[i] + 1, s] + \n                     nonadd[cons[i - 1] + 1, cons[i] + 1, s] \n                     | i in 2..n, s in 1..2 \n                ] ++ \n                [n+1,0]\n              )\n              endif\n     } in (\n         regular(A, n + 1, 2, consarr, 1, {n + 1})\n     );\n\nconstraint forall(i in 1..Y) (\n    nonogram_row(A, [rows[i, j] | j in 1..maxlen where rows[i, j] >= 0], i)\n);\n\nconstraint forall(i in 1..X) (\n    nonogram_col(A, [cols[i, j] | j in 1..maxlen where cols[i, j] >= 0], i)\n);\n\nsolve :: int_search(array1d(1..X*Y,A),input_order,indomain_max,complete) satisfy;\n\noutput [\n    if fix(A[r, c]) = 1 then \" \" else \".\" endif ++ \n    if c = Y then \"\\n\" else \" \" endif\n    | r in 1..X, c in 1..Y\n];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Nonogram problem:\n\n```\n{\n  \"question1\": \"As a logistics manager, I need to allocate 15 different products to 20 warehouses, each with a specific capacity. Each product has a set of constraints on which warehouses it can be stored in, and I need to ensure that the total storage capacity of each warehouse is not exceeded. How can I optimize the allocation of products to warehouses to minimize transportation costs while satisfying all the constraints?\",\n  \"question2\": \"I'm planning a party and I want to seat 12 guests at 4 tables. Each guest has a list of people they want to sit with and people they don't want to sit with. How can I arrange the seating to make sure everyone is happy and has a good time?\",\n  \"question3\": \"I'm a teacher and I need to create a seating chart for my classroom. There are 25 students and 5 tables, each with a specific number of chairs. Some students are friends and want to sit together, while others have special needs that require them to sit in a specific spot. How can I create a seating chart that makes everyone happy and accommodates all the special needs?\",\n  \"question4\": \"I have 8 boxes and 12 items to pack. Each item has a specific size and can only fit in certain boxes. How can I pack all the items in the boxes without wasting any space?\",\n  \"question5\": \"As a urban planner, I need to design a new public park with 15 different amenities, such as playgrounds, basketball courts, and picnic areas. The park has a specific shape and size, and each amenity has a set of constraints on where it can be located. For example, the playground must be near the entrance, and the basketball court cannot be near the picnic area. Additionally, I need to ensure that the park is accessible to people with disabilities and that there are enough parking spaces. How can I design the park to maximize its usability and accessibility while satisfying all the constraints?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Nonogram problem, but in different contexts. They require the solver to find a feasible solution that satisfies all the constraints, which is the core of the Nonogram problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the descriptions of the two models:\n\n**Model 1**\n\n{\n\"name\": \"Nonogram\",\n\"description\": \"A Nonogram is a puzzle where a grid of cells is divided into rows and columns, and each row and column has a set of clues that indicate which cells should be filled in. The goal is to fill in the grid according to the clues.\",\n\"variables\": \"x[i, j] \u2208 {1, 2} for i \u2208 {1, ..., rows} and j \u2208 {1, ..., cols}. These variables represent the state of each cell in the grid, where 1 represents a filled-in cell and 2 represents an empty cell.\",\n\"constraints\": \"make_automaton(x, row_rules) and make_automaton(x, col_rules) for each row and column. These constraints ensure that the filled-in cells in each row and column satisfy the corresponding clues.\",\n\"objective\": \"Satisfy all constraints (i.e., find a feasible solution)\"\n}\n\n**Model 2**\n\n{\n\"name\": \"Nonogram\",\n\"description\": \"A Nonogram is a puzzle where a grid of cells is divided into rows and columns, and each row and column has a set of clues that indicate which cells should be filled in. The goal is to fill in the grid according to the clues.\",\n\"variables\": \"A[i, j] \u2208 {1, 2} for i \u2208 {1, ..., Y} and j \u2208 {1, ..., X}. These variables represent the state of each cell in the grid, where 1 represents a filled-in cell and 2 represents an empty cell.\",\n\"constraints\": \"nonogram_row(A, rows) and nonogram_col(A, cols) for each row and column. These constraints ensure that the filled-in cells in each row and column satisfy the corresponding clues.\",\n\"objective\": \"Satisfy all constraints (i.e., find a feasible solution)\"\n}\n\nNote that both models represent the same problem, which is a Nonogram puzzle. The main difference between the two models is the way the constraints are formulated. Model 1 uses a more complex predicate `make_automaton` to enforce the constraints, while Model 2 uses a simpler predicate `nonogram` to achieve the same effect.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "opd": {"__data__": {"id_": "opd", "embedding": null, "metadata": {"problem_family": "opd", "model_name": "opd", "source_code": "%% Design of Collateralised Debt Obligations Squared (CDO^2) Transactions\n% An OPD (v, b, r) problem is to find a binary matrix of v rows\n% and b columns such that each row sums to r, and\n% the dot product beween any pair of distinct rows is minimal.\n\n%Requires MiniZinc >= 2.0.2 for the symmetry_breaking_constraint predicate\n\ninclude \"lex_greatereq.mzn\";\n\n%instance data\nint: v;\nint: b;\nint: r;\n\n\nset of int: rows = 1..v;\nset of int: cols = 1..b;\n\n\n%computing a lower bound for lambda\nint: rv = r*v;\nint: rvmodb = rv mod b;\nint: floorrv = rv div b;\nint: ceilrv = rv div b + bool2int(rv mod b != 0);\nint: num = (ceilrv*ceilrv*rvmodb+floorrv*floorrv*(b-rvmodb)-rv);\nint: denom = v*(v-1);\nint: lb_lambda = num div denom + bool2int( num mod denom !=0);\n\n% This line is there for debugging purposes, it can be safely removed\nint: tmp = trace(\"Computed lower bound for lambda: \"++show(lb_lambda)++\"\\n\",lb_lambda);\n\n\n% lambda is called objective for the MiniZinc Challenge\nvar lb_lambda..b: objective;\n\n\narray [rows, cols] of var 0..1: m;\n\n\n% Every row must sum to r.\nconstraint forall (i in rows) (sum (j in cols) (m[i, j]) = r);\n\n% The dot product of every pair of distinct rows must be at most lambda for an OPD and a PD, and equal to lambda for a BIBD\nconstraint forall (i_a, i_b in rows where i_a < i_b) (\n    sum (j in cols) (m[i_a, j] * m[i_b, j]) <= objective\n);\n\n\n% Break row symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(i in rows diff {max(rows)})(\n        lex_greatereq([m[i, j] | j in cols], [m[i+1, j] | j in cols])\n    )\n);\n% Break column symmetry in the incidence matrix.\nconstraint symmetry_breaking_constraint(\n    forall(j in cols diff {max(cols)})(\n        lex_greatereq([m[i, j] | i in rows], [m[i, j+1] | i in rows])\n    )\n);\n\n\nsolve \n    :: seq_search([int_search([m[i, j] | i in rows, j in cols], input_order, indomain_max, complete),\n       \t\t   int_search([objective], input_order,indomain_min,complete)])\n    minimize objective; \n\n\n% Disabled the full solution. Printing only the objective value, lower bound, and parameters.\noutput  [\"opd: (v = \", show(v), \", b = \", show(b), \", r = \", show(r), \"). Found lambda = \", show(objective),\"\\tlb: \", show(lb_lambda)]\n%       ++[\"\\n\\n\"] ++ \n%\t[ ( if j > b then \"\\n\" else \n%\t        if fix(m[i,j])=1 then \"*\" else \" \" endif\n%\t    endif )\n%       | i in rows, j in 1..(b + 1) ]\n;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the OPD problem:\n\n```\n{\n  \"question1\": \"A marketing firm wants to design a survey with 10 questions, each with 5 possible answers, to gather feedback from 20 different customer segments. The goal is to minimize the similarity between the answers of any two customer segments. How can they design the survey to achieve this goal?\",\n  \"question2\": \"I'm planning a music festival with 15 stages, each featuring 5 bands. I want to make sure that no two stages have too many similar bands. How can I schedule the bands to minimize the overlap between stages?\",\n  \"question3\": \"I'm a teacher and I want to create a seating chart for my class of 25 students, with 5 tables of 5 students each. I want to make sure that each table has a good mix of students who work well together. How can I create a seating chart that minimizes conflicts and maximizes collaboration?\",\n  \"question4\": \"Design a 5x5 grid of switches, where each row must have exactly 3 switches turned on. How can I configure the switches to minimize the number of pairs of rows with the same switch pattern?\",\n  \"question5\": \"A hospital is designing a new patient room layout with 12 rooms, each with 5 beds. The hospital wants to minimize the number of pairs of rooms with the same patient demographics (e.g., age, gender, medical condition). The hospital also wants to ensure that each room has a mix of patients with different medical conditions. How can the hospital design the patient room layout to achieve these goals, taking into account the constraints of the hospital's architecture and patient flow?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the OPD problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Optimal Pairwise Design (OPD) Problem\",\n\"description\": \"The Optimal Pairwise Design (OPD) problem is a combinatorial optimization problem that involves finding a binary matrix with a specific structure. The goal is to find a binary matrix of v rows and b columns such that each row sums to r, and the dot product between any pair of distinct rows is minimal. This problem has applications in the design of Collateralised Debt Obligations Squared (CDO^2) transactions.\",\n\"variables\": \"m[i, j] (i \u2208 {1, ..., v}, j \u2208 {1, ..., b}), objective\",\n\"variables_explanation\": \"m[i, j] represents the binary value at row i and column j of the matrix, and objective represents the minimum dot product between any pair of distinct rows.\",\n\"constraints\": \"\u2200i \u2208 {1, ..., v} (\u2211j \u2208 {1, ..., b} m[i, j] = r), \u2200i_a, i_b \u2208 {1, ..., v} (i_a < i_b) (\u2211j \u2208 {1, ..., b} m[i_a, j] * m[i_b, j] \u2264 objective), symmetry breaking constraints\",\n\"constraints_explanation\": \"The first constraint ensures that each row sums to r. The second constraint ensures that the dot product between any pair of distinct rows is at most objective. The symmetry breaking constraints are used to break row and column symmetry in the incidence matrix.\",\n\"objective\": \"minimize objective\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "partition": {"__data__": {"id_": "partition", "embedding": null, "metadata": {"problem_family": "partition", "model_name": "partition", "source_code": "Model 1 : \n\n% Partitioning problem\n% Partition 2*n numbers into two groups, each of size n, such that\n% their sums are equal and the sums of their squares are equal.\n\ninclude \"globals.mzn\";\n\n% Instance\n\nn = 32;\n\n% Model\n\nint: n;\n\narray[1..n] of var 1..2*n: x;\narray[1..n] of var 1..2*n: y;\n\nconstraint true\n    %   Break symmetries by ordering numbers in each group\n    /\\  forall (i in 2..n) (x[i-1] < x[i] /\\ y[i-1] < y[i])\n    %   Break symmetries by ordering the groups\n    /\\  x[1] < y[1]\n    \n    %   Partition the numbers\n    /\\  (alldifferent(x++y)) :: bounds\n    \n    %   The sums are equal\n    /\\  sum (x) = 2*n*(2*n+1) div 4\n    /\\  sum (y) = 2*n*(2*n+1) div 4\n    \n    %   The sums of the squares are equal\n    /\\  let {\n            array[1..n] of var 1..4*n*n: sx,\n            array[1..n] of var 1..4*n*n: sy\n        } in\n        forall (i in 1..n) (sx[i]=x[i]*x[i] /\\ sy[i] = y[i]*y[i])\n    /\\  sum (sx) = 2*n*(2*n+1)*(4*n+1) div 12\n    /\\  sum (sy) = 2*n*(2*n+1)*(4*n+1) div 12\n;\n\nsolve ::int_search(x++y,first_fail,indomain_min,complete) satisfy;\n\noutput\n    [\"x = \",show(x),\"\\n\",\"y = \",show(y),\"\\n\",\n     \"sum = \",show(2*n*(2*n+1) div 4),\"\\n\",\n     \"sum of squares = \", show(2*n*(2*n+1)*(4*n+1) div 12), \"\\n\"\n     ];\n\n\n\nModel 2 :\n\n\n\n%\n% Set partition problem in Minizinc.\n%\n%  This is a partition problem.\n%  Given the set S = {1, 2, ..., n},\n%  it consists in finding two sets A and B such that:\n%  <ul>\n%  <li>A U B = S,</li>\n%  <li>|A| = |B|,</li>\n%  <li>sum(A) = sum(B),</li>\n%  <li>sum_squares(A) = sum_squares(B).</li>\n%  </ul>\n \n%\ninclude \"globals.mzn\";\n \nint: n = 16;\nset of 1..n: S = 1..n;\nint: num_sets = 2;\narray[1..num_sets] of var set of S: a;\narray[1..num_sets] of var 0..n*n: sums;\narray[1..num_sets] of var 0..n*n*n*n: sum_squared;\n \n \n%\n% set_sum\n% sums the elements in the set s\n%\npredicate set_sum(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i)\n;\n \npredicate set_sum_squared(var set of int: s, var int: the_sum) =\n   the_sum = sum(i in ub(s)) (bool2int(i in s)*i*i)\n;\n \n \nsolve :: set_search(a, first_fail, indomain_min, complete) satisfy;\n% solve maximize sums[1];\n \nconstraint\n  assert(n mod 4 == 0, \"n must be a multiple of 4\")\n;\n \nconstraint\n   % use all the elements in S and it should be disjoint sets\n   partition_set(a, S)\n   /\\\n   forall(i in 1..num_sets) (  \n     a[i] `set_sum` sums[i]\n     /\\ a[i] `set_sum_squared` sum_squared[i]\n   )\n   /\\\n   forall(i in 2..num_sets) (\n     card(a[i]) > 0 /\\ % this is needed by eclipse\n     card(a[i]) = card(a[i-1]) /\\\n     sums[i] = sums[i-1]\n     /\\ sum_squared[i] = sum_squared[i-1]\n   )\n \n  % symmetry breaking\n  /\\ 1 in a[1]\n \n;\n \noutput [\n   \"a: \" ++ show(a) ++ \"\\n\" ++\n   \"sums: \" ++ show(sums) ++ \"\\n\" ++\n   \"sum_squared: \" ++ show(sum_squared) ++ \"\\n\"\n];\n \n% For model seeker\n% output [\n%    show(set2array(fix(a[i]))) ++ \",\"\n%   | i in 1..num_sets\n% ];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the partition problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager at a large e-commerce company. I need to allocate 32 packages of different weights to 2 trucks, each with a capacity of 256 units, such that the total weight of packages on each truck is equal and the total weight squared of packages on each truck is also equal. How can I do this efficiently?\",\n    \"goal\": \"Minimize transportation costs by balancing the weight of packages on each truck\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 16 bands, each with a different popularity level. I want to create two stages with an equal number of bands, such that the total popularity of bands on each stage is the same and the total squared popularity of bands on each stage is also the same. How can I do this?\",\n    \"goal\": \"Create a balanced and engaging lineup for the festival\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a teacher and I need to divide 16 students into two groups for a project. Each student has a different skill level and I want to make sure each group has an equal number of students and an equal total skill level. I also want to make sure the total squared skill level of each group is the same. How can I do this?\",\n    \"goal\": \"Create balanced and fair groups for the project\"\n  },\n  \"question4\": {\n    \"description\": \"Divide 16 items into 2 groups, each with 8 items, such that the total value of items in each group is the same and the total squared value of items in each group is also the same.\",\n    \"goal\": \"Balance the value of items in each group\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a manager at a large hospital and I need to allocate 32 medical devices to 2 departments, each with a different priority level. Each device has a different usage frequency and I want to make sure each department gets an equal number of devices, an equal total usage frequency, and an equal total squared usage frequency. The devices are categorized into 4 types, each with a different maintenance cost. I want to minimize the total maintenance cost while satisfying the above constraints. How can I do this?\",\n    \"goal\": \"Optimize device allocation to minimize maintenance cost while ensuring fairness and balance between departments\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the partition problem. They are designed to be answered by solving the partition problem, but do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the answers for the two models:\n\n**Model 1**\n\n{\n\"name\": \"Partition Problem\",\n\"description\": \"This is a partition problem where 2n numbers are divided into two groups of size n, such that the sums of the numbers in each group are equal and the sums of the squares of the numbers in each group are also equal.\",\n\"variables\": \"x = (x1, x2, ..., xn), y = (y1, y2, ..., yn), where xi and yi are integers between 1 and 2n, representing the numbers in each group.\",\n\"constraints\": \"1. x and y are ordered, 2. x and y are disjoint, 3. the sums of x and y are equal, 4. the sums of the squares of x and y are equal.\",\n\"objective\": \"Satisfy all constraints (no optimization objective)\"\n}\n\n**Model 2**\n\n{\n\"name\": \"Set Partition Problem\",\n\"description\": \"This is a set partition problem where a set S of n elements is divided into two subsets A and B, such that A and B are disjoint, |A| = |B|, sum(A) = sum(B), and sum_squares(A) = sum_squares(B).\",\n\"variables\": \"a = (A, B), where A and B are subsets of S, representing the two groups of elements.\",\n\"constraints\": \"1. A and B are disjoint, 2. |A| = |B|, 3. sum(A) = sum(B), 4. sum_squares(A) = sum_squares(B), 5. symmetry breaking constraint.\",\n\"objective\": \"Satisfy all constraints (no optimization objective)\"\n}\n\nLet me know if you need any further clarification!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "QuasigroupCompletion": {"__data__": {"id_": "QuasigroupCompletion", "embedding": null, "metadata": {"problem_family": "QuasigroupCompletion", "model_name": "QuasigroupCompletion", "source_code": "Model 1 :\n\n% Quasigroup with Holes (aka Latin Square Completion)\n\ninclude \"alldifferent.mzn\";\n\nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n\narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N] of var PuzzleRange: puzzle;\n\n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j] = start[i,j] else true endif );\n\n% All different in rows\nconstraint forall (i in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | j in PuzzleRange ] ) );\n\n% All different in columns.\nconstraint forall (j in PuzzleRange) (\n                   alldifferent( [ puzzle[i,j] | i in PuzzleRange ] ) );\n\nsolve satisfy;\n\noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\nint: N;\nint: digs = ceil(log(10.0,int2float(N))); % digits for output\nset of int: PuzzleRange = 1..N;\n \narray[1..N,1..N] of 0..N: start; %% initial board 0 = empty\narray[1..N,1..N, 1..N] of var 0..1: puzzle;\n \n% fill initial board\nconstraint forall(i,j in PuzzleRange)(\n  if start[i,j] > 0 then puzzle[i,j, start[i,j]] = 1 else true endif );\n \n% All different in rows\nconstraint forall (i,k in PuzzleRange) (\n        sum(j in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% All different in columns\nconstraint forall (j,k in PuzzleRange) (\n        sum(i in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\n% Each cell must have a number assigned\nconstraint forall (i,j in PuzzleRange) (\n        sum(k in PuzzleRange)(puzzle[i,j,k]) == 1\n);\n\nsolve satisfy;\n \noutput [ show_int(digs,puzzle[i,j]) ++ \" \" ++\n        if j == N /\\ i != N then \"\\n\" else \"\" endif\n        | i,j in PuzzleRange ] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Quasigroup Completion problem:\n\n```\n{\n  \"question1\": \"A logistics company has 5 warehouses and 5 trucks, each with a specific capacity. The company needs to assign a unique truck to each warehouse, ensuring that each truck is used exactly once and each warehouse is served by exactly one truck. The company has already assigned some trucks to warehouses, but some remain unassigned. How can the company complete the assignment to maximize efficiency?\",\n  \"question2\": \"I'm planning a dinner party for 8 friends and I want to seat them at a square table with 8 chairs. I have some friends who don't get along, so I want to make sure they're not sitting next to each other. I've already seated a few friends, but I'm not sure how to finish the seating arrangement. Can you help me figure out who should sit where?\",\n  \"question3\": \"I'm creating a new game where players have to collect 6 different colored tokens. The game board has 6 rows and 6 columns, and each cell can hold one token. I want to make sure that each row, column, and cell has exactly one token of each color. I've already placed some tokens on the board, but I'm stuck. Can you help me finish the game board?\",\n  \"question4\": \"I have 4 teams and 4 projects. Each team should work on one project, and each project should have one team. How can I assign the teams to projects?\",\n  \"question5\": \"A hospital has 9 operating rooms and 9 surgical teams, each with a specific specialty. The hospital needs to schedule surgeries for the next day, ensuring that each operating room is used exactly once and each surgical team performs exactly one surgery. The hospital has already scheduled some surgeries, but some operating rooms and teams remain unassigned. Additionally, the hospital has some constraints: room 3 can only be used for orthopedic surgeries, team 5 can only perform cardiothoracic surgeries, and team 2 cannot work in room 8. How can the hospital complete the surgery schedule to maximize efficiency and respect the constraints?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the Quasigroup Completion problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the descriptions of the two models:\n\n**Model 1:**\n\n{\n\"name\": \"Quasigroup with Holes (Latin Square Completion)\",\n\"description\": \"The Quasigroup with Holes problem, also known as Latin Square Completion, is a classic constraint satisfaction problem. It involves completing a partially filled Latin square, where each row, column, and cell must contain each symbol exactly once.\",\n\"variables\": \"puzzle[i, j] \u2208 {1, ..., N}, \u2200i, j \u2208 {1, ..., N}. These are the decision variables representing the values to be assigned to each cell in the Latin square.\",\n\"constraints\": \"1. \u2200i, j \u2208 {1, ..., N}, if start[i, j] > 0 then puzzle[i, j] = start[i, j] (fill initial board). 2. \u2200i \u2208 {1, ..., N}, alldifferent([puzzle[i, j] | j \u2208 {1, ..., N}]) (all different in rows). 3. \u2200j \u2208 {1, ..., N}, alldifferent([puzzle[i, j] | i \u2208 {1, ..., N}]) (all different in columns).\",\n\"objective\": \"Satisfy (find a feasible solution)\"\n}\n\n**Model 2:**\n\n{\n\"name\": \"Latin Square\",\n\"description\": \"The Latin Square problem is a classic constraint satisfaction problem. It involves assigning values to each cell in a square matrix, such that each row, column, and cell contains each value exactly once.\",\n\"variables\": \"puzzle[i, j, k] \u2208 {0, 1}, \u2200i, j, k \u2208 {1, ..., N}. These are the decision variables representing the assignment of values to each cell in the Latin square.\",\n\"constraints\": \"1. \u2200i, j \u2208 {1, ..., N}, if start[i, j] > 0 then puzzle[i, j, start[i, j]] = 1 (fill initial board). 2. \u2200i, k \u2208 {1, ..., N}, \u2211(j \u2208 {1, ..., N})(puzzle[i, j, k]) = 1 (all different in rows). 3. \u2200j, k \u2208 {1, ..., N}, \u2211(i \u2208 {1, ..., N})(puzzle[i, j, k]) = 1 (all different in columns). 4. \u2200i, j \u2208 {1, ..., N}, \u2211(k \u2208 {1, ..., N})(puzzle[i, j, k]) = 1 (each cell must have a number assigned).\",\n\"objective\": \"Satisfy (find a feasible solution)\"\n}\n\nNote that both models are solving the same problem, but with different formulations. Model 1 uses a 2D array of variables, while Model 2 uses a 3D array of variables to represent the assignment of values to each cell in the Latin square.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "QuasiGroupExistence": {"__data__": {"id_": "QuasiGroupExistence", "embedding": null, "metadata": {"problem_family": "QuasiGroupExistence", "model_name": "QuasiGroupExistence", "source_code": "Model 1 :\n\n\n% Quasigroup problem in MiniZinc.\n% The quasiGroup existence problem\n% An m order quasigroup  is an mxm multiplication table of integers 1..m,\n% where each element occurrs exactly once in each row and column and certain\n% multiplication axioms hold (in this case, we want axiom 7 to hold).\n%\n% QG7.m problems are order m quasigroups for which (b*a)*b = a*(b*a).\n\n\ninclude \"globals.mzn\";\n \nint: n;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n% solve satisfy;\n \nconstraint\n      \n     % assign the \"reflected\" quasigroup to qGColumns to access its columns\n     %  forall row,col : nDomain .\n     %    quasiGroupColumns[col,row] = quasiGroup[row,col],\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % all values in the diagonals\n     forall( i in nDomain ) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n \n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row, col] | row in nDomain])\n     )\n     /\\\n \n     % this strange constraint\n     % corresponds to:\n     % quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i], j] \n     forall(i,j in nDomain) (\n              quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i],j]\n     )\n     /\\\n     % some implied? constraint\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n \n \n%\n% data\n%\nn = 5;\n\n\n\nModel 2 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 9; % solutions for n=5, n=9...\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 3 : \n\n\ninclude \"globals.mzn\";\n \nint: n = 4;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n \nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n \n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (i != j) ->\n         (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n \n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n \n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput\n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\n\nModel 4 :\n\ninclude \"globals.mzn\";\n \nint: n;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;\n \nconstraint\n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain])\n     )\n     /\\\n     %  (j*i)*(i*j) = i\n     forall(i in nDomain) (\n         forall(j in nDomain) (\n        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i\n         )\n     )\n \n     % Idempotency\n     % forall i : nDomain .\n     %     (quasiGroup[i,i] = i),\n \n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     % allDifferent(qgDiagonal) %,\n \n     % anti-Abelian\n     % forall i : nDomain .\n     %   forall j : nDomain .\n     %     (i != j) =>\n     %     (quasiGroup[i,j] != quasiGroup[j,i]),\n \n     % if (i*i)=j then (j*j) = i\n     % forall i : nDomain .\n     %  forall j : nDomain .\n     %    (quasiGroup[i,i]=j) => (quasiGroup[j,j]=i),\n \n \n     % Symmetry-breaking constraints   \n     % forall i : nDomain .\n     %      quasiGroup[i,n-1] + 2 >= i\n \n;\n \noutput\n[ \"\\nqgDiagonal: \", show(qgDiagonal)\n] ++\n[ \"\\nquasiGroup: \"\n] ++\n[\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n \n \n \n \n%\n% data\n%\nn = 4; % 4 works\n\n\nModel 5 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 7;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 6 :\n\n\ninclude \"globals.mzn\";\n \nint: n = 5;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\narray[nDomain] of var nDomain: qgDiagonal;\n \n% solve satisfy;\nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % accessor for diagonal\n     forall(i in nDomain) (\n         qgDiagonal[i] = quasiGroup[i,i]\n     )\n     /\\\n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain ] )\n     )\n     /\\\n     % All columns have to be different\n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain] )\n     )\n     /\\\n     % (j*i)*(i*j) = i\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i\n          )\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     % All-diff diagonal\n     all_different(qgDiagonal)\n \n     /\\\n     % anti-Abelian\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n           (i != j) ->\n             (quasiGroup[i,j] != quasiGroup[j,i])\n       )\n     )\n     /\\\n     % if (i*i)=j then (j*j) = i\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints\n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];\n\n\nModel 7 :\n\n\n\ninclude \"globals.mzn\";\n \nint: n = 7;\nset of int: nDomain = 0..n-1;\n \narray[nDomain, nDomain] of var nDomain: quasiGroup;\n \nsolve :: int_search([quasiGroup[row, col] | row, col in nDomain],\n        first_fail, indomain_min, complete) satisfy;\n \nconstraint\n \n     % All rows have to be different\n     forall(row in nDomain) (\n          all_different([quasiGroup[row,col] | col in nDomain])\n     )\n     /\\\n     % All columns have to be different       \n     forall(col in nDomain) (\n          all_different([quasiGroup[row,col] | row in nDomain ])\n     )\n     /\\\n     % ((i*j)*j)*j = a\n     forall(i in nDomain) (\n          forall(j in nDomain) (\n            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i\n          )\n     )\n     /\\\n     % Idempotency\n     forall(i in nDomain) (\n          quasiGroup[i,i] = i\n     )\n     /\\\n     % Implied (from Colton,Miguel 01)\n     forall(i in nDomain) (\n       forall(j in nDomain) (\n         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)\n       )\n     )\n     /\\\n     % Symmetry-breaking constraints   \n     forall(i in nDomain) (\n           quasiGroup[i,n-1] + 2 >= i\n     )\n;\n \noutput [\n  if col = 0 then \"\\n\" else \" \" endif ++\n    show(quasiGroup[row, col])\n  | row, col in nDomain\n] ++ [\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the QuasiGroup Existence problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a data analyst at a marketing firm, and I need to design a survey with 7 questions, each with 7 possible answers. To ensure the survey is unbiased, I want to ensure that each answer appears exactly once in each question and that no two questions have the same answer pattern. How can I design such a survey?\",\n    \"goal\": \"Design an unbiased survey with 7 questions and 7 possible answers each\",\n    \"constraints\": \"Each answer appears exactly once in each question, no two questions have the same answer pattern\",\n    \"priorities\": \"Unbiased survey, efficient design\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a dinner party for 9 friends, and I want to seat them at a table with 9 chairs. I want to make sure that each friend sits next to someone different at each course (appetizer, main, dessert). How can I arrange the seating to make this happen?\",\n    \"goal\": \"Arrange seating for 9 friends at a dinner party\",\n    \"constraints\": \"Each friend sits next to someone different at each course\",\n    \"priorities\": \"Variety in seating arrangements, efficient planning\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a 12-year-old who loves puzzles, and I want to create a secret code with my friends. We want to use a 5x5 grid with numbers 1-5, and each number can only appear once in each row and column. How can we create a code that works?\",\n    \"goal\": \"Create a secret code with a 5x5 grid and numbers 1-5\",\n    \"constraints\": \"Each number appears once in each row and column\",\n    \"priorities\": \"Fun and secrecy, ease of use\"\n  },\n  \"question4\": {\n    \"description\": \"I need to schedule 5 teams for a tournament, with each team playing 5 games. How can I ensure that each team plays every other team exactly once?\",\n    \"goal\": \"Schedule 5 teams for a tournament with 5 games each\",\n    \"constraints\": \"Each team plays every other team exactly once\",\n    \"priorities\": \"Efficient scheduling, fairness\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a logistics manager at a warehouse, and I need to optimize the storage of 9 types of products, each with 9 different sizes. I want to store them in a 9x9 grid, with each product type and size appearing exactly once in each row and column. Additionally, I want to ensure that products with similar sizes are not stored next to each other. How can I design an optimal storage layout?\",\n    \"goal\": \"Design an optimal storage layout for 9 product types and sizes\",\n    \"constraints\": \"Each product type and size appears exactly once in each row and column, similar sizes are not stored next to each other\",\n    \"priorities\": \"Efficient storage, reduced errors, safety\"\n  }\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the QuasiGroup Existence problem. They are designed to be answered by solving the problem, but do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the descriptions of the problems in the requested format:\n\n**Model 1**\n```\n{\n  \"name\": \"Quasigroup Existence Problem (QG7)\",\n  \"description\": \"Find an m-order quasigroup, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table.\",\n  \"constraints\": \"All rows and columns are different, diagonal elements are equal to their indices, and the axiom (b*a)*b = a*(b*a) holds.\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 2**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with Idempotency and Anti-Abelian Property\",\n  \"description\": \"Find an m-order quasigroup with idempotency and anti-Abelian property, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table, and qgDiagonal[i] (0 \u2264 i < n) is the diagonal element at index i.\",\n  \"constraints\": \"All rows and columns are different, diagonal elements are equal to their indices, idempotency holds (i*i = i), anti-Abelian property holds (i*j \u2260 j*i for i \u2260 j), and implied constraints from Colton and Miguel (2001).\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 3**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with Idempotency, Anti-Abelian Property, and Implied Constraints\",\n  \"description\": \"Find an m-order quasigroup with idempotency, anti-Abelian property, and implied constraints, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table, and qgDiagonal[i] (0 \u2264 i < n) is the diagonal element at index i.\",\n  \"constraints\": \"All rows and columns are different, diagonal elements are equal to their indices, idempotency holds (i*i = i), anti-Abelian property holds (i*j \u2260 j*i for i \u2260 j), and implied constraints from Colton and Miguel (2001).\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 4**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with Idempotency and Anti-Abelian Property\",\n  \"description\": \"Find an m-order quasigroup with idempotency and anti-Abelian property, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table, and qgDiagonal[i] (0 \u2264 i < n) is the diagonal element at index i.\",\n  \"constraints\": \"All rows and columns are different, diagonal elements are equal to their indices, idempotency holds (i*i = i), anti-Abelian property holds (i*j \u2260 j*i for i \u2260 j).\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 5**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with ((i*j)*j)*j = i Axiom\",\n  \"description\": \"Find an m-order quasigroup with the axiom ((i*j)*j)*j = i, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table.\",\n  \"constraints\": \"All rows and columns are different, and the axiom ((i*j)*j)*j = i holds.\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 6**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with Idempotency, Anti-Abelian Property, and Implied Constraints\",\n  \"description\": \"Find an m-order quasigroup with idempotency, anti-Abelian property, and implied constraints, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table, and qgDiagonal[i] (0 \u2264 i < n) is the diagonal element at index i.\",\n  \"constraints\": \"All rows and columns are different, diagonal elements are equal to their indices, idempotency holds (i*i = i), anti-Abelian property holds (i*j \u2260 j*i for i \u2260 j), and implied constraints from Colton and Miguel (2001).\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\n**Model 7**\n```\n{\n  \"name\": \"Quasigroup Existence Problem with ((i*j)*j)*j = i Axiom and Idempotency\",\n  \"description\": \"Find an m-order quasigroup with the axiom ((i*j)*j)*j = i and idempotency, which is an mxm multiplication table of integers 1..m, where each element occurs exactly once in each row and column, and certain multiplication axioms hold.\",\n  \"variables\": \"quasiGroup[row, col] (0 \u2264 row, col < n), where quasiGroup[row, col] is the element at row and column col in the quasigroup table.\",\n  \"constraints\": \"All rows and columns are different, idempotency holds (i*i = i), and the axiom ((i*j)*j)*j = i holds.\",\n  \"objective\": \"Satisfy the constraints (no optimization objective)\"\n}\n```\n\nLet me know if you need any further clarification!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "queens": {"__data__": {"id_": "queens", "embedding": null, "metadata": {"problem_family": "queens", "model_name": "queens", "source_code": "Model 1 :\n\n% n queens problem in MiniZinc.\n\ninclude \"globals.mzn\";\n\nint: n;\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail, \n        indomain_min, \n        complete) \n    satisfy;\n\n% solve satisfy;\n\nconstraint all_different(queens);\n\nconstraint\n    forall(i, j in 1..n where i < j) (\n         queens[i] != queens[j] /\\\n         queens[i] + i != queens[j] + j /\\\n         queens[i] - i != queens[j] - j\n    ) \n ;\n\noutput [\n  show(queens) ++ \"\\n\"\n\n];\n\n% data\nn = 8;\n\n\n\nModel 2 : \n\n\ninclude \"globals.mzn\";\n\nint: n;\n\narray[1..n] of var 1..n: queens;\n\nsolve :: int_search(\n        queens, \n        first_fail,\n        indomain_median,\n        complete\n       )\n     satisfy;\n\n% solve satisfy;\nconstraint all_different(queens); %  :: domain;\nconstraint all_different([queens[i]+i | i in 1..n]) :: domain;\nconstraint all_different([queens[i]-i | i in 1..n]) :: domain;\n\noutput \n[\n  \"queens: \" ++ show(queens)\n] ++ \n% [\n%   if j = 1 then \"\\n\" else \"\" endif ++\n%      if fix(queens[i]) = j then          \n%         show_int(2,j)\n%      else\n%         \"__\"\n%      endif\n%   | i in 1..n, j in 1..n\n% ] ++\n[\"\\n\"]\n;\n\n% data\nn = 8;", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the N-Queens Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse with 8 loading docks. I need to assign 8 trucks to these docks in a way that no two trucks are parked in the same row or diagonal, to ensure safe and efficient loading and unloading of cargo. How can I optimize the truck assignments to minimize congestion and maximize throughput?\",\n  \"question2\": \"I'm planning a birthday party for my 8-year-old daughter and I want to set up 8 tables with 8 chairs each. I need to seat the kids in a way that no two kids are sitting in the same row or diagonal, so they can all see each other and have fun. Can you help me figure out the best seating arrangement?\",\n  \"question3\": \"I'm a 10-year-old kid who loves playing with my 8 favorite toys on my 8x8 grid playmat. I want to arrange them in a way that no two toys are in the same row or diagonal, so I can play with all of them at the same time. Can you help me find the best way to set up my toys?\",\n  \"question4\": \"I have 8 people attending a dinner party and I need to seat them at a rectangular table. How can I arrange the seats so that no two guests are sitting next to each other or diagonally across from each other?\",\n  \"question5\": \"I'm the event coordinator for a large conference with 8 parallel sessions, each with 8 speakers. I need to assign the speakers to 8 different rooms in a way that no two speakers from the same session are in the same room or adjacent rooms, to minimize conflicts and ensure a smooth schedule. Additionally, I need to prioritize the assignments based on the speakers' preferences for morning or afternoon sessions, and ensure that at least 2 speakers from each session are assigned to rooms with audio-visual equipment. Can you help me find an optimal solution that meets all these constraints and preferences?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the N-Queens Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"N-Queens Problem\",\n\"description\": \"The N-Queens Problem is a classic problem in computer science and mathematics, where the goal is to place N queens on an NxN chessboard such that no two queens attack each other. A queen can attack another queen if they are in the same row, column, or diagonal.\",\n\"variables\": \"queens = [q1, q2, ..., qn], where qi \u2208 {1, 2, ..., n} for i = 1, 2, ..., n. These variables represent the positions of the queens on the chessboard, where qi is the column number of the queen in the ith row.\",\n\"constraints\": \"all_different(queens), \u2200i, j \u2208 {1, 2, ..., n} where i < j: (qi \u2260 qj) \u2227 (qi + i \u2260 qj + j) \u2227 (qi - i \u2260 qj - j). The first constraint ensures that each column has at most one queen, and the second constraint ensures that no two queens are in the same diagonal.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote that both models represent the same problem, with slight differences in the search strategy and output formatting.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "rehearsal": {"__data__": {"id_": "rehearsal", "embedding": null, "metadata": {"problem_family": "rehearsal", "model_name": "rehearsal", "source_code": "%\n% Scheduling a Rehearsal in MiniZinc.\n% A concert is to consist of nine pieces of music of different durations\n% each involving a different combination of the five members of the orchestra.\n% Players can arrive at rehearsals immediately before the first piece in which\n% they are involved and depart immediately after the last piece in which\n% they are involved. The problem is to devise an order in which the pieces\n% can be rehearsed so as to minimize the total time that players are waiting\n% to play, i.e. the total time when players are present but not currently\n% playing. In the table below, 1 means that the player is required for\n% the corresponding piece, 0 otherwise. The duration (i.e. rehearsal time)\n% is in some unspecified time units.\n%\n%    Piece       1    2   3    4    5  6    7   8    9\n%    Player 1    1    1   0    1    0  1    1   0    1\n%    Player 2    1    1   0    1    1  1    0   1    0\n%    Player 3    1    1   0    0    0  0    1   1    0\n%    Player 4    1    0   0    0    1  1    0   0    1\n%    Player 5    0    0   1    0    1  1    1   1    0\n%    Duration    2    4   1    3    3  2    5   7    6\n%\n% For example, if the nine pieces were rehearsed in numerical order as\n% given above, then the total waiting time would be:\n%       Player 1: 1+3+7=11\n%       Player 2: 1+5=6\n%       Player 3: 1+3+3+2=9\n%       Player 4: 4+1+3+5+7=20\n%       Player 5: 3\n% giving a total of 49 units. The optimal sequence, as we shall see,\n% is much better than this.\n%\n% ...\n%\n% The minimum waiting time for the rehearsal problem is 17 time units, and\n% an optimal sequence is 3, 8, 2, 7, 1, 6, 5, 4, 9.\n%\n% \"\"\"\n\n\ninclude \"globals.mzn\"; \n\n\nint: num_pieces;\nint: num_players;\narray[1..num_pieces] of int: duration;\narray[1..num_players, 1..num_pieces] of 0..1: rehearsal;\n\n\n%\n% Decision variables\n%\narray[1..num_pieces] of var 1..num_pieces: rehearsal_order;\narray[1..num_players] of var 0..sum(duration): waiting_time; % waiting time for players\narray[1..num_players] of var 1..num_pieces: p_from; % first rehearsal\narray[1..num_players] of var 1..num_pieces: p_to;   % last rehearsal\nvar 0..sum(duration): total_waiting_time = sum(waiting_time); % objective\n\nsolve :: int_search(\n         rehearsal_order % ++ waiting_time% ++ p_from ++ p_to ++ [total_waiting_time]\n         , \n         first_fail, % occurrence, % max_regret, % first_fail, \n         indomain_max, % indomain_max, \n         complete) \n     minimize total_waiting_time;\n     % satisfy;\n\n% solve :: labelling_ff minimize total_waiting_time;\n\nconstraint\n  all_different(rehearsal_order) :: domain\n  /\\\n\n  % This solution is my own without glancing at Smith's models...\n  forall(p in 1..num_players) (\n     % This versions is much faster than using exists (see below)\n     % fix the range from..to, i.e. don't count all that start with 0 \n     % or ends with 0.\n     % This means that we collect the rehearsals with many 0 at the ends\n     %\n     p_from[p] < p_to[p]\n     /\\\n     % skipping rehearsal at start (don't come yet)\n     forall(i in 1..num_pieces) (\n        i < p_from[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\\n     % skipping rehearsal at end (go home after last rehearsal)\n     forall(i in 1..num_pieces) (\n        i > p_to[p] -> (rehearsal[p, rehearsal_order[i]] = 0)\n     )\n     /\\ % and now: count the waiting time for from..to\n     waiting_time[p] = \n         sum(i in 1..num_pieces) (\n              duration[rehearsal_order[i]] * bool2int(\n                                             i >= p_from[p] /\\ i <= p_to[p] \n                                             /\\\n                                             rehearsal[p,rehearsal_order[i]] = 0\n                                )\n     ) \n\n%      % alternative solution with exists. \n%      %  More elegant (= declarative) in my book but slower.\n%      exists(from, to in 1..num_pieces) ( \n%         % skipping rehearsal at start (don't come yet)\n%         forall(i in 1..from-1) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\\n%         % skipping rehearsal at end (go home after last rehearsal)\n%         forall(i in to+1..num_pieces) (\n%            rehearsal[p, rehearsal_order[i]] = 0\n%         )\n%         /\\ % and now: count the waiting time for from..to\n%         waiting_time[p] = \n%             sum(i in from..to) (\n%                  duration[rehearsal_order[i]]*\n%                                  bool2int(\n%                                       rehearsal[p,rehearsal_order[i]] = 0\n%                                   )\n%          ) \n%      )\n\n\n  )\n\n  /\\ % symmetry breaking\n  rehearsal_order[1] < rehearsal_order[num_pieces]\n\n  % for all solutions\n  % /\\ total_waiting_time = 17\n;\n\n\n%\n% data\n%\n%\n% num_pieces = 9;\n% num_players = 5;\n% duration = [2, 4, 1, 3, 3, 2, 5, 7, 6];\n% rehearsal = array2d(1..num_players, 1..num_pieces, \n%     [\n%      1,1,0,1,0,1,1,0,1,\n%      1,1,0,1,1,1,0,1,0,\n%      1,1,0,0,0,0,1,1,0,\n%      1,0,0,0,1,1,0,0,1,\n%      0,0,1,0,1,1,1,1,0\n%   ]);\n\n%\n% This is the problem from the Choco v 2.1 example \n% num_pieces = 5;\n% num_players = 3;\n% duration = [4,6,3,5,7];\n% rehearsal =  array2d(1..num_players, 1..num_pieces, \n%         [\n%         1,1,0,1,0,\n%         0,1,1,0,1,\n%         1,1,0,1,1   \n%   ]);\n\n\noutput[\n  \"order: \" , show(rehearsal_order), \"\\n\",\n  \"waiting_time: \", show(waiting_time), \"\\n\",\n  \"total_waiting_time: \" , show(total_waiting_time), \"\\n\",\n] ++ \n[\n  if j = 1 then \"\\n\" else \" \" endif ++\n    show(rehearsal[p, rehearsal_order[j]]) ++ \" \"\n  | p in 1..num_players, j in 1..num_pieces, \n] ++ \n[\"\\n\"]\n;\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a manufacturing plant, and I need to schedule a series of quality control checks for our production lines. We have 9 different product lines, each with a unique set of quality control checks that require different teams of inspectors. The checks have varying durations, and each team can only work on one product line at a time. How can I schedule the quality control checks to minimize the total time that inspectors are waiting to start their work?\",\n  \"question2\": \"I'm planning a big party and I need to figure out when to have each of my friends over to help with the preparations. I have 5 friends, and each of them is available to help with different tasks, like decorating, cooking, and setting up. Each task takes a different amount of time, and I want to make sure that each friend is only helping with tasks that they're available for. How can I schedule the tasks so that my friends aren't waiting around for too long?\",\n  \"question3\": \"I'm a camp counselor, and I need to plan a fun day of activities for my campers. We have 9 different activities, like arts and crafts, sports, and games, and each one requires a different set of counselors to supervise. The activities have different lengths, and I want to make sure that each counselor is only supervising activities that they're trained for. How can I schedule the activities so that the counselors aren't waiting around for too long?\",\n  \"question4\": \"I have 5 friends coming over to help me move, and I need to figure out when to have each of them over. Each friend is available for different blocks of time, and I want to minimize the time they're waiting around. How can I schedule their help?\",\n  \"question5\": \"I'm the manager of a large IT project, and I need to schedule a series of meetings with my team members to discuss their progress. We have 9 different team members, each working on a different aspect of the project, and each meeting requires a different subset of team members to attend. The meetings have varying durations, and each team member has a different availability schedule. I want to minimize the total time that team members are waiting to attend meetings. Additionally, I want to ensure that each team member has at least a 30-minute break between meetings, and that no more than 3 meetings are scheduled at the same time. How can I schedule the meetings to meet these constraints?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the problem's structure, and can be answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Rehearsal Scheduling Problem\",\n  \"description\": \"The problem is to schedule a rehearsal for a concert consisting of nine pieces of music with different durations, involving a different combination of five orchestra players. The goal is to find an order in which the pieces can be rehearsed to minimize the total time that players are waiting to play.\",\n  \"variables\": \"rehearsal_order: array[1..num_pieces] of var 1..num_pieces, waiting_time: array[1..num_players] of var 0..sum(duration), p_from: array[1..num_players] of var 1..num_pieces, p_to: array[1..num_players] of var 1..num_pieces, total_waiting_time: var 0..sum(duration). These variables represent the order in which the pieces are rehearsed, the waiting time for each player, the first and last piece each player is involved in, and the total waiting time, respectively.\",\n  \"constraints\": \"all_different(rehearsal_order), p_from[p] < p_to[p], skipping rehearsal at start and end for each player, counting waiting time for each player, symmetry breaking. These constraints ensure that each piece is rehearsed exactly once, each player arrives and departs at the correct times, and the waiting time is correctly calculated.\",\n  \"objective\": \"minimize total_waiting_time\"\n}\n```\n\nLet me know if you need any further clarification!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "RosteringProblem": {"__data__": {"id_": "RosteringProblem", "embedding": null, "metadata": {"problem_family": "RosteringProblem", "model_name": "RosteringProblem", "source_code": "include \"all_equal.mzn\";\ninclude \"global_cardinality.mzn\";\n\n% load parameters\ninclude \"parameters.dzn\";\n\nint: daysPerWeek = 7;\n\n% the number of weeks\nint: numberOfWeeks;\n\nint: numberOfDays = numberOfWeeks * daysPerWeek;\n\n% the minimum number of days in a row with the same shift\nint: s_min;\n\n% the maximum number of days in a row with the same shift\nint: s_max; \n\n% 3 shifts: early = 1, late = 2 and night shift = 3 + day off (rest day) = 0\nint: numberOfShifts = 3;\n\n% the shift requirement matrix, including at M_{i,j} the needed employees for day i and shift j\narray[1..daysPerWeek, 1..numberOfShifts+1] of int: shiftRequirements;\n\n\n% the variables X \narray[1..numberOfWeeks * daysPerWeek] of var 0..numberOfShifts: plan1d;\narray[1..numberOfWeeks,1..daysPerWeek] of var 0..numberOfShifts: plan2d;\narray[1..daysPerWeek,1..numberOfWeeks] of var 0..numberOfShifts: plan2dT;\n\n% helper arrays\narray[1..s_min,1..s_min] of var 0..numberOfShifts: s_min_arrays;\narray[1..s_max,1..s_max] of var 0..numberOfShifts: s_max_arrays;\n\n% convert the 2D plan into 1D\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan1d[(week-1) * daysPerWeek + day]\n           );  \n\n% transpose the 2D plan\nconstraint forall(week in 1..numberOfWeeks, day in 1..daysPerWeek) (\n                 plan2d[week, day] == plan2dT[day, week]\n           );\n\n% C_equalDays: constrains that weekend days (Saturday and Sunday) always have the same shift\nconstraint forall(week in 1..numberOfWeeks) (\n               plan2d[week, daysPerWeek - 1] == plan2d[week, daysPerWeek]\n           );                        \n\n                                                                                                                                \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_min, j in 1..s_min) (\n                 s_min_arrays[i, j] == plan1d[((numberOfDays - s_min - 1 + i + j) mod numberOfDays) + 1]\n           );                                            \n                                            \n% C_shiftRepetitions:for every shift type a minimum number of consecutive assignments to this shift is given\nconstraint forall(day in 1..numberOfDays - s_min) (\n               plan1d[day] != plan1d[day+1] -> all_equal(plan1d[day+1..day+s_min])\n           );     \n% the constraints over the array bounds           \nconstraint forall(d in 1..s_min) (\n               plan1d[d + numberOfDays - s_min] != plan1d[((d + numberOfDays - s_min) mod numberOfDays) +1] -> all_equal(s_min_arrays[d,1..s_min])\n           );                     \n\n           \n% create the sub arrays other the array bounds\nconstraint forall(i in 1..s_max, j in 1..s_max) (\n                 s_max_arrays[i, j] == plan1d[((numberOfDays - s_max - 2 + i + j) mod numberOfDays) + 1]\n           );                      \n                                            \n% C_shiftRepetitions:for every shift type a maximum number of consecutive assignments to this shift is given           \nconstraint forall(day in 1..numberOfWeeks * daysPerWeek - s_max) (\n               (all_equal(plan1d[day..day+s_max])) -> (plan1d[day] != plan1d[day + s_max])\n           );               \n% the constraints over the array bounds             \nconstraint forall(d in 1..s_max) (\n               (all_equal(s_max_arrays[d, 1..s_max])) -> (plan1d[d + numberOfDays - s_max] != plan1d[d])\n           );                     \n\n                               \n                                                                                                   \n% C_restDays: at least 2 days must be rest days every 2 weeks.\nconstraint forall(day in 1..(numberOfWeeks - 2) * daysPerWeek) (\n               count(j in plan1d[day..day + daysPerWeek * 2])(j=0) >= 2                   \n           );            \nconstraint forall(i in 1..2 * daysPerWeek-1) (\n               count(j in plan1d[numberOfWeeks * daysPerWeek-i .. numberOfWeeks * daysPerWeek] ++ plan1d[1..2*daysPerWeek-i])(j=0) >= 2    \n           );         \n                                            \n% C_shiftOrder: restricts the order of shifts. There is a forward rotating principle. This means, that after an early shift there can only follow a shift with the same or a higher value, or a rest shift.\nconstraint forall(day in 2..numberOfWeeks * daysPerWeek - 1) (\n               plan1d[day] <= plan1d[day + 1] \\/ plan1d[day+1] == 0\n           );         \nconstraint plan1d[1] >= plan1d[numberOfDays] \\/ plan1d[1] == 0;\n                      \n% C_shiftRequirements: for every weekday for each shift the number of required staff is provided (e.g. usually less staff is required on the weekend) \nconstraint forall(day in 1..daysPerWeek) (\n              (global_cardinality(row(plan2dT,day),[0,1,2,3],row(shiftRequirements,day)))   \n           );    \n           \n% solve the problem           \nsolve :: int_search(plan1d, input_order, indomain_min, complete)\n      satisfy;           \n      \n% print the problem      \noutput [ show(row(plan2d,j)) ++ \"\\n\" | j in 1..numberOfWeeks ] ++ [\"\\n\"];      ", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to schedule a team of 50 warehouse workers across 7 days a week. Each day, I need to ensure that I have at least 10 workers on the morning shift, 15 on the afternoon shift, and 5 on the night shift. Additionally, I want to ensure that each worker gets at least 2 consecutive days off every 2 weeks, and no more than 5 consecutive days of work. How can I create a schedule that meets these requirements while minimizing the number of workers on any given day?\",\n  \"question2\": \"I'm a camp director, and I need to create a schedule for our summer camp counselors. We have 20 counselors, and they need to be assigned to either morning, afternoon, or evening shifts for the next 4 weeks. Some counselors have specific requests, like not working on weekends or wanting to have at least 2 days off in a row. How can I make sure everyone gets the shifts they want while also making sure we have enough counselors on duty at all times?\",\n  \"question3\": \"I'm a 12-year-old who loves animals, and I'm helping out at a local animal shelter. We have 15 volunteers who need to be scheduled to care for the animals over the next 6 weeks. Some volunteers can only work on weekends, while others can work on weekdays. We need to make sure that each animal gets the care it needs, and that each volunteer gets at least 2 days off in a row. Can you help me create a schedule that makes everyone happy?\",\n  \"question4\": \"I need to schedule 12 teachers across 5 days a week for the next 8 weeks. Each teacher needs at least 2 consecutive days off every 2 weeks. How can I create a schedule that meets this requirement?\",\n  \"question5\": \"I'm the manager of a large call center, and I need to schedule 80 customer service representatives across 24/7 shifts for the next 12 weeks. We have specific requirements for each shift, such as 20 reps on the morning shift, 30 on the afternoon shift, and 10 on the overnight shift. Additionally, we need to ensure that each rep gets at least 2 consecutive days off every 2 weeks, and no more than 6 consecutive days of work. We also have some reps who can only work part-time, and others who need to take specific days off for personal reasons. How can I create a schedule that meets all these requirements while minimizing overtime and ensuring that we have enough reps on duty at all times?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the problem's structure, and can be answered by solving the Nurse Rostering Problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Nurse Rostering Problem\",\n\"description\": \"The Nurse Rostering Problem is a classic problem in constraint programming that involves creating a schedule for nurses to work in a hospital. The problem involves assigning nurses to shifts while satisfying various constraints such as the number of nurses required for each shift, the minimum and maximum number of consecutive days a nurse can work, and the requirement for rest days.\",\n\"variables\": \"plan1d, plan2d, plan2dT, s_min_arrays, s_max_arrays. plan1d, plan2d, and plan2dT are arrays of decision variables representing the shift assignments for each day, with values ranging from 0 (rest day) to 3 (night shift). s_min_arrays and s_max_arrays are helper arrays used to model the minimum and maximum consecutive days constraints.\",\n\"constraints\": \"C_equalDays: weekend days have the same shift, C_shiftRepetitions: minimum and maximum number of consecutive days for each shift, C_restDays: at least 2 rest days every 2 weeks, C_shiftOrder: restricts the order of shifts, C_shiftRequirements: satisfies the required number of staff for each shift. The constraints are modeled using a combination of global constraints (all_equal, global_cardinality) and custom constraints.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote: The objective of the problem is to find a feasible solution that satisfies all the constraints, rather than optimizing a specific objective function.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "sb": {"__data__": {"id_": "sb", "embedding": null, "metadata": {"problem_family": "sb", "model_name": "sb", "source_code": "% Solitaire Battleships is a puzzle where\n% we are given a partially filled in board and the number\n% of ships in each row and column and have to fill it with ships\n \n% \"Improved\" version does not introduce reified set_in\n\nint: width;   % height of board (usually 10)\nint: height;  % width of board (usually 10)\nint: maxship; % maximal length of ship (usually 4)\n\n\nset of int: ROWS = 1..width;\nset of int: COLS = 1..height;\nset of int: XROWS = 0..width+1;    % extended rows\nset of int: XCOLS = 0..height+1;   % extended cols\n\n%% ship types enumerated type\nset of int: SHIPS = 1..maxship;  % different ship types\nint: submarine = 1;\nint: destroyer = 2;\nint: cruiser = 3;\nint: battleship = 4;\n\n\n%% the PIECES enumerated type!\nset of int: PIECES = 1..7;\nint: w = 1; % water\nint: c = 2; % circle (submarine)\nint: l = 3; % left end of ship\nint: r = 4; % right end of ship\nint: t = 5; % top of ship\nint: b = 6; % bottom of ship\nint: m = 7; % middle of ship\narray[PIECES] of string: code = [\".\",\"c\",\"l\",\"r\",\"t\",\"b\",\"m\"];\n\narray[ROWS,COLS] of 0..7: hint; % the initial board configuration\narray[ROWS] of int: rowsum;     % sums for each row\narray[COLS] of int: colsum;     % sums for each col\narray[SHIPS] of int: ship; % the number of each type of ship (usually [4,3,2,1]).\n\n\n\n% variables \narray[XROWS,XCOLS] of var PIECES: board;  % the board\n \narray[XROWS,XCOLS] of var 0..1: fill;     % which pieces are ships\n\narray[PIECES] of var 0..width*height: npiece; % number of pieces of each type\n\n\n% model\n\n% ensure hints are respected\nconstraint forall(i in ROWS, j in COLS)(\n\t\t\t   if hint[i,j] != 0 then\n\t\t\t   \t\tboard[i,j] == hint[i,j]\n\t\t\t   else true endif\n\t       ); \n\n% make extended rows and cols empty\nconstraint forall(i in XROWS)(board[i,0] == w /\\ board[i,width+1] == w);\nconstraint forall(j in COLS)(board[0,j] == w /\\ board[height+1,j] == w);\n\n% ensure that the fill array matches the board\nconstraint forall(i in XROWS, j in XCOLS)(\n\t\t\t   fill[i,j] = bool2int(board[i,j] != w)\n\t       ); \n\n% spacing constraints: gaps betwen ships\nconstraint forall(i in ROWS, j in COLS)(\n\t   (board[i,j] == w \\/ board[i+1,j+1] == w)\n\t/\\ (board[i,j] == w \\/ board[i+1,j-1] == w)   % diagonal constraints\n            /\\ (board[i,j] in {c,l,r,t} -> board[i-1,j] == w)\n            /\\ (board[i,j] in {c,l,r,b} -> board[i+1,j] == w)\n            /\\ (board[i,j] in {c,l,t,b} -> board[i,j-1] == w)\n            /\\ (board[i,j] in {c,r,t,b} -> board[i,j+1] == w)\n           );\n               \t\t\t                       \n% ship shape constraints\nconstraint forall(i in ROWS, j in COLS)(\n               %% a left piece needs a right piece or middle to the right\n\t\t\t   (board[i,j] == l -> (board[i,j+1] == r \\/ board[i,j+1] == m))\n\t\t\t/\\ (board[i,j] == r -> (board[i,j-1] == l \\/ board[i,j-1] == m))\n\t\t\t/\\ (board[i,j] == t -> (board[i+1,j] == b \\/ board[i+1,j] == m))\n\t\t\t/\\ (board[i,j] == b -> (board[i-1,j] == t \\/ board[i-1,j] == m))\n\t\t\t   %% a middle piece has to have two opposite sides filled\n\t\t\t/\\ (board[i,j] == m -> (   fill[i-1,j] == fill[i+1,j]\n\t\t\t                        /\\ fill[i,j-1] == fill[i,j+1]\n\t\t\t                        /\\ fill[i-1,j] + fill[i,j-1] == 1))\n\t\t   );\n\t\t   \n% sum up pieces\nconstraint forall(p in PIECES)(\n\t\t\t   sum(i in ROWS, j in COLS)(bool2int(board[i,j] == p)) == npiece[p]\n\t\t   );\n\n% piece sum constraints\nconstraint npiece[c] == ship[submarine]; % submarines\nconstraint npiece[l] == npiece[r]; % left right (probably redundant)\nconstraint npiece[t] == npiece[b]; % top bottom\nconstraint npiece[l] + npiece[t] == sum(s in destroyer..maxship)(ship[s]); \n                                   % no of ends\nconstraint npiece[m] == sum(s in cruiser..maxship)(ship[s] * (s - 2)); \n                                   % no of middles \t\t   \n\t\t    \n% count number of bigger ships\n% at least for standard battleships you can probably simply\n% enforce this constraint for s in destroyer..destroyer\t\t\n% and still be guaranteed a correct solution    \nconstraint forall(s in destroyer..maxship)(\n\t           sum(i in ROWS,j in COLS)(bool2int(\n\t\t\t       if j + s - 1 <= width then\n\t\t\t          board[i,j] == l /\\ board[i,j+s-1] == r     % ship length s lr\n\t\t\t       /\\ forall(k in j+1..j+s-2)(board[i,k] == m)\n\t\t\t       else false endif\n\t\t\t    \\/\n\t\t\t       if i + s - 1 <= height then\n\t\t\t          board[i,j] == t /\\ board[i+s-1,j] == b     % ship length s tb\n\t\t\t       /\\ forall(k in i+1..i+s-2)(board[k,j] == m)\n\t\t\t       else false endif\n\t\t       )) = ship[s]\n\t\t   );\t\t    \n\t\t    \t\t    \n\n% row sums respected\nconstraint forall(i in ROWS)(\n               sum(j in COLS)(fill[i,j]) == rowsum[i]\n           );\n           \n% column sums respected           \nconstraint forall(j in COLS)(\n               sum(i in ROWS)(fill[i,j]) == colsum[j]\n           );           \n\n\nsolve :: int_search([ fill[i,j] | i in ROWS, j in COLS], \n      \t\t  input_order, indomain_min, complete)\n      satisfy;\n\noutput [ code[fix(board[i,j])] ++ \n\t\t if j == width then \" \" ++ show(rowsum[i]) ++ \"\\n\"\n\t\t else \"\" endif\n\t   | i in ROWS, j in COLS ]  ++\n\t   [ show(colsum[j]) | j in COLS ] ++ [\"\\n\"];\n\t   \n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Solitaire Battleships problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a warehouse, and I need to optimize the storage of containers of different sizes. The warehouse has 10 rows and 10 columns of storage spaces, and I have 4 large containers, 3 medium containers, and 2 small containers to store. Each container has a specific shape and size, and I need to ensure that they are stored in a way that maximizes storage capacity while leaving enough space between them for easy access. Can you help me find the optimal storage configuration that respects the constraints of the warehouse and the containers?\",\n  \n  \"question2\": \"I'm planning a party and I need to arrange the tables and chairs in a way that fits all my guests comfortably. I have 10 tables of different shapes and sizes, and I need to fit them in a room that's 10x10 feet. Some tables need to be placed next to each other, while others need to have some space between them. Can you help me figure out how to arrange the tables so that everyone has enough space to sit and move around?\",\n  \n  \"question3\": \"I'm designing a theme park with different attractions and rides. I have a rectangular area of 10x10 squares, and I need to fit in 4 roller coasters, 3 carousels, and 2 Ferris wheels. Each attraction has a specific shape and size, and I need to make sure that they are placed in a way that's safe and fun for visitors. Can you help me design the layout of the theme park?\",\n  \n  \"question4\": \"I have 10x10 grid and 4 long, 3 medium, and 2 short blocks. How can I fit them in the grid with some space between them?\",\n  \n  \"question5\": \"I'm a urban planner designing a new neighborhood with 10 blocks of land, each 10 plots wide. I need to fit in 4 large parks, 3 medium-sized community centers, and 2 small playgrounds, while ensuring that each plot has enough green space and is accessible to residents. The parks need to be at least 2 plots wide and 3 plots long, the community centers need to be at least 1 plot wide and 2 plots long, and the playgrounds need to be at least 1 plot wide and 1 plot long. Additionally, I need to ensure that there are no more than 2 plots of empty space between each attraction. Can you help me design the optimal layout of the neighborhood that meets all these constraints and priorities?\"\n}\n```\n\nEach question/scenario incorporates real-life constraints, preferences, and priorities that reflect the structure of the Solitaire Battleships problem, but in a different context."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Solitaire Battleships\",\n\"description\": \"Solitaire Battleships is a puzzle where we are given a partially filled in board and the number of ships in each row and column and have to fill it with ships.\",\n\"variables\": \"board[i,j], fill[i,j], npiece[p]\",\n\"variables_description\": \"board[i,j] represents the type of piece at position (i,j) on the board, fill[i,j] is a binary variable indicating whether the piece at position (i,j) is part of a ship, and npiece[p] is the number of pieces of type p on the board.\",\n\"constraints\": \"hints are respected, extended rows and columns are empty, fill array matches the board, spacing constraints, ship shape constraints, piece sum constraints, count number of bigger ships, row sums respected, column sums respected\",\n\"constraints_description\": \"The constraints ensure that the initial hints are respected, the extended rows and columns are empty, the fill array matches the board, there are gaps between ships, ships have the correct shape, the number of pieces of each type is correct, the number of bigger ships is correct, and the row and column sums are respected.\",\n\"objective\": \"satisfy\"\n}\n\nNote that the objective of this problem is to find a satisfying assignment of values to the variables, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "schur": {"__data__": {"id_": "schur", "embedding": null, "metadata": {"problem_family": "schur", "model_name": "schur", "source_code": "%% schurs numbers\n%%\n%% determine if n balls labelled 1..n\n%% can be placed in c boxes with no box containing a triple {x,y,z} where x+y=z\n \n\nint: n; %% number of balls\nint: c; %% number of boxes\n\narray[1..n] of var 1..c: box;\n\nconstraint forall(i in 1..n-1, j in i+1 .. n - i)(\n\t   \t    box[i] != box[j] \\/ \n\t\t    box[i] != box[i+j] \\/ \n\t\t    box[j] != box[i+j]);\n\nsolve satisfy;\n\noutput [\"n = \", show(n), \";\\nc = \", show(c), \";\\nbox = \",show(box),\";\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Schur's Numbers Problem:\n\n```\n{\n  \"question1\": \"A logistics company has 15 trucks and 5 depots. Each truck needs to be assigned to a depot for maintenance. However, due to union regulations, no depot can have three trucks with consecutive IDs (e.g., trucks 1, 2, and 3) assigned to it. How can the trucks be assigned to depots to satisfy this constraint?\",\n  \"question2\": \"I'm planning a music festival with 12 bands and 4 stages. I want to schedule the bands so that no stage has three bands that have a 'clash' (e.g., bands A, B, and C, where A and B are similar, and B and C are similar). How can I schedule the bands to avoid these clashes?\",\n  \"question3\": \"I have 10 friends coming over for a birthday party and I want to divide them into 3 groups for games. However, I don't want any group to have three friends who are all in the same class at school. How can I divide my friends into groups to avoid this?\",\n  \"question4\": \"Assign 8 employees to 2 teams such that no team has three employees with consecutive employee IDs.\",\n  \"question5\": \"A large hospital has 20 medical residents and 5 teams of attending physicians. Each resident needs to be assigned to a team for training. However, due to accreditation requirements, no team can have three residents with consecutive years of experience (e.g., residents with 1, 2, and 3 years of experience). Additionally, team 1 has a maximum capacity of 5 residents, team 2 has a maximum capacity of 4 residents, and teams 3-5 have a maximum capacity of 3 residents each. How can the residents be assigned to teams to satisfy these constraints and ensure that each team has a balanced workload?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Schur's Numbers Problem. They are designed to be practical and relatable, and can be answered by solving the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Schur's Numbers Problem\",\n\"description\": \"The Schur's Numbers Problem is a classic problem in constraint programming that involves placing n balls labelled 1 to n into c boxes such that no box contains a triple {x, y, z} where x + y = z. The goal is to find a feasible assignment of balls to boxes that satisfies this constraint.\",\n\"variables\": \"box[i], i = 1..n, where box[i] \u2208 {1..c}. These variables represent the box assignment for each ball.\",\n\"constraints\": \"\u2200i \u2208 {1..n-1}, \u2200j \u2208 {i+1..n-i}, (box[i] \u2260 box[j] \u2228 box[i] \u2260 box[i+j] \u2228 box[j] \u2260 box[i+j]). These constraints ensure that no box contains a triple {x, y, z} where x + y = z.\",\n\"objective\": \"Satisfy (feasibility problem)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "sonet_problem": {"__data__": {"id_": "sonet_problem", "embedding": null, "metadata": {"problem_family": "sonet_problem", "model_name": "sonet_problem", "source_code": "% The SONET problem is a network design problem: set up a network between\n% n nodes, where only certain nodes require a connection.\n% Nodes are connected by putting them on a ring, where all nodes\n% on a ring can communicate. Putting a node on a ring requires a so-called\n% ADM, and each ring has a capacity of nodes, i.e. ADMs. There is a certain\n% amount of rings, r, that is available. The objective is to set up a network\n% by using a minimal amount of ADMs.\n%\n%\n% About the problem model\n%\n% The problem model has the amount of rings ('r'), amount of nodes('n'),\n% the 'demand' (which nodes require communication) and node-capacity of each\n% ring ('capacity_nodes') as parameters.\n% The assignement of nodes to rings is modelled by a 2-dimensional matrix 'rings',\n% indexed by the amnount of rings and nodes. The matrix-domain is boolean:\n% If the node in column j is assigned to the ring in row i, then rings[i,j] = 1\n% and 0 otherwise. So all the '1's in the matrix 'rings' stand for an ADM.\n% Hence the objective is to minimise the sum over all columns and rows of matrix\n% 'rings'.\n% \"\"\"\n\nint: r;  % upper bound for amount of rings\nint: n;  % amount of clients\n\n\n% original comment: \n% we have double entries here because of the symmetric structure!\narray[1..n, 1..n] of 0..1: demand;\narray[1..r] of 1..n: capacity_nodes;\n\narray[1..r, 1..n] of var 0..1: rings;\nvar int: z =  sum(ring in 1..r, client in 1..n) (rings[ring, client]);\n\nsolve minimize z;\n% solve satisfy;\n\n\nconstraint\n%   z <= 7 % for solve satisfy\n%   /\\\n\n   % original comment:\n   % if there is a demand between 2 nodes, then there has to exist \n   % a ring, on which they are both installed\n   forall(client1,client2 in 1..n where client1 < client2) (\n      (demand[client1,client2] = 1) ->\n           exists(ring in 1..r) (\n                 rings[ring,client1] + rings[ring, client2] >= 2\n           )\n   )   \n   /\\\n   % original comment:\n   % capacity of each ring must not be exceeded     \n   forall(ring in 1..r) (\n        sum(client in 1..n) (\n              rings[ring, client]\n              ) <= capacity_nodes[ring] \n   )\n;\n\n\n%\n% data\n% (sonet_problem1nu.param)\n%\nr = 4;\nn = 5;\n\ndemand =\narray2d(1..n, 1..n,\n        [0,1,0,1,0,\n         1,0,1,0,0,\n         0,1,0,0,1,\n         1,0,0,0,0,\n         0,0,1,0,0])\n;\n\ncapacity_nodes = [3,2,2,1];\n\n\noutput \n[\n  \"z: \", show(z)\n] ++\n[\n  if client = 1 then \"\\n\" else \" \" endif ++\n    show(rings[ring, client])\n  | ring in 1..r, client in 1..n\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the SONET problem:\n\n```\n{\n  \"question1\": \"A logistics company has 10 warehouses and 15 delivery trucks. Each truck can visit a maximum of 3 warehouses per day. The company wants to minimize the number of trucks needed to deliver goods to all warehouses while ensuring that each warehouse is visited by at least one truck. How can the company assign trucks to warehouses to achieve this goal?\",\n  \"question2\": \"I'm planning a music festival with 8 stages and 12 bands. Each stage can hold a maximum of 3 bands, and each band needs to perform on at least one stage. How can I schedule the bands to minimize the number of stages needed while ensuring that all bands get to perform?\",\n  \"question3\": \"I have 12 friends coming over for a party and I want to set up a few gaming stations. Each station can hold a maximum of 4 friends, and I want to make sure each friend is at a station with at least one other friend they like. How can I assign friends to gaming stations to make sure everyone has fun?\",\n  \"question4\": \"I need to group 8 people into teams for a project. Each team can have up to 3 people, and some people don't work well together. How can I assign people to teams to minimize conflicts?\",\n  \"question5\": \"A large hospital has 20 departments and 15 medical teams. Each team can be assigned to a maximum of 3 departments, and each department requires at least one team to be fully staffed. The hospital wants to minimize the number of teams needed while ensuring that all departments are fully staffed. Additionally, some teams have specific skills that are required by certain departments. How can the hospital assign teams to departments to achieve this goal while taking into account the specific skills required by each department?\"\n}\n```\n\nEach question incorporates real-life constraints, preferences, and priorities that reflect the structure of the SONET problem, but in different contexts."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"SONET Problem\",\n\"description\": \"The SONET problem is a network design problem where a network needs to be set up between n nodes, with only certain nodes requiring a connection. The nodes are connected by putting them on a ring, where all nodes on a ring can communicate. The objective is to set up a network by using a minimal amount of ADMs (Add-Drop Multiplexers).\",\n\"variables\": \"rings[i, j] (i = 1..r, j = 1..n), z\\nThe variable rings[i, j] represents whether node j is assigned to ring i (1 if assigned, 0 otherwise). The variable z represents the total number of ADMs used.\",\n\"constraints\": \"\u2200 client1, client2 in 1..n (client1 < client2) : (demand[client1, client2] = 1) \u2192 \u2203 ring in 1..r (rings[ring, client1] + rings[ring, client2] >= 2)\\n\u2200 ring in 1..r : sum(client in 1..n) (rings[ring, client]) <= capacity_nodes[ring]\\nThe first constraint ensures that if there is a demand between two nodes, they must be on the same ring. The second constraint ensures that the capacity of each ring is not exceeded.\",\n\"objective\": \"Minimize z (the total number of ADMs used)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "steiner": {"__data__": {"id_": "steiner", "embedding": null, "metadata": {"problem_family": "steiner", "model_name": "steiner", "source_code": "% The ternary Steiner problem of order n is to find n(n-1)/6 sets of elements in {1,2,...,n}\n% such that each set contains three elements and any two sets have at most one element in common.\n% For example, the following shows a solution for size n=7:\n%\n%      {1,2,3}, {1,4,5}, {1,6,7}, {2,4,6}, {2,5,7}, {3,4,7}, {3,5,6}\n\ninclude \"globals.mzn\";\n\nint: N = 7; \nint: NB = N *(N-1) div 6;\narray[1..NB] of var set of 1..N: Sets;\n\n% solve satisfy;\nsolve::set_search(Sets, first_fail, indomain_min, complete) satisfy;\n\n\n\nconstraint\n   forall(i in index_set(Sets)) (\n      card(Sets[i]) = 3\n   )\n   /\\ \n   forall(i,j in index_set(Sets) where i < j) (\n      card( Sets[i] intersect Sets[j]) <= 1\n   )\n   /\\ % symmetry breaking\n   decreasing(Sets)\n\n;\n\noutput [\n       \"N: \", show(N), \" NB: \", show(NB), \"\\n\",\n       \"Sets: \", show(Sets)\n];\n\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Ternary Steiner Problem:\n\n```\n{\n  \"question1\": {\n    \"description\": \"I'm a logistics manager at a large e-commerce company. I need to assign 7 warehouses to 21 delivery routes, ensuring each route visits exactly 3 warehouses and no two routes visit more than one common warehouse. How can I optimize the assignment to minimize route overlaps?\",\n    \"context\": \"Logistics and Supply Chain Management\"\n  },\n  \"question2\": {\n    \"description\": \"I'm planning a music festival with 7 stages and 21 bands. I want to create a schedule where each stage has exactly 3 bands performing, and no two stages have more than one band in common. How can I create a schedule that meets these requirements?\",\n    \"context\": \"Event Planning and Scheduling\"\n  },\n  \"question3\": {\n    \"description\": \"I'm a teacher and I need to create groups of 3 students for a project. I have 7 students in my class and I want to make sure each group has a good mix of skills. How can I create groups such that no two groups have more than one student in common?\",\n    \"context\": \"Education and Group Formation\"\n  },\n  \"question4\": {\n    \"description\": \"I have 7 friends and I want to plan a series of 3-person game nights. How can I schedule the game nights so that no two groups have more than one friend in common?\",\n    \"context\": \"Social Planning and Scheduling\"\n  },\n  \"question5\": {\n    \"description\": \"I'm a researcher studying the behavior of 7 different species of birds in a forest ecosystem. I want to create a monitoring system where each of 21 cameras captures footage of exactly 3 species, and no two cameras capture more than one species in common. The cameras are expensive, so I need to minimize the number of cameras needed. How can I design the monitoring system to meet these requirements?\",\n    \"context\": \"Wildlife Research and Monitoring\"\n  }\n}\n```\n\nEach question/scenario incorporates real-life constraints, preferences, and priorities that reflect the structure of the Ternary Steiner Problem, but in different contexts and with varying levels of complexity and specificity."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Ternary Steiner Problem\",\n\"description\": \"The Ternary Steiner Problem is a classic problem in constraint programming that involves finding a collection of sets, each containing three elements, such that any two sets have at most one element in common.\",\n\"variables\": \"Sets = {S_1, S_2, ..., S_NB}, where S_i \u2286 {1, 2, ..., N} for i = 1, 2, ..., NB. These are the decision variables representing the sets of elements.\",\n\"constraints\": \"1) \u2200i \u2208 {1, 2, ..., NB}, |S_i| = 3 (each set has exactly three elements), 2) \u2200i, j \u2208 {1, 2, ..., NB} where i < j, |S_i \u2229 S_j| \u2264 1 (any two sets have at most one element in common), 3) decreasing(Sets) (symmetry breaking constraint).\",\n\"objective\": \"Satisfy (find a feasible solution)\"\n}\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "stoch_fjsp": {"__data__": {"id_": "stoch_fjsp", "embedding": null, "metadata": {"problem_family": "stoch_fjsp", "model_name": "stoch_fjsp", "source_code": "% Stochastic General Assignment Problem \n% First stage:\n%    assign task to machines \n% Second stage:\n%    based on observed processign times, schedule taks on respective machines\n% Objective:\n%    minimise expected makespan\n\ninclude \"globals.mzn\";\n\n% Parameters\n\nint: no_mach;   % Number of machines\nint: no_jobs;   % Number of jobs\nint: no_task;   % Number of total tasks\nint: no_optt;   % Number of total optional tasks\n\nset of int: Mach  = 1..no_mach;\nset of int: Jobs  = 1..no_jobs;\nset of int: Tasks = 1..no_task;\nset of int: OptTs = 1..no_optt;\n\narray [Jobs] of set of int: tasks;\narray [Tasks] of set of int: optts;\n\narray [OptTs] of int: optt_mach;\narray [SCENARIOS1,OptTs] of int: optt_dur;\n\n\narray [Jobs] of int: last_task = [ max(tasks[j]) | j in Jobs ];\n%---------implications for multi scenarion solving ---------------\nint: nbScenarios;\nset of int: SCENARIOS1 = 1..nbScenarios;\nint: first_scen;\nint: last_scen;\nset of int: SCENARIOS = first_scen..last_scen;\narray[SCENARIOS1] of int: weights;\n\n%-------end of multi scenario addons ----------------\narray [Tasks] of int: task_job = \n    [ min(j in Jobs where t in tasks[j])(j) | t in Tasks ];\narray [SCENARIOS,Tasks] of int: task_mins =\n    array2d(SCENARIOS,Tasks,[ sum(k in tasks[task_job[t]])(if k < t then task_mind[s,k] else 0 endif)\n    |   s in SCENARIOS, t in Tasks ]);\narray [SCENARIOS,Tasks] of int: task_maxs =\n    array2d(SCENARIOS,Tasks,[ t_max[s] -\n        sum(k in tasks[task_job[t]])(if k < t then 0 else task_mind[s,k] endif)\n    |   s in SCENARIOS,  t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_mind =\n    array2d(SCENARIOS,Tasks,[ min(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS,t in Tasks ]);\n\narray [SCENARIOS,Tasks] of int: task_maxd = \n    array2d(SCENARIOS,Tasks,[ max(o in optts[t])(optt_dur[s,o]) | s in SCENARIOS, t in Tasks ]);\n\n    % Additional deirved parameters for optional tasks\n    %\narray [OptTs] of int: optt_task =\n    [ min(t in Tasks where o in optts[t])(t) | o in OptTs ];\n\narray[SCENARIOS1] of int: min_dur = [ min([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\narray[SCENARIOS1] of int: max_dur = [ max([optt_dur[s,t] | t in OptTs]) | s in SCENARIOS1];\nset of int: Durs = min(min_dur)..max(max_dur);\n\n    % Parameters related to the planning horizon\n    %\narray[SCENARIOS1] of int: t_max = [sum(t in Tasks)(max(o in optts[t])(optt_dur[s,o])) | s in SCENARIOS1];\n\nset of int: Times = 0..max(t_max);\n\n%-----------------------------------------------------------------------------%\n% Variables\n\n    % Start time variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Times: start =\n    array2d(SCENARIOS,Tasks,[ let { var task_mins[s,t]..task_maxs[s,t]: k } in k | s in SCENARIOS, t in Tasks ]);\n\n    % Duration variables for tasks\n    %\narray [SCENARIOS,Tasks] of var Durs: dur =\n    array2d(SCENARIOS,Tasks,[ if task_mind[s,t] = task_maxd[s,t] then task_mind[s,t] else\n        let { var task_mind[s,t]..task_maxd[s,t]: d } in d endif\n    |   s in SCENARIOS,t in Tasks ]);\n\n    % Variables whether an optional task is executed\n    %\narray [OptTs] of var bool: b;\n\narray[SCENARIOS] of var Times: de_objective;\n\nset of int: StochTimes = 0..sum(t_max);\nvar StochTimes: objective;\n%-----------------------------------------------------------------------------%\n% Constraints\n\n    % Precedence relations\n    %\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs, i in tasks[j] where i < last_task[j])(\n            start[s,i] + dur[s,i] <= start[s,i + 1]\n        )    \n    );\n\n    % Duration constraints\n    %\nconstraint\n    forall(o in OptTs,s in SCENARIOS)(\n        let { int: t = optt_task[o] } in (\n            if card(optts[t]) = 1 then\n                b[o] = true\n            else\n                b[o] -> dur[s,t] = optt_dur[s,o]\n            endif\n        )\n    );\n\n    % Optional tasks' constraints\n    %\nconstraint\n    forall(t in Tasks where card(optts[t]) > 1)(\n        ( sum(o in optts[t])(bool2int(b[o])) <= 1     )\n    /\\  ( exists(o in optts[t])(b[o])                 )\n    );\n\nconstraint\n    forall(t in Tasks where card(optts[t]) = 2)(\n        let {\n            int: o1 = min(optts[t]),\n            int: o2 = max(optts[t])\n        } in ( b[o1] <-> not(b[o2]) )\n    );\n\n    % Resource constraints\n    %\nconstraint\n    forall(m in Mach,s in SCENARIOS)(\n        let {\n            set of int: MTasks = { o | o in OptTs where optt_mach[o] = m }\n        } in (\n            cumulative(\n                [ start[s,optt_task[o]] | o in MTasks ],\n                [ optt_dur[s,o]         | o in MTasks ],\n                [ bool2int(b[o])      | o in MTasks ],\n                1\n            )\n        )\n    );\n\n% Objective constraint\nconstraint\n    forall(s in SCENARIOS)(\n        forall(j in Jobs)(start[s,last_task[j]] + dur[s,last_task[j]] <= de_objective[s])\n    );\nconstraint \n        objective = sum(s in SCENARIOS)(weights[s]*de_objective[s]);\n%-----------------------------------------------------------------------------%\n% Solve item\n\nsolve \n    :: search\n    minimize objective;\n\n%------------------------------------------------------------------------------%\n% Searches\n\nann: s_mindur   = int_search([dur[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_minstart = int_search([start[s,t] |s in SCENARIOS, t in Tasks], smallest, indomain_min, complete);\nann: s_bool     = bool_search(b, input_order, indomain_max, complete);\nann: s_obj      = int_search(de_objective, input_order, indomain_min, complete);\n\nann: search = seq_search([s_mindur, s_bool, s_minstart, s_obj]);\n\n%-----------------------------------------------------------------------------%\n% Output\n\noutput \n[   \"objective = \", show(de_objective), \";\\n\",\n    \"stoch obj = \", show(objective), \";\\n\",\n    \"start = \", show(start), \";\\n\",\n    \"dur = \", show(dur), \";\\n\",\n    \"b = \", show(b), \";\\n\",\n];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large e-commerce company, and I need to allocate tasks to different warehouses and schedule them to minimize the expected delivery time. Each task has a set of possible processing times, and I need to ensure that the tasks are executed in the correct order. Additionally, I have optional tasks that can be executed to improve the delivery time, but I need to decide which ones to execute based on the available resources. How can I optimize the allocation and scheduling of tasks to minimize the expected delivery time?\",\n  \"question2\": \"I'm planning a music festival, and I need to schedule the performances of different bands on multiple stages. Each band has a set of possible performance times, and I need to ensure that the performances don't overlap. I also have some optional performances that I can add to the schedule, but I need to make sure that I have enough resources (e.g., sound engineers, stagehands) to support them. How can I create a schedule that minimizes the downtime between performances and maximizes the overall experience for the attendees?\",\n  \"question3\": \"I'm a high school student, and I need to plan my schedule for the next semester. I have different classes that I need to attend, and each class has a set of possible time slots. I also have some extracurricular activities that I want to participate in, but I need to make sure that I have enough time for my homework and studying. How can I create a schedule that minimizes conflicts between classes and activities and maximizes my free time?\",\n  \"question4\": \"I have 5 tasks to complete, and each task has a different processing time. How can I schedule the tasks to minimize the total completion time?\",\n  \"question5\": \"I'm a project manager at a software development company, and I need to allocate tasks to different team members and schedule them to minimize the expected project duration. Each task has a set of possible processing times, and I need to ensure that the tasks are executed in the correct order. Additionally, I have some optional tasks that can be executed to improve the project quality, but I need to decide which ones to execute based on the available resources and budget. The project has a fixed deadline, and I need to ensure that it is completed on time. The team members have different skill levels and availability, and I need to take that into account when allocating tasks. How can I optimize the allocation and scheduling of tasks to minimize the expected project duration and ensure that the project is completed on time?\"\n}\n```"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Stochastic General Assignment Problem\",\n\"description\": \"This problem involves assigning tasks to machines and scheduling them based on observed processing times to minimize the expected makespan. The problem has two stages: in the first stage, tasks are assigned to machines, and in the second stage, the tasks are scheduled on the machines based on the observed processing times.\",\n\"variables\": \"start[s,t], dur[s,t], b[o], de_objective[s], objective\\n\nstart[s,t] represents the start time of task t in scenario s, dur[s,t] represents the duration of task t in scenario s, b[o] represents whether optional task o is executed, de_objective[s] represents the makespan in scenario s, and objective represents the expected makespan.\",\n\"constraints\": \"precedence relations, duration constraints, optional tasks' constraints, resource constraints, objective constraint\\n\nPrecedence relations ensure that tasks are executed in the correct order, duration constraints ensure that the duration of each task is within a valid range, optional tasks' constraints ensure that at most one optional task is executed for each task, resource constraints ensure that the total duration of tasks on each machine does not exceed the available time, and the objective constraint defines the makespan in each scenario.\",\n\"objective\": \"minimize objective (expected makespan)\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "template_design": {"__data__": {"id_": "template_design", "embedding": null, "metadata": {"problem_family": "template_design", "model_name": "template_design", "source_code": "% Template design\ninclude \"globals.mzn\";\n\nint: S;   \t\t% Number of slots per template.\nint: t;   \t\t% Number of templates.\nint: n;   \t\t% Number of variations.\narray[1..n] of int: d; \t% How much of each variation we must print?\n\n% Lower and upper bounds for the total production.\n%\nint: llower = ceil(sum(i in 1..n)(int2float(d[i]))/int2float(S));\nint: lupper = 2*llower; % If t>1, this should be the optimal Production_{t-1}-1.\n\n% # Slots allocated to variation i in template j\narray[1..n,1..t] of var 0..S: p;\n\n% # Pressings of template j.\narray[1..t] of var 1..lupper: R;\n\n% Sum of all Rj.\nvar llower..lupper: Production;\n\n% Production x S - sum(d[i])\nvar 0..lupper-llower: Surplus;\n\n% First, set up Production to be the sum of the Rj\nconstraint\n\tProduction = sum(i in 1..t)(R[i]);\n\n% the limits on production\nconstraint\n\tProduction >= llower /\\ Production <= lupper;\n\n% The number of slots occupied in each template is S.\nconstraint\n\tforall(j in 1..t)\n\t\t (sum(i in 1..n)(p[i,j]) = S);\n\n% Enough of each variation is printed.\nconstraint\n\tforall(i in 1..n)\n\t\t (sum(j in 1..t)(p[i,j]*R[j]) >= d[i]);\n\n% Symmetry constraints.\n% Variations with the same demand are symmetric.\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] == d[i+1] then\n\t\t\tlex_lesseq([p[i,  j] | j in 1..t],\n\t\t\t\t[p[i+1,j] | j in 1..t])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% pseudo symmetry\nconstraint\n\tforall(i in 1..n-1) (\n\t\tif d[i] < d[i+1] then\n\t\t       sum (j in 1..t) (p[i,j]*R[j])\n\t\t     <= sum (j in 1..t) (p[i+1,j]*R[j])\n\t\telse\n\t\t\ttrue\n\t\tendif\n\t);\n\n% implied constraints on the surplus\n\n% These are presented in the paper as necessary to get good\n% performance for this model, but I think bounds consistency on the\n% sum(R[i]) constraint would produce the same amount of propagation\n\n% Set up surplus, which is bounded as production is bounded.\nconstraint\n\tSurplus = Production*S - sum(i in 1..n)(d[i]);\n\n% The surplus of each variation is also limited by the surplus.\nconstraint\n\tforall(k in 1..n)\n\t\t (sum(j in 1..t)(p[k,j]*R[j]-d[k]) <= Surplus);\n\n% The surplus of the first k variations is limited by the surplus.\nconstraint\n\tforall(k in 2..n-1)\n\t\t (sum(j in 1..t, m in 1..k)( p[m,j]*R[j]-d[m] ) <= Surplus);\n\n% Implied constraints on the run length.\nconstraint\n\tif t=2 then (\n\t\tR[1] <= Production div 2\n\t/\\\tR[2] >= Production div 2\n\t) else true endif;\n\nconstraint\n\tif t=3 then (\n\t\tR[1] <= Production div 3\n\t/\\\tR[2] <= Production div 2\n\t/\\\tR[3] >= Production div 3\n\t) else true endif;\n\n% Minimize the production.\nsolve :: int_search(array1d(1..n*t,p) ++ R, input_order, indomain_min, complete)\n    minimize Production;\n\noutput [\n    if v = 1 then \"template #\" ++ show(i) ++ \": [\" else \"\" endif ++\n    show(p[v, i]) ++\n    if v = n then \"], pressings: \" ++ show(R[i]) ++ \"\\n\" else \", \" endif\n\t| i in 1..t, v in 1..n]\n    ++ [\"Total pressings: \", show(Production), \"\\n%\\n\"];\n\n%-----------------------------------------------------------------------------%\n%-----------------------------------------------------------------------------%\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Template Design Problem:\n\n```\n{\n  \"question1\": \"A manufacturing company produces customized phone cases with different designs and quantities. The production process involves creating templates with a fixed number of slots, and each design requires a specific number of slots. The company wants to minimize the total production while meeting the demand for each design. How can they allocate the slots to each design and determine the number of pressings for each template to achieve this goal?\",\n  \"question2\": \"I'm planning a music festival with 10 different stages, and each stage needs to have a certain number of performances. The performances are divided into 5 genres, and each genre has a specific number of performances required. I want to create a schedule that minimizes the total number of performances while ensuring each genre has its required number of performances. How can I allocate the performances to each stage and determine the number of performances for each stage?\",\n  \"question3\": \"I'm a teacher planning a school fair with 5 different activity stations. Each station needs to have a certain number of volunteers, and I have 10 volunteers available. The volunteers are divided into 3 groups based on their skills, and each group has a specific number of volunteers required for each station. I want to create a schedule that minimizes the total number of volunteers needed while ensuring each station has its required number of volunteers. How can I allocate the volunteers to each station and determine the number of volunteers for each station?\",\n  \"question4\": \"A bakery needs to produce 100 loaves of bread in 5 different flavors. Each flavor requires a specific number of loaves, and the bakery has 3 ovens with 20 slots each. How can the bakery allocate the loaves to each oven to minimize the total production?\",\n  \"question5\": \"A logistics company needs to transport 500 packages of different sizes and weights from 3 warehouses to 5 distribution centers. Each warehouse has a limited capacity, and each distribution center has a specific demand for each package type. The company wants to minimize the total number of trucks needed while ensuring each distribution center receives its required packages. The company has 10 truck types with different capacities, and each truck type has a specific cost per mile. The company also has a limited budget for fuel and wants to minimize the total fuel cost. How can the company allocate the packages to each truck and determine the number of trucks for each route to achieve this goal?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Template Design Problem. They are designed to be answered by solving the problem, but do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Template Design Problem\",\n\"description\": \"The Template Design Problem is a classic problem in constraint programming that involves designing templates to produce a set of variations with specific demands. The goal is to minimize the total production while satisfying the demands of each variation.\",\n\"variables\": \"p[i, j], R[j], Production, Surplus\",\n\"variables_explanation\": \"p[i, j] represents the number of slots allocated to variation i in template j, R[j] represents the number of pressings of template j, Production represents the total production, and Surplus represents the surplus production.\",\n\"constraints\": \"Production = sum(R[j]), Production >= llower /\\ Production <= lupper, sum(p[i, j]) = S, sum(p[i, j]*R[j]) >= d[i], lex_lesseq(p[i, :], p[i+1, :]), sum(p[i, j]*R[j]) <= sum(p[i+1, j]*R[j]), Surplus = Production*S - sum(d[i]), sum(p[k, j]*R[j]-d[k]) <= Surplus, sum(p[m, j]*R[j]-d[m]) <= Surplus, R[1] <= Production div 2, R[2] >= Production div 2, R[1] <= Production div 3, R[2] <= Production div 2, R[3] >= Production div 3\",\n\"constraints_explanation\": \"The constraints ensure that the total production is the sum of the pressings of each template, the production is within the given bounds, each template has S slots, each variation has its demand satisfied, symmetric variations are handled correctly, the surplus is correctly calculated, and the run length is limited.\",\n\"objective\": \"minimize Production\"\n}\n\nNote: The variables and constraints are listed in a concise mathematical notation, and the explanations provide a brief description of what each variable and constraint represents in the context of the problem.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "traffic_lights_table": {"__data__": {"id_": "traffic_lights_table", "embedding": null, "metadata": {"problem_family": "traffic_lights_table", "model_name": "traffic_lights_table", "source_code": "Model 1 :\n\n%Traffic lights problem in MiniZinc.\n% Specification:\n% Consider a four way traffic junction with eight traffic lights. Four of\n% the traffic lights are for the vehicles and can be represented by the\n% variables V1 to V4 with domains\n% {r,ry,g,y} (for red, red-yellow, green and yellow).\n%  The other four traffic lights are for the pedestrians and can be\n%  represented by the variables P1 to P4 with domains {r,g}.\n%\n% The constraints on these variables can be modelled by quaternary\n% constraints on\n% (Vi, Pi, Vj, Pj ) for 1<=i<=4, j=(1+i)mod 4 which allow just the tuples\n% {(r,r,g,g), (ry,r,y,r), (g,g,r,r), (y,r,ry,r)}.\n%\n% It would be interesting to consider other types of junction (e.g. five roads\n% intersecting) as well as modelling the evolution over time of the\n% traffic light sequence.\n\ninclude \"globals.mzn\";\n\nint: n = 4;\nint: r  = 1; % red\nint: ry = 2; % red-yellow\nint: g  = 3; % green\nint: y  = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V;\narray[1..n] of var Pedestrians: P;\n\n\nsolve satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   table([V[i], P[i], V[j], P[j]], allowed)\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\n% output [\n%  \"V: \", show(V), \"\\nP: \", show(P), \"\\n\"\n% ];\noutput [\n show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\nint: n = 4;\nint: r = 1; % red\nint: ry = 2; % red-yellow\nint: g = 3; % green\nint: y = 4; % yellow\n\nset of int: Cars = {r,ry,g,y};\nset of int: Pedestrians = {r,g};\n\narray[1..4, 1..4] of Cars: allowed;\n\narray[1..n] of var Cars: V; % ;\narray[1..n] of var Pedestrians: P; %;\n\npredicate cp1d(array[int] of var int: x, array[int] of var int: y) =\n  assert(index_set(x) = index_set(y),\n           \"cp1d: x and y have different sizes\",\n     forall(i in index_set(x)) ( x[i] = y[i] ))\n; \n\n% solve satisfy;\nsolve :: int_search(V ++ P, first_fail, indomain_min, complete) satisfy;\n\nconstraint\n forall(i in 1..n, j in 1..n where j = (1+i) mod 4)  (\n   exists(a in 1..4) (\n      cp1d([V[i], P[i], V[j], P[j]], [allowed[a,k] | k in 1..4])\n   )\n )\n;\n\n\nallowed = array2d(1..4, 1..4, \n[\n r,r,g,g, \n ry,r,y,r, \n g,g,r,r, \n y,r,ry,r\n]);\n\n\noutput [\n  show(V[i]) ++ \" \" ++ show(P[i]) ++ \" \"\n  | i in 1..n\n] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Traffic Lights Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager at a large warehouse with four loading docks. Each dock has a specific sequence of operations (e.g., loading, unloading, idle) that need to be coordinated to minimize congestion and maximize efficiency. How can I schedule these operations to ensure that each dock is utilized optimally, while also considering the constraints of shared resources and safety protocols?\",\n  \"question2\": \"I'm planning a music festival with four stages, each with its own schedule of performances. I need to ensure that the sound and lighting systems are configured correctly for each act, while also minimizing downtime between performances. How can I coordinate the stage configurations to keep the festival running smoothly and on schedule?\",\n  \"question3\": \"I'm designing a theme park with four main attractions, each with its own ride and queue system. I want to make sure that the rides are operating safely and efficiently, while also minimizing wait times for visitors. How can I configure the ride systems to maximize throughput and minimize congestion?\",\n  \"question4\": \"I have four coffee machines that need to be configured to serve different types of coffee. How can I set them up to minimize conflicts and maximize output?\",\n  \"question5\": \"I'm the operations manager at a large hospital with four surgical suites, each with its own unique equipment and staffing requirements. I need to schedule surgeries and allocate resources to minimize delays and maximize patient throughput, while also ensuring that each suite is properly configured for each procedure. How can I optimize the surgical schedule to meet these competing demands, while also considering the constraints of available staff, equipment, and facility resources?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Traffic Lights Problem, but in different contexts. They require finding a feasible solution that satisfies the constraints, rather than optimizing a specific objective function."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the required format:\n\n{\n\"name\": \"Traffic Lights Problem\",\n\"description\": \"The Traffic Lights Problem is a classic constraint satisfaction problem that involves finding a valid configuration of traffic lights at a four-way junction. The problem consists of eight traffic lights, four for vehicles and four for pedestrians, with each light having a domain of possible states (red, red-yellow, green, and yellow for vehicles, and red and green for pedestrians). The goal is to find a configuration that satisfies certain constraints, ensuring safe and efficient traffic flow.\",\n\"variables\": \"V = (V1, V2, V3, V4) \u2208 {r, ry, g, y}\u2074, P = (P1, P2, P3, P4) \u2208 {r, g}\u2074. V represents the states of the vehicle traffic lights, and P represents the states of the pedestrian traffic lights.\",\n\"constraints\": \"\u2200i, j \u2208 {1, 2, 3, 4} where j = (1+i) mod 4, (Vi, Pi, Vj, Pj) \u2208 {(r, r, g, g), (ry, r, y, r), (g, g, r, r), (y, r, ry, r)}. These constraints ensure that the traffic lights are configured in a way that allows safe and efficient traffic flow.\",\n\"objective\": \"satisfy (feasibility problem)\"\n}\n\nNote that the objective of this problem is to find a feasible solution, rather than to minimize or maximize a specific value.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "TTPPV": {"__data__": {"id_": "TTPPV", "embedding": null, "metadata": {"problem_family": "TTPPV", "model_name": "TTPPV", "source_code": "% Traveling Tournament Problem with Predefined Venues\n%\n% Compact single round robin schedule minimizing total travel distance\n% The venue of each game has already been decided\n% Specialized for CIRC instances (circular distances)\n\ninclude \"globals.mzn\";\n\nint: nbTeams;\nint: nbRounds = nbTeams-1;\n\nset of int: Teams = 1..nbTeams;\nset of int: Rounds = 1..nbRounds;\nset of int: Travels = 1..nbRounds+1;\n\n% predefined venue: pv[i][j] = 1 iff i is playing at home against j\narray[Teams,Teams] of 1..2: pv; \n\n% circular distances: for i>=j, distance[i][j]=min{i-j,j-i+nbTeams}\narray[Teams,Teams] of int: distance = \n  array2d(Teams,Teams,[ if i>=j then (if i-j < j-i+nbTeams then i-j else j-i+nbTeams endif) \n                                else (if j-i < i-j+nbTeams then j-i else i-j+nbTeams endif) \n                                endif | i,j in Teams]);\n\n% output related\nint: digs = ceil(log(10.0,int2float(nbTeams)));\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% decision variables: in round k, team i plays against team opponent[i,k]\narray[Teams,Rounds] of var Teams: opponent;\n\n% auxiliary variables: venue[i,k] = 1 iff team i plays at home in round k\narray[Teams,Rounds] of var 1..2: venue;\nconstraint forall (i in Teams, k in Rounds) (venue[i,k] = pv[i,opponent[i,k]]);\n\n% auxiliary variables: travel[i,k] is the distance travelled by team i to go play in round k (includes travelling back home after last round)\narray[Teams,Travels] of var 0..(nbTeams div 2): travel;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n% a team cannot play against itself\nconstraint forall (i in Teams, k in Rounds) (opponent[i,k] != i);\n\n% in round k, i plays j means j plays i\nconstraint forall (i in Teams, k in Rounds) (opponent[opponent[i,k],k] = i);\n\n% for each team i, all opponents are different\nconstraint forall (i in Teams) (alldifferent([opponent[i,k] | k in Rounds]));\n\n% for each round k, all opponents are different (implied constraint)\nconstraint forall (k in Rounds) (alldifferent([opponent[i,k] | i in Teams]));\n\n% for each team i, there can be at most 3 consecutive home games and at most 3 consecutive away games\nint: nbStates = 7;\nset of int: States = 1..nbStates;\narray[States,1..2] of int: delta = \n  [| 2, 5\n   | 3, 5\n   | 4, 5\n   | 0, 5\n   | 2, 6\n   | 2, 7\n   | 2, 0 |];\nconstraint forall (i in Teams) (regular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States));\n\n% symmetry breaking: distances are symmetric so reversing the rounds yields a schedule of same cost\nconstraint (opponent[1,1] < opponent[1,nbRounds]);\n\n% define travel variables wrt venues of current- and next-round games\nconstraint forall (i in Teams) (\n\t(venue[i,1]=1 -> travel[i,1] = 0) /\\\n\t(venue[i,1]=2 -> travel[i,1] = distance[i,opponent[i,1]]) );\nconstraint forall (i in Teams, k in 1..nbRounds-1) (\n\t((venue[i,k]=1 /\\ venue[i,k+1]=1) -> travel[i,k+1] = 0) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=1) -> travel[i,k+1] = distance[opponent[i,k],i]) /\\\n\t((venue[i,k]=1 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[i,opponent[i,k+1]]) /\\\n\t((venue[i,k]=2 /\\ venue[i,k+1]=2) -> travel[i,k+1] = distance[opponent[i,k],opponent[i,k+1]]) );\nconstraint forall (i in Teams) (\n\t(venue[i,nbRounds]=1 -> travel[i,nbRounds+1] = 0) /\\\n\t(venue[i,nbRounds]=2 -> travel[i,nbRounds+1] = distance[opponent[i,nbRounds],i]) );\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nvar int: totalTravel;\nconstraint totalTravel = sum (i in Teams, k in Travels) (travel[i,k]);\nsolve minimize totalTravel;\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\noutput [\"SCHEDULE\\n\"] ++ \n       [ if fix(venue[i,k]) == 1 then \" \" else \"@\" endif ++\n\t show_int(digs,opponent[i,k]) ++ \" \" ++ \n         if k == nbRounds /\\ i != nbTeams then \"\\n\" else \"\" endif\n         | i in Teams, k in Rounds ] ++ [\"\\n\"] ++\n       [\"total travel = \"] ++ [show(totalTravel)] ++ [\"\\n\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager for a company that delivers packages to 10 different warehouses across the city. Each warehouse has a specific location and capacity, and I need to schedule a series of deliveries to each warehouse over the next 9 days. The catch is that each warehouse has already been assigned a specific delivery time and date, and I need to minimize the total distance traveled by our delivery trucks. How can I optimize the delivery schedule to reduce fuel costs and meet the tight deadlines?\",\n  \"question2\": \"I'm planning a road trip with my friends to visit 8 different theme parks across the country. We want to visit each park exactly once, and we've already booked our accommodations near each park. How can we plan our itinerary to minimize the total driving distance and make sure we have enough time to enjoy each park?\",\n  \"question3\": \"I'm the coach of a youth soccer team, and we need to schedule a series of games against 9 other teams in our league. Each team has a home field, and we need to play each team exactly once. How can we schedule the games to minimize the total travel distance for our team and make sure we have enough time to rest between games?\",\n  \"question4\": \"I need to visit 7 different clients in the city, and each client has a specific location and meeting time. How can I optimize my route to minimize travel time and meet all my appointments on time?\",\n  \"question5\": \"I'm the event coordinator for a large music festival, and we need to schedule 12 different bands to perform on 3 different stages over the course of 5 days. Each band has a specific setup and teardown time, and we need to minimize the total distance traveled by the bands and their equipment between stages. Additionally, we need to ensure that each band plays at least 2 hours apart, and that no two bands from the same genre play at the same time. How can we optimize the performance schedule to meet these constraints and provide the best experience for our attendees?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and can be answered by solving the Traveling Tournament Problem with Predefined Venues."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Traveling Tournament Problem with Predefined Venues\",\n\"description\": \"This problem involves scheduling a round-robin tournament where each team plays every other team exactly once, with the added constraint that the venue of each game has already been decided. The goal is to find a schedule that minimizes the total travel distance of all teams.\",\n\"variables\": \"opponent[i,k], venue[i,k], travel[i,k], totalTravel\\n\"\n             + \"opponent[i,k]: the opponent of team i in round k\\n\"\n             + \"venue[i,k]: 1 if team i plays at home in round k, 2 otherwise\\n\"\n             + \"travel[i,k]: the distance travelled by team i to go play in round k\\n\"\n             + \"totalTravel: the total travel distance of all teams\",\n\"constraints\": \"opponent[i,k] != i, opponent[opponent[i,k],k] = i, alldifferent([opponent[i,k] | k in Rounds]),\\n\"\n             + \"alldifferent([opponent[i,k] | i in Teams]), regular( [venue[i,k] | k in Rounds], nbStates, 2, delta, 1, States),\\n\"\n             + \"opponent[1,1] < opponent[1,nbRounds], travel constraints\\n\"\n             + \"The constraints ensure that each team plays every other team exactly once, with the correct venue, and that the travel distances are correctly calculated.\",\n\"objective\": \"minimize totalTravel\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "vessel-loading": {"__data__": {"id_": "vessel-loading", "embedding": null, "metadata": {"problem_family": "vessel-loading", "model_name": "vessel-loading", "source_code": "% Vessel Loading\n\nint: deck_width; % width of deck\nint: deck_length; % height of deck\nint: n_containers; % number of containers\nint: n_classes; % number of container classes\n\narray[int] of int: width;\n% width[c] = width of container c\narray[int] of int: length;\n% length[c] = length of container c\narray[int] of int: class;\n% class[c] = class of container c\narray[int, int] of int: separation;\n% separation[a, b] = the minimum allowed separation between\n%                    containers of classes a and b\n\nset of int: Containers = 1..n_containers;\n\narray[Containers] of var 0..deck_width: Left;\n% Left[c] = leftmost point of container c\narray[Containers] of var 0..deck_width: Right;\n% Right[c] = rightmost point of container c\narray[Containers] of var 0..deck_length: Bottom;\n% Bottom[c] = bottommost point of container c\narray[Containers] of var 0..deck_length: Top;\n% Top[c] = topmost point of container c\n\narray[Containers] of var 1..2: orientation;\n% orientation[c] = 2 if container c is turned 90 degrees, else 1.\n\nconstraint\n  forall (c in Containers) (\n    let {\n      array[1..2] of int: ElemWidth = [width[c], length[c]];\n      array[1..2] of int: ElemLength = [length[c], width[c]]\n    }\n    in \n      Right[c] = Left[c] + ElemWidth[orientation[c]] /\\\n      Top[c] = Bottom[c] + ElemLength[orientation[c]]\n  )\n;\n\nconstraint\n  forall(c, k in Containers where c < k) (\n    Left[c] >= Right[k] + separation[class[c], class[k]] \\/\n    Right[c] + separation[class[c], class[k]] <= Left[k] \\/\n    Bottom[c] >= Top[k] + separation[class[c], class[k]] \\/\n    Top[c] + separation[class[c], class[k]] <= Bottom[k]\n  )\n;\n\n% Excessive (pretty) output\noutput [\"\u250c\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2510\\n\"] ++\n       [if x == 0 then \"\u2502\" else \"\" endif ++\n        let {\n          bool: l = exists([fix(Left[c])   = x | c in Containers]);\n          bool: r = exists([fix(Right[c])  = x | c in Containers]);\n          bool: b = exists([fix(Bottom[c]) = y | c in Containers]);\n          bool: t = exists([fix(Top[c])    = y | c in Containers])\n        } in\n          if     l /\\ r /\\ b /\\ t then \"\u253c\"\n          elseif l /\\ r /\\ b      then \"\u252c\"\n          elseif l /\\ r /\\      t then \"\u2534\"\n          elseif l /\\      b /\\ t then \"\u251c\"\n          elseif      r /\\ b /\\ t then \"\u2524\"\n          elseif l /\\      b      then \"\u250c\"\n          elseif l /\\           t then \"\u2514\"\n          elseif      r /\\ b      then \"\u2510\"\n          elseif      r /\\      t then \"\u2518\"\n          elseif l \\/ r           then \"\u2502\"\n          elseif           b \\/ t then \"\u2500\" \n          else \" \" endif ++\n        if x == deck_width then \"\u2502\\n\" else \"\" endif\n        | y in 0..deck_length, x in 0..deck_width] ++\n        [\"\u2514\"] ++ [\"\u2500\" | t in 0..deck_width] ++ [\"\u2518\"];\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the Vessel Loading Problem:\n\n```\n{\n  \"question1\": \"I'm a logistics manager for a company that specializes in transporting large equipment for music festivals. I need to load 15 containers of different sizes and types (e.g., soundboards, lighting rigs, generators) onto a truck with a deck width of 20 feet and a length of 40 feet. The containers have different classes (e.g., fragile, heavy, oversized) and require specific separations between them. How can I optimize the loading to ensure that all containers fit safely and efficiently, while meeting the separation requirements?\",\n  \"question2\": \"I'm a homeowner who's moving to a new house and I need to pack my furniture and boxes into a moving truck. I have a bunch of different-sized items (e.g., couch, bed, TV, boxes) and I want to make sure they all fit in the truck without scratching or damaging each other. The truck has a certain width and length, and I need to figure out how to arrange everything so that it all fits. Can you help me?\",\n  \"question3\": \"I'm a 10-year-old who loves playing with my toy blocks and Legos! I have a bunch of different shapes and sizes of blocks, and I want to build a really cool castle on my desk. The desk has a certain width and length, and I need to fit all my blocks on it without them falling over or touching each other. Can you help me figure out how to arrange them so that I can build the best castle ever?\",\n  \"question4\": \"Fit 8 boxes of different sizes into a 10x15 storage unit without them touching each other.\",\n  \"question5\": \"I'm the event coordinator for a large outdoor wedding reception, and I need to arrange the tables, chairs, bars, and dance floor on the lawn. The lawn has a width of 50 feet and a length of 75 feet, and I need to fit 20 tables (each 6 feet in diameter), 150 chairs, 2 bars (each 8 feet long), and a 12x12 dance floor. The tables and chairs need to be at least 3 feet away from each other, and the bars need to be at least 5 feet away from the dance floor. The wedding party has also requested that the bars be placed in a way that allows for easy access to the dance floor. How can I optimize the arrangement to ensure that everything fits safely and efficiently, while meeting the separation requirements and the wedding party's requests?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the structure of the Vessel Loading Problem, but in different contexts and with creative analogies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n```\n{\n  \"name\": \"Vessel Loading Problem\",\n  \"description\": \"The Vessel Loading Problem is a classic problem in constraint programming that involves loading containers of different sizes and classes onto a vessel with a fixed deck width and length, while ensuring that the containers do not overlap and meet certain separation requirements between containers of different classes.\",\n  \"variables\": \"Left[c], Right[c], Bottom[c], Top[c], orientation[c] for c in Containers. These variables represent the leftmost point, rightmost point, bottommost point, topmost point, and orientation (0 or 90 degrees) of each container c, respectively.\",\n  \"constraints\": \"1) Right[c] = Left[c] + ElemWidth[orientation[c]] and Top[c] = Bottom[c] + ElemLength[orientation[c]] for each container c, which ensures that the container's dimensions are respected based on its orientation. 2) Left[c] >= Right[k] + separation[class[c], class[k]] or Right[c] + separation[class[c], class[k]] <= Left[k] or Bottom[c] >= Top[k] + separation[class[c], class[k]] or Top[c] + separation[class[c], class[k]] <= Bottom[k] for each pair of containers c and k, which ensures that containers do not overlap and meet the separation requirements.\",\n  \"objective\": \"Not specified (this is a feasibility problem)\"\n}\n```\n\nLet me know if you have any further questions!", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "warehouses": {"__data__": {"id_": "warehouses", "embedding": null, "metadata": {"problem_family": "warehouses", "model_name": "warehouses", "source_code": "% Warehouse allocation\n\n% vim: ft=zinc ts=2 sw=2 et tw=0\n\n% A company needs to construct warehouses to supply stores with goods.  Each\n% warehouse possibly to be constructed has a certain capacity defining how many\n% stores it can supply.  Constructing a warehouse incurs a fixed cost.  Costs\n% for transportation from warehouses to stores depend on the locations of\n% warehouses and stores.\n%\n% Determine which warehouses should be constructed and which warehouse should\n% supply which store such that overall cost (transportation cost plus\n% construction cost) is smallest.\n%-----------------------------------------------------------------------------\n\ninclude \"globals.mzn\";\n\n%-----------------------------------------------------------------------------\n% Instance\n\nn_suppliers = 5;\nn_stores = 10;\nbuilding_cost = 30;\n\ncapacity = [1,4,2,1,3];\n\ncost_matrix =\n [|20, 24, 11, 25, 30\n  |28, 27, 82, 83, 74\n  |74, 97, 71, 96, 70\n  | 2, 55, 73, 69, 61\n  |46, 96, 59, 83,  4\n  |42, 22, 29, 67, 59\n  | 1,  5, 73, 59, 56\n  |10, 73, 13, 43, 96\n  |93, 35, 63, 85, 46\n  |47, 65, 55, 71, 95|]; \n\n%-----------------------------------------------------------------------------\n% Model\n\nint: n_suppliers;\nint: n_stores;\nint: building_cost;\narray[1..n_suppliers] of int: capacity;\narray[1..n_stores,1..n_suppliers] of int: cost_matrix;\n\nint: MaxCost = max(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]);\nint: MaxTotal =   (n_suppliers * building_cost) \n                + sum(i in 1..n_stores, j in 1..n_suppliers)(cost_matrix[i,j]); \n\narray[1..n_stores] of var 1..n_suppliers: supplier;\narray[1..n_suppliers] of var bool: open;\narray[1..n_stores] of var 1..MaxCost: cost;\nvar 1..MaxTotal: tot;\n\nconstraint\n  sum (i in 1..n_suppliers) (building_cost * bool2int(open[i])) +\n  sum (i in 1..n_stores) (cost[i])\n  = tot;\n\nconstraint\n  forall (i in 1..n_stores) (\n    cost_matrix[i,supplier[i]] = cost[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    let {\n      var int: use\n     } in\n    count(supplier,i,use) /\\ use <= capacity[i]\n  );\n\nconstraint\n  forall (i in 1..n_suppliers) (\n    (exists (j in 1..n_stores) (supplier[j] == i)) == open[i]\n  );\n\nsolve\n  :: int_search(\n    supplier ++ cost ++ [bool2int(open[i]) | i in 1..n_suppliers],\n    first_fail,\n    indomain_split,\n    complete\n  )\n  minimize tot;\n\noutput\n  [ \"warehouses:\" ]\n  ++\n  [ \"\\ntot = \", show(tot) ]\n  ++\n  [ \"\\nsupplier = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(supplier[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\ncost = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(cost[i]) ++\n    if i = n_stores then \"\\n]\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_stores\n  ]\n  ++\n  [ \"\\nopen = [\\n\" ]\n  ++\n  [ \"\\t\" ++ show(open[i]) ++\n    if i = n_suppliers then \"\\n]\\n\"\n    elseif i mod 5 = 0 then \",\\n\"\n    else \",\"\n    endif\n  | i in 1..n_suppliers\n  ]\n\n%-----------------------------------------------------------------------------\n%-----------------------------------------------------------------------------\n", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to allocate distribution centers to serve a network of retail stores. Each distribution center has a limited capacity to serve stores, and the cost of transportation from each distribution center to each store varies. The company wants to determine which distribution centers to open and which stores to serve from each center to minimize the total cost of transportation and distribution center operations. The company has 8 potential distribution center locations, 15 retail stores, and a fixed cost of $50,000 to open each distribution center.\",\n  \"question2\": \"I'm planning a music festival and I need to figure out how to get food and drinks to all the attendees. I have 5 potential food truck locations, but each one can only serve a certain number of people. I also need to consider how far each food truck is from the different stages and how much it will cost to transport everything. Can you help me decide which food trucks to use and where to put them to make sure everyone gets fed without breaking the bank?\",\n  \"question3\": \"I'm in charge of planning a school's cafeteria system. We have 4 potential kitchen locations, and each one can serve a certain number of students. We also need to consider how far each kitchen is from each classroom and how much it will cost to transport the food. Can you help me figure out which kitchens to use and which classrooms to serve from each kitchen to make sure all the students get lunch on time?\",\n  \"question4\": \"Allocate 3 coffee shops to 10 office buildings to minimize transportation costs.\",\n  \"question5\": \"A large hospital system needs to allocate medical equipment and supplies to its network of 12 hospitals. Each hospital has a limited capacity to store and maintain equipment, and the cost of transporting equipment from one hospital to another varies. The hospital system has 5 potential equipment distribution centers, each with a fixed cost of $200,000 to establish and operate. The hospital system wants to determine which distribution centers to establish and which hospitals to serve from each center to minimize the total cost of equipment transportation and distribution center operations, while ensuring that each hospital has access to the equipment and supplies it needs. The hospital system has the following equipment storage capacity and transportation cost matrix: ... (insert matrix here).\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and are designed to be answered by solving the warehouse allocation problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here is the answer in the requested format:\n\n{\n\"name\": \"Warehouse Allocation Problem\",\n\"description\": \"A company needs to construct warehouses to supply stores with goods. Each warehouse has a certain capacity defining how many stores it can supply. Constructing a warehouse incurs a fixed cost. Costs for transportation from warehouses to stores depend on the locations of warehouses and stores. The goal is to determine which warehouses should be constructed and which warehouse should supply which store such that the overall cost (transportation cost plus construction cost) is smallest.\",\n\"variables\": \"supplier[i] \u2208 {1, ..., n_suppliers} \u2200i \u2208 {1, ..., n_stores}, open[j] \u2208 {true, false} \u2200j \u2208 {1, ..., n_suppliers}, cost[i] \u2208 {1, ..., MaxCost} \u2200i \u2208 {1, ..., n_stores}, tot \u2208 {1, ..., MaxTotal}. \nsupplier[i] represents the warehouse that supplies store i, open[j] represents whether warehouse j is constructed, cost[i] represents the transportation cost from the warehouse to store i, and tot represents the total cost.\",\n\"constraints\": \"\u2211(j \u2208 {1, ..., n_suppliers}) (building_cost * open[j]) + \u2211(i \u2208 {1, ..., n_stores}) cost[i] = tot, \ncost_matrix[i, supplier[i]] = cost[i] \u2200i \u2208 {1, ..., n_stores}, \ncount(supplier, j, use) \u2227 use \u2264 capacity[j] \u2200j \u2208 {1, ..., n_suppliers}, \n(exists j \u2208 {1, ..., n_stores} (supplier[j] == i)) == open[i] \u2200i \u2208 {1, ..., n_suppliers}. \nThe first constraint ensures that the total cost is the sum of construction costs and transportation costs. The second constraint ensures that the transportation cost from the warehouse to each store is correctly calculated. The third constraint ensures that the capacity of each warehouse is not exceeded. The fourth constraint ensures that a warehouse is constructed if and only if it supplies at least one store.\",\n\"objective\": \"minimize tot\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}, "water_buckets1": {"__data__": {"id_": "water_buckets1", "embedding": null, "metadata": {"problem_family": "water_buckets1", "model_name": "water_buckets1", "source_code": "Model 1 :\n\n% Water buckets problem in Minizinc\n% \"\"\"\n% Problem description\n% This is a generalization of the CSPLib specification, which is as follows: Given an 8 pint bucket of water, and two empty buckets which can contain 5 and 3 pints respectively, the problem requires to divide the water into two by pouring water between buckets (that is, to end up with 4 pints in the 8 pint bucket, and 4 pints in the 5 pint bucket) in the smallest number of transfers.\n%\n% The generalization consists in making the specification parametric with respect to the start and goal configurations, which are now inputs to the problem.\n%\n% Problem input\n%\n% * Function start, assigning an initial amount of water to each bucket\n% * Function goal, assigning the goal amount of water to each bucket \n%\n% Search space\n% The set of all possibile sequences of configurations (states), where a configuration is a triple encoding the amount of water in each bucket at a given time-step\n%\n% Constraints\n%\n% * C1: At beginning, buckets contain the amount of water specified by function start\n% * C2: At the end, buckets contain the amount of water specified by function goal\n% * C3: The configuration at each step differs from that of the next one in that the amount of water of exactly 2 buckets changes (that in the others remain the same)\n% * C4: The overall amount of water is the same at each time step\n% * C5: After each transition (involving buckets b1 and b2), either the source bucket becomes empty, or the target becomes full\n% \"\"\"\n\n\nint: nb_buckets = 3;\nint: max_step = 10; % 8 for satisfy\nset of int: buckets = 1..nb_buckets;\nset of int: steps = 1..max_step;\narray[buckets] of int: capacity = [8,5,3];\narray[buckets] of int: start = [8,0,0];\narray[buckets] of int: goal = [4,4,0];\n\n% Search space: The set of all possibile sequences of configurations (states), \n% where a configuration is a triple encoding the amount of water in each \n% bucket at a given time-step\narray[steps, buckets] of var int: state;\nvar 1..max_step: goal_step;\n\n% Objective function\nsolve minimize goal_step;\n% solve :: int_search( [ state[i,j] | i in steps, j in buckets ] , \"first_fail\", \"indomain\", \"complete\")  minimize goal_step;\n\nconstraint\n%   goal_step <= 8 % for solve satisfy\n%   /\\\n   % assertions\n   forall(b in buckets) (\n      (start[b] <= capacity[b]) /\\ (goal[b] <= capacity[b])\n   )\n   /\\\n   sum(b in buckets)(start[b]) = sum(b in buckets)(goal[b])\n   /\\\n   forall(s in steps, b in buckets) (\n      state[s,b] >= 0 /\\\n      state[s,b] <= capacity[b]\n   )\n   /\\\n   forall(b in buckets) (\n      % C1: At beginning, buckets contain the amount of water specified by function start\n      state[1,b]=start[b]\n      /\\\n      % C2: At the end, buckets contain the amount of water specified by function goal\n      state[goal_step,b] = goal[b]\n   )\n   /\\\n   forall(step in 1..max_step-1) (\n      % C3: The configuration at each step differs from that of the next one in that the amount of\n      % water of exactly 2 buckets changes (that in the others remain the same)\n      sum(b in buckets)( bool2int(state[step,b] != state[step+1, b])) = 2\n      /\\\n      % C4: The overall amount of water is the same at each time step\n      sum(b in buckets)(state[step,b]) = sum(b in buckets)(state[step+1,b])\n      /\\\n\n      % C5: After each transition (involving buckets b1 and b2), either the source\n      % bucket becomes empty, or the target becomes full\n      forall(b1, b2 in buckets where b1 != b2) (\n         ((state[step, b1] != state[step+1, b1]) /\\ (state[step, b2] != state[step+1, b2])) ->\n            (state[step+1,b1] = 0 \\/ state[step+1,b1] = capacity[b1] \\/\n             state[step+1,b2] = 0 \\/ state[step+1,b2] = capacity[b2])\n     )\n   )\n;\n\n\noutput [\n  if s = 1 /\\ b = 1 then \n    \"goal_step: \" ++ show(goal_step)\n  else \"\" endif ++\n  if b = 1 then \"\\n\" else \" \" endif ++\n  show(state[s, b])\n  | s in steps, b in buckets\n\n] \n++ [\"\\n\"];\n\n\n\nModel 2 : \n\n\n\ninclude \"globals.mzn\";\n\nint: n_states = 15;\nint: input_max = 15;\nint: initial_state = 1;\nset of int: accepting_states = {15};\n\n\n% distance\narray[1..n_states, 1..n_states] of 0..input_max: transition_fn =\narray2d(1..n_states, 1..n_states,\n[%1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n  0, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 1\n  0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 2 \n  0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 3\n  0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % 4\n  0, 0, 0, 0, 0, 6, 0, 0, 9, 0, 0, 0, 0, 0, 0, % 5\n  0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, % 6\n  0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, % 7\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, % 8 \n  0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 0, 0, 0, 0, % 9\n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0, %10\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0, 0, 0, %11 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,13, 0, 0, %12\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14, 0, %13 \n  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %14\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15, %15\n]);\n\n\narray[1..n_states] of string:  nodes = [\n        \"8,0,0\", % 1 start\n        \"5,0,3\", % 2\n        \"5,3,0\", % 3 \n        \"2,3,3\", % 4 \n        \"2,5,1\", % 5\n        \"7,0,1\", % 6\n        \"7,1,0\", % 7\n        \"4,1,3\", % 8\n        \"3,5,0\", % 9\n        \"3,2,3\", % 10\n        \"6,2,0\", % 11\n        \"6,0,2\", % 12\n        \"1,5,2\", % 13\n        \"1,4,3\", % 14\n        \"4,4,0\"  % 15 goal\n        ];\n\n\narray[1..input_max] of var 0..input_max: x;\nvar 0..input_max: cost;\n\n% solve satisfy;\nsolve minimize cost;\n\nconstraint\nregular(x, n_states, input_max, transition_fn,\n        initial_state, accepting_states)\n;\n\nconstraint\n   cost = 2+sum([bool2int(x[i-1] != x[i] ) | i in 2..input_max])\n;\n\noutput \n[\"cost: \" ++ show(cost) ++ \"\\n\"] ++\n[show(initial_state) ++ \" \"] ++\n[\n  if fix(x[i]) < input_max then show(x[i]) ++ \" \" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(input_max) ++ \"\\n\"] ++ \n[\"\\n\\n\"] ++\n\n[show(nodes[initial_state]) ++ \"\\n\"] ++\n[\n  if fix(x[i]) < input_max then show(nodes[fix(x[i])]) ++ \"\\n\" else \" \" endif\n  | i in 1..input_max where fix(x[i]) < input_max\n] ++ \n[show(nodes[input_max]) ++ \"\\n\"] ++ \n[\"\\n\"];", "questions_this_excerpt_can_answer": "Here are five realistic and practical user questions or scenarios that would be naturally answered by solving the problem:\n\n```\n{\n  \"question1\": \"A logistics company needs to transport 800 units of a product from a warehouse to three different distribution centers with capacities of 500, 300, and 200 units, respectively. The company has a limited number of trucks with capacities of 200, 150, and 100 units, and each truck can make multiple trips. How can the company transport the product in the minimum number of trips while ensuring that each distribution center receives the required amount of product?\",\n  \"question2\": \"I'm planning a road trip from City A to City B with my friends. We have three cars with different fuel capacities, and we need to stop at gas stations along the way. We want to minimize the number of stops and make sure we have enough fuel to reach our destination. Can you help us figure out the best route and fueling strategy?\",\n  \"question3\": \"I'm playing a game where I need to collect 100 points by moving tokens between three buckets with different point values. I can move tokens between buckets in a specific order, but I need to make sure I don't exceed the bucket capacities. How can I collect the points in the fewest number of moves?\",\n  \"question4\": \"I need to allocate 120 units of a resource between three teams with different capacities. How can I do it in the minimum number of steps?\",\n  \"question5\": \"A hospital needs to allocate 150 units of a medication between three wards with different patient capacities. The medication comes in three different dosages, and each ward has specific dosage requirements. The hospital has a limited number of nurses who can administer the medication, and each nurse can only handle a certain number of patients at a time. How can the hospital allocate the medication in the minimum number of administrations while ensuring that each ward receives the required dosage and each nurse is utilized efficiently?\"\n}\n```\n\nThese questions incorporate real-life constraints, preferences, and priorities that reflect the problem's structure, and they do not necessarily use the traditional or classical context of the problem."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "text": "Here are the descriptions of the two models:\n\n**Model 1: Water Buckets Problem**\n\n{\n\"name\": \"Water Buckets Problem\",\n\"description\": \"This problem involves dividing a certain amount of water into two buckets of different capacities using a sequence of pouring operations, with the goal of achieving a specific target configuration in the minimum number of steps.\",\n\"variables\": \"state[s, b], goal_step; where state[s, b] represents the amount of water in bucket b at step s, and goal_step is the number of steps required to reach the target configuration.\",\n\"variables_description\": \"The decision variables are the amount of water in each bucket at each step, and the number of steps required to reach the target configuration.\",\n\"constraints\": \"C1: Initial state constraint; C2: Goal state constraint; C3: Two buckets change at each step; C4: Water conservation; C5: Source bucket becomes empty or target bucket becomes full.\",\n\"constraints_description\": \"The constraints ensure that the initial state is respected, the goal state is reached, only two buckets change at each step, the total amount of water is conserved, and the pouring operations are valid.\",\n\"objective\": \"Minimize goal_step\"\n}\n\n**Model 2: Shortest Path in a Graph**\n\n{\n\"name\": \"Shortest Path in a Graph\",\n\"description\": \"This problem involves finding the shortest path in a graph from a start node to a goal node, where the graph is represented by a transition function and the nodes have associated states.\",\n\"variables\": \"x[i], cost; where x[i] represents the node at step i, and cost is the total cost of the path.\",\n\"variables_description\": \"The decision variables are the nodes in the path and the total cost of the path.\",\n\"constraints\": \"Regular language constraint; Cost calculation constraint.\",\n\"constraints_description\": \"The constraints ensure that the path is valid according to the transition function, and the cost is calculated correctly.\",\n\"objective\": \"Minimize cost\"\n}", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "Document"}, "__type__": "4"}}}