Model 1 :

% Magic sequence in MiniZinc.
% A magic sequence of length n is a sequence of integers x0 . . xn-1 between 0 and n-1, such that for all i in 0 to n-1, the number i occurs exactly xi times in the sequence. For instance, 6,2,1,0,0,0,1,0,0,0 is a magic sequence since 0 occurs 6 times in it, 1 occurs twice, ...

int: n =  20;
array[0..n-1] of var 0..n-1: s;

solve satisfy;

constraint
  forall(i in 0..n-1) (
    s[i] = sum(j in 0..n-1) (bool2int(s[j] = i))
  )
;


output [
       show(s), "\n"
];



Model 2 : 


int: n =  20;
array[0..n-1] of var 0..n-1: s;

solve satisfy;

constraint
        forall(i in 0..n-1) (
                s[i] = sum(j in 0..n-1) (bool2int(s[j]=i))
        )
        /\ 
        sum(i in 0..n-1) (s[i])=n 
        /\
        sum(i in 0..n-1) (s[i]*i) =n
;


output [
       show(s), "\n",
];



Model 3 :


include "globals.mzn";

int: n =  10;
array[0..n-1] of var 0..n-1: s;
array[0..n-1] of int: value = array1d(0..n-1, [i | i in 0..n-1]); % helper for distribute

% solve satisfy;
solve :: int_search(s, first_fail, indomain_min, complete) satisfy;

constraint
   distribute(s, value, s)         /\ 
   sum(i in 0..n-1) (s[i])   = n   /\
   sum(i in 0..n-1) (s[i]*i) = n
;


output [
       show(s), "\n"
];



Model 4 :


include "globals.mzn";

int: n =  100;
array[0..n-1] of var 0..n-1: s;

% solve satisfy;
solve :: int_search(s, first_fail, indomain_min, complete) satisfy;

constraint
   global_cardinality(s,array1d(0..n-1, set2array(index_set(s))), s) :: domain
;


output [
       show(s), "\n"
];


Model 5 : 


% Magic squares in MiniZinc

include "globals.mzn";

int: n = 3;

int: total = ( n * (n*n + 1)) div 2;
array[1..n,1..n] of var 1..n*n: magic;


% solve satisfy;
solve :: int_search(
        [magic[i,j] | i in 1..n, j in 1..n], 
        first_fail,
        indomain_min,
        complete) 
    satisfy;


constraint

        all_different([magic[i,j] | i in 1..n, j in 1..n]) :: domain
        /\
        forall(k in 1..n) (
           sum(i in 1..n) (magic[k,i]) = total % :: domain
           /\
           sum(i in 1..n) (magic[i,k]) = total %:: domain
        )
       /\ % diagonal
       sum(i in 1..n) (magic[i,i]) = total  %:: domain
       /\ % diagonal
       sum(i in 1..n) (magic[i,n-i+1]) = total %:: domain
;

% symmetry breaking
% Activating all these constraints we get the
% "standard" way of counting the number of solutions:
%    1, 0, 1, 880, 275305224
% i.e. this sequence: http://oeis.org/A006052
%
% Without the constraints the number of solutions are:
%  N  #solutions
%  -------------
%  1     1
%  2     0
%  3     8
%  4  7040
%  5  many... 
%
% constraint
%    magic[1,1] < magic[1,n]
%    /\ magic[1,n] < magic[n,1]
%    /\ magic[1,1] < magic[n,n]
% ;


output [
  "Total: " ++ show(total) ++ "\n"
] ++
[
    %   show(magic)
  if j = 1 then "\n" else "" endif ++
    if fix(magic[i,j]) < 10 then " " else "" endif ++
    show(magic[i,j]) ++ " "
  | i,j in 1..n
] 
++ 
["\n"];


Model 6 : 


% Magic square integer programming version in MiniZinc.
% In recreational mathematics, a magic square of order n is an
% arrangement of n^2 numbers, usually distinct integers, in a square,
% such that n numbers in all rows, all columns, and both diagonals sum
% to the same constant. A normal magic square contains the integers
% from 1 to n^2.


% square order
int: n = 3; 

% integers to be placed
set of 1..n*n: N = 1..n*n;

% x[i,j,k] = 1 means that cell (i,j) contains integer k
array[1..n, 1..n, N] of var 0..1: x;

array[1..n, 1..n] of var 1..n*n: square;

var int: s; % the magic sum

solve :: int_search(
        [x[i,j,k] | i,j in 1..n, k in N] ++ 
        [square[i,j] | i,j in 1..n] ++
        [s],
        first_fail,
        indomain_min, 
        complete % "credit(640, bbs(5))" % "complete"
      ) 
    satisfy;

constraint 
  s >= 0 
  /\
  s <= n*n*n
  /\
  % each cell must be assigned exactly one integer
  forall(i in 1..n, j in 1..n) (
     sum(k in N) (x[i,j,k]) = 1
  )
  /\
  % each integer must be assigned exactly to one cell
  forall(k in N) (
     sum(i in 1..n, j in 1..n) (x[i,j,k]) = 1
  )

  /\
  % the sum in each row must be the magic sum 
  forall(i in 1..n) (
     sum(j in 1..n, k in N) (k * x[i,j,k]) = s
  )

  /\
  % the sum in each column must be the magic sum
  forall(j in 1..n) (
     sum(i in 1..n, k in N) (k * x[i,j,k]) = s
  )

  /\
  % the sum in the diagonal must be the magic sum
  sum(i in 1..n, k in N) (k * x[i,i,k]) = s

  /\
  % the sum in the co-diagonal must be the magic sum
  sum(i in 1..n, k in N) (k * x[i,n-i+1,k]) = s

  /\
  % for output
  forall(i,j in 1..n) ( square[i,j] = sum(k in N) (k * x[i,j,k]))
;


output [ 
   "\ns: ", show(s)
] ++
[
  if  j = 1 then "\n" else " " endif ++
    show(square[i,j]) 
  | i,j in 1..n

] ++ ["\n"];

% printf "\n";
% printf "Magic sum is %d\n", s;
% printf "\n";
% for{i in 1..n}
% {  printf{j in 1..n} "%3d", sum{k in N} k * x[i,j,k];
%    printf "\n";
% }
% printf "\n";