Model 1 : 

% Partitioning problem
% Partition 2*n numbers into two groups, each of size n, such that
% their sums are equal and the sums of their squares are equal.

include "globals.mzn";

% Instance

n = 32;

% Model

int: n;

array[1..n] of var 1..2*n: x;
array[1..n] of var 1..2*n: y;

constraint true
    %   Break symmetries by ordering numbers in each group
    /\  forall (i in 2..n) (x[i-1] < x[i] /\ y[i-1] < y[i])
    %   Break symmetries by ordering the groups
    /\  x[1] < y[1]
    
    %   Partition the numbers
    /\  (alldifferent(x++y)) :: bounds
    
    %   The sums are equal
    /\  sum (x) = 2*n*(2*n+1) div 4
    /\  sum (y) = 2*n*(2*n+1) div 4
    
    %   The sums of the squares are equal
    /\  let {
            array[1..n] of var 1..4*n*n: sx,
            array[1..n] of var 1..4*n*n: sy
        } in
        forall (i in 1..n) (sx[i]=x[i]*x[i] /\ sy[i] = y[i]*y[i])
    /\  sum (sx) = 2*n*(2*n+1)*(4*n+1) div 12
    /\  sum (sy) = 2*n*(2*n+1)*(4*n+1) div 12
;

solve ::int_search(x++y,first_fail,indomain_min,complete) satisfy;

output
    ["x = ",show(x),"\n","y = ",show(y),"\n",
     "sum = ",show(2*n*(2*n+1) div 4),"\n",
     "sum of squares = ", show(2*n*(2*n+1)*(4*n+1) div 12), "\n"
     ];



Model 2 :



%
% Set partition problem in Minizinc.
%
%  This is a partition problem.
%  Given the set S = {1, 2, ..., n},
%  it consists in finding two sets A and B such that:
%  <ul>
%  <li>A U B = S,</li>
%  <li>|A| = |B|,</li>
%  <li>sum(A) = sum(B),</li>
%  <li>sum_squares(A) = sum_squares(B).</li>
%  </ul>
 
%
include "globals.mzn";
 
int: n = 16;
set of 1..n: S = 1..n;
int: num_sets = 2;
array[1..num_sets] of var set of S: a;
array[1..num_sets] of var 0..n*n: sums;
array[1..num_sets] of var 0..n*n*n*n: sum_squared;
 
 
%
% set_sum
% sums the elements in the set s
%
predicate set_sum(var set of int: s, var int: the_sum) =
   the_sum = sum(i in ub(s)) (bool2int(i in s)*i)
;
 
predicate set_sum_squared(var set of int: s, var int: the_sum) =
   the_sum = sum(i in ub(s)) (bool2int(i in s)*i*i)
;
 
 
solve :: set_search(a, first_fail, indomain_min, complete) satisfy;
% solve maximize sums[1];
 
constraint
  assert(n mod 4 == 0, "n must be a multiple of 4")
;
 
constraint
   % use all the elements in S and it should be disjoint sets
   partition_set(a, S)
   /\
   forall(i in 1..num_sets) (  
     a[i] `set_sum` sums[i]
     /\ a[i] `set_sum_squared` sum_squared[i]
   )
   /\
   forall(i in 2..num_sets) (
     card(a[i]) > 0 /\ % this is needed by eclipse
     card(a[i]) = card(a[i-1]) /\
     sums[i] = sums[i-1]
     /\ sum_squared[i] = sum_squared[i-1]
   )
 
  % symmetry breaking
  /\ 1 in a[1]
 
;
 
output [
   "a: " ++ show(a) ++ "\n" ++
   "sums: " ++ show(sums) ++ "\n" ++
   "sum_squared: " ++ show(sum_squared) ++ "\n"
];
 
% For model seeker
% output [
%    show(set2array(fix(a[i]))) ++ ","
%   | i in 1..num_sets
% ];