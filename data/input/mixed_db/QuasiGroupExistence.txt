Model 1 :


% Quasigroup problem in MiniZinc.
% The quasiGroup existence problem
% An m order quasigroup  is an mxm multiplication table of integers 1..m,
% where each element occurrs exactly once in each row and column and certain
% multiplication axioms hold (in this case, we want axiom 7 to hold).
%
% QG7.m problems are order m quasigroups for which (b*a)*b = a*(b*a).


include "globals.mzn";
 
int: n;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
 
solve :: int_search([quasiGroup[row, col] | row, col in nDomain],
        first_fail, indomain_min, complete) satisfy;
% solve satisfy;
 
constraint
      
     % assign the "reflected" quasigroup to qGColumns to access its columns
     %  forall row,col : nDomain .
     %    quasiGroupColumns[col,row] = quasiGroup[row,col],
 
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain])
     )
     /\
     % all values in the diagonals
     forall( i in nDomain ) (
          quasiGroup[i,i] = i
     )
     /\
 
     % All columns have to be different       
     forall(col in nDomain) (
          all_different([quasiGroup[row, col] | row in nDomain])
     )
     /\
 
     % this strange constraint
     % corresponds to:
     % quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i], j] 
     forall(i,j in nDomain) (
              quasiGroup[i, quasiGroup[j,i]] = quasiGroup[quasiGroup[j,i],j]
     )
     /\
     % some implied? constraint
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
output [
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];
 
 
%
% data
%
n = 5;



Model 2 :


include "globals.mzn";
 
int: n = 9; % solutions for n=5, n=9...
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
array[nDomain] of var nDomain: qgDiagonal;
 
% solve satisfy;
solve :: int_search([quasiGroup[row, col] | row, col in nDomain],
        first_fail, indomain_min, complete) satisfy;
 
constraint
 
     % accessor for diagonal
     forall(i in nDomain) (
         qgDiagonal[i] = quasiGroup[i,i]
     )
     /\
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain ] )
     )
     /\
     % All columns have to be different
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain] )
     )
     /\
     % (j*i)*(i*j) = i
     forall(i in nDomain) (
          forall(j in nDomain) (
                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i
          )
     )
     /\
     % Idempotency
     forall(i in nDomain) (
          quasiGroup[i,i] = i
     )
     /\
     % Implied (from Colton,Miguel 01)
     % All-diff diagonal
     all_different(qgDiagonal)
 
     /\
     % anti-Abelian
     forall(i in nDomain) (
       forall(j in nDomain) (
           (i != j) ->
             (quasiGroup[i,j] != quasiGroup[j,i])
       )
     )
     /\
     % if (i*i)=j then (j*j) = i
     forall(i in nDomain) (
       forall(j in nDomain) (
         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)
       )
     )
     /\
     % Symmetry-breaking constraints
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
 
output [
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];


Model 3 : 


include "globals.mzn";
 
int: n = 4;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
array[nDomain] of var nDomain: qgDiagonal;
 
% solve satisfy;
solve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;
% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;
 
constraint
     % accessor for diagonal
     forall(i in nDomain) (
         qgDiagonal[i] = quasiGroup[i,i]
     )
     /\
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain])
     )
     /\
     % All columns have to be different       
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain])
     )
     /\
     %  (j*i)*(i*j) = i
     forall(i in nDomain) (
         forall(j in nDomain) (
        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i
         )
     )
     /\
     % Implied (from Colton,Miguel 01)
     % All-diff diagonal
     all_different(qgDiagonal)
 
     /\
 
     % anti-Abelian
     forall(i in nDomain) (
       forall(j in nDomain) (
         (i != j) ->
         (quasiGroup[i,j] != quasiGroup[j,i])
       )
     )
     /\
 
     % if (i*i)=j then (j*j) = i
     forall(i in nDomain) (
       forall(j in nDomain) (
         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)
       )
     )
     /\
 
     % Symmetry-breaking constraints   
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
output
[ "\nqgDiagonal: ", show(qgDiagonal)
] ++
[ "\nquasiGroup: "
] ++
[
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];



Model 4 :

include "globals.mzn";
 
int: n;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
array[nDomain] of var nDomain: qgDiagonal;
 
% solve satisfy;
solve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;
% solve :: int_search(qgDiagonal, first_fail, indomain_min, complete) satisfy;
 
constraint
     % accessor for diagonal
     forall(i in nDomain) (
         qgDiagonal[i] = quasiGroup[i,i]
     )
     /\
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain])
     )
     /\
     % All columns have to be different       
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain])
     )
     /\
     %  (j*i)*(i*j) = i
     forall(i in nDomain) (
         forall(j in nDomain) (
        quasiGroup[quasiGroup[i,j],quasiGroup[j,i]] = i
         )
     )
 
     % Idempotency
     % forall i : nDomain .
     %     (quasiGroup[i,i] = i),
 
     % Implied (from Colton,Miguel 01)
     % All-diff diagonal
     % allDifferent(qgDiagonal) %,
 
     % anti-Abelian
     % forall i : nDomain .
     %   forall j : nDomain .
     %     (i != j) =>
     %     (quasiGroup[i,j] != quasiGroup[j,i]),
 
     % if (i*i)=j then (j*j) = i
     % forall i : nDomain .
     %  forall j : nDomain .
     %    (quasiGroup[i,i]=j) => (quasiGroup[j,j]=i),
 
 
     % Symmetry-breaking constraints   
     % forall i : nDomain .
     %      quasiGroup[i,n-1] + 2 >= i
 
;
 
output
[ "\nqgDiagonal: ", show(qgDiagonal)
] ++
[ "\nquasiGroup: "
] ++
[
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];
 
 
 
 
%
% data
%
n = 4; % 4 works


Model 5 :


include "globals.mzn";
 
int: n = 7;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
 
solve :: int_search([quasiGroup[row, col] | row, col in nDomain],
        first_fail, indomain_min, complete) satisfy;
 
constraint
 
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain])
     )
     /\
     % All columns have to be different       
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain ])
     )
     /\
     % ((i*j)*j)*j = a
     forall(i in nDomain) (
          forall(j in nDomain) (
            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i
          )
     )
     /\
     % Implied (from Colton,Miguel 01)
     forall(i in nDomain) (
       forall(j in nDomain) (
         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)
       )
     )
     /\
     % Symmetry-breaking constraints   
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
output [
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];


Model 6 :


include "globals.mzn";
 
int: n = 5;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
array[nDomain] of var nDomain: qgDiagonal;
 
% solve satisfy;
solve :: int_search([quasiGroup[row, col] | row, col in nDomain], first_fail, indomain_min, complete) satisfy;
 
constraint
 
     % accessor for diagonal
     forall(i in nDomain) (
         qgDiagonal[i] = quasiGroup[i,i]
     )
     /\
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain ] )
     )
     /\
     % All columns have to be different
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain] )
     )
     /\
     % (j*i)*(i*j) = i
     forall(i in nDomain) (
          forall(j in nDomain) (
                quasiGroup[quasiGroup[j,i],quasiGroup[i,j]] = i
          )
     )
     /\
     % Implied (from Colton,Miguel 01)
     % All-diff diagonal
     all_different(qgDiagonal)
 
     /\
     % anti-Abelian
     forall(i in nDomain) (
       forall(j in nDomain) (
           (i != j) ->
             (quasiGroup[i,j] != quasiGroup[j,i])
       )
     )
     /\
     % if (i*i)=j then (j*j) = i
     forall(i in nDomain) (
       forall(j in nDomain) (
         (quasiGroup[i,i]=j) -> (quasiGroup[j,j]=i)
       )
     )
     /\
     % Symmetry-breaking constraints
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
 
output [
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];


Model 7 :



include "globals.mzn";
 
int: n = 7;
set of int: nDomain = 0..n-1;
 
array[nDomain, nDomain] of var nDomain: quasiGroup;
 
solve :: int_search([quasiGroup[row, col] | row, col in nDomain],
        first_fail, indomain_min, complete) satisfy;
 
constraint
 
     % All rows have to be different
     forall(row in nDomain) (
          all_different([quasiGroup[row,col] | col in nDomain])
     )
     /\
     % All columns have to be different       
     forall(col in nDomain) (
          all_different([quasiGroup[row,col] | row in nDomain ])
     )
     /\
     % ((i*j)*j)*j = a
     forall(i in nDomain) (
          forall(j in nDomain) (
            quasiGroup[quasiGroup[quasiGroup[i,j],j],j] = i
          )
     )
     /\
     % Idempotency
     forall(i in nDomain) (
          quasiGroup[i,i] = i
     )
     /\
     % Implied (from Colton,Miguel 01)
     forall(i in nDomain) (
       forall(j in nDomain) (
         (quasiGroup[i,j]=i) <-> (quasiGroup[j,i]=i)
       )
     )
     /\
     % Symmetry-breaking constraints   
     forall(i in nDomain) (
           quasiGroup[i,n-1] + 2 >= i
     )
;
 
output [
  if col = 0 then "\n" else " " endif ++
    show(quasiGroup[row, col])
  | row, col in nDomain
] ++ ["\n"];