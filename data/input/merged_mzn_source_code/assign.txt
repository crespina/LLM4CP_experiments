Model 1 :

int: n;
set of int: WORK = 1..n;
int: m;
set of int: TASK = 1..m;
array[WORK,TASK] of int: profit;
array[WORK] of var TASK: x;
% new
array[WORK] of var int: px =
     [ profit[w,x[w]] | w in WORK ];
var int: obj = sum(w in WORK)(px[w]);

include "alldifferent.mzn";
constraint alldifferent(x);

ann: varselect;
ann: valselect;

solve :: int_search(px, varselect, valselect, complete)
      maximize obj;

output ["obj = \(obj); x = \(x);\n"];


varselect = largest;
valselect = indomain_min;


Model 2 : 


int: n;
set of int: DOM = 1..n;
int: m;
set of int: COD = 1..m;
array[DOM,COD] of int: profit;

array[DOM] of var COD: task;
array[COD] of var DOM: worker;

include "inverse.mzn";
constraint inverse(task,worker);


solve maximize sum(w in COD)
            (profit[w,task[w]]);

output [show(task)];



Model 3 : 

int: n;
set of int: DOM = 1..n;
int: m;
set of int: COD = 1..m;
array[DOM,COD] of int: profit;

array[COD] of var DOM: worker;

include "alldifferent.mzn";
constraint alldifferent(worker);


solve maximize sum(t in COD)
            (profit[worker[t],t]);

output [show(worker)];
