problem 1 The name of the problem is 2cc_Hadamard_matrix_Legendre_pairs.md
---
Title:   2cc Hadamard matrix Legendre pairs
Proposer:
- Ilias S. Kotsireas
Category: Combinatorial mathematics
---


For every odd positive integer $\ell$, (and $m=\displaystyle\frac{\ell - 1}{2}$) 
we define the 2cc Hadamard matrix Legendre pairs CSP
using the \{V,D,C\} format (Variables, Domains, Constraints) as follows:

* $V = \{ a_1, \cdots, a_\ell, b_1, \cdots, b_\ell \}$,  a set of $2 \cdot \ell$ variables 
* $D = \{ D_{a_1}, \ldots, D_{a_\ell}, D_{b_1}, \ldots, D_{b_\ell} \} $, a set of $2 \cdot \ell$ domains, all of them equal to $\{-1,+1\}$
* $C = \{ c_1, \ldots, c_{m}, c_{m+1}, c_{m+2} \}$,  a set of $m+2$ constraints, ($m$ quadratic constraints and 2 linear constraints)


The $m$ quadratic constraints are given by:
$$
        c_s := PAF(A,s)+PAF(B,s)=-2, \forall s=1,\ldots,m
$$
where PAF denotes the periodic autocorrelation function:  ($i+s$ is taken mod $\ell$, when is exceeds $\ell$)
$$
        A = [a_1,\ldots,a_\ell], \,\, PAF(A,s) = \sum_{i=1}^n a_i a_{i+s}
$$
$$
        B = [b_1,\ldots,b_\ell], \,\, PAF(B,s) = \sum_{i=1}^n b_i b_{i+s}
$$
The $2$ linear constraints are given by:
$$
    c_{m+1} := a_1 + \ldots + a_\ell = 1
$$
$$
    c_{m+2} := b_1 + \ldots + b_\ell = 1
$$

The 2cc Hadamard matrix Legendre pairs CSP for all odd $\ell = 3,\ldots,99$ are given in http://www.cargo.wlu.ca/CSP_2cc_Hadamard/ (and in the data section). There are 49 CSPs. All of them are known to have solutions.

It is conjectured that the 2cc Hadamard matrix Legendre pairs CSP has solutions, for every odd $\ell$, and this is linked to the famous Hadamard conjecture cite{Kotsireas}.


problem 2 The name of the problem is ACC_Basketball_Schedule.md
---
Title:    ACC Basketball Schedule
Proposer: Toby Walsh
Category: Scheduling and related problems
---


The problem is finding a timetable for the 1997/98 Atlantic Coast Conference (ACC) in basketball. It was first tackled by Nemhauser and Trick.

The 9 basketball teams in the tournament are Clemson (Clem), Duke (Duke), Florida State (FSU) , Georgia Tech (TT), Maryland (UMD), North Carolina (UNC), North Carolina State (NCSt), Virginia (UVA), and Wake Forest (Wake). The problem is to determine a double round robin schedule for these 9 teams subject to some additional constraints. In a double round robin, each team places each other, once at home, once away. The schedule is to be played over 18 dates. The first and all subsequent odd dates are weekday fixtures. The second and all subsequent even dates are weekend fixtures. There are nine other sets of constraints.

**1. Mirroring**. The dates are grouped into pairs (r1, r2), such that each team will get to play against the same team in dates r1 and r2. Such a grouping is called a mirroring scheme. Nemhauser and Trick use the mirroring scheme {(1, 8), (2, 9), (3, 12), (4, 13), (5, 14), (6, 15), (7, 16), (10, 17), (11, 18)}

**2. No Two Final Aways**. No team can play away on both last dates.

**3. Home/Away/Bye Pattern Constraints**. No team may have more than two away matches in a row. No team may have more than two home matches in a row. No team may have more than three away matches or byes in a row. No team may have more than four home matches or byes in a row.

**4. Weekend Pattern**. Of the weekends, each team plays four at home, four away, and one bye.

**5. First Weekends**. Each team must have home matches or byes at least on two of the first five weekends.

**6. Rival Matches**. Every team except FSU has a traditional rival. The rival pairs are Duke-UNC, Clem-GT, NCSt-Wake, and UMD-UVA. In the last date, every team except FSU plays against its rival, unless it plays against FSU or has a bye.

**7. Constrained Matches**. The following pairings must occur at least once in dates 11 to 18: Wake-UNC, Wake-Duke, GT-UNC, and GT-Duke.

**8. Opponent Sequence Constraints**. No team plays in two consecutive dates away against UNC and Duke. No team plays in three consecutive dates against UNC, Duke and Wake (independent of home/away).

**9. Other Constraints**. UNC plays its rival Duke in the last date and in date 11. UNC plays Clem in the second date. Duke has a bye in date 16. Wake does not play home in date 17. Wake has a bye in the first date. Clem, Duke, UMD and Wake do not play away in the last date. Clem, FSU, GT and Wake do not play away in the first date. Neither FSU nor NCSt have a bye in last date. UNC does not have a bye in the first date.

See also {prob026}, round robin tournaments (of which {prob011} is an instance).


problem 3 The name of the problem is Alien_Tiles_Problem.md
---
Title:    Alien Tiles Problem
Proposer: Ian Gent
Category: Games and puzzles
---

 The Alien Tiles puzzle is available for play over the internet at [www.alientiles.com](http://www.alientiles.com). We addressed the combinatorial problem of finding the most difficult puzzle, in a certain sense.

 For the Alien Tiles puzzle, you are presented with a square grid, with each square a given colour. Each grid square can be one of some number of colours, and the colours are ordered in a cycle, for example Red --> Green --> Blue --> Red. Moves in the puzzle are made by clicking on one of the grid squares. Each click rotates the colour by one in both the clicked square, and all other squares in the same row and column. Given a starting state and a goal state of the grid, the puzzle is to find a
 set of clicks of squares that achieves the goal.

 Notice that the order of the clicks does not matter, so all we have to do is to decide how many times to click on each square. The puzzle reduces to arithmetic modulo the number of colours, c. Clicking adds one mod c to each square in the same row and column. Instead of colours the start and goal states are an assignment of integers mod c to the squares. For simplicity we assume from now on that the start state is all zeroes.

 There are a number of interesting combinatorial questions about Alien Tiles. The straightforward one of solving given positions is in fact not hard, because the operations of clicking are commutative. We outline one particular question, whose solution is not currently known in general.

 With certain versions of the puzzle, if a goal state can be reached there are many equivalent ways of reaching it. For example, consider a 4x4 grid, with c=3 colours. Consider clicking once in each square in the top row, and twice in each square in the second row. This adds 3 clicks to each square in the bottom two rows, so makes no difference mod 3. It adds 6 clicks to each square in the top row, and 9 clicks to each square in the second row. The net result is that no difference mod 3 is made
 by this set of clicks, and the final colours in the squares of the grid are the same as the starting colours. We can do the same for any two rows, and two columns, and any combination thereof. Therefore there are many equivalent versions of any given solution. Of all the equivalence class of solutions under these operations, there is some solution with minimum number of clicks over the whole grid. We can now ask: what is the absolute maximum number of clicks necessary to solve any (solvable)
 goal state? That is, which solvable state has the largest minimum number of clicks in its equivalence class of solutions?


problem 4 The name of the problem is All-Interval_Series.md
---
Title:    All-Interval Series
Category: Combinatorial mathematics
Proposer: Holger Hoos
---

Given the twelve standard pitch-classes (c, c#, d, ...), represented by numbers 0,1,...,11, find a series in which each pitch-class occurs exactly once and in which the musical intervals between neighbouring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones). That is, for each of the intervals, there is a pair of neighbouring pitch-classes in the series, between which this interval appears. 

The problem of finding such a series can be easily formulated as an instance of a more general arithmetic problem on $\mathbb Z_n$, the set of integer residues modulo $n$. Given $n \in \mathbb N$, find a vector $s = (s_1, ..., s_n)$, such that 

 1. $s$ is a permutation of $\mathbb Z_n = \{0,1,...,n-1\}$; and 
 2. the interval vector $v = (|s_2-s_1|, |s_3-s_2|, ... |s_n-s_{n-1}|)$ is a permutation of $ \mathbb Z_n \setminus \\{0\\} = \\{1,2,...,n-1\\}$. 
 
A vector $v$ satisfying these conditions is called an all-interval series of size $n$; the problem of finding such a series is the all-interval series problem of size $n$. We may also be interested in finding all possible series of a given size. 

The All-Interval Series is a special case of the {prob053} in which the graph is a line. 



problem 5 The name of the problem is A_Distribution_Problem_with_Wagner-Whitin_Costs.md
---
Title:    A Distribution Problem with Wagner-Whitin Costs
Proposer: 
    - Ian Miguel
    - Armagan Tarim
Category: 
    - Scheduling and related problems
    - Bin packing
---

A basic distribution problem is described as follows.
Given:
<UL>
<LI> A supply chain structure of <em>stocking points</em> divided into
<em>L</em> <em>levels</em>, such as:
<pre>
              |                   Level
              V
            +---+
            | F |                   3
            +---+
          _/     \_
         /         \
        V           V
      +---+       +---+
      | D |       | E |             2
      +---+       +---+
    _/     \_          \_
   /         \           \
  V           V           V
+---+       +---+       +---+
| A |       | B |       | C |       1
+---+       +---+       +---+
  |           |           |
  V           V           V
</pre>
<LI>A <em>holding cost</em> (<em>c</em>) per unit of inventory at each
    stocking point, where it is assumed that a parent has lower holding
    cost than any of its children.
<LI>A <em>procurement cost</em> (<em>c0</em>) per stocking point
    (per order, not per unit of inventory received).
<LI>A number of periods, <em>T</em>.
<LI>A <em>demand</em> for each leaf (<em>A - C</em>) at each period.
</UL>

Find an optimal ordering <em>policy</em>: i.e. a decision as to how much
to order at each stocking point at each time period that minimises cost.

The Wagner-Whitin form of the problem assumes that the holding costs
and procurement costs are constant, and that the demands are known for
the entire planning horizon. Furthermore, the stocking points have no
maximum capacity and the starting inventory is 0.

problem 6 The name of the problem is A_Layout_Problem.md
---
Title:    A Layout Problem
Proposer: Ã–zgÃ¼r AkgÃ¼n
---

Given a grid, we want to place a number of pieces such that every piece is completely included in the grid and no overlapping occurs between pieces.

Section 3.3 of cite{meseguer2001exploiting} gives a more detailed specification of the problem.



problem 7 The name of the problem is Balanced_Academic_Curriculum_Problem__BACP_.md
---
Title:    Balanced Academic Curriculum Problem (BACP)
Proposer: 
    - Brahim Hnich
    - Zeynep Kiziltan
    - Toby Walsh
Category: Scheduling and related problems
---


The BACP is to design a balanced academic curriculum by assigning periods to courses in a way that the academic load of each period is balanced, i.e., as similar as possible . The curriculum must obey the following administrative and academic regulations: 

* Academic curriculum: an academic curriculum is defined by a set of courses and a set of prerequisite relationships among them. 
* Number of periods: courses must be assigned within a maximum number of academic periods. 
* Academic load: each course has associated a number of credits or units that represent the academic effort required to successfully follow it. 
* Prerequisites: some courses can have other courses as prerequisites. 
* Minimum academic load: a minimum number of academic credits per period is required to consider a student as full time. 
* Maximum academic load: a maximum number of academic credits per period is allowed in order to avoid overload. 
* Minimum number of courses: a minimum number of courses per period is required to consider a student as full time. 
* Maximum number of courses: a maximum number of courses per period is allowed in order to avoid overload. 

The goal is to assign a period to every course in a way that the minimum and maximum academic load for each period, the minimum and maximum number of courses for each period, and the prerequisite relationships are satisfied. An optimal balanced curriculum minimises the maximum academic load for all periods.

Note that we could consider other types of balance criterion, such as minimising an expression on the deviation from the mean load per period. This is explored in Monette et al


**The Generalised Balanced Academic Curriculum Problem**

Marco Chiarandini, Luca Di Gaspero, Stefano Gualandi, and Andrea Schaerf have proposed a more challenging <a href="http://www.csplib.org/Problems/prob064">generalised version</a> of the problem. 

problem 8 The name of the problem is Balanced_Incomplete_Block_Designs.md
---
Title:    Balanced Incomplete Block Designs
Proposer: Steven Prestwich
Category:
    - Design and configuration
    - Combinatorial mathematics
---

Balanced Incomplete Block Design (BIBD) generation is a standard combinatorial problem from design theory, originally used in the design of statistical experiments but since finding other applications such as cryptography. It is a special case of Block Design, which also includes Latin Square problems.

BIBD generation is described in most standard textbooks on combinatorics. A BIBD is defined as an arrangement of $v$ distinct objects into $b$ blocks such that each block contains exactly $k$ distinct objects, each object occurs in exactly $r$ different blocks, and every two distinct objects occur together in exactly $\lambda$ blocks. Another way of defining a BIBD is in terms of its incidence matrix, which is a $v$ by $b$ binary matrix with exactly $r$ ones per row, $k$ ones per column, and with a scalar product
of $\lambda$ between any pair of distinct rows. A BIBD is therefore specified by its parameters $(v,b,r,k,\lambda)$. An example of a solution for $(7,7,3,3,1)$ is:

    0 1 1 0 0 1 0
    1 0 1 0 1 0 0
    0 0 1 1 0 0 1
    1 1 0 0 0 0 1
    0 0 0 0 1 1 1
    1 0 0 1 0 1 0
    0 1 0 1 1 0 0 

Lam's problem {prob025} is that of finding a BIBD with parameters $(111,111,11,11,1)$. 


problem 9 The name of the problem is Balanced_Nursing_Workload_Problem.md
---
Title:    Balanced Nursing Workload Problem
Proposer: Gilles Pesant
Category: 
  - Scheduling and related problems
  - Bin packing
---

Given a set of patients distributed in a number of hospital zones and an available nursing staff, one must assign a nurse to each patient in such a way that the work is distributed evenly between nurses. Each patient is assigned an acuity level corresponding to the amount of care he requires; the workload of a nurse is defined as the sum of the acuities of the patients he cares for. A nurse can only work in one zone and there are retrictions both on the number of patients assigned to a nurse and on the corresponding workload. We balance the workloads by minimizing their standard deviation.

This problem can be decomposed in two phases: *nurse staffing* that assigns nurses to zones and *nurse-patient assignment* that then assigns patients to nurses.

A variant of this problem has patients grouped into a small number of types and has the acuity associated with each patient type being nurse-dependent. Note that the total workload is no longer known a priori since each patient's acuity now depends on which nurse he is assigned to. There are two objectives to minimize: the total workload and the standard deviation of the workloads. 


problem 10 The name of the problem is Black_Hole.md
---
Title:    Black Hole
Proposer: Peter Nightingale
Category: Games and puzzles

---

Black Hole, also known as Black Hole Patience or Black Hole Solitaire, is a one-player card game played with a standard set of 52 cards. The goal is to play all the cards into the "Black Hole" pile. Initially the black hole has one card, the ace of spades, and the remaining 51 cards are arranged in 17 fans of 3 cards.  The fans are face-up, so the value of all cards can be seen at all times. Cards are played one by one from the top of a fan into the black hole. To play a card into the black hole, the card must be adjacent in rank to the card on top of the black hole (and Ace is adjacent to King). 

Black Hole was invented by David Parlett cite{parlett}. A generalised version of Black Hole is known to be NP-Complete cite{modellingblackhole}. <a href="https://en.wikipedia.org/wiki/Black_Hole_(solitaire)">Wikipedia</a> has an illustration of the game and proportion of solvable instances.



problem 11 The name of the problem is Blocked_n-Queens_Problem.md
---
Title:    Blocked n-Queens Problem
Proposer: Ian Gent
Category: Games and puzzles
---

Overview
========

The {prob054} Problem, [prob054], suffers from the problem that its complexity is trivial as a decision problem.  
The Blocked n-Queens problems is a variant of {prob054} which has been proven to
be NP-Complete as a decision problem and #P-Complete as a counting problem.


The Blocked $n$-Queens problem is a variant where, as well as $n$, the input contains a list of squares which are blocked. A solution to the problem is a solution to the $n$-Queens problem containing no queens on any of the blocked 
squares.

The Blocked $n$-Queens problem is closely related to {prob079}, [prob079].


Instances
==========================

Python generators are available to implement the model from the paper cite{nqueenscompletion}. 
<a href="data/blocked-gen.py.html">Generator for random blocked n-Queens instances</a>

Also provided are instances from the ASP Competitions (thanks to Martin Gebser for providing these.)   Results of ASP solvers on those instances can be found at 
<a href="https://asparagus.cs.uni-potsdam.de/contest/">the 2007 ASP Competition</a> and 
<a href="https://dtai.cs.kuleuven.be/events/ASP-competition/index.shtml">the 2009 ASP Competition</a> pages.


References
==========

The Blocked $n$-Queens problem was proposed by cite{blocked-queens} and used in ASP Competitions
cite{asp-competition-07}. The problem was proved NP-Complete and #P-Complete by cite{nqueenscompletion}, and the same paper 
introduced a generator of ranodm instances.





problem 12 The name of the problem is Bookshelves.md
---
Title:    Bookshelves
Proposer: Felix Ulrich-Oltean
Category: Design and configuration
---

## The Bookshelves Problem
We are given a set of planks of wood, all of the same width and thickness but
with a variety of lengths and we are attempting to construct some bookshelves in
such a way that we can accommodate as many books as possible.  This entry is
based on a real problem of trying to make some bookshelves out of some old
skirting boards.

<a href="assets/problem-full.png"><img src="assets/problem-full.png" alt="diagram showing a basic set of bookshelves" title="Problem Illustration" style="border: thin solid #666; width: 24em; display: block; margin: 1ex auto;" /></a>


### Assumptions and restrictions:
- we use two vertical equal-length pieces for the sides of the unit and one
  piece for each shelf
- each plank may be cut zero or more times to make pieces, but two planks or
  pieces may not be joined to make a longer piece
- each shelf must allow enough vertical space for the height of a book
- the top shelf must be below the top of the vertical sides by at least the
  height of a book, i.e. the vertical sides should provide bookends for the top
  shelf
- each shelf must be of equal width

### Information given:
- thickness of planks in cm
- thickness of the cut in cm - a bit of length is lost every time we cut and
  sand down
- shelf clearance height in cm (includes height of book and space to extract
  book)
- a list of plank lengths

### Decisions or outputs required:
The decision is where to cut each plank: i.e. a (potentially) empty list of cut
points for each plank

In addition the solution should make clear:

- the number of shelves
- the width of each shelf
- the overall height of the bookshelf unit



problem 13 The name of the problem is Bus_Driver_Scheduling.md
---
Title:    Bus Driver Scheduling
Proposer: Suniel Curtis
Category: Scheduling and related problems
---

Bus driver scheduling can be formulated as a set paritioning problem. We propose 12 set partitioning problems derived from small bus driver scheduling problems. These consist of a given set of tasks (pieces of work) to cover and a large set of possible shifts, where each shift covers a subset of the tasks and has an associated cost. We must select a subset of possible shifts that covers each piece of work once and only once: this is called a partition. Further,
In the driver scheduling (unlike air crew scheduling) the main aim is to reduce the number of shifts used in the solution partition and the total cost of the partition is secondary. To simplify the problem we have made the cost of each shift the same. This means that the goal is to minimise the number of shifts.

The problems come from four different bus companies: Reading (r1 to r5a), CentreWest Ealing area (c1, c1a, c2), the former London Transport (t1 and t2). The problems have differing regulations and features (e.g. urban and short distance rural bus schedules can have very different features). Note that r1 and r1a are the same problem, but have different numbers of generated shifts. Similarly with the problems: c1, c1a and r5, r5a. Problems are presented in the same format as the set partitioning examples in ORLIB. The first line gives the number of rows (pieces of work), columns (shifts) and the minimum number of columns need for a partition. Then each line after that corresponds to one column. It starts with the cost (which is always 1 in our case) then the number of rows it covers, followed by the rows it covers.




problem 14 The name of the problem is Capacitated_Vehicle_Routing_Problem.md
---
Title:   Capacitated Vehicle Routing Problem
Proposer:
- Ã–zgÃ¼r AkgÃ¼n
Category: Logistics
---

Capacitated Vehicle Routing Problem (CVRP) is a kind of vehicle routing problem where vehicles have limited capacity.



problem 15 The name of the problem is Car_Sequencing.md
---
Title:    Car Sequencing
Proposer: Barbara Smith 
Category: Scheduling and related problems
---


A number of cars are to be produced; they are not identical, because different options are available as variants on the basic model. The assembly line has different stations which install the various options (air-conditioning, sun-roof, etc.). These stations have been designed to handle at most a certain percentage of the cars passing along the assembly line. Furthermore, the cars requiring a certain option must not be bunched together, otherwise the station will not be able to cope. Consequently, the cars must be arranged in a sequence so that the capacity of each station is never exceeded. For instance, if a particular station can only cope with at most half of the cars passing along the line, the sequence must be built so that at most 1 car in any 2 requires that option. The problem has been shown to be NP-complete (Gent 1999).

The format of the data files is as follows:

* First line: number of cars; number of options; number of classes.
* Second line: for each option, the maximum number of cars with that option in a block.
* Third line: for each option, the block size to which the maximum number refers.
* Then for each class: index no.; no. of cars in this class; for each option, whether or not this class requires it (1 or 0).

This is the example given in (Dincbas et al., ECAI88):

<pre>
10 5 6
1 2 1 2 1
2 3 3 5 5
0 1 1 0 1 1 0 
1 1 0 0 0 1 0 
2 2 0 1 0 0 1 
3 2 0 1 0 1 0 
4 2 1 0 1 0 0 
5 2 1 1 0 0 0 
</pre>

A valid sequence for this set of cars is:

<pre>
Class	Options req.
0	1 0 1 1 0
1	0 0 0 1 0
5	1 1 0 0 0
2	0 1 0 0 1
4	1 0 1 0 0
3	0 1 0 1 0
3	0 1 0 1 0
4	1 0 1 0 0
2	0 1 0 0 1
5	1 1 0 0 0
</pre>

problem 16 The name of the problem is Costas_Arrays.md
---
Title:    Costas Arrays
Proposer:
 - Serdar KadÄ±oÄŸlu
 - Ã–zgÃ¼r AkgÃ¼n
Category: Combinatorial mathematics
---

A costas array is a pattern of $n$ marks on an $n * n$ grid, one mark per row and one per column, in which the $n*(n - 1)/2$ vectors between the marks are all-different.

Such patterns are important as they provide a template for generating radar and sonar signals with ideal ambiguity functions.

A model for Costas Array Problem (CAP) is to define an array of variables $X_1,...,X_n$ which form a permutation.
For each length $l \in \\{1,...,n - 1\\}$, we add $n-l$ more variables $X^l_1$ $1,...,X^l_{n-1}$, whereby each of these variables is assigned the difference of $X_i - X_{i+l}$ for $i \in \\{1,...,n - l\\}$.
These additional variables form a difference triangle as shown in the figure below.

Each line of this difference triangle must not contain any value twice.
That is, the CAP is simply a collection of all-different constraints on $X_1,...,X_n$ and $X^l_1 ...,X^l{n-l}$ for all $l \in \\{1,...,n - 1\\}$.

![6x6 Costas Array 316254](assets/fig1.png)

Costas arrays can be constructed using the generation methods based on the theory of finite fields for infinitely many $n$.
However, there is no construction method for all $n$ and it is, e.g., unknown whether there exists a Costas Array of order 32.

The problem description was taken from cite{kadioglu2009dialectic} with small adaptations.

For a related problem, please see {prob006}.

Here is a website which contains some more information on the problem: http://datagenetics.com/blog/february22013

There was a dedicated website for the Costas Arrays Problem at www.costasarrays.org, but it doesn't seem accesible any more. It can be found on the [Wayback Machine](https://web.archive.org/web/20120206033000/http://www.costasarrays.org/).

Helmut Simonis had slides on Costas Arrays here: https://web.archive.org/web/20161130192658/http://4c.ucc.ie/~hsimonis/ELearning/costas/slides.pdf


problem 17 The name of the problem is Crossfigures.md
---
Title:    Crossfigures
Proposer: Toby Walsh
Category: Games and puzzles
---

Crossfigures are the numerical equivalent of crosswords. You have a grid and some clues with numerical answers to place on this grid. Clues come in several different forms for example: 

* Across 1: 25 across times two, 
* 2: five dozen, 
* 5: a square number, 
* 10: prime, 
* 14: 29 across times 21 down





problem 18 The name of the problem is csp.pkl


problem 19 The name of the problem is Darts_Tournament.md
---
Title:    Darts Tournament
Proposer: Toby Walsh
Category: Scheduling and related problems
---

 
Dart competitions in pubs often have prizes for the first, second, third and fourth best throwers. What is the order of play for a darts tournament involving n throwers that: 

1. identifies the best $k$ throwers (and their order); 
2. has the least number of matches thrown; 
3. has the least number of games on each of $m$ dartboards (since tournaments typically run in parallel); 
4. and is the most exciting (that is, prize winners should be discovered at the last possible minute so that everyone stays drinking beer until the end of the tournament). 


problem 20 The name of the problem is diagnosis.md
---
Title:    diagnosis
Proposer: Francisco Azevedo
Category: 
---


<p>Model-based diagnosis can be seen as taking as input a partially 
parameterized structural description of a system and a set of observations about 
that system. Its output is a set of assumptions which, together with the 
structural description, logically imply the observations, or that are consistent 
with the observations.</p>
<p>Diagnosis is usually applied to combinational digital circuits, seen as 
black-boxes where there is a set of controllable input bits but only a set of 
primary outputs is visible.</p>
<p>The problem is to find the set <i>S</i> of all (minimal) internal faults that 
explain an incorrect output vector <i>F</i> (different than the modelled, predicted, 
output vector <i>N</i>), given some input vector <i>I</i>.</p>
<p>The possible faults consider the usual <i>stuck-at </i>fault model, where faulty 
circuit gates can be either <i>stuck-at-0</i> or <i>stuck-at-1</i>, respectively outputting 
value 0 or 1 independently of the input.<br>
<br>
In the example full-adder circuit below, the single faults that explain the 
incorrect output (instead of the expected &lt;00&gt;) are <i>Gate1 stuck-at-1</i> or 
<i>Gate3 
stuck-at-1</i>.</p>
<TT>

<center>
![figure](assets/diagnosis.gif)
</center>

<p><br>
</TT>
For <i>I</i> = &lt;000&gt; and <i>F</i> = &lt;10&gt; (<i>S</i>=1,<i>C</i>=0), the diagnosis result is thus 
<i>S</i> = {{<i>Gate1</i>/1},{<i>Gate3</i>/1}} (with <i>Gate</i>/1 meaning <i>Gate stuck-at-1</i>). 
Each element of <i>S</i> is an internal malfunction (a set of faults) that is an 
explanation for the incorrect output.</p>
<p>The diagnosis problem becomes more complex when the minimal internal 
malfunction is not a single fault, but rather a set of faulty gates (double 
faults, triple faults, and so on), with complexity increasing with the 
cardinality of such set. We may also want to explicitly find (e.g.) double 
faults instead of single faults to make a problem harder.</p>



problem 21 The name of the problem is Diameter_and_Degree_Bounded_Network_Design_Problem.md
---
Title: Diameter and Degree Bounded Network Design Problem
Proposer:
    - Deepak Mehta
    - Cemalettin Ozturk
    - Luis Quesada
    - Barry O'Sullivan
Category: Network design
---

### Overview
Given an undirected graph with a set of nodes and a set of links, the Diameter and Degree Bounded  Network Design Problem (DDBNDP)  is to  select a subset of links such that  there exists a path  between each pair  of nodes whose length is bounded by a given constant,
and the degree of each node must be greater than a given constant. The  objective is to minimise the  sum of the selected links.


problem 22 The name of the problem is Diamond-free_Degree_Sequences.md
---
Title:    Diamond-free Degree Sequences
Proposer: 
    - Alice Miller
    - Patrick Prosser
Category: Combinatorial mathematics
---

Given a simple undirected graph $G = (V,E)$, where $V$ is the set of vertices and $E$ the set of undirected edges, the edge {$u,v$} is in $E$ if and only if vertex u is adjacent to vertex $v  \in G$. The graph is simple in that there are no loop edges, i.e. we have no edges of the form {$v,v$}. Each vertex $v \in V$ has a degree dv i.e. the number of edges incident on that vertex. Consequently a graph has a degree sequence $d1,...,dn$, where $d_i >= d_{i+1}$. A diamond is a set of four vertices in $V$ such that there are at least five edges between those vertices. Conversely, a graph is diamond-free if it has no diamond as an induced subgraph, i.e. for every set of four vertices the number of edges between those vertices is at most four.

In our problem we have additional properties required of the degree sequences of the graphs, in particular that the degree of each vertex is greater than zero (i.e. isolated vertices are disallowed), the degree of each vertex is modulo $3$, and the sum of the degrees is modulo $12$ (i.e. $|E|$ is modulo $6$).

The problem is then for a given value of $n$, produce all unique degree sequences $d1,...,dn$ such that

* $d_i \ge d_{i+1}$
* each degree $d_i > 0$ and $d_i$ is modulo $3$
* the sum of the degrees is modulo $12$
* there exists a simple diamond-free graph with that degree sequence

Below, as an example, is the unique degree sequence for$ n=10$ along with the adjacency matrix of a diamond-free graph with that degree sequence.

      n = 10
      6 6 3 3 3 3 3 3 3 3 

      0 0 0 0 1 1 1 1 1 1 
      0 0 0 0 1 1 1 1 1 1 
      0 0 0 0 0 0 0 1 1 1 
      0 0 0 0 1 1 1 0 0 0 
      1 1 0 1 0 0 0 0 0 0 
      1 1 0 1 0 0 0 0 0 0 
      1 1 0 1 0 0 0 0 0 0 
      1 1 1 0 0 0 0 0 0 0 
      1 1 1 0 0 0 0 0 0 0 
      1 1 1 0 0 0 0 0 0 0 


problem 23 The name of the problem is differential_diagnosis.md
---
Title:    differential diagnosis
Proposer: Francisco Azevedo
Category: 
---

When the output of some system does not correspond to its expected behaviour for  a given input, one is faced with the problem of diagnosis. We are particularly  concerned with digital circuits where only the circuits input and output may be  observed.

Given a set of possible faults, we want to differentiate them in order to find  the real one affecting the circuit. For that, we may perform pairwise  differentiations between 2 diagnoses (2 sets of faults - usually 2 single  faults) _d1_,_d2_, by generating an input vector  _Id1,d2_ that would entail an output  vector _Od1_ under diagnosis _d1_ (i.e. with faults _d1_ really present in the  circuit), and an output vector _Od2_ under diagnosis _d2_, with _Od1_ different than _Od2_. Applying such input _Id1,d2_ to the circuit, at least one of the 2 diagnoses  will be discarded by checking the output.

Differential diagnosis thus consists in finding such a differentiating test  vector, or concluding that none exists (in which case we say that the two  diagnoses are indistinguishable).
(As usual, faulty circuit gates are either _stuck-at-0 _or _stuck-at-1_,  respectively outputting value 0 or 1 independently of the input.)

In the example adder circuit below, to differentiate candidate faults _Gate1  stuck-at-1_ and _Gate3 stuck-at-1_, a possible input test vector is , since  with _Gate1 stuck-at-1_ the output would be  $(S=0,C=1)$, whereas with  _Gate3  stuck-at-1 _the output would be  (the same as without faults).

<img border="0" src="assets/ADDER.gif" width="385" height="169">

problem 24 The name of the problem is Discrete_Lot_Sizing_Problem.md
---
Title: Discrete Lot Sizing Problem
Proposer: 
    - Vinasetan Ratheil Houndji
    - Pierre Schaus 
    - Laurence Wolsey
    - Yves Deville
Category: Scheduling and related problems
---

Discrete Lot Sizing and Scheduling Problem (DLSP) is a production planning problem which consists of determining a minimal cost production schedule (production costs, setup
costs, changeover costs, stocking costs, etc.), such that machine capacity restrictions are not violated, and demand for all products is satisfied. The planning horizon is
discrete and finite. 

The variant described here is the one used for experiments in [The StockingCost Constraint](data/stockingCostConstraint.pdf).

It is a multi-item, single machine problem with capacity of production limited to one per period. 
There are storage costs and sequence-dependent changeover costs, respecting the triangle inequality. 
Each order consisting of one unit of a particular item has a due date and must be produced at latest by its due date. 
The stocking (inventory) cost of an order is proportional to the number of periods between the due date and the production period. 
The changeover cost $q^{i,j}$ is induced when passing from the production of item $i$ to another one $j$ with $q^{i,i} = 0, \forall i$. Here, backlogging is not allowed. 
The objective is to assign a production period for each order respecting its due date and the machine capacity constraint so as to minimize the sum of stocking costs and
changeover costs.

Example : 
Consider the problem with the following input data: number of items type $nbItems = 2$; number of periods $nbPeriods = 5$; stocking cost $h= 2$; demand times for items of type
1 $d^1_{t \in \{1,\ldots,5\}} = (0, 1, 0, 0, 1)$ and for items of type 2 $d^2_{t \in \{1,\ldots,5\}} = (1, 0, 0, 0, 1)$; $q^{1,2} = 5$, $q^{2,1} = 3$. 
A feasible solution of this problem is $productionPlan = (2, 1, 2, 0, 1)$ which means that item $2$ will be produced in period $1$; 
item $1$ in period $2$; item $2$ in period $3$ and item $1$ in period $5$. 
Note that there is no production in period $4$, it is an idle period. 
The cost associated to this solution is $q^{2,1}+q^{1,2}+q^{2,1}+2*h = 15$ but it is not the optimal cost. 
The optimal solution is $productionPlan = (2,1,0,1,2)$ with the cost $q^{2,1}+q^{1,2}+h= 10$.

---

A [Simulated Annealing metaheuristic approach](https://doi.org/10.1016/j.cie.2017.10.017) along with a dataset of [large-size instances](data/UniUD-LotSizingLargeInstances.zip) has been developed by Sara Ceschia, Luca Di Gaspero and Andrea Schaerf. An online web solution checker and solution repository is available at [https://opthub.uniud.it/problem/lsp](https://opthub.uniud.it/problem/lsp).

problem 25 The name of the problem is Distance-Based_Constrained_Clustering.md
---
Title:    Distance-Based Constrained Clustering
Proposer: Thi-Bich-Hanh Dao
Category: Clustering
---

Cluster Analysis is a Data Mining task that aims at partitioning a given set of objects into clusters,
such that the objects inside the same cluster
are similar, while being different from the objects belonging to other clusters. We consider a dataset of  objects and a dissimilarity measure between any two objects.
The homogeneity of the cluster is usually expressed by an optimization criterion, which can be among other:

* Maximizing the minimal split between clusters, the minimal split between clusters is the 
smallest dissimilarity between two objects of different clusters;
* Minimizing the maximal diameter of clusters, the maximal diameter is the largest dissimilarity 
between two objects in the same cluster;
* Minimizing the within-cluster sum of dissimilarities;
* Minimizing the within-cluster sum of squares:  in a Euclidean space
the within-cluster sum of squares is the sum of the squared Euclidean distances between each object 
and the centroid of the cluster containing the object.
* etc.

User previous knowledge can be integrated to clustering, which leads to Constrained Clustering. User constraints can be instance-level constraints or cluster-level constraints. Instance-level constraints are must-link or cannot-link constraints, which state that two objects must be or cannot be in the same cluster. Cluster-level constraints state requirements on the size, the diameter, the density, etc. of the clusters.
All of the criteria except the split one are NP-Hard. The split criterion which is polynomial becomes NP-Hard with user constraints.



problem 26 The name of the problem is Distributed_Channel_Assignment_Problem.md
---
Title:  Distributed Channel Assignment Problem
Proposer: Ferdinando Fioretto
Category: 
	- Distributed CSP/COP
---

### Overview

The performance of a wireless local area network (WLAN) depends on the channel assignments among neighboring access points (APs). Neighboring transmissions occurring in APs on the same channel or adjacent channels degrade network performance due to transmission interference. Typically, in dense urban areas, APs may belong to different administrative domains, whose control are delegated to different entities. Thus, a distributed approach to the channel assignment is often necessary.

### Distributed COP Formulation

In a cooperative distributed channel assignment problem (DCA), APs need to be configured in order to reduce the overall interference between simultaneous transmissions on neighboring channels. In a distributed COP based approach each AP is represented by an agent, which controls a decision variable modeling a choice for the AP channel. The signal-to-interference-and-noise ratio (SINR) perceived by an AP is modeled as a cost function, as the overall concurrent transmissions occurring in the same channel and in partially overlapped adjacent channels. The constraint graph $G=(V,E)$ of the problem defines the interfering neighbors, where $V$ represents the APs, and $E$ describes the set of interfering APs.  
<!--These can be computed using the receive signal strength indicator (RSSI) cite{monteiro:12}.-->
The goal is to find an assignment of channels to APs that minimizes the sum of the interferences experienced in the WLAN, at the APs.

*The general definition of the DCA problem is as follows:*

- A set $A$ of $p$ APs.
- A set $X$ of $p$ AP's channels choices.
- Each channel choice $c_i \in X$ represents the channel selection number of the AP $a_i \in A$. 
- The domain of $D_i$ of $c_i$ is the set {$1, 2, \ldots, 11$}, describing the possible channels choices.
- For a given pair of APs $a_i$ and $a_j$, such that there exists an edge $(c_i, c_j) \in E$, the SINR function is defined as $s_{ij} : D_i \times D_j \to \mathbb{R}$ which represent the interference overlap factors summarized in the following Table.

|   $D_i$ \ $D_j$      | 0              | 1               | 2             | 3              | 4              | 5              | 6              | 7             | 8              | 9              | 10            | 11           | 
|         | :---:           | :---:          | :---:          | :---:           | :---:          | :---:          | :---:          | :---:          | :---:           | :---:          | :---:          | :---:          | 
| $0$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ | $0$          | $0$          | $0$          | $0$          | $0$          |
| $1$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ | $0$          | $0$          | $0$          | $0$          | 
| $2$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ | $0$          | $0$          | $0$          | 
| $3$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ | $0$          | $0$          |
| $4$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ | $0$          |
| $5$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ | $0.0002$ |
| $6$ | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ | $0.0008$ |
| $7$ | $0$          | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ | $0.0054$ |
| $8$ | $0$          | $0$          | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ | $0.0375$ |
| $9$ | $0$          | $0$          | $0$          | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ | $0.2714$ |
| $10$ | $0$        | $0$          | $0$          | $0$          | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$          | $0.7272$ |
| $11$ | $0$        | $0$        | $0$          | $0$          | $0$          | $0.0002$ | $0.0008$ | $0.0054$ | $0.0375$ | $0.2714$ | $0.7272$ | $1$            |


The above Table illustrates the normalized values of the spectrum overlapping factors. Detailed information on how these values are derived can be found in cite{monteiro:12}.
<!--
| Channel Spacing | Overlapping Factor |
| :-----: | :------: | 
| $0$   | $1$    | 
| $1$   | $0.7272$  | 
| $2$   | $0.2714$  | 
| $3$   | $0.0375$  | 
| $4$   | $0.0054$  | 
| $5$   | $0.0008$  | 
| $6$   | $0.0002$  | 
| $7-10$   | $0$ |
-->

problem 27 The name of the problem is Energy-Cost_Aware_Scheduling.md
---
Title:    Energy-Cost Aware Scheduling
Proposer:
	- Helmut Simonis
	- Barry Oâ€™Sullivan
	- Deepak Mehta
	- Barry Hurley
	- Milan De Cauwer
Category: Scheduling and related problems
---

You are running a cloud computing service, where customers contract to run
computing services (tasks). Each task has a duration, an earliest start and
latest end, and resource requirements expressed as integer values for CPU,
Memory and I/O attributes. The tasks can be scheduled on one of multiple
servers, each server has a limited capacity for the CPU, memory and I/O
attributes. Multiple tasks can run concurrently on the same machine if the total
resource consumption for all attributes is below the respective capacity. All
tasks must be scheduled within their release and due dates, these dates are set
so that no task stretches over midnight between two days. Tasks can not be
interrupted, once started, they must run for their given duration.

If a machine is used by a task, it must be running at that time. In addition to
the cost of running the allocated tasks, the machine consumes some idle power if
it is on. Every time a machine is switched on or off, a start-up resp. shut-down
cost must be paid. All machines are off at the beginning of the planning period,
all machines must be off at the end of the planning period.

The price of electricity for the data centre is a real-time price, and varies
throughout the day. The actual price is not known in advance, a forecast must be
used to generate a schedule. The total cost of the schedule is determined after
the fact by applying the actual price of electricity to the energy consumption
in each time period. An example of the discrepancy between the forecast and
actual price is shown in the Figure below. The objective is to generate a
schedule with the lowest total cost.

![Energy price data from the Irish electricity market for a sample one-week period.](assets/forecastvactuals_0.png)

This was the subject of the ICON Challenge 2014, a [full formal description is available](assets/iconchallenge.pdf).


problem 28 The name of the problem is Equidistant_Frequency_Permutation_Arrays.md
---
Title: Equidistant Frequency Permutation Arrays
Proposer: Peter Nightingale
Category: Combinatorial mathematics
---

Informally, the problem is to find a set (optionally of maximal size) of codewords, such
that any pair of codewords are Hamming distance $d$ apart. Each codeword (which may
be considered as a sequence) is made up of symbols from the alphabet $\\{1, \ldots, q\\}$, with
each symbol occurring a fixed number $\lambda$ of times per codeword.

More precisely, the problem has parameters $v$, $q$, $\lambda$, $d$ and it is to find a set $E$ of size $v$, of sequences
of length $q\lambda$, such that each sequence contains $\lambda$ of each symbol in the set $\\{1, \ldots, q\\}$.
For each pair of sequences in $E$, the pair are Hamming distance $d$ apart (i.e. there are $d$
places where the sequences disagree). 

For the parameters $v=5$, $q=3$, $\lambda =2$, $d=4$, the 
following table shows a set $E=\\{c_1, c_2, c_3, c_4, c_5 \\}$.

Symbol  | Codeword
------  | --------
$c_1$ | 0 0 1 1 2 2
$c_2$ | 0 1 0 2 1 2
$c_3$ | 0 1 2 0 2 1
$c_4$ | 0 2 1 2 0 1
$c_5$ | 0 2 2 1 1 0






problem 29 The name of the problem is Extremal_Graphs_with_Small_Girth.md
---
Title:    Extremal Graphs with Small Girth
Proposer: 
    - Michael Codish
    - Alice Miller
    - Patrick Prosser
    - Peter Stuckey
Category: Combinatorial mathematics
---


Given a simple undirected graph $G = (V,E)$, where $V$ is the set of vertices and $E$ the set of undirected edges, the edge {$u,v$} is in $E$ if and only if vertex $u$ is adjacent to vertex $v$ in $G$. The graph is simple in that there are no loop edges, i.e. we have no edges of the form {$v,v$}.

The order ($m$) of a graph is the number of vertices in that graph and the size ($n$) is the number of edges. The girth ($k$) is the length of the smallest cycle contained in the graph.

Let $fk(m)$ denote the maximum number of edges in a graph with m vertices and girth greater than $k$ (i.e. with no cycles of length $k$ or less). The number of non-isomorphic extremal graphs with m vertices and $fk(m)$ edges is denoted $Fk(m)$.

The problem is then, for given values of $m$ and $k$, find $fk(m)$ and additionally to find $Fk(m)$. That is, what is the maximal number of edges in a graph with m vertices and girth greater than $k$ and how many such unique graphs are there?

problem 30 The name of the problem is Fixed_Length_Error_Correcting_Codes.md
---
Title:    Fixed Length Error Correcting Codes
Proposer: 
    - Alan Frisch
    - Chris Jefferson
    - Ian Miguel
Category: 
    - Design and configuration
    - Combinatorial mathematics
---

A fixed length error correcting code C of length $n$ over an alphabet $F$
is a set of strings from $F^n$. Given two strings from $F^n$
we can define the distance between them. The most commonly used
distance is the Hamming distance, defined as the number of positions
where the strings differ. Using this we define the minimum distance of
C as the minimum of the distances between distinct pairs of strings
from C.

There are a number of other distances which can be used, for example
the 'Lee distance'. When $F=\\{0,1,...,n-1\\}$ the Lee distance between
$a$,$b$ in $F$ is defined as $\min(|a-b|,n-|a-b|)$. For two vectors $x$
and $y$ defined over $F^n$, the Lee distance is calculated by
summing the lee distance of the pairs $x_i$, $y_i$.
Most commonly $F=\\{0,1,2,3\\}$ as this case proves useful in a number
of areas.

problem 31 The name of the problem is Generalised_Balanced_Academic_Curriculum_Problem.md
---
Title:    Generalised Balanced Academic Curriculum Problem
Proposer: Jean-NoÃ«l Monette
Category: Scheduling and related problems
---


This is a generalisation of the {prob030} proposed by [Marco Chiarandini](https://imada.sdu.dk/~marco/), [Luca Di Gaspero](http://www.diegm.uniud.it/digaspero/), [Stefano Gualandi](http://matematica.unipv.it/gualandi/), and [Andrea Schaerf](http://www.dpia.uniud.it/schaerf/index.php) at University of Udine .

With respect to the BACP, the GBACP adds:

* several curricula that can share courses
* soft constraints, in particular for teacher preferences for not teaching during some terms.

The detailed description, data, best results, and a solution validator can be found at <https://opthub.uniud.it/problem/timetabling/gbac>.


problem 32 The name of the problem is Golomb_rulers.md
---
Title:    Golomb rulers
Proposer: Peter van Beek
Category: Combinatorial mathematics
---

These problems are said to have many practical applications including sensor placements for x-ray crystallography and radio astronomy. A Golomb ruler may be defined as a set of $m$ integers $0 = a_1 < a_2 < ... < a_m$ such that the $m(m-1)/2$ differences $a_j - a_i, 1 <= i < j <= m$ are distinct. Such a ruler is said to contain m marks and is of length $a_m$. The objective is to find optimal (minimum length) or near optimal rulers. Note that a symmetry can be removed by adding the constraint that $a_2 - a_1 < a_m - a_{m-1}$, the first difference is less than the last.

There is no requirement that a Golomb ruler measures all distances up to its length - the only requirement is that each distance is only measured in one way. However, if a ruler does measure all distances, it is classified as a *perfect* Golomb ruler.

There exist several interesting generalizations of the problem which have received attention like modular Golomb rulers (differences are all distinct mod a given base), disjoint Golomb rulers, Golomb rectangles (the 2-dimensional generalization of Golomb rulers), and difference triangle sets (sets of rulers with no common difference).

For a related problem, please see {prob076}.

Here is a website which contains some more information on the problem: http://datagenetics.com/blog/february22013


problem 33 The name of the problem is Graceful_Graphs.md
---
Title:    Graceful Graphs
Proposer: Karen Petrie
Category: Combinatorial mathematics
---


A labelling $f$ of the nodes of a graph with $q$ edges is graceful if $f$ assigns each
node a unique label from $\{0, 1, \ldots , q\}$ and when each edge $xy$ is labelled with
$|f(x)-f(y)|$, the edge labels are all different. Gallian surveys graceful graphs, i.e. graphs with a graceful labelling, and lists the
graphs whose status is known.

<center>
<figure>
  <img src="assets/k4.png" alt="solution to $K_4$ " height="300">
  <figcaption>A graceful labelling of $K_4$ </figcaption>
</figure>
</center>

{prob007} is a special case of a graceful graph where the graph is a line.


problem 34 The name of the problem is Interview_Assignment_Problem.md
---
Title:    Interview Assignment Problem
Proposer: Helmut Simonis
Category: TimeTabling
---

This problem was used for the programming competition of the ACP
Summer School 2016 in Cork. The problem was defined in multiple
stages, adding constraints and problem data as the competition
progressed.

This is a totally made-up problem. None of the companies mentioned
  have been contacted, there are no interviews that will be arranged. Sorry! But there are conferences which run
  such a scheme, as well as some universities. The companies mentioned
  are interested in Constraint Programming, many are sponsoring the CP
  2016 conference, or have participants in the ACP Summer School.

#Initial Problem Statement

You have been asked to provide a tool that helps match students to companies in
an interview session at the next major Constraint Programming conference. A
number of companies have expressed interest in participating, there are currently
15 companies in the scheme.

Each student from set $S$ can express a preference to interview with each
company, with values ranging from 1 (very interested) to 5 (not at all interested).
We provide a comma separated text file that shows the answers that have been
collected through a Google Forms document (`test.csv`).
Each student should have three interviews during the conference, with different companies. The companies have expressed limits on how many interviews
they want to perform during the conference.
We want to find an assignment of students to companies that stays within
the capacity limits for each company, while providing the best match to the
student preferences. Overall quality will be measured by two quality
indicators:

1. If the preference of student $i$ for company $j$ is $p_{ij}$ , and the three companies selected for student $i$ are $s_{ik}$ with $k \in \[1, 3\]$, the first overall quality
  indicator is the sum of the preferences for the selected assignments,
  i.e. $\sum_{i \in S} \sum_{k=1}^{3} p_{is_{ik}}$ . We want to minimize this sum.

2. We do not want to have a solution that satisfies all preferences for some
  students, but not for others. As a secondary criterion, we want to minimize the maximum of the total preference costs per student, adding the
  preference values for their assignments, i.e. $\min \max_{i \in S}
  \sum_{k=1}^{3} p_{is_{ik}}$  .
  
The capacities for the companies are given in Table 1.


|Nr | Company | Capacity |
|---|---|---:|
|1 |AIMMS |5|
|2 |SAS |5|
|3 |Keelvar |3|
|4 |Microsoft |10|
|5 |Google |10|
|6 |IBM |10|
|7 |Cadence |5|
|8 |Quintiq |10|
|9 |Siemens |10|
|10 |Cosling |3|
|11 |COSYTEC |3|
|12 |LocalSolver |3|
|13 |N-side |3|
|14 |UTRC-I |5|
|15 |Zoomer |5|

#Updated Problem (Day 2)
More students are signing up to the process, there is now an updated
file `test2.csv` with a larger number of participating students.

In the data yesterday there were some students that had only negative
preferences (5,...,5). This made it impossible to optimize the second
criterion on balancing the assignment between students. As a first
change we reduce the number of interviews to the minimum of three and
the number of preferences given with a value less than 4. If a student
only assigns preference value five, then no interviews should be scheduled. If
a student only gives two preferences of value three or better, then
only two interviews should be scheduled for the student.

Today, we also change the objective:

We first want to minimize the maximum *regret* over all students. This is
the difference between the sum of the assigned preferences, and the
three best indicated preferences. If a student had stated two preferences
with cost one, and two with cost two, the best three choices have value
four (1+1+2). If he is assigned to one interview with preference one, and two
with preference two, then the assigned cost is five (1+2+2), a resulting
regret of value 1. Minimizing the maximal regret is the highest
priority, and then the total cost (sum of all assigned preferences)
should be minimized as secondary criterion.

The companies have replied to the increased demand by also increasing
the number of slots available. But they are worried that not enough
student are assigned to their interviews, and they wont participate if
less than half of their slots are taken. This leads to two scenarios:

1. We can assign no students to a company, and incur a disappointment
  cost $d_{j}$ for the company. 
2. The number of students assigned is between a given lower and an
  upper bound. In this case the company is happy without extra cost.


For companies $j$, they should either be assigned no student,
at a disappointment cost $d_{j}$, or be assigned at least a given
minimum number of students $l_{j}$, and at most a maximum number
$u_{j}$ so that they are satisfied. The data for the companies is
given in Table 2.

|Nr |Company | Disappointment Cost | Min Assignment|Max Assignment |
|---|---|---:|---:|---:|
|1 |AIMMS | 10 |5 | 10|
|2 | SAS | 10 | 5 |10|
|3 |Keelvar | 10 | 3 |6|
|4 |Microsoft |10 | 10 | 20|
|5 |Google |20 | 10 | 20|
|6 |IBM |10 | 10 | 20|
|7 |Cadence | 5 | 5 |10|
|8 |Quintiq | 10 | 10 | 20|
|9 |Siemens |10 | 10 | 20|
|10 |Cosling |5 | 3 |6 |
|11 |COSYTEC | 5| 3 |6|
|12 |LocalSolver |5 | 3|6|
|13 |N-side |5 | 3 | 6|
|14 |UTRC-I |5 | 5 |10|
|15 |Zoomer | 5 | 5 |10|

#Updated Problem (Day 3)

The interview assignment process seems to be working fine, but the
conference organizers see a problem with the scheduling of the
interviews. The conference is run over five days (Mon-Fri), with four
time periods on each day. The sessions are numbered from 1 (Monday, early
morning), to 20 (Friday, late afternoon). The students can indicate five of these
twenty slots, when they are available for interviews. They are not
available during any other period.  Otherwise the
conference organizers are worried that nobody will attend the talks of
the conference. 

|              | Mon | Tue | Wed | Thu | Fri |
|---|---:|---:|---:|---:|---:|
|AM Early | 1 | 5 | 9 | 13 | 17 |
|AM Late | 2 | 6 | 10 | 14 | 18 |
|PM Early | 3 | 7 | 11 | 15 | 19 |
|PM Late | 4 | 8 | 12 | 16 | 20 |


Students can only have one interview during one session, so their
three interviews will occupy three of their five time slots. Companies
can perform two interviews in one session. All interviews are
scheduled in a set of suites, with each suite costing 200 units per
week. Using a small number of suites is a good idea, as if even just
one
interview is scheduled in a suite, then the complete weekly rate has
to be paid. Of course, each suite can hold only one interview at a
time. There are at most 12 suites available.

If an
interview of a company is scheduled in a period, then the company
representative has to attend the conference for that day. Indeed, the
company has to pay for all days between their earliest and the latest
interview. If for example the first interview is in session 7 (Tue), and the
latest interview in session 18 (Fri), then the company has to attend for
four days (Tue, Wed, Thu, Fri), even if no interviews for them are
scheduled on the Thursday. It therefore pays to group all interviews
for a company together. The daily rate varies with each company, and
is given in the company data below.

As the best solution yesterday allowed for a maximum of one regret only, this is
now imposed as a hard constraint, so the maximal preference regret for
each student is one. As all companies could be satisfied in yesterday's
optimal solution, we now have
to plan for all companies getting between their lower and their upper
bound of interviews, we can no longer disappoint them.

The objective now consists of the sum of the preference cost for the students,
the attendance cost for the companies, and the rental cost for the
interview suites. Using more suites might decrease the number of days
that the companies have to attend, as more interviews can be performed
in parallel, but increases the rental fee.

## Data Format

The time slots for the students are given in a new file
`slots.csv`, which on each line, lists the possible five time slots
for each student.

```
StudentNr,slot1,slot2,slot3,slot4,slot5
1,3,5,9,13,17
...
```

The cost of attendance for each company is given is
Table 4, which is otherwise unchanged.

|Nr |Company | DisappointmentCost |Min Assignment | Max Assignment |Attendance Cost|
|---|---|---:|---:|---:|---:|
|1 |AIMMS | 10 |5 | 10 | 20|
|2 | SAS | 10 | 5 |10 | 20|
|3 |Keelvar | 10 | 3 |6 | 10|
|4 |Microsoft |10 | 10 | 20| 30|
|5 |Google |20 | 10 | 20| 30|
|6 |IBM |10 | 10 | 20 | 30|
|7 |Cadence | 5 | 5 |10| 10|
|8 |Quintiq | 10 | 10 | 20 | 10|
|9 |Siemens |10 | 10 | 20 | 20|
|10 |Cosling |5 | 3 |6  | 5|
|11 |COSYTEC | 5| 3 |6 | 5|
|12 |LocalSolver |5 | 3|6 | 5|
|13 |N-side |5 | 3 | 6 | 5|
|14 |UTRC-I |5 | 5 |10| 10|
|15 |Zoomer | 5 | 5 |10 | 10|

# Updated Problem (Day 4)

Success! People have heard about your assignment tool, and want to use
it for their next conference. You can be proud of your modelling
skills! There is only a small problem: This is for a major conference,
with 15 companies participating, and up to 400 students that should be
assigned. The corresponding preference file is `testNNN.csv`, the slot
data are given in `slotsNNN.csv`,
and the company data are in a file `companyNNN.csv`.

The file `companyNNN.csv` contains the company specific data in
a .csv file. We've added a field to tell how many interviews the
company can perform in parallel in each session. The data from
yesterday are in the file `company.csv` shown in Table 5. The disappointment value
is not used.


|Company|Disappointment|Lower|Upper|DailyRate|Parallel|
|---|---:|---:|---:|---:|---:|
|AIMMS|10|5|10|20|2|
|SAS|10|5|10|20|2|
|Keelvar|10|3|6|10|2|
|Microsoft|10|10|20|30|2|
|Google|20|10|20|30|2|
|IBM|10|10|20|30|2|
|Cadence|5|5|10|10|2|
|Quintiq|10|10|20|10|2|
|Siemens|10|10|20|20|2|
|Cosling|5|3|6|5|2|
|COSYTEC|5|3|6|5|2|
|LocalSolver|5|3|6|5|2|
|N-side|5|3|6|5|2|
|UTRC-I|5|5|10|10|2|
|Zoomer|5|5|10|10|2|


The new datasets are given in Table 6.


|Preferences | Slots | Company |
|--|--|--|
|test2.csv | slots.csv | company2.csv |
|test100.csv | slots100.csv | company100.csv |
|test200.csv | slots200.csv | company200.csv |
|test400.csv | slots400.csv | company400.csv |


We also may need more than 12 suites to schedule all the interviews.

Can you still provide a good assignment?



problem 35 The name of the problem is Killer_Sudoku.md
---
Title: Killer Sudoku
Proposer: Peter Nightingale
Category: Games and puzzles
---

Killer Sudoku is a puzzle played on a $\\{9\times 9\\}$ grid containing 81 cells. 
The cells are filled in with numbers from the set $\\{1\ldots 9\\}$.
Each row and column must contain all numbers $\\{1\ldots 9\\}$. Each of the 9
non-overlapping $3\times 3$ subsquares (named *boxes*) must also contain all numbers $\\{1\ldots 9\\}$.

Each Killer Sudoku puzzle has a set of *cages*. A cage is a set of contiguous cells
and a total; the numbers in the cells must add up to the total. Also, the cells in
a cage cannot contain the same number more than once. The cages do not overlap, 
and they cover all cells. Cages typically contain two to four cells. 
Typically a Killer Sudoku puzzle will have exactly one solution. 

An example Killer Sudoku puzzle is shown below. Each cage is shown as an area of one colour.

<center>
<figure>
  <img src="assets/Killersudoku_color.svg" alt="Killer Sudoku Puzzle">
  <figcaption>A Killer Sudoku Puzzle (public domain image from Wikipedia)</figcaption>
</figure>
</center>

The solution of the above puzzle is shown below. 

<center>
<figure>
  <img src="assets/Killersudoku_color_solution.svg" alt="Killer Sudoku Puzzle Solution">
  <figcaption>A Killer Sudoku Puzzle Solution (public domain image from Wikipedia)</figcaption>
</figure>
</center>


Generalisation to $n \times n$ grids
------

There is a straightforward generalisation of Killer Sudoku. For any $n$ that has
an integer square root, we have an $n \times n$ grid and each cell takes any
value in $\\{1\ldots n\\}$. In a solution each row and column contains all numbers $\\{1\ldots n\\}$,
and the $n$ non-overlapping $\sqrt{n} \times \sqrt{n}$ boxes also contain all
numbers $\\{1\ldots n\\}$. Cages function in the same way in the generalised 
problem as in the $\\{9\times 9\\}$ problem. 



problem 36 The name of the problem is Knapsack_Problem.md
---
Title:    Knapsack Problem
Proposer: Ã–zgÃ¼r AkgÃ¼n
Category: Combinatorial mathematics
---

The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a mass and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items.

Also see: https://en.wikipedia.org/wiki/Knapsack_problem


problem 37 The name of the problem is Lam_s_Problem.md
---
Title:    Lam's Problem
Proposer: Toby Walsh
Category: 
    - Combinatorial mathematics
    - Games and puzzles
---

Consider a 111 by 111 binary matrix. The goal is to put 11 zeros in
each row in such a way that each column has 11 zeros, and each pair of
rows must have exactly one zero in the same column.

This problem is equivalent to finding a projective plane of order
10. It is also equivalent to the <111,111,11,11,1> BIBD problem {prob028}.


problem 38 The name of the problem is Langford_s_number_problem.md
---
Title:    Langford's number problem
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


Consider two sets of the numbers from 1 to 4. The problem is to arrange  the eight numbers in the two sets into a single sequence in which the two 1's appear one number apart, the two 2's appear two numbers apart, the two 3's appear three numbers apart, and the two 4's appear four numbers apart.

The problem generalizes to the L($k$,$n$) problem, which is to arrange
$k$ sets of numbers 1 to $n$, so that each appearance of the number
$m$ is $m$ numbers on from the last. For example, the L(3,9) problem
is to arrange 3 sets of the numbers 1 to 9 so that the first two 1's
and the second two 1's appear one number apart, the first two 2's and
the second two 2's appear two numbers apart, etc.

A graphical representation of L(2,4), with black=1, red=2, blue=3 and
yellow=4 is given below.

![](assets/langford.gif)

problem 39 The name of the problem is Low_Autocorrelation_Binary_Sequences.md
---
Title:    Low Autocorrelation Binary Sequences
Proposer: Toby Walsh
Category: Combinatorial mathematics
---

These problems have many practical applications in communications and electrical engineering. The objective is to construct a binary sequence $S_i$ of length n that minimizes the autocorrelations between bits. Each bit in the sequence takes the value +1 or -1. With non-periodic (or open) boundary conditions, the k-th autocorrelation,  $C_k$ is defined to be $\sum\limits_{i=0}^{n-k-1} S_i * S_{i+k}$. With periodic (or cyclic) boundary conditions, the k-th autocorrelation, $C_k$ is defined to be $\sum\limits_{i=0}^{n-1} s_i * s_{i+k\ mod\ n } $. The aim is to minimize the sum of the squares of these autocorrelations. That is, to minimize $E=\sum\limits_{k=1}^{n-1} C_k^2$.


problem 40 The name of the problem is Magic_Hexagon.md
---
Title:    Magic Hexagon
Proposer: Toby Walsh
Category:
 - Design and configuration
 - Combinatorial mathematics
 - Games and puzzles
---

A magic hexagon consists of the numbers 1 to 19 arranged in a hexagonal pattern:

<center><pre>
A,B,C
D,E,F,G
H,I,J,K,L
M,N,O,P
Q,R,S
</pre></center>

We have a constraint that all diagonals sum to 38. That is,

<pre>
A+B+C = D+E+F+G = ... = Q+R+S = 38,
A+D+H = B+E+I+M = ... = L+P+S = 38,
C+G+L = B+F+K+P = ... = H+M+Q = 38.
</pre>

The problem can be generalized to other sizes. This is the diameter 5 problem.

<center>
![Magic Hexagon](assets/magic.jpg)
</center>



problem 41 The name of the problem is Magic_Squares_and_Sequences.md
---
Title:    Magic Squares and Sequences
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


An order $n$ magic square is a $n$ by $n$ matrix containing the numbers $1$
to $n^2$, with each row, column and main diagonal equal the same
sum. As well as finding magic squares, we are interested in the number
of a given size that exist.  There are several interesting
variations. For example, we may insist on certain values in certain
squares (like in quasigroup completion) and ask if the magic square
can be completed. In a heterosquare, each row, column and diagonal
sums to a different value. In an anti-magic square, the row, column
and diagonal sums form a sequence of consecutive integers.

A magic sequence of length $n$ is a sequence of integers $x_0 \ldots
x_{n-1}$ between $0$ and $n-1$, such that for all $i$ in $0$ to $n-1$,
the number $i$ occurs exactly $x_i$ times in the sequence. For instance,
$6,2,1,0,0,0,1,0,0,0$ is a magic sequence since $0$ occurs $6$ times
in it, $1$ occurs twice, etc.



problem 42 The name of the problem is Maximum_Clique.md
---
Title:    Maximum Clique
Proposer: Ciaran McCreesh
Category: Combinatorial mathematics
---

Given a simple undirected graph $G = (V,E)$, where $V$ is the set of vertices
and $E$ the set of undirected edges, a clique is a subset of $V$ such that each
distinct pair of vertices in this subset are adjacent. The maximum clique
problem is to find a clique of largest cardinality within a given graph. (The
related clique enumeration problem is to enumerate all maximal cliques---that
is, cliques which cannot be extended by adding an additional vertex.)

The second DIMACS implementation challenge studied this problem, and provided a
standard set of benchmark instances in a simple file format. These instances
are of varying size and difficulty: some should be trivial, but a few are still
open. A simple example of a file is:

<pre>
c Lines that start with a c are comments. There is one line at the start
c which starts with either "p edge" or "p col", followed by the number of
c vertices and the (possibly incorrect) number of edges. The e lines each
c describe an edge. Some files have blank lines.
p edge 5 6
e 1 2
e 2 3
e 3 4
e 4 1
e 3 5
e 4 5
</pre>

This describes a graph with 5 vertices (which are numbered 1 to 5) and 6 edges.
The edges number is *not reliable* and should be ignored. Some instances
include (some) edges in both directions, whilst others do not. Some files
contain loops (vertices adjacent to themselves), which should be ignored for
the clique problem.

The maximum clique in this file has size 3, with vertices 3, 4 and 5.

Other datasets are available, also using this format.

The maximum clique problem is equivalent to the maximum independent set problem
and the vertex cover problem. It is also used as an intermediate step in
solving the maximum common subgraph problem.


problem 43 The name of the problem is Maximum_density_still_life.md
---
Title:    Maximum density still life
Proposer: Barbara Smith
Category: Games and puzzles
---

This problem arises from the Game of Life, invented by John Horton Conway in the 1960s and popularized by Martin Gardner in his
Scientific American columns.

Life is played on a squared board, considered to extend to infinity in all directions. Each square of the board is a cell, which at any time during the game is either alive or dead. A cell has eight neighbours:

<center>
![Magic Hexagon](assets/neighbours.jpg)
</center>

The configuration of live and dead cells at time *t* leads to a new configuration at time *t+1* according to the rules of the game:

- if a cell has exactly three living neighbours at time *t*, it is alive at time *t+1*
- if a cell has exactly two living neighbours at time *t* it is in the same state at time *t+1* as it was at time *t*
- otherwise, the cell is dead at time *t+1*

A stable pattern, or *still-life*, is not changed by these rules. Hence, every cell that has exactly three live neighbours is alive, and every cell that has fewer than two or more than three live neighbours is dead. (An empty board is a still-life, for instance.)

What is the densest possible still-life pattern, i.e. the pattern with the largest number of live cells, that can be fitted into an *n* x *n* section of the board, with all the rest of the board dead?


(Note that another definition of a still-life requires the pattern to be a single *object* - see for instance [Mark Niemiec's Definitions of Life Terms](https://conwaylife.com/ref/mniemiec/lifeterm.htm) page.
On this definition, the 8 x 8 pattern below is a *pseudo still-life*.)

### Examples of  optimal solutions

A 3 x 3 still-life with 6 live cells and an 8 x 8 still-life with 36 live cells.

<center>
![Life 3](assets/life3.jpg)

![Life 8](assets/life8.jpg)
</center>


problem 44 The name of the problem is Meeting_Scheduling.md
---
Title: Meeting Scheduling   
Proposer:
    - Uri Shapen
    - Roie Zivan
    - Amnon Meisels
Category:
    - Distributed CSP/COP
    - Scheduling and related problems
---

Meeting scheduling is a well-known, recurrent and easily described problem.
The meeting scheduling problem (MSP) will be described below as a centralistic
constraints satisfaction problem (CSP).

However, one of its most interesting features is the fact that it is a
Distributed CSP. Informally, a set of agents want to meet and they search for
a feasible meeting time that satisfies the private constraints of each of the
agents and in addition satisfies arrival-time constraints
(among different meetings of the same agent).

*The general definition of the MSP family is as follows:*

- A group $S$ of $m$ agents
- A set $T$ of $n$ meetings
- The duration of each meeting $m_i$ is $\rm{duration}_i$
- Each meeting $m_i$ is associated with a set $s_i$ of agents in $S$, that attend it
- Consequently, each agent has a set of meetings that it must attend
- Each meeting is associated with a location
- The scheduled time-slots for meetings in $T$ must enable the participating
agents to travel among their meetings

The table below presents an example of a MSP, including the traveling time
in time-units (say, hours) between different meeting locations.


| Meeting | Location | Attending agents |
| :-----: | :------: | :--------------: |
| $m_1$   | $L_1$    | $A_1, A_3$       |
| $m_2$   | $L_2$    | $A_2, A_3, A_4$  |
| $m_3$   | $L_3$    | $A_1, A_4$       |
| $m_4$   | $L_4$    | $A_1, A_2$       |

The distances (in time-slots) between the meetings are described by the
following:

<CENTER>
<IMG SRC="./assets/Distances.jpg" ALIGN=bottom
      WIDTH=350 HEIGHT=300>
</CENTER>

*The meeting scheduling problem as described above can be naturally
represented as a constraints satisfaction problem (CSP) in the following way:*

- A set of variables $T$ - $m_1, m_2,\ldots ,m_n$ - the meetings to be scheduled
- Domains of values $D$ - all weekly time-slots
- A set of constraints $C$ - for every pair of meetings $m_i,$m_j$ there is an
arrival-time constraint, if there is an agent that participates in both
meetings. Private meetings are equivalent to unary constraints that remove
values from domains of some meetings. Since all agents have the same
arrival-times between any two locations, there is only one type of
arrival-time binary constraint.

The arrival-time constraint - given two time-slots $t_i, t_j$ there is a conflict
if

$$|\rm{time}(t_i)-\rm{time}(t_j)|- \rm{duration}_i < \rm{TravellingTime}(\rm{location}(m_i),
\rm{location}(m_i))$$

Simplifying assumptions:

- All agents have the same size of weekly calendar - $M$ time-slots
- All Meetings have the same duration and it's 1 time-slot.
- Each agent attends the same number of meetings

The Density of the CSP network depends on the number of meetings ($m$),
the number of agents ($n$) and the number of meetings per agent ($k$).
The Tightness of a constraint depends on the domain size of the meetings
and the locations of the two constrained meetings. The Density and Tightness
can be calculated in the following way:

Density $(p_1)$ - the ratio of the total number of edges to the maximal
number of possible edges.

$$p_1 = \rm{edges in the network}/(m\*(m - 1)/2)$$

Tightness $(p_2)$ - the ratio between the total number of eliminated time
slots to the number of total tuples ($D^2$). Therefore $p_2$ is defined as  

$$p_2 = (D\*(2\*s + 1) - s^2)/(D\*D)$$

where $s$ is the travelling time between the meeting locations.

A Representation of a Meeting Scheduling Problem as CSP is described in
Figure 2:

<CENTER>
<IMG SRC="./assets/MSPasCSP.jpg" ALIGN=bottom
      WIDTH=550 HEIGHT=300>
</CENTER>

The meeting scheduling problem is naturally described as a Distributed CSP.
The representation of the MSP as DisCSP is based on the distributed nature
of the problem. The MSP is a distributed negotiation problem between different
users. Therefore, the agents are associated with the users and not with the
meetings. The meetings are the variables that must be assigned time slots and
they are duplicated within all agents that attend the same meeting.

*The MSP can be represented as DisCSP in the following way:*

- Agents - the Group $S$ of agents
- For each Agent $s_i$ in $S$ there is a variable $x_{ij}$, for every
meeting $m_j$ that $s_i$ attends.
- Each agent $s_i$ includes arrival-time constraint between every pair of its
local variables $x_{ij}, x_{ik}$.
- For every pair of agents $s_i, s_j$ that attend meeting $m_k$ there is an
equality inter-agent constraint between the variables $x_{ik}, x_{jk}$,
corresponding to the meeting $m_k$.

A Representation of a Meeting Scheduling Problem as DisCSP is described in
Figure 3.

<CENTER>
<IMG SRC="./assets/MSPasDisCSP.jpg" ALIGN=bottom
      WIDTH=350 HEIGHT=300>
</CENTER>

*Random Meeting Scheduling Problem (RMSP) specification:*

The RMSP can be parameterized in many ways. Parameters can be the number of meetings,
locations, number of agents, etc.

Let us first denote the set of all parameters:

- number of meetings - $m$
- number of agents - $n$
- number of meetings per agent - $k$
- distances between locations of meetings - in units of time slots
- domain size - number of time-slots - $l$

The meetings are the set of $m$ variables of the constraints network, each
representing a meeting at a specific location. The domains of values are the
time-slots $l$. An edge between any pair of variables represents an agent
that participates in both meetings. The density of the constraints network is
a function of the number of edges in the network. The number of edges in the
network depends on the number of agents and the distribution of meetings
that each agent attends.

If each agent participates in $k$ meetings, we generate the resulting CSP
as follows:

For each of the $n$ agents a clique of $k$ variables (meetings) is selected
randomly, such that not all of the edges of the clique are already in the
network. All the edges of the generated clique are added to the CSP network,
representing  the arrival-time constraints between the meetings of each agent.
The arrival-time between each two meetings is also randomly generated. Note,
that an agent $A_i$ adds an arrival-constraint between meetings $m_j, m_k$
only if there is no other agent that attends both meetings. Two agents or
more that participate in $m_j, m_k$ define only one arrival-constraint.
The distance between locations of meetings randomly generated according to
the given range (between the minimal meeting distance and the maximal one).

Below is an example of a randomly generated Meeting Scheduling Problem:

- NumberOfMeetings    = 5
- NumberOfAgents = 3
- NumberOfMeetingPerAgent = 3
- MinDisTimeBetweenMeetings = 1
- MaxDisTimeBetweenMeetings = 3
- DomainSize		   = 6

Meetings are $m_1, m_2, m_3, m_4, m_5$

Agents are $a_1, a_2, a_3$

Agents' Meetings:

Agent (0): $m_1, m_3, m_5$  
Agent (1): $m_1, m_2, m_3$  
Agent (2): $m_2, m_3, m_4$


Distances between Meeting Locations:

|   | 1	| 2 | 3	| 4	| 5 |
|---|---|---|---|---|---|
| 1:| 0 | 1	| 2	| 1	| 3 |
| 2:| 1	| 0	| 3	| 2	| 2 |
| 3:| 2	| 3	| 0	| 1	| 2 |
| 4:| 1 | 2 | 1 | 0	| 3 |
| 5:| 3 | 2 | 2 | 3	| 0 |


problem 45 The name of the problem is Minimum_Energy_Broadcast__MEB_.md
---
Title:    Minimum Energy Broadcast (MEB)
Proposer: 
    - David A. Burke
    - Kenneth N. Brown
Category: 
    - Distributed CSP/COP
    - Bin packing
    - Partitioning and related problems
---


### Overview

This benchmark specification originates from the Centre for Telecommunications Value-chain Research and Cork Constraint Computation Centre, Dept. of Computer Science, University College Cork, Ireland. This work is supported by Science Foundation Ireland under Grant No. 03/CE3/I405.

An ad hoc network is a collection of wireless devices that form a network without any centralised infrastructure. When the devices are deployed they must first configure themselves to form a correctly functioning network. One configuration task when operating in a battery limited environment is the Minimum Energy Broadcast (MEB) problem. Assume a network of devices with omnidirectional antennas. The aim is to configure the power level in each device such that if a specified source device broadcasts a message it will reach every other device either directly or by being retransmitted by an intermediate device (a broadcast tree is formed). The desired configuration is that which minimises the total energy required by all devices, thus increasing the lifetime of the network.

Several approaches (both centralised and distributed) have been proposed for solving this problem. See the references page of this benchmark for more information. As there is no central controller and in a large network centralising the entire problem may be infeasible, Distributed Constraint Optimisation (DisCOP) is one appropriate way to model and solve the problem, and it is this approach that will be described in this specification.

### Distributed COP Formulation

To formulate the problem as a Distributed COP, we have an agent, *a<sub>i</sub>*, representing each device in the network. The neighbours of *a<sub>i</sub>* include all agents that *a<sub>i</sub>* can communicate with when broadcasting at its maximum power level.

**Relationship variables:** For each neighbour *a<sub>j</sub>*, *a<sub>i</sub>* has a public variable, taking one of 3 values, indicating the relationship between the two devices in the current solution (broadcast tree):

-   0 = the devices are not connected in the broadcast tree
-   1 = *a<sub>i</sub>* is the parent of *a<sub>j</sub>* in the broadcast tree
-   2 = *a<sub>i</sub>* is the child of *a<sub>j</sub>* in the broadcast tree

An inter-agent constraint between each pair of neighbours ensures that the corresponding variables in neighbouring nodes match up correctly, i.e. both are 0, or else one is 1 and the other is 2. To construct a tree, each agent is constrained to have exactly one parent, except the source device, which is not allowed any parents.

**Power/energy variables:** The agents also have a private variable corresponding to each of these public variables set to be the energy cost incurred due to the setting of that public variable, i.e. if the public variable is 1 then the private variable is assigned the energy cost for broadcasting to that neighbour, otherwise it is assigned 0. A private constraint over all of these 'energy cost' variables states the total cost for *a<sub>i</sub>* to broadcast to all of its children is the *maximum* of these costs.

**Hop-count variable:** Each agent also has a hop-count variable, indicating how many hops that device is from the source device. A second inter-agent constraint between neighbouring agents ensures that the hop-count of a child in the broadcast tree is one greater than its parent, thus preventing cycles.

### Example

Figure 1 displays an example MEB problem with 10 devices. This problem is modelled using the variables as specified in Table 1 and constraints as described in the previous paragraph. Its corresponding minimal energy broadcast tree is shown in Figure 2, and the optimal assignments to variables is shown in Table 2.

<center>
    <img src="assets/meb-problem.jpg" align="bottom" width="336" height="284">
    <img src="assets/meb-result.jpg" align="bottom" width="336" height="284">
</center>



<table border="">
  <caption align="LEFT"><b>Table 1.</b> Complete list of variables and domains of all agents in the problem.
    Variable names begin with the agent name. Subscript 'h' indicates hop count variable; 'r' indicates relationship variable; 'p' indicates broadcast power/energy cost variable. For relationship variables, -x indicates that variable is for the relationship with agent x. Similarly for energy cost variables, the -x indicates that this is the power required to reach agent x. 
  </caption>
  <tbody>
    <tr>
      <td> Variable </td>
      <td> a1<sub>h</sub> </td>
      <td> a1<sub>r</sub>-3 </td>
      <td> a1<sub>p</sub>-3 </td>
      <td> a1<sub>r</sub>-4 </td>
      <td> a1<sub>p</sub>-4 </td>
      <td> a1<sub>r</sub>-7 </td>
      <td> a1<sub>p</sub>-7 </td>
      <td> a1<sub>r</sub>-8 </td>
      <td> a1<sub>p</sub>-8</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,93 </td>
      <td> 0,1,2 </td>
      <td> 0,21 </td>
      <td> 0,1,2 </td>
      <td> 0,48 </td>
      <td> 0,1,2 </td>
      <td> 0,17</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a2<sub>h</sub> </td>
      <td> a2<sub>r</sub>-3 </td>
      <td> a2<sub>p</sub>-3 </td>
      <td> a2<sub>r</sub>-6 </td>
      <td> a2<sub>p</sub>-6 </td>
      <td> a2<sub>r</sub>-8 </td>
      <td> a2<sub>p</sub>-8 </td>
      <td> a2<sub>r</sub>-9 </td>
      <td> a2<sub>p</sub>-9 </td>
      <td> a2<sub>r</sub>-10 </td>
      <td> a2<sub>p</sub>-10</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,33 </td>
      <td> 0,1,2 </td>
      <td> 0,97 </td>
      <td> 0,1,2 </td>
      <td> 0,107 </td>
      <td> 0,1,2 </td>
      <td> 0,93 </td>
      <td> 0,1,2 </td>
      <td> 0,93</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a3<sub>h</sub> </td>
      <td> a3<sub>r</sub>-1 </td>
      <td> a3<sub>p</sub>-1 </td>
      <td> a3<sub>r</sub>-2 </td>
      <td> a3<sub>p</sub>-2 </td>
      <td> a3<sub>r</sub>-4 </td>
      <td> a3<sub>p</sub>-4 </td>
      <td> a3<sub>r</sub>-5 </td>
      <td> a3<sub>p</sub>-5 </td>
      <td> a3<sub>r</sub>-8 </td>
      <td> a3<sub>p</sub>-8 </td>
      <td> a3<sub>r</sub>-9 </td>
      <td> a3<sub>p</sub>-9</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,93 </td>
      <td> 0,1,2 </td>
      <td> 0,33 </td>
      <td> 0,1,2 </td>
      <td> 0,79 </td>
      <td> 0,1,2 </td>
      <td> 0,162 </td>
      <td> 0,1,2 </td>
      <td> 0,7 </td>
      <td> 0,1,2 </td>
      <td> 0,124</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a4<sub>h</sub> </td>
      <td> a4<sub>r</sub>-1 </td>
      <td> a4<sub>p</sub>-1 </td>
      <td> a4<sub>r</sub>-3 </td>
      <td> a4<sub>p</sub>-3 </td>
      <td> a4<sub>r</sub>-8 </td>
      <td> a4<sub>p</sub>-8</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,21 </td>
      <td> 0,1,2 </td>
      <td> 0,79 </td>
      <td> 0,1,2 </td>
      <td> 0,5</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a5<sub>h</sub> </td>
      <td> a5<sub>r</sub>-3 </td>
      <td> a5<sub>p</sub>-3 </td>
      <td> a5<sub>r</sub>-9 </td>
      <td> a5<sub>p</sub>-9</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,162 </td>
      <td> 0,1,2 </td>
      <td> 0,107</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a6<sub>h</sub> </td>
      <td> a6<sub>r</sub>-2 </td>
      <td> a6<sub>p</sub>-2 </td>
      <td> a6<sub>r</sub>-10 </td>
      <td> a6<sub>p</sub>-10</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,97 </td>
      <td> 0,1,2 </td>
      <td> 0,3</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a7<sub>h</sub> </td>
      <td> a7<sub>r</sub>-1 </td>
      <td> a7<sub>p</sub>-1</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,48</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a8<sub>h</sub> </td>
      <td> a8<sub>r</sub>-1 </td>
      <td> a8<sub>p</sub>-1 </td>
      <td> a8<sub>r</sub>-2 </td>
      <td> a8<sub>p</sub>-2 </td>
      <td> a8<sub>r</sub>-3 </td>
      <td> a8<sub>p</sub>-3 </td>
      <td> a8<sub>r</sub>-4 </td>
      <td> a8<sub>p</sub>-4</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,17 </td>
      <td> 0,1,2 </td>
      <td> 0,107 </td>
      <td> 0,1,2 </td>
      <td> 0,7 </td>
      <td> 0,1,2 </td>
      <td> 0,5</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a9<sub>h</sub> </td>
      <td> a9<sub>r</sub>-2 </td>
      <td> a9<sub>p</sub>-2 </td>
      <td> a9<sub>r</sub>-3 </td>
      <td> a9<sub>p</sub>-3 </td>
      <td> a9<sub>r</sub>-5 </td>
      <td> a9<sub>p</sub>-5</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,93 </td>
      <td> 0,1,2 </td>
      <td> 0,124 </td>
      <td> 0,1,2 </td>
      <td> 0,107</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a10<sub>h</sub> </td>
      <td> a10<sub>r</sub>-2 </td>
      <td> a10<sub>p</sub>-2 </td>
      <td> a10<sub>r</sub>-6 </td>
      <td> a10<sub>p</sub>-6</td>
    </tr>
    <tr>
      <td> Domain </td>
      <td> 0-9 </td>
      <td> 0,1,2 </td>
      <td> 0,93 </td>
      <td> 0,1,2 </td>
      <td> 0,3</td>
    </tr>
    <tr></tr>
    <tr></tr>
  </tbody>
</table>



<table border="">
  <caption align="LEFT"><b>Table 2.</b> Optimal assignment of values to variables in example problem.
    Cells in green indicate when an agent will broadcast to another agent.
    Cells in yellow are the broadcast power required by that agent to broadcast to all its children in the broadcast tree. 
    The optimal solution is the sum of all these values, i.e. 275.
  </caption>
  <tbody>
    <tr>
      <td> Variable </td>
      <td> a1<sub>h</sub> </td>
      <td> a1<sub>r</sub>-3 </td>
      <td> a1<sub>p</sub>-3 </td>
      <td> a1<sub>r</sub>-4 </td>
      <td> a1<sub>p</sub>-4 </td>
      <td> a1<sub>r</sub>-7 </td>
      <td> a1<sub>p</sub>-7 </td>
      <td> a1<sub>r</sub>-8 </td>
      <td> a1<sub>p</sub>-8</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 3 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 48 </td>
      <td> 2 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a2<sub>h</sub> </td>
      <td> a2<sub>r</sub>-3 </td>
      <td> a2<sub>p</sub>-3 </td>
      <td> a2<sub>r</sub>-6 </td>
      <td> a2<sub>p</sub>-6 </td>
      <td> a2<sub>r</sub>-8 </td>
      <td> a2<sub>p</sub>-8 </td>
      <td> a2<sub>r</sub>-9 </td>
      <td> a2<sub>p</sub>-9 </td>
      <td> a2<sub>r</sub>-10 </td>
      <td> a2<sub>p</sub>-10</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td> 33 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 93 </td>
      <td> 1 </td>
      <td> 93</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a3<sub>h</sub> </td>
      <td> a3<sub>r</sub>-1 </td>
      <td> a3<sub>p</sub>-1 </td>
      <td> a3<sub>r</sub>-2 </td>
      <td> a3<sub>p</sub>-2 </td>
      <td> a3<sub>r</sub>-4 </td>
      <td> a3<sub>p</sub>-4 </td>
      <td> a3<sub>r</sub>-5 </td>
      <td> a3<sub>p</sub>-5 </td>
      <td> a3<sub>r</sub>-8 </td>
      <td> a3<sub>p</sub>-8 </td>
      <td> a3<sub>r</sub>-9 </td>
      <td> a3<sub>p</sub>-9</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 1 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 2 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 7 </td>
      <td> 0 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a4<sub>h</sub> </td>
      <td> a4<sub>r</sub>-1 </td>
      <td> a4<sub>p</sub>-1 </td>
      <td> a4<sub>r</sub>-3 </td>
      <td> a4<sub>p</sub>-3 </td>
      <td> a4<sub>r</sub>-8 </td>
      <td> a4<sub>p</sub>-8</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 3 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 2 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a5<sub>h</sub> </td>
      <td> a5<sub>r</sub>-3 </td>
      <td> a5<sub>p</sub>-3 </td>
      <td> a5<sub>r</sub>-9 </td>
      <td> a5<sub>p</sub>-9</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 2 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 2 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a6<sub>h</sub> </td>
      <td> a6<sub>r</sub>-2 </td>
      <td> a6<sub>p</sub>-2 </td>
      <td> a6<sub>r</sub>-10 </td>
      <td> a6<sub>p</sub>-10</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 2 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 2 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a7<sub>h</sub> </td>
      <td> a7<sub>r</sub>-1 </td>
      <td> a7<sub>p</sub>-1</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 4 </td>
      <td> 2 </td>
      <td> 0</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a8<sub>h</sub> </td>
      <td> a8<sub>r</sub>-1 </td>
      <td> a8<sub>p</sub>-1 </td>
      <td> a8<sub>r</sub>-2 </td>
      <td> a8<sub>p</sub>-2 </td>
      <td> a8<sub>r</sub>-3 </td>
      <td> a8<sub>p</sub>-3 </td>
      <td> a8<sub>r</sub>-4 </td>
      <td> a8<sub>p</sub>-4</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 2 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 17 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 2 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td> 5</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a9<sub>h</sub> </td>
      <td> a9<sub>r</sub>-2 </td>
      <td> a9<sub>p</sub>-2 </td>
      <td> a9<sub>r</sub>-3 </td>
      <td> a9<sub>p</sub>-3 </td>
      <td> a9<sub>r</sub>-5 </td>
      <td> a9<sub>p</sub>-5</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 1 </td>
      <td> 2 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 107</td>
    </tr>
    <tr>
      <td> Variable </td>
      <td> a10<sub>h</sub> </td>
      <td> a10<sub>r</sub>-2 </td>
      <td> a10<sub>p</sub>-2 </td>
      <td> a10<sub>r</sub>-6 </td>
      <td> a10<sub>p</sub>-6</td>
    </tr>
    <tr>
      <td> Value </td>
      <td> 1 </td>
      <td> 2 </td>
      <td> 0 </td>
      <td bgcolor="GREEN"> 1 </td>
      <td bgcolor="YELLOW"> 3</td>
    </tr>
    <tr></tr>
    <tr></tr>
  </tbody>
</table>



### Problem Parameters

Specific problem instances are included in this benchmark and are linked to on the main benchmark page.
 Problems can also be generated using the following parameters:

-   An area with length *x* and width *y* in which to place the devices.
-   A number *n* of devices.
-   A maximum power *p* at which each device can broadcast at.
-   A path loss exponent *exp*, which is the rate at which the radio signal attenuates.

Each device is placed randomly in the area. To determine the power required for two devices a1 and a2 to communicate with each other, first calculate the distance, *d* between the devices: *d = âˆš((x2-x1)<sup>2</sup> + (y2-y1)<sup>2</sup>)*. The energy used (*w*=watts) to broadcast this distance is: *w = (d<sup>exp</sup>) x 0.0001*. If *w < p*, then the devices can communicate.

### Notes

This problem is related to the Travelling Salesman Problem (TSP) and Minimum Spanning Tree (MST) problem. The key difference with the TSP is that in MEB the salesman/broadcast can travel more than one route out of a city/node. The difference with the Minimum Spanning Tree problem comes from the fact that the cost of broadcasting to multiple child nodes is the maximum cost over all the links to children as opposed to the sum of the links.


problem 46 The name of the problem is Mystery_Shopper.md
---
Title:    Mystery Shopper
Proposer: Jim Ho Man Lee
Category: Scheduling and related problems
---

A well-known cosmetic company wants to evaluate the performance of their sales people, who are stationed at the company's counters at various department stores in different geographical locations. For this purpose, the company has hired some secret agents to disguise themselves as shoppers to visit the sales people. The visits must be scheduled in such a way that each sales person must be visited by shoppers of different varieties and that the visits should be spaced out roughly evenly. Also, shoppers should visit sales people in different geographic locations. The exact constraints, which ensure the statistical soundness of the project, follow.

1. There are a total of 19 outlets to be visited. They are located in 4 geographical regions: 5 outlets in Area 1 (outlet 1-5), 5 outlets in Area 2 (outlet 6-10), 5 outlets in Area 3 (outlet 11-15), and 4 outlets in Area 4 (outlet 16-19).

2. There will be 1 to 4 sales people in each outlet. Each sales person will be visited by 4 different shoppers. The frequency of visits to a particular outlet will be the number of sales people times 4. There are a total of 35 sales people working in all outlets everyday. Therefore, the total number of visits is 140.

3. The shoppers are divided into 4 groups according to age, professions, and etc. Each group has 10 shoppers. Therefore, the total number of shoppers is 40. Therefore, in each group of shoppers, 5 shoppers will perform 3 visits and the other 5 shoppers will perform 4 visits.

4. Each shopper should only visit 1 outlet in each of the 4 areas.

5. All sales people should be visited 2 times in the first 2 weeks of fieldwork.

6. The total fieldwork period will be 4 weeks. Theoretically, each shopper has to pay 1 visit each week. However, shoppers making 4 visits must have done 2 visits by the end of the second week. Shoppers making 3 visits should have done 1 or 2 visits by the end of the second week. The data of the first 50% visits will be analysed and put in an interim report.

7. Listed below are locations of the 19 outlets and the number of sales people in that particular outlet. (outlets with * are boutiques)

Outlet	| Number of Salesladies
--------|---------------------
*Outlet 1	| 2
Outlet 2	| 4
Outlet 3	| 1
Outlet 4	| 2
Outlet 5	| 1
Outlet 6	| 2
Outlet 7	| 1
Outlet 8	| 1
Outlet 9	| 1
*Outlet 10	| 2
Outlet 11	| 2
Outlet 12	| 2
Outlet 13	| 1
*Outlet 14	| 2
*Outlet 15	| 1
Outlet 16	| 2
Outlet 17	| 2
Outlet 18	| 4
Outlet 19	| 2

Convention: shoppers 0 - 9 belong to group 1, shoppers 10 - 19 belong to group 2, shoppers 20 - 29 belong to group 3, and shoppers 30 - 39 belong to group 4

In each group, the first 5 shoppers make 3 visits and the remaining 5 shoppers make 4 visits. For example, in group 1, shoppers 0 - 4 make 3 visits and shoppers 5 - 9 make 4 visits.

Besides, for the sales people: sales people 0 - 1 belong to outlet 1, sales people 2 - 5 belong to outlet 2, sales person 6 belongs to outlet 3, ... and sales people 33 - 34 belong to outlet 19.


problem 47 The name of the problem is N-Queens.md
---
Title:    N-Queens
Proposer: Bilal Syed Hussain
Category: Games and puzzles
---

Overview
========

Can $n$ queens (of the same colour) be placed on a $n\times n$ chessboard so that none of the  queens can attack each other?

In chess a queen attacks other squares on the same row, column, or either diagonal as itself. So the $n$-queens problem is to find a set of $n$ locations on a chessboard, no two of which are on the same row, column or diagonal.  

<center>
<figure>
  <img src="assets/4queens.png" alt="solution to 4-queens">
  <figcaption>A solution to 4-queens</figcaption>
</figure>
</center>

A simple arithmetical observation may be helpful in understanding models. Suppose a queen is represented by an ordered pair (Î±,Î²), the value Î± represents the queenâ€™s column, and Î² its row on the chessboard. Then two queens do not attack each other iff they have different values of *all* of Î±, Î², Î±-Î², and Î±+Î². It may not be intuitively obvious that chessboard diagonals correspond to sums and differences, but consider moving one square along the two orthogonal diagonals: in one direction the sum of the coordinates does not change, while in the other direction the difference does not change. (We do not suggest that pairs (Î±,Î²) is a good representation for solving.) 

The problem has inherent symmetry. That is, for any solution we obtain another solution by any of the 8 symmetries of the chessboard (including the identity) obtained by combinations of rotations by 90 degrees and reflections. 

The problem is extremely well studied in the mathematical literature. An outstanding survey from 2009 is by Bell & Stevens cite{Bell20091}.

See below for discussions of complexity problems with $n$-Queens. For closely related variants without these problems see {prob079}, [prob079], and {prob080}, [prob080].

Complexity
==========

Some care has to be taken when using the $n$-queens problem as a benchmark.  Here are some points to bear in mind:

* The $n$-queens problem is solvable for $n=1$ and $n \geq 4$. So the decision problem is solvable in constant time. 
* A solution to the $n$-queens problem for any $n \not = 2,3$ was given in 1874 by Pauls and can be found in Bell & Stevens' survey  cite{Bell20091}. It can be constructed in time $O(n)$ (assuming arithemetical operations on size $n$ are $O(1)$.) 
* Note that the parameter $n$ for $n$-queens only needs $\log(n)$ bits to specify, so actually $O(n)$ is exponential in the input size. I.e. it's not trivial to provide a witness of poly size in the input. 
* While the decision problem is easy, counting the number of solutions for given $n$ is not. Indeed Bell & Stevens cite{Bell20091} report that there is no closed form expression for it and that it is "beyond #P-Complete", citing cite{Hsiang200487}. (Oddly cite{chaiken-queens} report a closed form solution for the number of solutions to $n$-queens: it's unclear if this contradicts the earlier result, but more importantly it's not clear that this has better complexity than simply enumerating solutions.)



problem 48 The name of the problem is n-Queens_Completion_Problem_and_Excluded_Diagonals_n-Queens_Problem.md
---
Title:    n-Queens Completion Problem and Excluded Diagonals n-Queens Problem
Proposer: Ian Gent
Category: Games and puzzles
---

$n$-Queens Completion Problem
========

The {prob054} Problem, [prob054], suffers from the problem that its complexity is trivial as a decision problem.  
The n-Queens Completion and Blocked n-Queens problems are variants of {prob054} which have been proven to
be NP-Complete as decision problems and #P-Complete as counting problems.

<center>
<figure>
  <img src="assets/nqc1850.png" alt="An instance of n-Queens Completion" width="300" height="300">
  <figcaption>An instance of n-Queens Completion from 1850</figcaption>
</figure>
</center>

For the $n$-Queens Completion Problem, as well as board size $n$, one is given some number of queens placed 
on the board already. The problem is to provide a solution to the $n$-Queens problem containing all those queens. I.e. a superset of the preplaced queens of size $n$ and with no two queens on the same row, column, or diagonal.  (If any two of the preplaced queens attack each other it is considered to be trivially unsolvable).

The image shows an example problem, originating in 1850 cite{Nauck1850a}.  Can you place the other 6 queens to give a solution to the 8-Queens problem?  And in how many ways is this possible?  The answers are shown below.

Excluded Diagonals $n$-Queens Problem
========

The Excluded Diagonals Problem is a closely related problem where, given an $n \times n$ board, only certain rows and columns are allowed and certain diagonals are excluded. 
For rows and columns, a subset of rows and columns are specified which are allowed. The subsets must be the same size.
A sum diagonal is the set of squares where the sum of the row and column indexes of the squares is constant.  A difference diagonal is the set of squares where the difference between the row and column indexes is constant.  
For the Excluded Diagonals Problem, we are given $n$ and a set of diagonals, each of which is either a sum diagonal or a difference diagonal. A solution is a set of queens with exactly one queen in each of the allowed rows and columns, and where where no queen is placed on one of the  
excluded diagonals.

Relation between the two problems
========

The two problems here are so similar it is best to think of them as the same problem, as processing to flip between them is very simple. 

To go from $n$-Queens Completion to Excluded Diagonals is very easy: simply allow only rows and columns with no queens preplaced, and exclude any diagonals (both sum and diagonal) on which there are preplaced queens.  

The other direction is more complex but still fast, following a construction in cite{nqueenscompletion}. It is implemented in the python files 
<a href="models/diagtoqueens.py.html">diagtoqueens.py</a> and 
<a href="models/queens-diag-transform.py.html">queens-diag-transform.py</a>.

The two problems are closely related to {prob080}, [prob080].


Random Instance Generators
==========================

Python generators are available to implement the models from the paper cite{nqueenscompletion}. 
The generator for random placement of queens for of n-Queens Completion is not recommended as it does not seem to produce hard instances. 
<a href="data/queens-diag-gen.py.html">The generator for random Excluded Diagonals n-Queens instances</a>
does appear to generate hard instances.  

Note that the generator for Excluded Diagonals always allows all rows and columns, so those are not outputted. It also offsets the difference diagonals by n-1 so that all numbers are non-negative. Also it generates a maximal set of diagonals which retain the property that there are at least k squares left in each row and column (e.g. k=4). The generator is designed so that, if you want fewer diagonals than that maximal
number, e.g. $d$, you can simply take the first $d$ diagonals and get a probabilistically valid sample.

References
==========

The n-Queens Completion problem was proposed in 1850 cite{Nauck1850a}

The Excluded Diagonals Problem was proposed by cite{nqueenscompletion}

Both problems were proved NP-Complete and #P-Complete by cite{nqueenscompletion}


<center>
<figure>
  <img src="assets/nqc1850sol1.png" alt="An instance of n-Queens Completion" width="300" height="300">
  <img src="assets/nqc1850sol2.png" alt="An instance of n-Queens Completion" width="300" height="300">
  <figcaption>The Two Solutions to the n-Queens Completion from 1850</figcaption>
</figure>
</center>




problem 49 The name of the problem is Nonogram.md
---
Title:    Nonogram
Category: Games and puzzles
Proposer: 
    - Gary Duncan
    - Ian Gent
Category: Games and puzzles
---


Nonograms are a popular puzzle, which goes by different names in different countries. Solvers have to shade in squares in a grid so that blocks of consecutive shaded squares satisfy constraints given for each row and column. Constraints typically indicate the sequence of shaded blocks (e.g. 3,1,2 means that there is a block of 3, then a gap of unspecified size, a block of length 1, another gap, and then a block of length 2).


problem 50 The name of the problem is Number_Partitioning.md
---
Title:    Number Partitioning
Proposer: Daniel Diaz
Category: Combinatorial mathematics
---


This problem consists in finding a partition of numbers $1..N$ into two sets A and B such that:

1. A and B have the same cardinality
2. sum of numbers in $A$ = sum of numbers in $B$
3. sum of squares of numbers in $A$ = sum of squares of numbers in $B$

There is no solution for $N < 8$.

Here is an example for$ N = 8$:$ A = (1,4,6,7)$ and $B = (2,3,5,8)$

Then from $N \>= 8$, there is no solution if $N$ is not a multiple of $4$.

### Generalisation

More constraints can thus be added, e.g also impose the equality on the sum of cubes, ...

Let $C_k$ be the constraint about the power $k$ defined as the equality :

$\Sigma_{i=1}^{N/2} A_i^k = \Sigma_{i=1}^{N/2} B_i^k$

Condition (a) corresponds to $k=0$. Condition (b) to $k=1$. Condition (c) to $k=2$.

This generalized problem can be seen as a conjunction of constraints $C_k$ until a power P $(C_0 /\\ C_1 /\\ ... /\\ C_P)$. The above problem corresponds to $P = 2$.

Empirically, I played with $P = 0, 1, 2, 3, 4$:

The sums of powers is known :

-   $\Sigma_{i=1}^{N} i^0 = N$
-   $\Sigma_{i=1}^{N} i^1 = N \* (N+1) / 2$
-   $\Sigma_{i=1}^{N} i^2 = N \* (N+1) \* (2\*N + 1) / 6$
-   $\Sigma_{i=1}^{N} i^3 = N^2 \* (N+1)^2 / 4$
-   $\Sigma_{i=1}^{N} i^4 = N \* (N+1) \* (6\*N^3 + 9\*N^2 + N - 1) / 30$


Recall in our case we need the half sums. The problem has no solution if the above sums are not even numbers. For P = 0 this implies N is a multiple of 2 (groups A and B have the same cardinality). For P = 1 (knowing N is multiple of 2 due to P = 0) then N \* (N + 1) / 2 is even iff N is multiple of 4.

Here are the first solutions computed:

-   $P = 0$: first solutions found for $N = 2, 4, 6, 8, 10, 12, ...$ (obviously for every multiple of 2)
-   $P = 1$: first solutions found for $N = 4, 8, 12, 16, 20, 24, 28, 32$ (then for every multiple of 4 ?)
-   $P = 2$: first solutions found for $N = 8, 12, 16, 20, 24, 28, 32, 36$ (then for every multiple of 4 ?)
-   $P = 3$: first solutions found for$ N = 16, 24, 32, 40 $(then for every multiple of 8 ?)
-   $P = 4$: first solutions found for$ N = 32, 40, 48, 56, 64$ (then forevery multiple of 8 ?)

From these tests, it seems the smallest N for which a solution exists is $2^{P+1}$. Can this be proved ?

After that, it seems there are only solutions for N multiple of 2 (P= 0), 4 (P = 1 or 2), 8 (P = 3 or 4). Is this a constant depending on P ?

Another way to generalize this problem consists in increasing the numbers of groups (for instance consider 3 groups A, B, C).




problem 51 The name of the problem is Optimal_Financial_Portfolio_Design.md
---
Title: Optimal Financial Portfolio Design
Proposer: 
 - Pierre Flener
 - Jean-NoÃ«l Monette
Category: Design and configuration
---

An OPD problem $\langle v, b, r \rangle$ is to find a matrix of $v$
rows and $b$ columns of $0$-$1$ values such that each row sums to $r$,
and the maximum, denoted $\lambda$, of the dot products beween all
pairs of distinct rows is minimal.  Equivalently, the objective is to
find $v$ subsets of cardinality $r$ drawn from a given set of $b$
elements, such that the largest intersection of any two of the $v$
sets has minimal cardinality, denoted $\lambda$.

This is an abstract description of a problem that appears in finance:
full details are given by cite{Flener:CP04} and
cite{Flener:CONS07:CDO2}.  In a typical OPD in finance, we have $250
\leq v \leq 500$ and $4 \leq b \leq 25$, with $r \approx 100$.  This
is one order of magnitude larger than the largest
{prob028} that have been built by
computer using systematic search; the BIBD problem, which is a
constraint satisfaction problem, is closely related to the OPD
problem, which is a constrained optimisation problem.  A lower bound
on the number of shared elements of any pair of same-sized subsets
drawn from a given set was established by cite{Sivertsson:MSc05,
Flener:AOC08}: this lower bound can be applied to the objective value
$\lambda$.  A first constraint-based model, with advanced
symmetry-handling methods, was proposed by cite{Flener:CP04}, then
improved by cite{Sivertsson:MSc05} and ultimately by
cite{Flener:CONS07:CDO2}, by using the lower bound.  As pointed out by
cite{Agren:CP05}, one can advantageously exploit the many symmetries
by using local search instead of systematic search; this was confirmed
by cite{Lebbah:ENDM15}, by cite{Lebbah:IJAMC15}, and at the [MiniZinc
Challenge 2015](http://www.minizinc.org/challenge2015/challenge.html),
where a constraint-based local search solver outperformed all
systematic search solvers, even on sub-realistic instances.

problem 52 The name of the problem is Patient_Transportation_Problem.md
---
Title:    Patient Transportation Problem
Proposer:
- Charles Thomas
- Quentin Cappart
- Pierre Schaus
- Louis-Martin Rousseau
Category: Scheduling and related problems
---


The problem consists in transporting patients to medical appointments given a fleet of vehicles. The main objective is to satisfy as much patient requests as possible. Additional objectives such as minimizing the waiting time or maximum ride time of the patients or towards minimizing costs could be considered.

Each request consists of a forward travel where the patient must be brought to their destination on time for their appointment, a backward travel that must be done after the end of the appointment or both. For back and forth requests, both travels must be done for the request to be satisfied. Patients are associated with categories restricting the vehicles that can take them and might be accompanied. Patients might also require some amount of time to embark/disembark vehicles.
The vehicles have a limited capacity which must never be exceeded and are available at fixed times.

The data is provided as JSON files having the following format:

* The fields "version", "id" and "name" correspond respectfully to the version of the PTP instance encoding, the id and the name of the instance.
* The "coordType" field indicates if the coordinates are geographical ("Geo") or euclidian ("Eucl").
* The "sameVehicleBackWard" field indicates if the same vehicle has to be used for the two trips of a back and forth request.
* The "maxWaitTime" field contains the duration of the time windows during which the patient has to be transported. It is expressed as a string having the following format: "HHhMM"
* The "places" field contains all the distinct locations of the problem. For each of them:
    * "id" is the id of the location. It corresponds to its position in the list of locations.
    * "lat" and "long" are the coordinates of the location.
    * "category" is the category of the location. Its value can be 0 for a medical center, 1 for a vehicle depot and 2 for a patient location.
* The "vehicles" field contains all the vehicles available in the fleet. Each of them has the following fields:
	* "id" which contains the id of the vehicle.
	* "canTake" which is a set of categories of patients that the vehicle can take.
	* "start" and "end" which are the ids of the starting and ending depots of the vehicle. A -1 value indicates that the vehicle has no depot.
	* "capacity" which is the capacity of the vehicle.
	* "availability" which is a set of time windows when the vehicle is available. Each time window is encoded by a string having the following format: "HHhMM:HHhMM".
* The "patients" field contains all the requests. Each patient/request has the following fields:
	* "id" which contains the id of the request.
	* "category" which indicates the category of the patient
	* "load" which indicates the number of places required in the vehicle during the transport.
	* "start", "destination" and "end" which indicate the ids of respectfully the starting location, medical center and return location for the patient. "start" or "end" can have a -1 value in case of single trip.
	* "rdvTime" and "rdvDuration" indicate the start of the appointment and its duration as strings under the format "HHhMM". In terms of constraints, the patient must be picked up at its starting location for its forward trip at or after rdvTime - maxWaitTime. They must be dropped at their destination before or at rdvTime. They must be picked up for their backward trip at the medical center after or at rdvTime + rdvDuration and must be dropped at their end location before or at rdvTime + rdvDuration + maxWaitTime.
	* "srvDuration" indicates the time needed for the patient to embark/disembark the vehicle. It is encoded as a string under the format "HHhMM".
* The "distMatrix" field contains the distance (in minutes) matrix between the locations. it follows the ids and order of the locations (distMatrix[2][3] is the distance from location 2 to location 3).

Instances are separated into three sets by difficulty.

problem 53 The name of the problem is Peaceably_Co-existing_Armies_of_Queens.md
---
Title:    Peaceably Co-existing Armies of Queens
Proposer: Ã–zgÃ¼r AkgÃ¼n
Category:
    - Combinatorial mathematics
    - Games and puzzles
---

In the "Armies of queens" problem, we are required to place two equal-sized armies of black and white queens on a chessboard so that the white queens do not attack the black queens (and necessarily vice versa) and to find the maximum size of two such armies. Also see cite{smith2004models}.


problem 54 The name of the problem is Peg_Solitaire.md
---
Title:    Peg Solitaire
Proposer:
    - Chris Jefferson
    - Angela Miguel
    - Ian Miguel
    - Armagan Tarim
Category: Games and puzzles
---

Peg Solitaire (also known as Hi-Q) is played on a board with a number of holes. In the English version of the game, the board is in the shape of a cross with 33 holes:

      OOO
      OOO
    OOOOOOO
    OOOOOOO
    OOOOOOO
      OOO
      OOO

Pegs ('X's here) are arranged on the board so that at least one hole remains. A number of different problems arise from Solitaire, e.g. finding a path from the initial to a goal state, or finding the shortest number of moves to a state where no more moves are possible.

Moves are draughts/checkers-like and are horizontal or vertical: 

    XXO -> OOX

The following is the classic 'central' version of the game:

     Start:     Goal:
      XXX        OOO
      XXX        OOO
    XXXXXXX    OOOOOOO
    XXXOXXX -> OOOXOOO
    XXXXXXX    OOOOOOO
      XXX        OOO
      XXX        OOO

The French version of the game has four extra holes: 

      OOO
     OOOOO
    OOOOOOO
    OOOOOOO
    OOOOOOO
     OOOOO
      OOO

The french version of solitaire cannot be completed starting with one hole in the middle, and
ending with one peg in the center, without adding one extra peg during play (the player gets
to decide where and when to place the extra peg).

Other board types, such as the Solitaire Triangle, also exist. 


problem 55 The name of the problem is Perfect_Square_Placement.md
---
Title:    Perfect Square Placement
Proposer: Helmut Simonis
Category: Combinatorial mathematics
---


The perfect square placement problem (also called the squared square problem) is 
to pack a set of squares with given integer sizes into a bigger square in such 
a way that no squares overlap each other and all square borders are parallel to 
the border of the big square. For a perfect placement problem, all squares have 
different sizes. The sum of the square surfaces is equal to the surface of the 
packing square, so that there is no spare capacity. A simple perfect square 
placement problem is a perfect square placement problem in which no subset of 
the squares (greater than one) are placed in a rectangle. 

A note with an example solution is available in the Data files section.


problem 56 The name of the problem is Plotting.md
---
Title:    Plotting
Proposer: Joan Espasa Arxer & Ian Miguel & Mateu Villaret
Category: Planning Problems
---

[Plotting](https://en.wikipedia.org/wiki/Plotting_(video_game)) is a tile-matching puzzle video game published by Taito. The objective of the game is to remove at least a certain number of coloured blocks from a grid by sequentially shooting blocks into the same grid. The interest and difficulty of Plotting is due to the complex transitions after every shot: various blocks are affected directly, while others can be indirectly affected by gravity.
 
Plotting is played by one agent with full information of the state, and the effects of each action are deterministic. The blocks can be shot either horizontally directly into the grid, or by shooting at the wall blocks above the grid, and bouncing down vertically onto the grid.

The rules for what happens when a block hits the wall or falls onto the floor are as follows:

* If it hits a wall as it is travelling horizontally, it falls vertically downwards. In a typical level, additional walls are arranged to facilitate hitting the blocks from above.
* If it falls onto the floor, it rebounds into the avatarâ€™s hand.

The rules for a shot block `S` colliding with a block `B` in the grid are a bit more complex:

* If the first block `S` hits is of a different type from itself, `S` rebounds into the avatarâ€™s hand and the grid is unchanged --- a null move.
    *  If `S` and `B` are of the same type, `B` is consumed and `S` continues to travel in the same direction. All blocks above `B` fall one grid cell each.
    *  If `S`, having already consumed a block of the same type, hits a block `B` of a different type, `S` replaces `B`, and `B` rebounds into the avatarâ€™s hand.

A depiction of the general gameplay of the game

![Gameplay](assets/gameplay.gif "General Gameplay")

A vertical shot that affects a column

![Gameplay](assets/vertical_shot.gif "Vertical Shot")

A vertical shot reaching the ground, and therefore keeping the same colour in the hand

![Gameplay](assets/vertical_and_ground.gif "Vertical Shot that reaches the ground")

A horizontal shot, depicting the effect of gravity

![Gameplay](assets/horizontal_shot.gif "Horizontal Shot")

A horizontal shot, which arrives to the right wall and continues downwards

![Gameplay](assets/horizontal_and_down.gif "Horizontal Shot that reaches the wall")


problem 57 The name of the problem is Prime_queen_attacking_problem.md
---
Title:    Prime queen attacking problem
Proposer: Christian Bessiere
Category: 
    - Combinatorial mathematics
    - Games and puzzles
---


This problem, posed first by G.L. Honaker, is to put a queen and the $n^2$ numbers $1,...,n^2$, on a $n \times n$ chessboard so that:

1. no two numbers are on the same cell,
2. any number $i+1$ is reachable by a knight move from the cell containing $i$,
3. the number of "free" primes (i.e., primes not attacked by the queen) is minimal.

Note that 1 is not prime, and that the queen does not attack its own cell.


An Example of solution
----------------------

A 6x6 chessboard without free primes (the queen is on the cell containing 33): 


   |    |    |    |     |	
 --| ---| -- | ---|  -- |  --
 9 | 32 |  3 | 28 | 11 | 30
 4 | 27 | 10 | 31 | 34 |  1
17 |  8 | 33 |  2 | 29 | 12
26 |  5 | 16 | 19 | 22 | 35
15 | 18 |  7 | 24 | 13 | 20
 6 | 25 | 14 | 21 | 36 | 23

problem 58 The name of the problem is Production_Line_Sequencing.md
---
Title:    Production Line Sequencing
Proposer:
	- Ã–zgÃ¼r AkgÃ¼n
	- Zeynep Kiziltan
---

A problem description from the paper cite{bergen2001constraint} is the following:

The manufacturing plant that we study produces approximately 36,000 vehicles in a month on two assembly lines and the sequencing is done once per month.

The input to the problem is a list of orders (an order is a quantity of identical vehicles) that need to be produced during that month, capacity values that specify how many vehicles can be produced on each day on each assembly line, and the user-specified constraints. As a first step, each order is split into several smaller quantities of vehicles called lots such that the size of each lot is less than or equal to 60 vehicles, called the batch size. The lots are then grouped together into batches by putting together similar lots with sizes that add up to the batch size. Each batch is assumed to take one hour of time to produce on an assembly line. A typical problem instance has lots with between one and 60 vehicles, and batches with between one and ten lots, with the majority of batches having only one lot. It is important to note that after batching, the lots are not sequenced in a batch and thus sequencing actually occurs at the lot level.

The lots and batches have attributes. Some attributes are common to all problem instances and others are user-definable and thus specific to a problem instance. Common attributes include the assembly lines that a lot can be produced on, the date a lot must be produced after (line-on date), and the date a lot must be produced by (line-off date). User definable attributes are either selected from a set of basic attributes such as vehicle model, exterior colour, type of engine, and type of transmission; or are constructed from these basic attributes by Cartesian-product. A batch's attribute values are taken from the attribute values of its lots. Each attribute has a different method for deriving the batch attribute value from the lot values when the lot values differ.

The capacity values specify the number of batches that can be produced on each assembly line on each day. If no vehicle production is desired on a particular day, then the capacities for that day are zero. The capacities are assigned such that the sum of all the capacities for each day and assembly line equals the total number of batches that need to be produced for the month. Hence, there is no excess capacity. A day's production on an assembly line is sub-divided into consecutive intervals of time called slots which have a fixed start time and a duration of one hour (since each batch is assumed to take one hour of time to produce). In a final sequence, every slot is assigned one and only one unique batch. A typical problem instance consists of two assembly lines each with 20 days of non-zero capacities. Each of these daily capacities is approximately fifteen batches, which gives a total capacity of 600 batches or 36,000 vehicles.

Each problem contains constraints that restricts which sequences are acceptable. Each constraint is over one or more slots, each slot taking a value from the set of all batches. Constraints are as follows.

Assembly Line. The manufacturing plant contains two assembly lines. Because of unique equipment, some vehicles can only be assembled on one of the lines, while others can be assembled on either line. If a batch contains a lot that can only be assembled on one of the assembly lines, then the batch must be assembled on that assembly line. There is an assembly line constraint over each slot. Since each slot belongs to an assembly line, only batches that can be made on that assembly line can be assigned to the slot.

Line-On and Line-Off. Each vehicle that is ordered must be produced sometime during the month. However, because of part availability or shipping deadlines, some orders have more stringent scheduling requirements. For this reason, each lot has a line-on and line-off day. A lot must be produced on or after its line-on day, and on or before its line-off day. A batch's line-on day is the maximum line-on day of its lots and its line-off day is the minimum line-off day of its lots. There is a line-on and line-off constraint over each slot.

Even Distribution. An assembly line should produce a variety of different types of vehicles each day and the production of similar types of vehicles should be spread evenly over the month. Reasons for this include maintaining workers skills for making all types of vehicles, part availability, and producing certain amounts of each type of vehicle prior to any unexpected assembly line shutdown. The even distribution constraint spreads the batches by specifying the number of batches with a particular attribute value that must be produced on each day. There is an even distribution constraint for each production day and the constraint is over all of the slots that belong to that day.

Distribution Exception. Sometimes an even distribution is inappropriate. For example, when a new model year is introduced, production teams need time to learn new procedures and the distribution of new models should be restricted so that fewer are produced early in the month. To do this, a distribution exception constraint specifies a minimum and maximum number of batches with a particular attribute value that can be produced on each day during a specified period of days in the month. There is a distribution exception constraint for each production day and the constraint is over all of the slots that belong to that day.

Batting Order. Each day, a similar sequencing pattern should be followed on each assembly line. One reason for this is to sequence simple vehicles at the beginning of the day and gradually progress to more difficult vehicles. This allows the production teams to warm up before building more complicated vehicles. To do this, batting order constraints are defined on user-specified attributes and on user-specified orderings of those attributes' values. Specifically, on each day, a batch must be produced before another batch if its attribute value is ordered before the attribute value of the other batch. There is a batting order constraint between each pair of consecutive slots that are on the same day.

All-Different. A constraint is needed to ensure that every batch appears exactly once in any sequence. The all-different constraint is defined over all the slots.

A solution to the vehicle assembly line sequencing problem consists of an assignment of batches to slots and a sequencing of the lots within batches such that all the constraints are satisfied.



problem 59 The name of the problem is Product_Matrix_Travelling_Salesman_Problem.md
---
Title:    Product Matrix Travelling Salesman Problem
Proposer:
    - Sascha Van Cauwelaert
    - Pierre Schaus
Category: Combinatorial mathematics
---

Given two vectors of $n$ elements $C$ and $P$, one can construct a simple graph $G$ with $n$ vertices, such that the directed edge from the vertex $i$ to the vertex $j \neq i$ has a cost equal to $C(i) \cdot P(j)$. The distance matrix is therefore the matrix product between the vectors $C$ and $P$, hence the name of the problem. The problem consists in finding an Hamiltonian circuit of minimum total cost in the graph $G$. This problem was first described in cite{plante1987product} and shown to be NP-hard in cite{sarvanov1980complexity,gilmore1985well}.


problem 60 The name of the problem is Progressive_Party_Problem.md
---
Title:    Progressive Party Problem
Proposer: Toby Walsh
Category: Scheduling and related problems
---


The problem is to timetable a party at a yacht club. Certain boats are to be designated hosts, and the crews of the remaining boats in turn visit the host boats for several successive half-hour periods. The crew of a host boat remains on board to act as hosts while the crew of a guest boat together visits several hosts. Every boat can only hold a limited number of people at a time (its capacity) and crew sizes are different. The total number of people aboard a boat, including the host crew and guest crews, must not exceed the capacity. A table with boat capacities and crew sizes can be found below; there were six time periods. A guest boat cannot not revisit a host and guest crews cannot meet more than once. The problem facing the rally organizer is that of minimizing the number of host boats.


boat number |capacity | crew size
------------|---------|----------
1   | 6  | 2
2   | 8  | 2
3   | 12 | 2
4   | 12 | 2
5   | 12 | 4
6   | 12 | 4
7   | 12 | 4
8   | 10 | 1
9   | 10 | 2
10  | 10 | 2
11  | 10 | 2
12  | 10 | 3
13  | 8  | 4
14  | 8  | 2
15  | 8  | 3
16  | 12 | 6
17  | 8  | 2
18  | 8  | 2
19  | 8  | 4
20  | 8  | 2
21  | 8  | 4
22  | 8  | 5
23  | 7  | 4
24  | 7  | 4
25  | 7  | 2
26  | 7  | 2
27  | 7  | 4
28  | 7  | 5
29  | 6  | 2
30  | 6  | 4
31  | 6  | 2
32  | 6  | 2
33  | 6  | 2
34  | 6  | 2
35  | 6  | 2
36  | 6  | 2
37  | 6  | 4
38  | 6  | 5
39  | 9  | 7
40  | 0  | 2
41  | 0  | 3
42  | 0  | 4


problem 61 The name of the problem is Quasigroup_Completion.md
---
Title:    Quasigroup Completion
Proposer: Gilles Pesant
Category: Combinatorial mathematics
---

An order $m$ quasigroup is a Latin square of size $m$. That is, a $m$ by $m$ multiplication table in which each element occurs once in every row and column. For example,
``` 
1        2       3       4
4        1       2       3
3        4       1       2
2        3       4       1
```
is an order 4 quasigroup. 

Problem 3 of the CSPlib asks about the existence of quasigroups. This variant asks to complete a quasigroup given some of its entries. For example, partially specified quasigroup
``` 
1                        4
                 2        
3                1        
         3                
```
could be completed as the first example above.


problem 62 The name of the problem is Quasigroup_Existence.md
---
Title:    Quasigroup Existence
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


An order m quasigroup is a Latin square of size m. That is, a $m \times m$ multiplication table in which each element occurs once in every row and column. For example,

```
1	 2	 3	 4
4	 1	 2	 3
3	 4	 1	 2
2	 3	 4	 1
```

is an order 4 quasigroup. A quasigroup can be specified by a set and a binary multiplication operator, \* defined over this set.
Quasigroup existence problems determine the existence or non-existence of quasigroups of a given size with additional properties. Certain existence problems are of sufficient interest that a naming scheme has been invented for them. We define two new relations, \*321 and \*312 by $a \*321 b = c$ iff $c\*b=a$ and $a \*312 b = c$ iff $b\*c=a$.

QG1.m problems are order m quasigroups for which if $a\*b=c$, $a\*b=c\*d$ and $a \*321 b = c \*321 d$ then $a=c$ and $b=d$.

QG2.m problems are order m quasigroups for which if a\*b=c\*d and a \*312 b = c \*312 d then a=c and b=d.

QG3.m problems are order m quasigroups for which $(a\*b)\*(b\*a) = a$.

QG4.m problems are order m quasigroups for which $(b\*a)\*(a\*b) = a$.

QG5.m problems are order m quasigroups for which $((b\*a)\*b)\*b = a$.

QG6.m problems are order m quasigroups for which $(a\*b)\*b = a\*(a\*b)$.

QG7.m problems are order m quasigroups for which $(b\*a)\*b = a\*(b\*a)$.

For each of these problems, we may additionally demand that the quasigroup is idempotent. That is, a\*a=a for every element a.


problem 63 The name of the problem is Rack_Configuration_Problem.md
---
Title:    Rack Configuration Problem
Proposer: 
    - Zeynep Kiziltan
    - Brahim Hnich
Category: Design and configuration
---


The rack configuration problem consists of plugging a set of electronic cards into racks with electronic connectors. Each card plugged into a rack uses a connector. In order to plug a card into a rack, the rack must be of a rack model.


Each card is characterised by the power it requires. Each rack model is characterised by the maximal power it can supply, its number of connectors, and its price. The problem is to decide how many of the available racks are actually needed, and which rack is of which rack model model such that

* every card is plugged into one rack
* the total power demand and the number of connectors required by the cards does not exceed that available for a rack
* the total price is minimised.

problem 64 The name of the problem is Ramsey_Numbers.md
---
Title:    Ramsey Numbers
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


The Ramsey number R(k,l) is the smallest number such that every graph with this or more nodes either contains a clique of size k or an independent set of size l. Ramsey proved that such a number exists for every (k,l) pair, but computing it has proven to be extremely difficult.
The problem can be posed as edge-colouring. The Ramsey number R(k,l) is the smallest number such that if we two-colour the edges of complete graph of this size, there always exists a monochromatic sub-graph of either k or l nodes.

A related problem (which is often called the Ramsey problem) is to colour the edges of a complete graph with n nodes using at most k colours, in such a way that there is no monochromatic triangle in the graph, i.e. in any triangle at most two edges have the same colour. With 3 colours, the problem has a solution if n < 17.

There exist various interesting generalizations of Ramsey numbers (e.g. to hypergraphs, to graphs which are complete except for a limited number of edges, or to infinite size graphs).

{prob015} is closely related.


problem 65 The name of the problem is Resource-Constrained_Project_Scheduling_Problem__RCPSP_.md
---
Title:    Resource-Constrained Project Scheduling Problem (RCPSP)
Proposer: 
 - Peter Nightingale
 - Emir DemiroviÄ‡
Category: Scheduling and related problems
---

The resource-constrained project scheduling problem is a classical well-known problem in operations research. 
A number of activities are to be scheduled. Each activity has a duration and cannot be interrupted. 
There are a set of precedence relations between pairs of activities which state that the second activity must start after the first has finished.
The set of precedence relations are usually given as a directed acyclic graph (DAG), where the edge (*u*,*v*) represents a precedence relation where *u* must finish before *v* begins. The DAG contains two additional activities with duration 0, the *source* and *sink*, where the *source* is the first activity and *sink* is the last activity (these are dummy activities).  

There are a set of renewable resources. Each resource has a maximum capacity and at any given time slot no more than this amount can be in use. Each activity has a demand (possibly zero) on each resource. The dummy *source* and *sink* activities have zero demand on all resources. 

The problem is usually stated as an optimisation problem where the makespan (i.e. the completion time of the *sink* activity) is minimised. 

## Multi-mode Variant

An extension of the basic RCPSP is the *multi-mode* variant where activities may have multiple *modes*. The mode dictates the duration and resource demands of the activity. In this variant, the schedule must give the mode of each activity as well as its starting time. 

## Non-Renewable Resources

Another extension concerns *non-renewable resources*. Each non-renewable resource has a capacity for the entire schedule. An example would be a financial budget that applies to the entire project. Modes of activities must be chosen to avoid exceeding the capacity of each of the non-renewable resources.

The <a href="http://www.om-db.wi.tum.de/psplib/">PSPLIB repository</a> has a set of benchmark instances of various types of RCPSP cite{psplib-paper}. 



problem 66 The name of the problem is Ridesharing.md
---
Title:    Ridesharing
Proposer: Vincent Armant
Category: Scheduling and related problems
---



The aim is to match riders to drivers, satisfying car capacities and individual trip constraints, while maximizing the total number of rider participants. A driver's trip offer is specified as a route from start to finish, a time window of earliest departure and latest arrival, and the number of available seats for passengers. A rider's trip request specifies a start location and destination and a time window. Some drivers (called shifters) are flexible, and are willing to be selected as riders. Shifters specify both a trip offer and a trip request. We assume a driver will definitely drive, regardless of whether or not match is made; a shifter will definitely travel, and thus will drive if not selected as a passenger and no rider is matched. Each driver that is allocated one or more riders must be given a departure time and an arrival time at each point on the route, such that the time gap between any pair of locations is not less than the known travel times. For a rider to be assigned to a driver, the rider's start and finish locations must be on the drivers route in the right order, and the driver's times must satisfy the rider's time window. Multiple riders can be allocated to the same driver, as long as the number of passengers travelling between any pair of locations on the route does not exceed the available number of seats. If a shifter is assigned as a passenger for another driver, then the shifter doesnot drive, and no rider can be assigned to the shifter. Similarly, if a rider is assigned as a passenger on the shifter's trip, then the shifter cannot be assigned as a passenger. A driver is served when at least one rider is assigned to the driver's trip; a rider is served when he or she is assigned to a trip. A solution to the ride sharing problem is then an assignment of a clear role to shifters (driver or rider) and a matching of drivers to riders that satisfies the above constraints.


* For each instance of ridesharing problem the following data file is required.
* The Map 
* "source" "destination" "distance" "time" "cost"
* The drivers trip offers 
* "userId" "departure" "arrival" "earliest starting time" "latest arrival time" "car capacity"
* The riders trip requests
* "userid" "departure" "arrival" "earliest starting time" "latest arrival time" "reward"



Example of map
<pre>
1 2 10
2 3 10
3 4 10
4 5 10
5 6 10
7 8 10
8 4 10
5 9 10
9 10 10
</pre>

Example of driver trip offers:
<pre>
1 1 6 0 70 2
2 7 10 10 80 2
3 8 9 20 40 2
</pre>

Example of rider trip requests:
<pre>
4 2 3 20 30 1
5 4 5 40 60 1
3 8 9 20 40 3
</pre>



problem 67 The name of the problem is Rotating_Rostering_Problem.md
---
Title:    Rotating Rostering Problem
Proposer: Sven LÃ¶ffler, Ilja Becker, Petra Hofstedt
Category: Scheduling and related problems
---

## Rotating Rostering Problem 
This problem is taken from real life rostering challenges (like nurse rostering). The task is it to find a
shift assignment for every employee for every day. A rotation system is used to decrease the size of the problem. Thus,
only the rostering for one employee is calculated and all other employees gain a rotated version of the rostering. So
Employee 2 has in the first week the rostering of Employee 1 in the second week. Employee 3 has in the first week the
rostering of Employee 2 in the second week and Employee 1 in the third week etc. See the following example for 4
employees:

|            |        |        |        |        |
|------------|--------|--------|--------|--------|
| Employee 1 | Week 1 | Week 2 | Week 3 | Week 4 |
| Employee 2 | Week 2 | Week 3 | Week 4 | Week 1 |
| Employee 3 | Week 3 | Week 4 | Week 1 | Week 2 |
| Employee 4 | Week 4 | Week 1 | Week 2 | Week 3 |

Thus, the number of employees is always also the number of weeks. Furthermore, it must be possible to have the shift
assignments of the first week (week1) follow after the last week (week4) to create a continuous rolling schedule.
Consider that every week in this example represents the shift assignment for 7 days, for example: week1 = Night, Day Off,
Day Off, Day Off, Early, Early, Early. Thus, the resulting rostering can be read in two ways. Reading a line shows the
rostering for one employee for all weeks. Reading a column (meaning a day of the week) shows the rostering for all
employees for one day. Further details and restrictions follow below.

### Definitions and restrictions

- let $w$  in N be the number of weeks (and also the number of employees) we're planning for
    - ..be $x_1$ to $x_{(w*7)}$ the variables for the CSP, i.e. the days
- there are 4 possible shifts: early = 1, late = 2 and night shift = 3 and day off (rest day) = 0 
    - ..resulting in the domains $D_1 = D_2 = â€¦ =  D_{(w*7)} = \{0,1,2,3\}$
- $C_{shiftRequirements}$: for every weekday for each shift the number of required staff is provided (e.g. usually less
   staff is required on the weekend) see an example staff requirement matrix $M$ below
- $C_{shiftRepetitions}$: for every shift type a maximum number of consecutive assignments to this shift is given to
   comply with work regulations, e.g. we restrict the general number of repetitions to $s_{max} = 4$. A number of minimal
   consecutive assignments is given as well to comply with work regulations, e.g. we demand at least two days in a row
   with the same shift $s_{min} = 2$
- $C_{shiftOrder}$: restricts the order of shifts. There is a forward rotating principle. This means, that after an early
   shift there can only follow a shift with the same or a higher value, or a rest shift (day off).
- $C_{equalDays}$: constrains that weekend days (Saturday and Sunday) always have the same shift
- $C_{restDays}$: at least 2 days must be rest days every 14 days.

These restrictions are either based on regulations or academic findings on good work practices.

A rostering instance can be described by Rostering-*w*-*M*-$s_{min}$-$s_{max}$, where

- $w$ is the number of weeks
- $M$ is a 4 times 7 matrix, including at $M_{i,j}$ the needed employees for shift *(i-1)* and day *j* (shift types are 0-indexed, the matrix *M* is 1-indexed)
- $s_{min}$ is the minimum number of days in a row with the same shift
- $s_{max}$ is the maximum number of days in a row with the same shift

The following CSP $P = (X, D, C)$ can describe the problem:

* variables $X = \\{x\_{1}, ..., x\_{w * 7} \\}$ ($w * 7$ variables for the days)
     - $X$ is also represented by a matrix $X^{2d}$
        with matrix elements $X^{2d}\_{i,j} = x\_{(i-1)*7+j}, i \in \\{1,...,w\\}, j \in \\{1,...,7\\}$.

* domains $D = \\{D\_{1}, ..., D\_{w * 7} \ | \ D\_1 = ... = D\_{w * 7} =  \\{0,1,2,3\\}\\}$  ($3+1$ different shifts)

* constraints $C$ is the conjunction of:
      * $\\{global\\\_cardinality(\\{(X\_{1,i}^{2d}, X\_{2,i}^{2d}, ...,
        X\_{w,i}^{2d}\\}, \\{(0,M_{1,i}),(1,M_{2,i}),(2,M_{3,i}),(3,M_{4,i})\\}) \;\;\; | \;\;\; \forall i \in \\{1,...,7\\} \\}$ $(C\_{shiftRequirements})$
      *   $\\{X^{2d}\_{j,7-1} = X^{2d}\_{j,7}  \;\;\; | \;\;\; \forall j \in \\{1,...,w\\\}\\}$ $(C\_{equalDays})$
      *   $\\{ (x\_i \neq x\_{(i+1)\_{mod}}) \rightarrow all\\_equal(\\{x\_i, x\_{(i-1)\_{mod}}, ..., x\_{(i-s\_{min}+1)\_{mod}}\\}) \;\;\; |  \;\;\; \forall i \in \\{1,...,w * 7\\}\\}$ $(C\_{shiftRepetitions\ 1})$
      *   $\\{all\\_equal(x\_i, x\_{(i+1)\_{mod}}, x\_{(i+2)\_{mod}}, ... ,
          x\_{(i+s\_{max}-1)\_{mod}}) \rightarrow (x\_i \neq x\_{(i+s\_{max})\_{mod}})
          \;\;\; | \;\;\; \forall i \in \\{1, ..., w * 7\\}\\}$ $(C\_{shiftRepetitions\ 2})$
      *   $\\{(x\_i \leq x\_{(i+1)\_{mod}}) \vee (x\_{(i+1)\_{mod}} = 0) \;\;\; | \;\;\; \forall
          i \in \\{1,...,w * 7\\}\\}$ $(C\_{shiftOrder})$
      *   $\\{count(0,\\{x\_{i}, x\_{(i+1)\_{mod}}, ..., x\_{(i+2 * 7)\_{mod}}\\},\geq,2) \;\;\; |  \;\;\;
          \forall i \in \\{1,...,w * 7\\}\\}$ $(C\_{restDays})$ 




where "$i_{mod}$" stands for "$(i\ mod\ (w * 7)) + 1$" and allows to describe a continuous schedule 

and with an example staff requirement table like *M*:


| Shift / Day| Mo     | Tu     | We     |  Th    |  Fr    |  Sa    |  Su    |
|------------|--------|--------|--------|--------|--------|--------|--------|
| Day Off    | 2      |      2 |      2 |      2 |      2 |      4 |      4 |
| Early      | 2      |      2 |      2 |      2 |      2 |      2 |      2 |
| Late       | 2      |      2 |      2 |      2 |      2 |      1 |      1 |
| Night      | 2      |      2 |      2 |      2 |      2 |      1 |      1 |


This represents an instance that covers 8 weeks with 8 employees, as can be calculated from the assignments to the
shifts in *M*.


problem 68 The name of the problem is Schur_s_Lemma.md
---
Title:    Schur's Lemma
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


The problem is to put $n$ balls labelled ${1,...,n}$ into 3 boxes so that for any triple of balls $(x,y,z)$ with $x+y=z$, not all are in the same box. This has a solution iff $n < 14$.
The problem can be formulated as an 0-1 problem using the variables, $M_{ij}$ for $i \in {1,...,n}, j \in {1,2,3}$ with $M_{ij}$ true iff ball $i$ is in box $j$. The constraints are that a ball must be in exactly one box, $M_{i1} + M_{i2} + M_{i3} = 1$ for all $i \in {1,...,n}$. And for each $x+y=z$ and $j \in {1,2,3}$, not $(M_{xj} \wedge M_{yj} \wedge M_{zj}$). This converts to, $(1-M_{xj}) + (1-M_{yj}) + (1-M_{zj}) \geq 1$ or, $M_{xj} + M_{yj} + M_{zj} \leq 2$.

One natural generalization is to consider partitioning into $k$ boxes (for $k>3$).

Ramsey numbers are closely related, and are described in {prob017}.


problem 69 The name of the problem is Social_Golfers_Problem.md
---
Title:    Social Golfers Problem
Proposer: Warwick Harvey
Category: Scheduling and related problems
---


The coordinator of a local golf club has come to you with the following problem. In their club, there are 32 social golfers, each of whom play golf once a week, and always in groups of 4. They would like you to come up with a schedule of play for these golfers, to last as many weeks as possible, such that no golfer plays in the same group as any other golfer on more than one occasion.
Possible variants of the above problem include: finding a 10-week schedule with "maximum socialisation"; that is, as few repeated pairs as possible (this has the same solutions as the original problem if it is possible to have no repeated pairs), and finding a schedule of minimum length such that each golfer plays with every other golfer at least once ("full socialisation").

The problem can easily be generalized to that of scheduling $m$ groups of $n$ golfers over $p$ weeks, such that no golfer plays in the same group as any other golfer twice (i.e. maximum socialisation is achieved).

This problem is derived from a question posted to sci.op-research by
bigwind777@aol.com (Bigwind777) in May 1998. It is a generalisation of the
problem of constructing a
round-robin tournament schedule, where the number
of players in a "game" is
more than two. The optimal solution for 32 golfers is not yet known.


problem 70 The name of the problem is Solitaire_Battleships.md
---
Title:    Solitaire Battleships
Proposer: Ian Gent 
Category: Games and puzzles
---


The Battleships puzzle is occasionally published in Games Magazine (US), e.g. in the August 1998 issue where it is credited to Mark Gottlieb. It is loosely based on the two person pencil and paper game. I quote the puzzle description in the magazine:

This fleet consists of one battleship (four grid squares in length), two cruisers (each three grid squares long), three three destroyers (each two squares long) and four submarines (one square each). The ships may be oriented horizontally or vertically, and no two ships will occupy adjacent grid squares, not even diagonally. The digits along the right side of and below the grid indicate the number of grid squares in the corresponding rows and columns that are occupied by vessels.

In each of the puzzles, one or more `shots' have been taken to start you off. These may show water (indicated by wavy lines), a complete submarine (a circle), or the middle (a square), or the end (a rounded-off square) of a longer vessel.

Here is an example problem, the first from that issue of the magazine:

<pre>
  -------------------
0|                   |
2|                   |
3|                   |
1|                   |
2|                   |
4|                   |
2|                   |
1|o                  |
2|                   |
3|                   |
 --------------------
  1 3 3 1 5 1 2 4 0 0
</pre>

The "o" in the grid indicates a submarine must occupy that square.
Published puzzles all have a grid of 10x10 and the ships as described above. Of course there is no reason that these properties cannot be varied.


problem 71 The name of the problem is Sports_Tournament_Scheduling.md
---
Title:    Sports Tournament Scheduling
Proposer: Toby Walsh
Category: Scheduling and related problems
---

The problem is to schedule a tournament of $n$ teams over $n-1$ weeks, with each week divided into $n/2$ periods, and each period divided into two slots. The first team in each slot plays at home, whilst the second plays the first team away. A tournament must satisfy the following three constraints: every team plays once a week; every team plays at most twice in the same period over the tournament; every team plays every other team.

An example schedule for 8 teams is: 

<table>
  <tr>
    <td></td><td>Week 1</td><td>Week 2</td><td>Week 3</td><td>Week 4</td><td>Week 5</td><td>Week 6</td><td>Week 7</td>
  </tr>
  <tr>
    <td>Period 1</td><td>0 v 1</td><td>0 v 2</td><td>4 v 7</td><td>3 v 6</td><td>3 v 7</td><td>1 v 5</td><td>2 v 4</td>
  </tr>
  <tr>
    <td>Period 2</td><td>2 v 3</td><td>1 v 7</td><td>0 v 3</td><td>5 v 7</td><td>1 v 4</td><td>0 v 6</td><td>5 v 6</td>
  </tr>
  <tr>
    <td>Period 3</td><td>4 v 5</td><td>3 v 5</td><td>1 v 6</td><td>0 v 4</td><td>2 v 6</td><td>2 v 7</td><td>0 v 7</td>
  </tr>
  <tr>
    <td>Period 4</td><td>6 v 7</td><td>4 v 6</td><td>2 v 5</td><td>1 v 2</td><td>0 v 5</td><td>3 v 4</td><td>1 v 3</td>
  </tr>
</table>

One extension of the problem is to double round robin tournaments in which each team plays every other team (as before) but now both at home and away. This is often solved by repeating the round robin pattern, but swapping home games for away games in the repeat.


problem 72 The name of the problem is Steel_Mill_Slab_Design.md
---
Title:    Steel Mill Slab Design
Proposer: Ian Miguel
Category: 
    - Design and configuration
    - Bin packing
---

<h3>Specification - Type 1</h3>

Steel is produced by casting molten iron into slabs. A steel mill can
produce a finite number, <EM>&sigma;</EM>, of <EM>slab sizes</EM>. An
order has two properties, a <em>colour</em> corresponding to the route
required through the steel mill and a <em>weight</em>. Given
<em>d</em> input orders, the problem is to assign the orders to slabs,
the number and size of which are also to be determined, such that the
total weight of steel produced is minimised. This assignment is
subject to two further constraints:

<OL>
<LI><B>Capacity constraints</B>: The total weight of orders assigned to a slab
    cannot exceed the slab capacity.
<LI><B>Colour constraints</B>: Each slab can contain at most <EM>p</EM> of
    <EM>k</EM> total colours (<EM>p</EM> is usually 2).
</OL>

The colour constraints arise because it is expensive to cut up slabs
in order to send them to different parts of the mill.

The above description is a simplification of a real industrial problem
(see [1]). For example, the problem may also include <EM>inventory
matching</EM>, where surplus stock can be used to fulfil some of the orders.

<h3>Specification - Type 2</h3>

The Type 1 specification does not constrain the number of slabs
used. The Type 2 specification (see [2]) extends the objective to
require further that the number of slabs used to accommodate the
minimal weight of steel is also minimised.

<OL>
<LI>J. R. Kalagnanam, M. W. Dawande, M. Trumbo, H. S. Lee.
    "<A HREF="http://domino.watson.ibm.com/library/cyberdig.nsf/0/b5a5d1e00fe8db8d85256611004ae781?OpenDocument">Inventory
    Matching Problems in the Steel Industry</A>,"
    IBM Research Report RC 21171, 1998.

<LI>A. Gargani, P. Refalo.  An Efficient Model and Strategy for the
    Steel Mill Slab Design Problem.  Proceedings of the 13th
    International Conference on Principles & Practice of Constraint
    Programming, 77-89, 2007.  </OL>

problem 73 The name of the problem is Steiner_triple_systems.md
---
Title:    Steiner triple systems
Proposer: Francisco Azevedo
Category: Combinatorial mathematics
---


The ternary Steiner problem of order n consists of finding a set of $n.(n-1)/6$ triples of distinct integer elements in $\\{1,\dots,n\\}$ such that any two triples have at most one common element. It is a hypergraph problem coming from combinatorial mathematics cite{luneburg1989tools} where n modulo 6 has to be equal to 1 or 3  cite{lindner2011topics}. One possible solution for $n=7$ is {{1, 2, 3}, {1, 4, 5}, {1, 6, 7}, {2, 4, 6}, {2, 5, 7}, {3, 4, 7}, {3, 5, 6}}. The solution contains $7*(7-1)/6 = 7$ triples.

This is a particular case of the more general [Steiner system](http://www.win.tue.nl/~aeb/drg/graphs/S.html).

More generally still, you may refer to Balanced Incomplete Block Designs {prob028}. In fact, a Steiner Triple System with n elements is a BIBD$(n, n.(n-1)/6, (n-1)/2, 3, 1)$


problem 74 The name of the problem is Stochastic_Assignment_and_Scheduling_Problem.md
---
Title:    Stochastic Assignment and Scheduling Problem 
Proposer: David Hemmi, Guido Tack and Mark Wallace
Category: Stochastic Constraint Programming
---
The stochastic assignment and scheduling problem is a two-stage stochastic optimisation problem with recourse. 

A set of jobs, each composed of multiple tasks, is to be scheduled on a set of machines. 
Precedence constraints ensure that tasks, which belong to the same job are executed sequentially. 
Once the processing of a task has started, it can not be interrupted (non preemptive scheduling).
The tasks may be restricted to a sub-set of machines.
No more that one task may be executed concurrently on a machine.
The task processing time depends on the selected machine, e.g. certain machines can finish a task faster than others.
Furthermore, the processing times are subject to uncertainty, e.g. random variables. 
Scenarios are used to describe the uncertainty. 
A scenario describes a situation where all processing times are known and a complete schedule can be created.
We assume that all processing times are known at the beginning of the second stage. 

The problem is composed of two stages. 
In the first stage, all the tasks have to be allocated to a machine. 
Once the tasks are allocated, their processing time is revealed. 
In the second stage a schedule for each machine is created, with respect to the observed processing times. 
The objective is to find a task to machine assignment minimizing the expected (average) makespan over all scenarios.



problem 75 The name of the problem is Supply_Chain_Coordinations.md
---
Title:    Supply Chain Coordinations
Proposer: 
    - David A. Burke
    - Kenneth N. Brown
    - Mustafa Dogru
    - Ben Lowe
Category: 
---

### Overview

This benchmark originates from a collaboration between Cork Constraint Computation Centre (Dept. of Computer Science, University College Cork, Ireland) and Bell Labs Ireland (Alcatel-Lucent, Dublin, Ireland) as part of the Centre for Telecommunications Value-chain Research. This work is supported by Science Foundation Ireland under Grant No. 03/CE3/I405.

This specification describes the Supply Chain Coordination (SCC) problem for Distributed Constraint Optimisation. SCC involves the planning and coordinating of production and delivery schedules among several agents (business units). Each agent is responsible for the production of certain finished goods (products - P) from raw materials (components - C) (See Figure 1). Goods move up the supply chain between agents such that products from one agent may be components of another agent. Agents in the problem must agree delivery schedules for the movement of the goods (shaded boxes linked with arrows indicate delivery schedules that must be agreed). There are 3 types of agents:

-   a single root agent (R), at the top of the supply chain that has a fixed demand for its products from customers (not other agents) - delivery schedules must be agreed with agents it is receiving components from;
-   leaf agents (L), at the bottom of supply chain that have fixed constraints on component availability - delivery schedules must be agreed with agents they are sending products to;
-   intermediate agents (I), that are both receiving components from agents and delivering products to other agents in the problem - delivery schedules must be agreed for both.

Each agent also has a local production scheduling problem that must be simultaneously solved. The overall objective of the agents is to coordinate their production and delivery schedules such that the total costs (production, delivery, holding and penalty costs) in the supply chain network are minimised.

![](assets/scc.jpg)

### Root Agent

At the top of the supply chain is a single root agent producing a number of products over a fixed planning horizon (See Figure 2). In each period *t* of the planning horizon, the root has a specific demand *D<sub>it</sub>* from customers for each of its products *i*. To produce the products, the root agent must order components from they agents supplying it components. Components are delivered in batches (e.g. pallet, container or truckload), where *s<sub>j</sub>* is the quantity/batch size.
 A single order *O<sub>jt</sub>*, incurring a fixed cost *y<sub>j</sub>*, specifies the number of batches of a particular component *j* that must be delivered in period *t*. The root agent must coordinate with the agents that supply it to decide how to schedule the orders/deliveries.
 When negotiating these schedules, the agents have to consider production constraints. We assume that each agent has a single production facility for producing all products, and there is a setup cost, *w<sub>i</sub>*, and time *v<sub>i</sub>* associated with starting production of a product. Each product takes a specific length of time to build *l<sub>i</sub>*. In any period, the agent will decide how much of each product it will build, *m<sub>it</sub>*. Given that each product is independent, the sequence of these productions is irrelevant and so can be done one after the other. In this case, there will at be at most one setup cost per period per product, indicated by the \\{0,1\\} variable *b<sub>it</sub>* which is forced to be correctly set according to (2). A capacity constraint (3) states that the total production in any period cannot exceed the total factory capacity, *C<sub>t</sub>*, for that period.
 The closing component inventory in any period is equal to the previous days closing inventory plus the number of components arriving less the number of components used in that period -- what components go into each product is defined by the bill of materials, *B<sub>ij</sub>* (10). The closing product inventory is calculated in a similar manner (11). Note that the latter two constraints also have the effect of ensuring that *q<sub>it</sub>* is less than or equal to the products available on any particular day.
 Holding costs are charged for each item in storage and we assume that these costs incorporate charges for both excess and obsolete items. The number of components that arrive is dependent on the assignment to *O<sub>jt</sub>* (4), which is also constrained by (5). The variable *o<sub>jt</sub>* is used identify the periods in which order costs are incurred (6). The quantity of products dispatched in any period cannot be greater than the demand from customers on the corresponding delivery date (dispatch date + delivery time) (7). We assume that the root will deliver its products on time or not at all. However, there is a cost associated with non-delivery (i.e. profits missed out on). The utility function, (1), calculates costs that arise for the agent from (i) order costs (ii) holding costs (iii) missed customer orders; and (iv) production setup.

![](assets/root.jpg)

### Leaf Agent

The model for a leaf agent is described in Figure 3. The agent has a decision variable *O<sub>jt</sub>*, which is constrained to be equal to the corresponding variable of the agent(s) it is supplying products to.
 The leaf agent's internal problem is similar to that of the root agent, except we are assuming that a known, fixed amount of components for manufacturing products will arrive in each time period *A<sub>jt</sub>* (supply constraints). The supplier has a capacity constraint (14) on what it can produce in any given period.
 The inventory at the end of any period has to be non-negative, when the number of products dispatched to the receiving agents are subtracted -- the number of products dispatched in each period is calculated to be the number of batches that have to be sent (taking into account the delivery time) multiplied by the batch size (19). The component inventory is also constrained to be non-negative (18).
 The setup costs are calculated as in the root agent model using the variable *b<sub>it</sub>* (13). The supplier's utility function, (12), is the sum of the holding costs and production setup costs.

![](assets/leaf.jpg)

### Intermediate Agent

The intermediate agent (Figure 4), both receives components from, and delivers products to other agents in the problem. As such, the agent has two public decision variables: *O<sub>jt</sub>* - orders made for components; and O<sub>it</sub> orders received for its products. The remainder of the model is a hybrid of the root and leaf agent models. The utility function, (20), calculates costs that arise for the agent from (i) order costs (ii) holding costs and production setup.

![](assets/intermediate.jpg)

### Assumptions

We make a number of assumptions in this scenario, but it is possible to extend it to consider more details if required. Production scheduling could be extended to allow multiple production facilities, dependencies, etc., if desired. We assume unlimited storage space, but the scenario can easily be extended to include storage limits. A more sophisticated cost model with customers, incorporating various late-delivery charges could also be included if necessary. Finally, the agent models described here assume that there is a single source for each component, and a single destination for each product, but again, it is easy to modify the models to allow alternate supply chain.

### Problem Parameters

To instantiate the models we provide parameter settings, chosen to be representative of real-world scenarios, in Table 1. The ranges for each parameter allow a variety of different SCC instances to be considered, e.g. high/low product demand, underconstrained/overconstrained factory capacities, different ratios of holding cost to penalty cost etc. Specific problem instances are also included in this benchmark and can be found on the main benchmark page.

![](assets/problems.jpg)


problem 76 The name of the problem is Synchronous_Optical_Networking__SONET__Problem.md
---
Title: Synchronous Optical Networking (SONET) Problem
Proposer: Peter Nightingale
Category: Network design
---

In the SONET problem we are given a set of nodes, and for each pair of nodes
we are given the *demand* (which is the number of channels required to carry network traffic 
between the two nodes). The demand may be zero, in which case the two nodes do
not need to be connected. 

A SONET *ring* connects a set of nodes. A node is installed on a ring using a piece of equipment
called an add-drop multiplexer (ADM).  Each node may be installed on more than one
ring. Network traffic can be transmitted from
one node to another only if they are both installed on the same ring. 
Each ring has an upper limit on the number of nodes, and a limit on the number
of channels. The demand of a pair of nodes may be split between multiple rings. 

The objective is to minimise the total number of ADMs used while satisfying all demands. 

The Unlimited Traffic Capacity Problem
--------

In the unlimited traffic capacity problem, the magnitude of the demands is ignored.
If a pair of nodes $n_1$ and $n_2$ has a non-zero demand, then there must exist a ring
connecting $n_1$ and $n_2$. The upper limit on the number of channels per ring 
has no significance in this simplified problem. The objective function remains
the same. 




problem 77 The name of the problem is Tail_Assignment.md
---
Title:    Tail Assignment
Proposer: Ã–zgÃ¼r AkgÃ¼n
---


(See cite{gronkvist2004constraint})

Tail Assignment is the problem of deciding which individual aircraft (identified by its tail number) should cover which flight. Each aircraft is thus assigned a route consisting of a sequence of flights, and possibly other activities such as maintenance, to perform. Tail Assignment deals with individual constraints, flights which are fixed in time, as well as individual rules for each tail. The planning period is typically one month. The purpose is to really create a solution that is possible to operate, satisfying all rules and regulations. The most basic rules are rules which only depend on two flights, so-called connection-based rules.

For example, there must be a certain minimum buffer time between a landing and the next take-off.
Another important set of constraints are the flight restriction rules, which forbid certain aircraft to operate certain flights. There can be many reasons for the restriction - there can be a curfew for the arrival airport and some aircraft, because the aircraft violates noise or environmental restrictions. But there can also be more down-to-earth reasons, like the aircraft not having the required in-flight entertainment system or extra fuel tanks required for a long flight. Either way, the result is that an aircraft is restricted from operating a flight. Finally, there are the maintenance rules. Aviation authorities require that all aircraft undergo various types of maintenance activities regularly. There are many maintenance types, depending om aircraft type, registration country, and airline. Typically, the rules specify that aircraft must undergo maintenance every X hours, or every Y landings. Airlines often also require that their aircraft return to a maintenance base frequently, even if no maintenance is done, to increase robustness in case disruptions occur. These rules typically specify that aircraft must come back to a maintenance base every Z days.

The normal representation of the Tail Assignment problem is in terms of a flight network. In the flight network, each node represents a flight, or some other activity such as a preassigned maintenance activity for specific aircraft, and each arc represents a connection between two flights or activities. For example, if operating flight f followed by flight f is allowed according to connection rules, the connection from f to f is considered legal, and the flight network will contain an arc between nodes f and f'. Since we are solving a dated problem, where flights are fixed in time, there are carry-in activities in the beginning of the period representing the last flights operated by each aircraft in the previous planning period, and the network is acyclic. The goal is now to find paths (routes) through the network for all aircraft, starting at the carry-in activities, such that all flight nodes are covered exactly once, and all rules are satisfied.


problem 78 The name of the problem is Tank_Allocation.md
---
Title:    Tank Allocation
Proposer: Pierre Schaus
Category:
    - Bin packing
    - Partitioning and related problems
---



The tank allocation problem involves the assignment of different cargoes (volumes of chemical products to be shipped by the vessel) to the available tanks of the vessel. The loading plans of bulk vessels are generally generated manually by the vessel planners although it is difficult to generate high quality solutions. The constraints to satisfy are mainly segregation constraints:

1.  Prevent chemicals from being loaded into certain types of tanks because:
    -   The chemical may need to have its temperature managed and the tank needs to be equipped with a heating system.
    -   The tank must be resistant to the chemical.
    -   A tank may still be contaminated by previous cargoes incompatible with the chemical.

2.  Prevent some pairs of cargoes to be placed next to each other: not only the chemical interactions between the different cargoes need to be considered but also the temperature at which they need to be transported. Too different temperature requirements for adjacent tanks cause the second one to solidify due to cooling off by the first cargo or the first may become chemically unstable due to heating up of the second cargo.

In order to minimise the costs and inconvenience of tank cleaning, an ideal loading plan should maximise the total volume of unused tanks (i.e. free space).


problem 79 The name of the problem is Target_Tracking_in_Distributed_Sensor_Network.md
---
Title: Target Tracking in Distributed Sensor Network
Proposer:
    - Mohamed Wahbi
Category:
    - Distributed CSP/COP
---


## Overview


*The general definition of the* **SensorDisCSP** *family is as follows:*


The target tracking in distributed sensor network problem
(SensorDisCSP) is a real distributed resource allocation problem.
This problem consists of
a set of $n$ *stationary* sensors,
$\mathcal{S} = \\{s_{1}, \ldots, s_{n}\\}$,
and a set of $m$ targets, $\mathcal{T} = \\{t_{1}, \ldots, t_{m}\\}$,
moving through their sensing range.
The objective is to track each target by sensors.
Thus, sensors have to cooperate for tracking all targets.
In order for a target to be tracked accurately, at least
three sensors must concurrently turn on overlapping sectors.
This allows the target's position to be triangulated.
However, each sensor can track at most one target.
Hence, a solution is an assignment of three distinct sensors
to each target.


A solution must satisfy the **visibility**
and the **compatibility** constraints.
The *visibility constraint* defines the set of sensors to which
a target is visible. This mainly depends on the sensing range
of each sensor and to the presence of obstacles in the sensing range.
The sensing ranges of all sensors form a *sensing graph*.
The *compatibility constraint* defines the compatibility among sensors
(sensors within the communication range of each other). There may be
obstacles or noise sources on the communication area leading to breaking
links of communication. The compatibility constraints are represented
through the *communication network*.





### Grid Model

The Grid-based SensorDisCSP (or GSensorDisCSP, for short) is a specific
variant of the general SensorDisCSP:
as before, we have multiple sensors $\mathcal{S} = \\{s_{1}, \ldots, s_{n}\\}$,
multiple objects/tagets $\mathcal{T} = \\{t_{1}, \ldots, t_{m}\\}$ which are to
be tracked by the sensors subject to visibility and compatibility
constraints, and the goal is to allocate three sensors to track each
object/target, while keeping these triplets of sensors pair-wise disjoint.
However, in GSensorDisCSP the sensors are located on the nodes of a
uniform grid of $n$ nodes, and the target objects are located within
the surface enclosed by the grid (i.e., the grid specifies the
generally trackable region).



<center>
<figure>
  <figcaption>**Fig.1:** *An example of the target tracking problem in distributed sensor networks.*</figcaption>
  <figure>
    <img src="assets/sensing.png" alt="Sensing graph" width="300">
    <figcaption>*(a): Sensing graph.*</figcaption>
  </figure>
  <figure>
    <img src="assets/communication.png" alt="Communication network" width="300">
    <figcaption>*(b): Communication network.*</figcaption>
  </figure>
  <figure>
    <img src="assets/solution.png" alt="Feasible sensors/target assignment" width="300">
    <figcaption>*(c): Feasible sensors/target assignment.*</figcaption>
  </figure>
</figure>
</center>






Fig.1 shows an example of the target tracking problem in distributed
sensor networks where $s_{i}$ represents the sensor and $t_{j}$
represents the target. In this example sensors are arranged on
the nodes of a uniform grid and it is assumed that only one target
can exist in one area. This instance consists of 2 targets:
$t_{1}$ and $t_{2}$ and 6 sensors: $s_{1}$, $\ldots$, and $s_{6}$.
Each target has a set of sensors that can possibly detect it
(the sensors in the nodes of the area where the target is located),
as depicted by the bipartite sensing graph in Fig.1(a).
For example, $t_{1}$ can be tracked by $s_{1}$, $s_{2}$, $s_{4}$, and $s_{5}$.
In addition, it is required that each target be assigned three
sensors that satisfy a compatibility relation with each other;
this compatibility relation is depicted by the communication network
in Fig.1(b). Each sensor can communicate with all sensors that are at
most 1 hop (rectilinear and/or diagonal) from it.
Finally, it is required that each sensor only track at most one target.
A possible solution is depicted in Fig.1(c), where the set of
three sensors assigned to each target is indicated by the green edges.




## Distributed CSP Formulation

In the following, three Distributed CSP based formalizations for
target tracking in sensor network problem are shown.
These are **TaV**, **STaV** and **SaV**.

### Target as Variable (TaV):

Target as Variable (TaV) is a model of formalization which defines
an agent for each target (i.e., the set of agent is exactly the
set of targets $\mathcal{A}=\mathcal{T}$).
There are three variables per agent, one for each sensor that we need
to allocate to the corresponding target. The domain of each variable
is the set of sensors that can detect the corresponding target
(the visibility constraint defines such sensors).
The inter-agent constraints between the variables of one agent
(target) specify that the three sensors assigned to the target
must be distinct.


<center>
<figure>
  <figcaption>**Fig.2:** *Target as Variable formulation of the problem in Fig.1*.</figcaption>
  <img src="assets/TaV.png" alt="Target as Variable formulation" width="600">
</figure>
</center>

In Fig. 2, the instance of target tracking in distributed sensor network
shown in Fig. 1 is formalized as a **TaV** problem. Each target is represented
by an agent, i.e., there is two agents $A_{1}$ representing $t_{1}$ and
agent $A_{2}$ representing $t_{2}$. Each agent controls 3 distinct variables
(one for each sensor to track the target).
Agent $A_{1}$ has variables $x_{1}^{1}$, $x_{1}^{2}$, and $x_{1}^{3}$,
while agent $A_{2}$ has variables $x_{2}^{1}$, $x_{2}^{2}$, and $x_{2}^{3}$.
The domain of variables of each agent is the set of sensors that can track
the target represented by the that agent.
Target $t_{1}$ can be tracked by
$s_{1}$, $s_{2}$, $s_{4}$, and $s_{5}$, thus,
$D_{1}^{1}=D_{1}^{2}=D_{1}^{3}=\\{1,2,4,5\\}$.
For agent/target $A_{2}/t_{2}$, $D_{2}^{1}=D_{2}^{2}=D_{2}^{3}=\\{2,3,5,6\\}$.
The domains are used to represent the *visibility* constraint.
There is a $\texttt{clique}$ constraint between variables of each agent:
$\texttt{clique}(3,[x_{1}^{1},x_{1}^{2},x_{1}^{3}])$ (respectively
$\texttt{clique}(3,[x_{2}^{1},x_{2}^{2},x_{2}^{3}])$) specifying that there
is a maximum clique of size 3 in the communication graph between sensors
assigned to target $t_{1}$ (respectively $t_{2}$).
$\texttt{clique}$ constraint is used for representing the
*compatibility* constraint.
An $\texttt{allDiff}$ constraint on the variables of agents having
a common sensor in there domains is used to specify that each sensor
can track at most one target:
$\texttt{allDiff}(x_{1}^{1},x_{1}^{2},x_{1}^{3},x_{2}^{1},x_{2}^{2},x_{2}^{3})$.

A solution (Fig.1(c)) to that problem is:
$x_{1}^{1}=1,x_{1}^{2}=2,x_{1}^{3}=4,x_{2}^{1}=3,x_{2}^{2}=5,x_{2}^{3}=6$.





### Sensor-Target as Variable (STaV):

Sensor-Target as Variable (**STaV**) is a model of formalization which
defines a variable for a pair of a sensor and a target. Each sensor
$s_{i}$ is modeled by an agent $A_{i}$. For each agent $A_{i}$ there
is a binary variable $x_{i}^{j}$ (i.e., $D_{i}^{j}=\\{0,1\\}$)
for each target $t_{j}$ that can be tracked by $s_{i}$.
For each sensor, there is a constraint specifying that it can not track
more than one target: $\forall s_{i}\in\mathcal{S},\sum_{j=1}^{m}{x_{i}^{j}}\leq 1$.
For each target, there is a constraint specifying that it must be tracked
by at least 3 sensors: $\forall t_{j}\in\mathcal{T},\sum_{i=1}^{n}{x_{i}^{j}}\geq 3$.


<center>
<figure>
  <figcaption>**Fig.3:** *Sensor-Target as Variable formulation of the problem in Fig.1*.</figcaption>
  <img src="assets/STaV.png" alt="Sensor-Target as Variable formulation" width="500">
</figure>
</center>


An example of a sensor network shown in Fig. 1 is formalized as a
**STaV** problem shown in Fig. 3.
In Fig. 3, $x_{i}^{j}$ represents a variable of $s_{i}$ for target $t_{j}$.
For each sensor $s_{i}$, variables are defined for targets that can
be observed by $s_{i}$.
In this example, $A_{1}$, $A_{3}$, $A_{4}$, and $A_{6}$ have one
variable each because they represent sensors that can observe
only one target ($t_{1}$ for $s_{1}$ and $s_{4}$ and
$t_{2}$ for $s_{3}$ and $s_{6}$).
$s_{2}$ and $s_{5}$ have two variables because they can observe
two targets (i.e., $t_{1}$ and $t_{2}$).
A value of $x_{i}^{j}$ represents which sensors are allocated to $t_{j}$.
We have 4 constraints in that problem where constraints
$c_{1}$ and $c_{2}$ specifying that a sensor can track at most one target
and constraints $c_{3}$ and $c_{4}$ specifying that a target must be tracked
by at least 3 sensors.

- $c_{1}: x_{2}^{1}+x_{2}^{2}\leq 1$
- $c_{2}: x_{5}^{1}+x_{5}^{2}\leq 1$
- $c_{3}: x_{1}^{1}+x_{2}^{1}+x_{4}^{1}+x_{5}^{1}\geq 3$
- $c_{4}: x_{2}^{2}+x_{3}^{2}+x_{5}^{2}+x_{6}^{2}\geq 3$

A solution (Fig.1(c)) to that problem is:
$x_{1}^{1}=1,x_{2}^{1}=1,x_{2}^{2}=0,x_{3}^{2}=1,x_{4}^{1}=1,x_{5}^{1}=0,x_{5}^{2}=1,x_{6}^{2}=1$.


### Sensors as Variable (SaV):

Sensor as Variable (**SaV**) is a model of formalization which
defines an agent $A_{i}$ for each sensor $s_{i}$.
For each agent/sensor $A_{i}$ there is one single variable $x_{i}$.
The domain of a variable $x_{i}$ is defined by the set of targets that
sensor $s_{i}$ can track. There is an $\texttt{atleast}$ constraint
on the variables $[x_{i},...,x_{k}]$ that can track each target,
i.e., $\forall t_{j}\in\mathcal{T},\texttt{atleast}(3,[x_{i},\ldots,x_{k}],j)$
such that $\forall x_{l}\in [x_{i},\ldots,x_{k}]$, $j\in D_{l}$.



<center>
<figure>
  <figcaption>**Fig.4:** *Sensor as Variable formulation of the problem in Fig.1*.</figcaption>
  <img src="assets/SaV.png" alt="Sensor as Variable formulation" width="500">
</figure>
</center>


An example of a sensor network shown in Fig. 1 is formalized as a
**SaV** problem shown in Fig. 4.
In Fig. 4, each sensor $s_{i}$ is represented by a variable $x_{i}$
controlled by agent $A_{i}$. Thus, there is 6 variales/agents
(i.e., $x_{1},\ldots,x_{6}$). The domain of each variable $x_{i}$
is the set of targets that $s_{i}$ can track. Thus,
$D_{1}=D_{4}=\\{1\\}$,
$D_{3}=D_{6}=\\{2\\}$ and
$D_{2}=D_{5}=\\{1,2\\}$.
There is 2 $\texttt{atleast}$ constraints (one for each target):
$\texttt{atleast}(3,[x_{1},x_{2},x_{4},x_{5}],1)$
and $\texttt{atleast}(3,[x_{2},x_{3},x_{5},x_{6}],2)$ specifying
that at least 3 sensors among $\\{s_{1},s_{2},s_{4},s_{5}\\}$
must track target $t_{1}$ and at least 3 sensors among
$\\{s_{2},s_{3},s_{5},s_{6}\\}$ must track target $t_{2}$.


A solution (Fig.1(c)) to that problem is:
$x_{1}=1,x_{2}=1,x_{3}=2,x_{4}=1,x_{5}=2,x_{6}=2$.


problem 80 The name of the problem is Template_Design.md
---
Title:    Template Design
Proposer: Barbara Smith 
Category: 
    - Bin packing
    - Partitioning and related problems
---


This problem arises from a colour printing firm which produces a variety of products from thin board, including cartons for human and animal food and magazine inserts. Food products, for example, are often marketed as a basic brand with several variations (typically flavours). Packaging for such variations usually has the same overall design, in particular the same size and shape, but differs in a small proportion of the text displayed and/or in colour. For instance, two variations of a cat food carton may differ only in that on one is printed 'Chicken Flavour' on a blue background whereas the other has 'Rabbit Flavour' printed on a green background. A typical order is for a variety of quantities of several design variations. Because each variation is identical in dimension, we know in advance exactly how many items can be printed on each mother sheet of board, whose dimensions are largely determined by the dimensions of the printing machinery. Each mother sheet is printed from a template, consisting of a thin aluminium sheet on which the design for several of the variations is etched. The problem is to decide, firstly, how many distinct templates to produce, and secondly, which variations, and how many copies of each, to include on each template.
The following example is based on data from an order for cartons for different varieties of dry cat-food.

Variation 	|	 Order Quantity
-------  	|   --------------
Liver	 	|	 250,000
Rabbit	 	|	 255,000
Tuna	 	|	 260,000
Chicken Twin|	 500,000
Pilchard Twin|	 500,000
Chicken		|	 800,000
Pilchard	|  1,100,000
Total	    |  3,665,000


Each design of carton is made from an identically sized and shaped piece of board. Nine cartons can be printed on each mother sheet, and several different designs can be printed at once, on the same mother sheet. (Hence, at least 407,223 sheets of card will be required to satisfy these order quantities.)
Because in this example there are more slots in each template (9) than there are variations (7), it would be possible to fulfil the order using just one template. This creates an enormous amount of waste card, however. We can reduce the amount of waste by using more templates; with three templates, the amount of waste produced is negligible. The problem is therefore to produce template plans which will minimize the amount of waste produced, for 1 template, 2 templates,... and so on.

It is permissible to work in units of say 1000 cartons, so that the order quantities become 250, 255, etc.

A variant is to allow up to 10% under-production of some designs, if this allows the overall over-production to be reduced. This is not a sensible option for the catfood problem, because it leads to under-production of all the designs.

The optimal solutions for the catfood problem are shown below. For each template, the table gives a list of the number of slots allocated to each design, e.g. [1,1,1,1,1,2,2,] means that 1 slot is allocated to each of the first five designs and two each to the last two.

No. of	templates   | Layouts	of each template	    | No. of Pressings	| Total pressings
---------- | -------------- | ----------------  |
1		   | [1,1,1,1,1,2,2]	| 550,000	| 550,000
2		   | [0,0,0,0,0,2,7]	| 158,000	|
    	   | [1,1,1,2,2,2,0]	| 260,000	| 418,000
3		   | [0,5,3,0,0,1,0]	| 51,000	|
    	   | [0,0,1,0,0,7,1]	| 107,000	|
    	   | [1,0,0,2,2,0,4]	| 250,000	| 408,000

problem 81 The name of the problem is Test_Scheduling_Problem.md
---
Title:    Test Scheduling Problem
Proposer: Morten Mossige
Category: Scheduling and related problems
---
The problem was presented as the Industrial Modelling Challenge at CP2015.

The problem arises in the context of a testing facility. A number of tests have to be performed in minimal time. Each test has a given duration and needs to run on one machine. While the test is running on a machine, no other test can use that machine. Some tests can only be assigned to a subset of the machines, for others you can use any available machine.  For some tests, additional, possibly more than one, global resources are needed. While those resources are used for a test, no other test can use the resource. The objective is to finish the set of all tests as quickly as possible, i.e. all start times should be non-negative, and makespan should be minimized. The makespan is the difference between the start of the earliest test, and the end of the latest finishing test. The objective of the original industrial problem is to minimize the time required to find a schedule plus the time required to run that schedule, i.e. to minimize the time between the release of the dataset and the conclusion of all tests required. As this objective depends on the speed of the machine(s) on which the schedule is generated, it is hard to compare results in an objective fashion. 

An example solution is shown below:

![example problem data and solution](assets/schedule.png)

The description of the Industrial Modelling Challenge is given [here](assets/description.pdf). The document describes the initial data format which is given in Prolog syntax.



problem 82 The name of the problem is The_Covering_Array_Problem.md
---
Title:    The Covering Array Problem
Proposer: Evgeny Selensky
Category: Combinatorial mathematics
---


The covering array problem is formulated as follows.

A covering array $CA(t,k,g)$ of size $b$ and strength $t$, is a $k x b$ array $A = (a_{ij})$ over $Z_g = {0,1,2,...,g-1}$ with the property that for any t distinct rows $1 <= r_1 <= r_2 <= ... <= r_t <= k$, and any member $(x_1, x_2, ..., x_t)$ of $Z^{t_g}$ there exists at least one column $c$ such that $x_i$ equals the $(r_i,c)-th$ element of $A$ for all $1 <= i <= t$.

A covering array number $CAN(t,k,g)$ is the smallest b such that there exists a $CA(t,k,g)$ of size $b$.

Informally, any t distinct rows of the covering array must encode column-wise all numbers from $0$ to $g^{t-1}$ (repititions are allowed).

An example of covering array $CA(3,5,2)$ over the Boolean alphabet ${0,1}$ is:

    0	0	0	0	0	1	1	1	1	1
    0	0	0	1	1	0	0	1	1	1
    0	0	1	0	1	0	1	0	1	1
    0	1	0	0	1	0	1	1	0	1
    0	1	1	1	0	1	0	0	0	1
    
In this array, any $t = 3$ rows encode all numbers from $0$ (when the respective elements are ${0,0,0}$) to $2^3 - 1 = 7$ (when the elements are ${1,1,1}$). E.g., the three top rows encode the following numbers (from left to right): $0,0,1,2,3,4,5,6,7,7$; the three bottom rows encode numbers: $0,3,5,1,6,1,6,2,4,7$.

It has been proved in [3] that $CAN(3,5,2) = 10$ and therefore the presented array is an optimal solution to $CA(3,5,2)$.

The problem comes from hardware and software testing.

problem 83 The name of the problem is The_n-Fractions_Puzzle.md
---
Title:    The n-Fractions Puzzle
Proposer: 
    - Alan Frisch
    - Christopher Jefferson
    - Ian Miguel
    - Toby Walsh
Category: 
    - Combinatorial mathematics
    - Games and puzzles
---



# Original Specification

The original fractions puzzle is specified as follows. Find 9 distinct non-zero digits that satisfy:

```
A    D    G
-- + -- + -- == 1
BC   EF   HI
```

where `BC` is shorthand for `10B+C`, `EF` for `10E+F` and `HI` for `10H+I`.


# n-Fractions

A simple generalisation is as follows. Find 3n non-zero digits satisfying: $ 1 = \sum_{i \in 1..n} x_i / y_iz_i $

where $y_iz_i$ is shorthand for $10y_i+z_i$ and the number of occurrences of each digit in $1..9$ is between $1$ and $ceil(n/3)$.

Since each fraction is at least $1/99$, this family of problems has solutions for at most $n <= 99$.
An interesting problem would be to find the greatest $n$ such that at least one solution exists.
A further generalisation might specify that the fractions sum to $ceil(n/3)$.



problem 84 The name of the problem is The_Rehearsal_Problem.md
---
Title:    The Rehearsal Problem
Proposer: Barbara Smith
Category: Scheduling and related problems
---

<H3>The Rehearsal Scheduling Problem</H3>

This problem originated at Lancaster University in the 1970s. It is reported to have been devised by a member of staff in the Management Science department, who was a member of an amateur orchestra and formalized the problem whilst waiting to play during a rehearsal.

A concert is to consist of nine pieces of music of different durations each involving a different combination of the five members of the orchestra.

Players can arrive at rehearsals immediately before the first piece in which they are involved and depart immediately after the last piece in which they are involved. The problem is to devise an order in which the pieces can be rehearsed  so as to minimize the total time that players are waiting to play, i.e. the total time when players are present but not currently playing.

In the table below, 1 indicates that the player is required for the corresponding  piece, 0 otherwise. The duration (i.e. time required to rehearse each piece) is in some unspecified time units.


<TABLE>
   <TR><TD>Piece </TD><TD>   1 </TD><TD>  2</TD><TD>   3 </TD><TD>  4 </TD><TD>  5</TD><TD>   6 </TD><TD>  7</TD><TD>   8</TD><TD>   9 </TR>
   <TR><TD>Player 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   1</TD><TD>   0</TD><TD>   1 </TR>
   <TR><TD>Player 2</TD><TD>  1</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   1</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   0 </TR>
   <TR><TD>Player 3</TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TR>
   <TR><TD>Player 4 </TD><TD> 1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TR>
   <TR><TD>Player 5</TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TR>
<TR><TD>Duration </TD><TD> 2 </TD><TD>  4 </TD><TD>  1 </TD><TD>  3 </TD><TD>  3 </TD><TD>  2 </TD><TD>  5 </TD><TD>  7 </TD><TD>  6 </TR>
</TABLE>


For example, if the nine  pieces were rehearsed in numerical order as given above, then the total waiting time would be:

Player 1: 1+3+7=11

Player 2: 1+5=6

Player 3: 1+3+3+2=9

Player 4: 4+1+3+5+7=20

Player 5: 3

giving a total of 49 units.  The optimal sequence gives 17 units waiting time.

<H3>The Talent Scheduling Problem</H3>

A very similar problem occurs in devising a schedule for shooting a film. Different days of shooting require different subsets of the cast, and cast members are paid for days they spend on set waiting. The only difference between <EM>talent scheduling problem</EM> and the rehearsal problem is that different cast members are paid at different rates, so that the cost of waiting time depends on who is waiting. The objective is to minimize the total cost of paying cast members to wait.

The first problem, <I>Film1</I>,  is based on  one given by Cheng, Diamond and Lin (see <A href="references/">references</A>).

<TABLE>
 <TR><TD>  Day   </TD><TD>  1 </TD><TD > 2 </TD><TD >  3 </TD><TD >  4 </TD><TD >  5 </TD><TD >  6 </TD><TD >  7 </TD><TD >  8 </TD><TD >  9 </TD><TD >  10 </TD><TD >  11
</TD><TD >  12 </TD><TD >  13 </TD><TD >  14 </TD><TD >  15 </TD><TD >  16 </TD><TD >  17 </TD><TD >  18 </TD><TD >  19 </TD><TD >  20 </TD><TD >  Cost/100  </TD></TR>
<TR><TD>Actor 1   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0
 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  10</TD></TR>
<TR><TD>Actor 2   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   1</TD><TD>  4</TD></TR>
<TR><TD>Actor 3   </TD><TD> 0 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  5</TD></TR>
<TR><TD>Actor 4   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1
 </TD><TD>  1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  5</TD></TR>
<TR><TD>Actor 5   </TD><TD> 0 </TD><TD> 1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1
 </TD><TD>  0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1</TD><TD>  5</TD></TR>
<TR><TD>Actor 6   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0</TD><TD>  40 </TD></TR>
<TR><TD>Actor 7   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD> 4 </TD></TR>
<TR><TD>Actor 8   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  20</TD></TR>
<TR><TD>Duration   </TD><TD> 2 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  3 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1
 </TD><TD>  2 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1</TD></TR>
</TABLE>


The problem below, <I>Film2</I>, is also based on real film data (although the costs are purely fictitious).  It is easier to solve than <I>Film1</I>.


<TABLE>
<TR><TD>Day     </TD><TD>   1 </TD><TD>  2 </TD><TD>  3 </TD><TD>  4 </TD><TD>  5 </TD><TD>  6 </TD><TD>  7 </TD><TD>  8 </TD><TD>  9 </TD><TD>  10 </TD><TD>  11 </TD><TD> 12 </TD><TD>  13</TD><TD >  Cost/100  </TD></TR>
<TR><TD>Actor 1 </TD><TD>  0 </TD><TD>  0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 40 </TD></TR>
<TR><TD>Actor 2 </TD><TD>  1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 20 </TD></TR>
<TR><TD>Actor 3  </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 20  </TD></TR>
<TR><TD>Actor 4  </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1</TD><TD> 10 </TD></TR>
<TR><TD>Actor 5  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 6  </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 10 </TD></TR>
<TR><TD>Actor 7  </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 8  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0  </TD><TD> 4 </TD></TR>
<TR><TD>Actor 9  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 10 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  4 </TD></TR>
<TR><TD>Duration   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  3 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD> 1</TD></TR>
</TABLE>



problem 85 The name of the problem is Traffic_Lights.md
---
Title:    Traffic Lights
Proposer: 
    - Toby Walsh
    - Walter Hower 
Category:
---


Consider a four way traffic junction with eight traffic lights. Four of the traffic lights are for the vehicles and can be represented by the variables V1 to V4 with domains {r,ry,g,y} (for red, red-yellow, green and yellow). The other four traffic lights are for the pedestrians and can be represented by the variables P1 to P4 with domains {r,g}.
The constraints on these variables can be modelled by quaternary constraints on (Vi, Pi, Vj, Pj ) for $1\leq i\leq 4, j=(1+i)\ mod\ 4$ which allow just the tuples {(r,r,g,g), (ry,r,y,r), (g,g,r,r), (y,r,ry,r)}.

We are interested in the set of all globally consistent 8-tuples (which reflects the evolution of the traffic light sequence).


problem 86 The name of the problem is Train_Traffic_Rescheduling.md
---
Title: Train Traffic Rescheduling
Proposer:
- Quentin Cappart
- Pierre Schaus
Category: Scheduling and related problems
---

In the railway domain, the action of directing the traffic in accordance with an established timetable is managed by a software. 
However, in case of real time perturbations, the initial schedule may become infeasible or suboptimal. Subsequent decisions must then be taken manually by an operator in a very limited time in order to reschedule the traffic and reduce the consequence of the disturbances. They can for instance modify the departure time of a train or redirect it to another route. Unfortunately, this kind of hazardous decisions can have an unpredicted negative snowball effect on the delay of subsequent trains.

Basically, the goal is to schedule adequately trains in order to bring them to their destination. The decision is to chose, for each train, which route it will follow and at what time. Detailled explanation of this problem are presented in <A HREF="data/rescheduling.pdf">[cappart2017rescheduling]</A>. 



problem 87 The name of the problem is Transshipment_problem.md
---
Title:    Transshipment problem
Proposer: Ã–zgÃ¼r AkgÃ¼n
Category:
- Design and configuration
- Logistics
---

This is the simple version of the transshipment problem. It is a network flow problem with three kinds of nodes: warehouses, transshipment points and customers. Warehouses act like source nodes and customers act like sink nodes. Products are to be transferred from warehouses to customers via transshipment points. In more complex real-life applications of this problem transshipment points provide a possibility for extra handling (packaging, splitting, consolidating) and/or change of transportation mode. See the [Wikipedia article](https://en.wikipedia.org/wiki/Transshipment_problem) for some variations.

Problem parameters:

- Demand per customer (unit: number of products)
- Stock per warehouse (unit: number of products)
- Cost of moving one unit of product between a warehouse and a transshipment point
- Cost of moving one unit of product between a transshipment point and a customer

Potential extensions:

- Multiple products types
- Lower/upper bounds on edge capacities

The problem can be used as a benchmark as either an optimisation problem (minimising total cost) or as a satisfaction problem (with a given upper bound for total cost).

See {prob034} for a related problem.


problem 88 The name of the problem is Traveling_Tournament_Problem_with_Predefined_Venues__TTPPV_.md
---
Title:    Traveling Tournament Problem with Predefined Venues (TTPPV)
Proposer: Gilles Pesant
Category: Scheduling and related problems
---

The TTPPV was introduced by [MeloUR09] and consists of finding an optimal compact single round robin schedule for a sport event. Given a set of $n$ teams, each team has to play against every other team exactly once. In each round, a team plays either at home or away, however no team can play more than three consecutive times at home or away. The sum of the traveling distance of each team has to be minimized. The particularity of this problem resides on the venue of each game that is predefined, i.e. if team $a$ plays against $b$ it is already known whether the game is going to be held at $a$'s home or at $b$'s home. A TTPPV instance is said to be balanced if the number of home games and the number of away games differ by at most one for each team; otherwise it is referred to as non-balanced or random. Non-balanced instances may be infeasible.

The original instances assume symmetric *circular* distances:
for $i \geq j$, $d_{ij} = d_{ji} = \min ( i-j, j-i+n )$.

For example here is a solution for some 8-team instance with circular distances, each row describing the schedule for an individual team and giving its travel distance: 
```
  1    7   @4   @5   @6    2   @3    team travel distance: 14
 @0    5    7   @6   @4    3   @2    team travel distance: 12
 @3    4    6    7   @5   @0    1    team travel distance: 10
  2    6    5   @4   @7   @1    0    team travel distance: 8
  6   @2    0    3    1   @7   @5    team travel distance: 10
 @7   @1   @3    0    2   @6    4    team travel distance: 10
 @4   @3   @2    1    0    5   @7    team travel distance: 10
  5   @0   @1   @2    3    4    6    team travel distance: 6
total cost: 80
```
The "@" prefix means that the team is playing away, e.g. team 0 is playing away against team 4 in the third round.


problem 89 The name of the problem is Vellino_s_Problem.md
---
Title:    Vellino's Problem
Proposer: Ã–zgÃ¼r AkgÃ¼n
---

(See cite{van1999constraint})

Given a supply of components and bins of various types, Vellino's problem consists of assigning the components to the bins so that the bin constraints are satisfied and the smallest possible number of bins is used. There are five types of components, i.e., glass, plastic, steel, wood, and copper, and three types of bins, i.e., red, blue, green. The bins must obey a variety of configuration constraints. Containment constraints specify which components can go into which bins: red bins cannot contain plastic of steel, blue bins cannot contain wood or plastic, and green bins cannot contain steel or glass. Other constraints specify a limit for certain component types for some bins: red bins contain at most one wooden component and green bins contain at most two wooden components.
Requirement constraints specify some compatibility constraints between the components: wood requires plastic, glass excludes copper and copper excludes plastic. In addition, we are given an initial capacity for each bin, i.e., red bins have a capacity of 3 components, blue bins of 1 and green bins of 4 and a demand for each component, i.e., 1 glass, 2 plastic, 1 steel, 3 wood, and 2 copper components.
Finally, demands of the components must be met and the bin capacities should not be exceeded.


problem 90 The name of the problem is Vessel_Loading.md
---
Title:    Vessel Loading
Proposer: Ken Brown
Category: Design and configuration
---



Supply vessels transport containers from site to site. The deck area is rectangular. Containers are cuboid, and are laid out in a single layer. All containers are positioned parallel to the sides of the deck. The contents of the containers determine their class. Certain classes of containers are constrained to be separated by minimum distances either along the deck or across the deck. `

The vessel loading decision problem is to determine whether a given set of containers can be positioned on a given deck, without overlapping, and without violating any of the separation constraints. The problem can be modelled as packing of a set of rectangles into a larger rectangle, subject to constraints.

In practice, the layout may be further constrained by the physical loading sequence. Containers are manoeuvred into position from the south east corner. Each successive container in the loading sequence must be positioned so that it touches part of another container or a deck wall both to the north and to the west.


problem 91 The name of the problem is Warehouse_Location_Problem.md
---
Title:    Warehouse Location Problem
Proposer: Brahim Hnich
Category:
- Design and configuration
- Logistics
---

In the <i>Warehouse Location</i> problem (WLP), a company considers opening warehouses at some candidate locations in order to supply its existing stores.
Each possible warehouse has the same maintenance cost, and a capacity designating the maximum number of stores that it can supply.
Each store must be supplied by exactly one open warehouse.

The supply cost to a store depends on the warehouse.
The objective is to determine which warehouses to open, and which of these warehouses should supply the various stores, such that the sum of the maintenance and supply costs is minimized.

As an example (from the OPL book), consider the following data:

```
fixed = 30;
Warehouses = { Bonn, Bordeaux, London, Paris, Rome };
nbStores = 10; //labeled from 0 to 9
capacity = [1,4,2,1,3]; // capacity is indexed by Warehouses

// supplyCost in indexed by Stores(0..9) and the set of Warehouses

supplyCost = [ [ 20, 24, 11, 25, 30 ]
             , [ 28, 27, 82, 83, 74 ]
             , [ 74, 97, 71, 96, 70 ]
             , [ 2, 55, 73, 69, 61 ]
             , [ 46, 96, 59, 83, 4 ]
             , [ 42, 22, 29, 67, 59 ]
             , [ 1, 5, 73, 59, 56 ]
             , [ 10, 73, 13, 43, 96 ]
             , [ 93, 35, 63, 85, 46 ]
             , [ 47, 65, 55, 71, 95 ]
             ];

```

Then, an optimal solution has value `383`, where:

Stores of Bonn = `{3}`

Stores of Bordeaux = `{8,6,5,1}`

Stores of London = `{9,7}`

Stores of Paris = `{}`

Stores of Rome = `{4,2,0}`


See {prob083} for a related problem.


problem 92 The name of the problem is Water_Bucket_Problem.md
---
Title:    Water Bucket Problem 
Proposer: Toby Walsh
Category: 
    - Bin packing
    - Partitioning and related problems
---


Given the promise of SAT and CSP techniques for solving "classical" planning problems, I decided to propose this puzzle.

You are given an 8 pint bucket of water, and two empty buckets which can contain 5 and 3 pints respectively. You are required to divide the water into two by pouring water between buckets (that is, to end up with 4 pints in the 8 pint bucket, and 4 pints in the 5 pint bucket).

What is the minimum number of transfers of water between buckets? The challenge is to solve this as a planning problem (encoded into satisfiability or constraint satisfaction) with an efficiency approaching (or exceeding) a simple [enumeration](models/enumerate.pl).


problem 93 The name of the problem is Winner_Determination_Problem__Combinatorial_Auction_.md
---
Title:    Winner Determination Problem (Combinatorial Auction)
Proposer: Patrick Prosser
Category: Design and configuration
---

There is a bunch of people bidding for things. A bid has a value, and the bid is for a set of items. 
If we have two bids, call them A and B, and there is an intersection on the items they bid for, then we can
accept bid A or bid B, but we cannot accept both of them. However, if A and B are bids on disjoint sets 
of items then these two bids are compatible with each other, and we might accept both. The problem then is 
to accept compatible bids such that 
we maximise the sum of the values of those bids (i.e. make most money).

There's a nice [wiki on this problem](https://en.wikipedia.org/wiki/Combinatorial_auction)
and there is a set of problem instances in the Data files section.



problem 94 The name of the problem is Wordpress_application_deployment_in_the_Cloud.md
---
Title:    Wordpress application deployment in the Cloud
Proposer: David Bogdan-Nicolae
Category: Bin Packing
---


Wordpress (https://wordpress.com) is an open-source application frequently used in creating websites, blogs and web applications. A high-load and fault tolerant Wordpress deployment scenario is described as follows. The two characteristics are ensured by load balancing. One possibility to balance the load is at the DNS level using servers like Bind. Alternatively, one can use as website entry point an HTTP reverse proxy capable of load balancing such as Varnish. In both cases, Wordpress instances need to be configured to connect to the same database. Furthermore, having redundancy and balancing at the front-end level, one would expect to have them also at the Database Management System (DBMS) level. One way to achieve that is to use a MySQL cluster and configure Wordpress instances with multiple entry points to it. In this deployment scenario, the following constraints must be fulfilled:
- DNSLoadBalancer requires at least 1 instance of Wordpress and can serve at most 7 such instances (*Require-Provide* constraint).
- HTTPLoadBalancer requires at least 1 instance of Wordpress and can serve at most 3 such instances (*Require-Provide* constraint).
- Wordpress requires at least 3 instances of MySQL and MySQL can server at most 2 Wordpress instances (*Require-Provide* constraint).
- Only one type of balancer must be deployed (*Exclusive deployment* constraint).
- As Varnish exhibits load balancing features, it should not be deployed on the same virtual machine as any other balancer (*Conflict* constraint).
- Varnish and MySQL should not be deployed on the same virtual machine (*Conflict* constraint).
- At least 2 instances of Varnish must be deployed (*Deployment with bounded number of instances* constraint, in particular *lower bound*).
- There must be at least 2 entry points to the MySQL cluster (*Deployment with bounded number of instance* constraint, in particular *lower bound*).
- No more than 1 DNSLoadBalancer can be deployed (*Deployment with bounded number of instances* constraint, in particular *upper bound*).
- Balancer components must be deployed on a single virtual machine (*Conflict* constraint).

In the picture below the constraints specified above are depicted. Additionally, for each component, the minimum hardware requirements are specified.

<p align="center">
<img src="assets/Wordpress.png" alt="assets/Wordpress.png" width="500"/>
</p>
  
We want to deploy the Wordpress application in the Cloud at a minimum price. There are various Cloud Providers (e.g. Amazon WS, Microsoft Azure, Google Cloud) which offer virtual machines (VMs) with various hardware/software characteristics at different price (depending on the geographical region). 

The problem can be formalized as follows. We consider a set of *N* interacting components, *C = {C<sub>1</sub>,...,C<sub>N</sub>}*, to be assigned to a set of *M* virtual machines, *V=\{V<sub>1</sub>, ..., V<sub>M</sub>}*. Each component *C<sub>i</sub>* is characterized by a set of requirements concerning the hardware resources. Each virtual machine, *V<sub>K</sub>*, is characterized by a *type*, which is comprised by hardware/software characteristics and leasing price. There are also *structural constraints* describing the interactions between components (e.g. Conflict, Exclusive deployment). 

The problem is to find (output):
- an assignment of components to VMs, and 
- the type of acquired VMs

such that:
- the structural constraints and
- the hardware requirements  (capacity constraints) of all components are satisfied and 
- the purchasing/ leasing price is minimized. 

For example, when 3 Wordpress instances are deployed (the problem corresponds
to 5 components as in the figure above), a prior estimation of the number of VMs is equal to 8. The output consists of the Assignment Matrix and the VM types. 

The Assignment Matrix is:

<pre>
                  V<sub>1</sub> V<sub>2</sub> V<sub>3</sub> V<sub>4</sub>  V<sub>5</sub> V<sub>6</sub> V<sub>7</sub> V<sub>8</sub>
WordPress         0  0  1  0  0  1  0  1
MySQL             0  1  0  1  0  0  0  0
DNS_LoadBalancer  0  0  0  0  0  0  0  0
HTTP_LoadBalancer 0  0  0  0  0  0  1  0
Varnish           1  0  0  0  1  0  0  0
</pre>

and the VM types are:

<pre>
V<sub>1</sub>   V<sub>2</sub>  V<sub>3</sub>  V<sub>4</sub>   V<sub>5</sub>  V<sub>6</sub>  V<sub>7</sub>  V<sub>8</sub>
15  17  17  17  15  17  15  17
</pre>


problem 95 The name of the problem is Word_Design_for_DNA_Computing_on_Surfaces.md
---
Title:    Word Design for DNA Computing on Surfaces
Proposer: Marc van Dongen
Category: 
    - Bioinformatics
    - Combinatorial mathematics
---


This problem has its roots in Bioinformatics and Coding Theory.

Problem: find as large a set *S* of strings (words) of length *8* over the alphabet *W = { A,C,G,T }* with the following properties:

- Each word in *S* has *4* symbols from *{ C,G }*;
- Each pair of distinct words in *S* differ in at least *4* positions; and
- Each pair of words *x* and *y* in *S* (where *x* and *y* may be identical) are such that <IT>x<SUP>R</SUP></IT> and <IT>y<SUP>C</SUP></IT>
          differ in at least <IT>4</IT> positions.
         Here,
          <IT>( x<SUB>1</SUB>,&#8230;,x<SUB>8</SUB> )<SUP>R</SUP>
              =
              ( x<SUB>8</SUB>,&#8230;,x<SUB>1</SUB> )</IT>
          is the reverse of <IT>( x<SUB>1</SUB>,&#8230;,x<SUB>8</SUB> )</IT> and
          <IT>( y<SUB>1</SUB>,&#8230;,y<SUB>8</SUB> )<SUP>C</SUP></IT>
          is the Watson-Crick complement of <IT>( y<SUB>1</SUB>,&#8230;,y<SUB>8</SUB> )</IT>, i.e.
          the word where
            each <IT>A</IT> is replaced by a <IT>T</IT> and vice versa and
            each <IT>C</IT> is replaced by a <IT>G</IT> and vice versa.


problem 96 The name of the problem is _Molnar_s_Problem_.md
---
Title:    "Molnar's Problem"
Proposer: 
    - Alan Frisch
    - Chris Jefferson
    - Ian Miguel
Category: Combinatorial mathematics
---

Molnar originally posed the following problem to construct a $k \times
k$ matrix

$$\begin{pmatrix} 
a_{11}  & \ldots & a_{1k}\\\\\\\\
\vdots & \ldots & \vdots\\\\\\\
a_{k1}  & \ldots & a_{kk} 
\end{pmatrix}$$

such that:

$$\det \begin{pmatrix} 
a_{11}  & \ldots & a_{1k}\\\\\\\\
\vdots & \ldots & \vdots\\\\\\\\
a_{k1}  & \ldots & a_{kk} 
\end{pmatrix} 
 = 1, \ 
\det \begin{pmatrix} 
a_{11}^2  & \ldots & a_{1k}^2 \\\\\\\\
\vdots & \ldots & \vdots  \\\\\\\\
a_{k1}^2  & \ldots & a_{kk}^2 
\end{pmatrix} 
 = \pm 1$$


where the $a_{ii}$ are integers not equal to plus or minus 1, and
$\det$ denotes the <A
HREF="http://mathworld.wolfram.com/Determinant.html">determinant</A>
of a matrix. The solutions to this problem are significant in
classifying certain types of topological spaces. Guy discusses a
variant where 0 entries are also disallowed and the sign of both
determinants must be positive.

